Table of Contents

    1 Introduction
    2 Documentation
    3 Dependencies
        3.1 Development dependencies
        3.2 Runtime dependencies
    4 Building
        4.1 Convenience classes
    5 Examples
        5.1 Queries
        5.2 Email
        5.3 Contacts
    6 Tools
        6.1 Tracker Browser    
        6.2 Tracker Ontology Importer
    

1 Introduction

  LibQtTracker is a Qt convenience library for accessing tracker

2 Documentation

  Documentation is generated with "qmake && make doc" and is accessed through
  docs/reference/index.html
  
3 Dependencies
 
3.1 Development dependencies

  * Qt >= 4.6
  * Python >= 2.5 (for convenience class generation)

3.2 Runtime dependencies

  * Qt >= 4.6
  * Tracker >= 0.7
  
4 Building

  To compile and install libqttracker, see the INSTALL file.

  After which: 
  Development headers will be accessible through <QtTracker/QTracker>
  Documentation can be read at /usr/share/doc/libqttracker0/doc/
  tracker-browser utility is in path
  
4.1 Convenience classes
  
  Convenience classes should build and work out-of-the-box when libqttracker 
  is built and is paired with correct version of tracker. 
  If the tracker ontologies have changed, use following to update the 
  autogenerated convenience class headers.
  In libqttracker package root:
  
  make import_ontologies autogenerate
  
  and install libqttracker again.

5 Examples
	
  All examples require convenience library to have been installed before compilation.
  qmake, make, and run the example itself.

5.1 Queries

  Presents an interface for invoking predefined queries using simple query 
  building functions, as well as writing new SPARQL queries and running 
  them against tracker.

5.2 Email

  Illustrates the convenience library broadly, but doesn't 
  go into too much detail. On the left is a query area showing all email iri's.
  In the middle is a single email item management area, and on the right the
  public email fields are shown. Refresh query area by refresh button, select
  a single email by double-clicking an entry or typing the iri to the area and 
  pressing load button. Edit fields, maybe alter the email iri and save the 
  message back to tracker with save button.
  
5.3 Contacts

  Very rough example for listing all contacts, viewing contact name and 
  birth date, and editing and saving said fields.

6 Tools

6.1. Tracker Browser

  Tracker Browser is a tracker browsing and querying tool. It is deplyoed with
  make install and can be run directly with
  
  tracker-browser [-v verbositylevel] 
  
  Select a prebuilt query and see the generated SPARQL queried against tracker,
  or write your own query. See a tree view of the results and browse through 
  the tree. Filter results with a full text search filter (currently only 
  works with the prebuilt queries).

6.2. Tracker Ontology Importer

  This source-distribution-only tool is used to import the most current
  tracker ontology information into a set of rdf-xml files. In order to 
  execute the tool, you must have libqttracker already installed.
  After that, on libqttracker source root directory, run
  
  make import_ontologies

  Which will import the rdf xml files into data/rdf-xml/QtTracker/ontologies/
  After this, convenience class headers can be generated from those with

  make autogenerate

  After which the source tree must be recompiled and reinstalled with 

  make && make install
  
  The whole cycle in a system with tracker installed but no libqttracker, 
  from a fresh source checkout directory:
  
  qmake 
  make
  sudo make install
  make import_ontologies autogenerate
  make
  sudo make install

  
