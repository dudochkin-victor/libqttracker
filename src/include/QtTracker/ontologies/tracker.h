/*
 * tracker.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:26.871424
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/tracker.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_TRACKER_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_TRACKER_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_tracker_classes namespace tracker class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_tracker_properties namespace tracker property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_tracker_resources namespace tracker resource definitions
		 *  @{
		 *  @}
		 */
		static const char tracker_namespace_prefix[] = "http://www.tracker-project.org/ontologies/tracker#";
		struct Ontology_tracker
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(tracker_namespace_prefix) + suffix;
			}
		};
		namespace tracker
		{
			inline QUrl iri(QString suffix) { return Ontology_tracker::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class Namespace;
			class Ontology_;
			class Volume;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_TRACKER_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_TRACKER_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_TRACKER_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/xsd.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace tracker
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from tracker:prefix
			 * \anchor tracker_prefix
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1532
			 * \n rdfs:domain=tracker:Namespace
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class prefix
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#prefix"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Namespace Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Namespace RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from tracker:isMounted
			 * \anchor tracker_isMounted
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1562
			 * \n rdfs:domain=tracker:Volume
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class isMounted
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#isMounted"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Volume Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Volume RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from tracker:unmountDate
			 * \anchor tracker_unmountDate
			 * \n rdfs:range=xsd:dateTime
			 * \n tracker:modified=1864
			 * \n rdfs:domain=tracker:Volume
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class unmountDate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#unmountDate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Volume Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Volume RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from tracker:mountPoint
			 * \anchor tracker_mountPoint
			 * \n rdfs:range=rdfs:Resource
			 * \n tracker:modified=1016
			 * \n rdfs:domain=tracker:Volume
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class mountPoint
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#mountPoint"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Volume Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Volume RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from tracker:isRemovable
			 * \anchor tracker_isRemovable
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1417
			 * \n rdfs:domain=tracker:Volume
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class isRemovable
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#isRemovable"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Volume Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Volume RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from tracker:isOptical
			 * \anchor tracker_isOptical
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1976
			 * \n rdfs:domain=tracker:Volume
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class isOptical
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#isOptical"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Volume Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Volume RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from tracker:added
			 * \anchor tracker_added
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n tracker:isAnnotation=true
			 * \n rdfs:domain=rdfs:Resource
			 * \n tracker:indexed=true
			 * \n tracker:modified=1733
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_tracker_properties
			class added
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#added"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdfs::Resource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdfs::Resource RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from tracker:available
			 * \anchor tracker_available
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1183
			 * \n rdfs:domain=nie:DataObject
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class available
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#available"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef nie::DataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nie::DataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from tracker:defaultValue
			 * \anchor tracker_defaultValue
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1880
			 * \n rdfs:domain=rdf:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class defaultValue
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#defaultValue"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdf::Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdf::Property RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from tracker:domainIndex
			 * \anchor tracker_domainIndex
			 * \n rdfs:range=rdf:Property
			 * \n tracker:modified=1602
			 * \n rdfs:domain=rdfs:Class
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_tracker_properties
			class domainIndex
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#domainIndex"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef rdfs::Class Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdfs::Class RDFDomain;
				/// The localized c++ range type of this property
				typedef rdf::Property Range;
				/// The full, non-localized rdf range type of this property
				typedef rdf::Property RDFRange;
			};
			/*! Property generated from tracker:fulltextIndexed
			 * \anchor tracker_fulltextIndexed
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1832
			 * \n rdfs:domain=rdf:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class fulltextIndexed
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#fulltextIndexed"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdf::Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdf::Property RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from tracker:fulltextNoLimit
			 * \anchor tracker_fulltextNoLimit
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1917
			 * \n rdfs:domain=rdf:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class fulltextNoLimit
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#fulltextNoLimit"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdf::Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdf::Property RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from tracker:indexed
			 * \anchor tracker_indexed
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1615
			 * \n rdfs:domain=rdf:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class indexed
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#indexed"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdf::Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdf::Property RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from tracker:isAnnotation
			 * \anchor tracker_isAnnotation
			 * \n The property is never embedded on physical files
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1098
			 * \n rdfs:domain=rdf:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class isAnnotation
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#isAnnotation"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdf::Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdf::Property RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from tracker:isDefaultTag
			 * \anchor tracker_isDefaultTag
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1853
			 * \n rdfs:domain=nao:Tag
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_tracker_properties
			class isDefaultTag
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#isDefaultTag"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef nao::Tag Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nao::Tag RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from tracker:modified
			 * \anchor tracker_modified
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n tracker:isAnnotation=true
			 * \n rdfs:domain=rdfs:Resource
			 * \n tracker:modified=1980
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_tracker_properties
			class modified
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#modified"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdfs::Resource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdfs::Resource RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from tracker:notify
			 * \anchor tracker_notify
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1714
			 * \n rdfs:domain=rdfs:Class
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class notify
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#notify"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdfs::Class Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdfs::Class RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from tracker:secondaryIndex
			 * \anchor tracker_secondaryIndex
			 * \n rdfs:range=rdf:Property
			 * \n tracker:modified=1852
			 * \n rdfs:domain=rdf:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class secondaryIndex
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#secondaryIndex"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef rdf::Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdf::Property RDFDomain;
				/// The localized c++ range type of this property
				typedef rdf::Property Range;
				/// The full, non-localized rdf range type of this property
				typedef rdf::Property RDFRange;
			};
			/*! Property generated from tracker:tagRelatedTo
			 * \anchor tracker_tagRelatedTo
			 * \n rdfs:range=rdfs:Class
			 * \n tracker:modified=1225
			 * \n rdfs:domain=nao:Tag
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_tracker_properties
			class tagRelatedTo
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#tagRelatedTo"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef nao::Tag Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nao::Tag RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Class Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Class RDFRange;
			};
			/*! Property generated from tracker:transient
			 * \anchor tracker_transient
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1791
			 * \n rdfs:domain=rdf:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class transient
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#transient"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdf::Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdf::Property RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from tracker:weight
			 * \anchor tracker_weight
			 * \n rdfs:range=xsd:integer
			 * \n tracker:modified=1820
			 * \n rdfs:domain=rdf:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class weight
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#weight"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdf::Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdf::Property RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from tracker:writeback
			 * \anchor tracker_writeback
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1111
			 * \n rdfs:domain=rdf:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_tracker_properties
			class writeback
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#writeback"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_tracker Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdf::Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdf::Property RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_TRACKER_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_TRACKER_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_TRACKER_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdfs.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace tracker
		{

			using namespace rdfs;
			using namespace nao;
			using namespace nie;
			using namespace rdf;
			using namespace xsd;

			/*! Class generated from tracker:Namespace
			 * \ingroup onto_tracker_classes
			 * 
			 * rdfs:label = Namespace
			 * 
			 * tracker:modified = 1421
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Namespace
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#Namespace"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_tracker Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Namespace> Live;
				Namespace() { this->attachInterfaceHelper< Namespace >(); }
				~Namespace() { this->detachInterfaceHelper< Namespace >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from tracker:prefix
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1532
				 * \n rdfs:domain=tracker:Namespace
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes livePrefixs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_prefix "tracker:prefix" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePrefixs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::prefix >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPrefixs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_prefix "tracker:prefix" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPrefixs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::prefix >(object_info, strategy, parent); }
				/*!
					\fn void setPrefixs(LiveNodes const &prefix_)
					
					
					Sets the property \ref tracker_prefix "tracker:prefix" set to the given \a prefix_ set.
					\sa LiveResource::setObjects
				 */
				void setPrefixs(LiveNodes const &prefix_) { baseSetObjects(tracker::prefix::iri(), prefix_); }
				/*!
					\fn void removePrefixs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_prefix "tracker:prefix" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePrefixs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::prefix::iri(), object_info); }
				/*!
					\fn QString getPrefix()
					
					
					Returns the property \ref tracker_prefix "tracker:prefix". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getPrefix() { return baseGetObject< tracker::prefix >(); }
				/*!
					\fn void setPrefix(QString const &prefix_)
					
					
					Sets the property \ref tracker_prefix "tracker:prefix" to the given \a prefix.
					\sa LiveResource::setObject
				 */
				void setPrefix(QString const &prefix_) { baseSetObject< tracker::prefix >( prefix_ ); }
				/*!
					\fn QString firstPrefix()
					
					
					Returns the first property \ref tracker_prefix "tracker:prefix". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstPrefix() { return baseFirstObject< tracker::prefix >(); }
				/*!
					\fn void addPrefix(QString const &prefix_)
					
					
					Adds the given \a prefix_ to the property \ref tracker_prefix "tracker:prefix" set.
					\sa LiveResource::addObject
				 */
				void addPrefix(QString const &prefix_) { baseAddObject< tracker::prefix >( prefix_ ); }
				/*!
					\fn void removePrefix(QString const &prefix_)
					
					
					Removes the given \a prefix_ from the property \ref tracker_prefix "tracker:prefix" set.
					\sa LiveResource::removeObject
				 */
				void removePrefix(QString const &prefix_) { baseRemoveObject< tracker::prefix >(prefix_); }
				 //@}
			};

			/*! Class generated from tracker:Ontology
			 * \ingroup onto_tracker_classes
			 * 
			 * rdfs:label = Ontology
			 * 
			 * tracker:modified = 1781
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref tracker_ "tracker:"
			 */
			class Ontology_
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#Ontology"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_tracker Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Ontology_> Live;
				Ontology_() { this->attachInterfaceHelper< Ontology_ >(); }
				~Ontology_() { this->detachInterfaceHelper< Ontology_ >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from tracker:Volume
			 * \ingroup onto_tracker_classes
			 * 
			 * rdfs:label = Storage media
			 * 
			 * tracker:modified = 1862
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Volume
				: public virtual nie::DataSource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/ontologies/tracker#Volume"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::DataSource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_tracker Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Volume> Live;
				Volume() { this->attachInterfaceHelper< Volume >(); }
				~Volume() { this->detachInterfaceHelper< Volume >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from tracker:mountPoint
				 * \n rdfs:range=rdfs:Resource
				 * \n tracker:modified=1016
				 * \n rdfs:domain=tracker:Volume
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveMountPoints(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_mountPoint "tracker:mountPoint" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMountPoints(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::mountPoint >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMountPoints(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_mountPoint "tracker:mountPoint" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMountPoints(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::mountPoint >(object_info, strategy, parent); }
				/*!
					\fn void setMountPoints(LiveNodes const &mountPoint_)
					
					
					Sets the property \ref tracker_mountPoint "tracker:mountPoint" set to the given \a mountPoint_ set.
					\sa LiveResource::setObjects
				 */
				void setMountPoints(LiveNodes const &mountPoint_) { baseSetObjects(tracker::mountPoint::iri(), mountPoint_); }
				/*!
					\fn void removeMountPoints(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_mountPoint "tracker:mountPoint" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMountPoints(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::mountPoint::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getMountPoint()
					
					
					Returns the property \ref tracker_mountPoint "tracker:mountPoint". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getMountPoint() { return baseGetObject< tracker::mountPoint >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setMountPoint(::SopranoLive::Live< rdfs::Resource > const &mountPoint_)
					
					
					Sets the property \ref tracker_mountPoint "tracker:mountPoint" to the given \a mountPoint.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setMountPoint(::SopranoLive::Live< rdfs::Resource > const &mountPoint_) { return baseSetObject< tracker::mountPoint >( mountPoint_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstMountPoint()
					
					
					Returns the first property \ref tracker_mountPoint "tracker:mountPoint". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstMountPoint() { return baseFirstObject< tracker::mountPoint >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addMountPoint()
					
					
					Adds a new uniquely named resource to the property \ref tracker_mountPoint "tracker:mountPoint" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addMountPoint() { return baseAddObject< tracker::mountPoint >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addMountPoint(::SopranoLive::Live< rdfs::Resource > const &mountPoint_)
					
					
					Adds the given \a mountPoint_ to the property \ref tracker_mountPoint "tracker:mountPoint" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addMountPoint(::SopranoLive::Live< rdfs::Resource > const &mountPoint_) { return baseAddObject< tracker::mountPoint >( mountPoint_ ); }
				/*!
					\fn void removeMountPoint(::SopranoLive::Live< rdfs::Resource > const &mountPoint_)
					
					
					Removes the given \a mountPoint_ from the property \ref tracker_mountPoint "tracker:mountPoint" set.
					\sa LiveResource::removeObject
				 */
				void removeMountPoint(::SopranoLive::Live< rdfs::Resource > const &mountPoint_) { baseRemoveObject< tracker::mountPoint >(mountPoint_); }

				/* Property generated from tracker:isRemovable
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1417
				 * \n rdfs:domain=tracker:Volume
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsRemovables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_isRemovable "tracker:isRemovable" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsRemovables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::isRemovable >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsRemovables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_isRemovable "tracker:isRemovable" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsRemovables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::isRemovable >(object_info, strategy, parent); }
				/*!
					\fn void setIsRemovables(LiveNodes const &isRemovable_)
					
					
					Sets the property \ref tracker_isRemovable "tracker:isRemovable" set to the given \a isRemovable_ set.
					\sa LiveResource::setObjects
				 */
				void setIsRemovables(LiveNodes const &isRemovable_) { baseSetObjects(tracker::isRemovable::iri(), isRemovable_); }
				/*!
					\fn void removeIsRemovables(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_isRemovable "tracker:isRemovable" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsRemovables(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::isRemovable::iri(), object_info); }
				/*!
					\fn bool getIsRemovable()
					
					
					Returns the property \ref tracker_isRemovable "tracker:isRemovable". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsRemovable() { return baseGetObject< tracker::isRemovable >(); }
				/*!
					\fn void setIsRemovable(bool const &isRemovable_)
					
					
					Sets the property \ref tracker_isRemovable "tracker:isRemovable" to the given \a isRemovable.
					\sa LiveResource::setObject
				 */
				void setIsRemovable(bool const &isRemovable_) { baseSetObject< tracker::isRemovable >( isRemovable_ ); }
				/*!
					\fn bool firstIsRemovable()
					
					
					Returns the first property \ref tracker_isRemovable "tracker:isRemovable". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsRemovable() { return baseFirstObject< tracker::isRemovable >(); }
				/*!
					\fn void addIsRemovable(bool const &isRemovable_)
					
					
					Adds the given \a isRemovable_ to the property \ref tracker_isRemovable "tracker:isRemovable" set.
					\sa LiveResource::addObject
				 */
				void addIsRemovable(bool const &isRemovable_) { baseAddObject< tracker::isRemovable >( isRemovable_ ); }
				/*!
					\fn void removeIsRemovable(bool const &isRemovable_)
					
					
					Removes the given \a isRemovable_ from the property \ref tracker_isRemovable "tracker:isRemovable" set.
					\sa LiveResource::removeObject
				 */
				void removeIsRemovable(bool const &isRemovable_) { baseRemoveObject< tracker::isRemovable >(isRemovable_); }

				/* Property generated from tracker:unmountDate
				 * \n rdfs:range=xsd:dateTime
				 * \n tracker:modified=1864
				 * \n rdfs:domain=tracker:Volume
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveUnmountDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_unmountDate "tracker:unmountDate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveUnmountDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::unmountDate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getUnmountDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_unmountDate "tracker:unmountDate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getUnmountDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::unmountDate >(object_info, strategy, parent); }
				/*!
					\fn void setUnmountDates(LiveNodes const &unmountDate_)
					
					
					Sets the property \ref tracker_unmountDate "tracker:unmountDate" set to the given \a unmountDate_ set.
					\sa LiveResource::setObjects
				 */
				void setUnmountDates(LiveNodes const &unmountDate_) { baseSetObjects(tracker::unmountDate::iri(), unmountDate_); }
				/*!
					\fn void removeUnmountDates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_unmountDate "tracker:unmountDate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeUnmountDates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::unmountDate::iri(), object_info); }
				/*!
					\fn QDateTime getUnmountDate()
					
					
					Returns the property \ref tracker_unmountDate "tracker:unmountDate". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getUnmountDate() { return baseGetObject< tracker::unmountDate >(); }
				/*!
					\fn void setUnmountDate(QDateTime const &unmountDate_)
					
					
					Sets the property \ref tracker_unmountDate "tracker:unmountDate" to the given \a unmountDate.
					\sa LiveResource::setObject
				 */
				void setUnmountDate(QDateTime const &unmountDate_) { baseSetObject< tracker::unmountDate >( unmountDate_ ); }
				/*!
					\fn QDateTime firstUnmountDate()
					
					
					Returns the first property \ref tracker_unmountDate "tracker:unmountDate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstUnmountDate() { return baseFirstObject< tracker::unmountDate >(); }
				/*!
					\fn void addUnmountDate(QDateTime const &unmountDate_)
					
					
					Adds the given \a unmountDate_ to the property \ref tracker_unmountDate "tracker:unmountDate" set.
					\sa LiveResource::addObject
				 */
				void addUnmountDate(QDateTime const &unmountDate_) { baseAddObject< tracker::unmountDate >( unmountDate_ ); }
				/*!
					\fn void removeUnmountDate(QDateTime const &unmountDate_)
					
					
					Removes the given \a unmountDate_ from the property \ref tracker_unmountDate "tracker:unmountDate" set.
					\sa LiveResource::removeObject
				 */
				void removeUnmountDate(QDateTime const &unmountDate_) { baseRemoveObject< tracker::unmountDate >(unmountDate_); }

				/* Property generated from tracker:isOptical
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1976
				 * \n rdfs:domain=tracker:Volume
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsOpticals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_isOptical "tracker:isOptical" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsOpticals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::isOptical >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsOpticals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_isOptical "tracker:isOptical" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsOpticals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::isOptical >(object_info, strategy, parent); }
				/*!
					\fn void setIsOpticals(LiveNodes const &isOptical_)
					
					
					Sets the property \ref tracker_isOptical "tracker:isOptical" set to the given \a isOptical_ set.
					\sa LiveResource::setObjects
				 */
				void setIsOpticals(LiveNodes const &isOptical_) { baseSetObjects(tracker::isOptical::iri(), isOptical_); }
				/*!
					\fn void removeIsOpticals(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_isOptical "tracker:isOptical" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsOpticals(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::isOptical::iri(), object_info); }
				/*!
					\fn bool getIsOptical()
					
					
					Returns the property \ref tracker_isOptical "tracker:isOptical". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsOptical() { return baseGetObject< tracker::isOptical >(); }
				/*!
					\fn void setIsOptical(bool const &isOptical_)
					
					
					Sets the property \ref tracker_isOptical "tracker:isOptical" to the given \a isOptical.
					\sa LiveResource::setObject
				 */
				void setIsOptical(bool const &isOptical_) { baseSetObject< tracker::isOptical >( isOptical_ ); }
				/*!
					\fn bool firstIsOptical()
					
					
					Returns the first property \ref tracker_isOptical "tracker:isOptical". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsOptical() { return baseFirstObject< tracker::isOptical >(); }
				/*!
					\fn void addIsOptical(bool const &isOptical_)
					
					
					Adds the given \a isOptical_ to the property \ref tracker_isOptical "tracker:isOptical" set.
					\sa LiveResource::addObject
				 */
				void addIsOptical(bool const &isOptical_) { baseAddObject< tracker::isOptical >( isOptical_ ); }
				/*!
					\fn void removeIsOptical(bool const &isOptical_)
					
					
					Removes the given \a isOptical_ from the property \ref tracker_isOptical "tracker:isOptical" set.
					\sa LiveResource::removeObject
				 */
				void removeIsOptical(bool const &isOptical_) { baseRemoveObject< tracker::isOptical >(isOptical_); }

				/* Property generated from tracker:isMounted
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1562
				 * \n rdfs:domain=tracker:Volume
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsMounteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_isMounted "tracker:isMounted" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsMounteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::isMounted >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsMounteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_isMounted "tracker:isMounted" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsMounteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::isMounted >(object_info, strategy, parent); }
				/*!
					\fn void setIsMounteds(LiveNodes const &isMounted_)
					
					
					Sets the property \ref tracker_isMounted "tracker:isMounted" set to the given \a isMounted_ set.
					\sa LiveResource::setObjects
				 */
				void setIsMounteds(LiveNodes const &isMounted_) { baseSetObjects(tracker::isMounted::iri(), isMounted_); }
				/*!
					\fn void removeIsMounteds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_isMounted "tracker:isMounted" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsMounteds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::isMounted::iri(), object_info); }
				/*!
					\fn bool getIsMounted()
					
					
					Returns the property \ref tracker_isMounted "tracker:isMounted". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsMounted() { return baseGetObject< tracker::isMounted >(); }
				/*!
					\fn void setIsMounted(bool const &isMounted_)
					
					
					Sets the property \ref tracker_isMounted "tracker:isMounted" to the given \a isMounted.
					\sa LiveResource::setObject
				 */
				void setIsMounted(bool const &isMounted_) { baseSetObject< tracker::isMounted >( isMounted_ ); }
				/*!
					\fn bool firstIsMounted()
					
					
					Returns the first property \ref tracker_isMounted "tracker:isMounted". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsMounted() { return baseFirstObject< tracker::isMounted >(); }
				/*!
					\fn void addIsMounted(bool const &isMounted_)
					
					
					Adds the given \a isMounted_ to the property \ref tracker_isMounted "tracker:isMounted" set.
					\sa LiveResource::addObject
				 */
				void addIsMounted(bool const &isMounted_) { baseAddObject< tracker::isMounted >( isMounted_ ); }
				/*!
					\fn void removeIsMounted(bool const &isMounted_)
					
					
					Removes the given \a isMounted_ from the property \ref tracker_isMounted "tracker:isMounted" set.
					\sa LiveResource::removeObject
				 */
				void removeIsMounted(bool const &isMounted_) { baseRemoveObject< tracker::isMounted >(isMounted_); }
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::tracker::Namespace::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::tracker::Ontology_::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::tracker::Volume::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_TRACKER_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_TRACKER_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_TRACKER_H_POST_INCLUDES
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/xsd.h>
#endif
