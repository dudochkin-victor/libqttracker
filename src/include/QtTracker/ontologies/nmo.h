/*
 * nmo.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:26.130506
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/nmo.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_NMO_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_NMO_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_nmo_classes namespace nmo class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nmo_properties namespace nmo property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nmo_resources namespace nmo resource definitions
		 *  @{
		 *  @}
		 */
		static const char nmo_namespace_prefix[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#";
		struct Ontology_nmo
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(nmo_namespace_prefix) + suffix;
			}
		};
		namespace nmo
		{
			inline QUrl iri(QString suffix) { return Ontology_nmo::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class Attachment;
			class Call;
			class CommunicationChannel;
			class Conversation;
			class DeliveryStatus;
			class Email;
			class IMMessage;
			class MMSMessage;
			class MailAccount;
			class MailFolder;
			class Mailbox;
			class MailboxDataObject;
			class Message;
			class MessageHeader;
			class MimePart;
			class Multipart;
			class PermanentChannel;
			class PhoneMessage;
			class PhoneMessageFolder;
			class ReportReadStatus;
			class SMSFolder;
			class SMSMessage;
			class TransientChannel;
			class VOIPCall;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NMO_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NMO_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NMO_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nmo
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from nmo:duration
			 * \anchor nmo_duration
			 * \n Duration of the call in seconds
			 * \n rdfs:range=xsd:integer
			 * \n tracker:modified=1539
			 * \n rdfs:domain=nmo:Call
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class duration
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#duration"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Call Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Call RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmo:lastMessageDate
			 * \anchor nmo_lastMessageDate
			 * \n nmo:sentDate of the most recent message in this channel.
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=nmo:CommunicationChannel
			 * \n tracker:indexed=true
			 * \n tracker:modified=1611
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class lastMessageDate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#lastMessageDate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef CommunicationChannel Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CommunicationChannel RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nmo:hasParticipant
			 * \anchor nmo_hasParticipant
			 * \n rdfs:range=nco:Contact
			 * \n tracker:indexed=true
			 * \n tracker:modified=1079
			 * \n rdfs:domain=nmo:CommunicationChannel
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class hasParticipant
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#hasParticipant"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef CommunicationChannel Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CommunicationChannel RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from nmo:hasContent
			 * \anchor nmo_hasContent
			 * \n Link between the root node and the first MIME node in the Email tree
			 * \n rdfs:label=Has content
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmo:MimePart
			 * \n rdfs:domain=nmo:Email
			 * \n tracker:modified=1754
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class hasContent
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#hasContent"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Email Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Email RDFDomain;
				/// The localized c++ range type of this property
				typedef MimePart Range;
				/// The full, non-localized rdf range type of this property
				typedef MimePart RDFRange;
			};
			/*! Property generated from nmo:isFlagged
			 * \anchor nmo_isFlagged
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1713
			 * \n rdfs:domain=nmo:Email
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class isFlagged
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#isFlagged"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Email Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Email RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmo:isRecent
			 * \anchor nmo_isRecent
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1185
			 * \n rdfs:domain=nmo:Email
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class isRecent
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#isRecent"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Email Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Email RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmo:status
			 * \anchor nmo_status
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1476
			 * \n rdfs:domain=nmo:Email
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class status
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#status"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Email Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Email RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:responseType
			 * \anchor nmo_responseType
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1148
			 * \n rdfs:domain=nmo:Email
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class responseType
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#responseType"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Email Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Email RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:contentMimeType
			 * \anchor nmo_contentMimeType
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1738
			 * \n rdfs:domain=nmo:Email
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n rdfs:subPropertyOf=nie:mimeType
			 */
			/// \ingroup onto_nmo_properties
			class contentMimeType
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentMimeType"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Email Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Email RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:mmsHasContent
			 * \anchor nmo_mmsHasContent
			 * \n Link to the mimeparts with the multimedia content (miming nmo:hasContent)
			 * \n rdfs:label=MMS has content
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmo:MimePart
			 * \n rdfs:domain=nmo:MMSMessage
			 * \n tracker:modified=1281
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class mmsHasContent
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#mmsHasContent"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef MMSMessage Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MMSMessage RDFDomain;
				/// The localized c++ range type of this property
				typedef MimePart Range;
				/// The full, non-localized rdf range type of this property
				typedef MimePart RDFRange;
			};
			/*! Property generated from nmo:accountName
			 * \anchor nmo_accountName
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmo:MailAccount
			 * \n tracker:weight=3
			 * \n tracker:modified=1695
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class accountName
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#accountName"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MailAccount Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MailAccount RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:accountDisplayName
			 * \anchor nmo_accountDisplayName
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmo:MailAccount
			 * \n tracker:weight=3
			 * \n tracker:modified=1690
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class accountDisplayName
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#accountDisplayName"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MailAccount Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MailAccount RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:fromAddress
			 * \anchor nmo_fromAddress
			 * \n From address of an account
			 * \n rdfs:range=nco:EmailAddress
			 * \n tracker:modified=1320
			 * \n rdfs:domain=nmo:MailAccount
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class fromAddress
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#fromAddress"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef MailAccount Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MailAccount RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::EmailAddress Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::EmailAddress RDFRange;
			};
			/*! Property generated from nmo:signature
			 * \anchor nmo_signature
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmo:MailAccount
			 * \n tracker:weight=2
			 * \n tracker:modified=1907
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class signature
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#signature"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MailAccount Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MailAccount RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:folderName
			 * \anchor nmo_folderName
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmo:MailFolder
			 * \n tracker:weight=4
			 * \n tracker:modified=1100
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class folderName
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#folderName"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MailFolder Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MailFolder RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:serverCount
			 * \anchor nmo_serverCount
			 * \n rdfs:range=xsd:integer
			 * \n tracker:modified=1229
			 * \n rdfs:domain=nmo:MailFolder
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class serverCount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#serverCount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MailFolder Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MailFolder RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmo:serverUnreadCount
			 * \anchor nmo_serverUnreadCount
			 * \n rdfs:range=xsd:integer
			 * \n tracker:modified=1748
			 * \n rdfs:domain=nmo:MailFolder
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class serverUnreadCount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#serverUnreadCount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MailFolder Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MailFolder RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmo:recipient
			 * \anchor nmo_recipient
			 * \n rdfs:range=nco:Contact
			 * \n tracker:modified=1723
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class recipient
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#recipient"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from nmo:from
			 * \anchor nmo_from
			 * \n The sender of the message.
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:indexed=true
			 * \n tracker:modified=1040
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class from
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#from"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from nmo:isAnswered
			 * \anchor nmo_isAnswered
			 * \n True when the user has sent a replay to this message
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1491
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class isAnswered
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#isAnswered"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmo:isDeleted
			 * \anchor nmo_isDeleted
			 * \n True when the user has removed the Email in the UI but still exists in the DB. Usually a purge or confirmation from the user will actually remove the data.
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1991
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class isDeleted
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#isDeleted"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmo:isDraft
			 * \anchor nmo_isDraft
			 * \n The user hasn't finished editing the message and might want to continue later
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1594
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class isDraft
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#isDraft"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmo:isRead
			 * \anchor nmo_isRead
			 * \n The messsage has been readed. The user has opened the message or has marked it directly as readed
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1207
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class isRead
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#isRead"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmo:isSent
			 * \anchor nmo_isSent
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1997
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class isSent
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#isSent"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmo:isEmergency
			 * \anchor nmo_isEmergency
			 * \n Special message from the network, probably coming via Cell broadcasting with emergency information
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1671
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class isEmergency
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#isEmergency"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmo:plainTextMessageContent
			 * \anchor nmo_plainTextMessageContent
			 * \n nmo:plainTextMessageContent is deprecated, use nie:plainTextContent instead
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1166
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class plainTextMessageContent
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#plainTextMessageContent"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:htmlMessageContent
			 * \anchor nmo_htmlMessageContent
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1669
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class htmlMessageContent
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#htmlMessageContent"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:references
			 * \anchor nmo_references
			 * \n rdfs:range=nmo:Message
			 * \n tracker:modified=1855
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class references
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#references"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef Message Range;
				/// The full, non-localized rdf range type of this property
				typedef Message RDFRange;
			};
			/*! Property generated from nmo:inReplyTo
			 * \anchor nmo_inReplyTo
			 * \n rdfs:range=nmo:Message
			 * \n tracker:modified=1143
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n rdfs:subPropertyOf=nmo:references
			 */
			/// \ingroup onto_nmo_properties
			class inReplyTo
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#inReplyTo"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef Message Range;
				/// The full, non-localized rdf range type of this property
				typedef Message RDFRange;
			};
			/*! Property generated from nmo:messageHeader
			 * \anchor nmo_messageHeader
			 * \n rdfs:range=nmo:MessageHeader
			 * \n tracker:modified=1423
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class messageHeader
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageHeader"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef MessageHeader Range;
				/// The full, non-localized rdf range type of this property
				typedef MessageHeader RDFRange;
			};
			/*! Property generated from nmo:messageId
			 * \anchor nmo_messageId
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1536
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class messageId
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageId"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:messageSubject
			 * \anchor nmo_messageSubject
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:weight=5
			 * \n tracker:modified=1739
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class messageSubject
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageSubject"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:receivedDate
			 * \anchor nmo_receivedDate
			 * \n rdfs:range=xsd:dateTime
			 * \n tracker:modified=1503
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class receivedDate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#receivedDate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nmo:replyTo
			 * \anchor nmo_replyTo
			 * \n rdfs:range=nco:Contact
			 * \n tracker:modified=1913
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class replyTo
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#replyTo"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from nmo:sender
			 * \anchor nmo_sender
			 * \n rdfs:subPropertyOf=nmo:recipient
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:indexed=true
			 * \n tracker:modified=1678
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class sender
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sender"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from nmo:sentDate
			 * \anchor nmo_sentDate
			 * \n Date when this message was sent.
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:indexed=true
			 * \n tracker:modified=1699
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class sentDate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sentDate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nmo:to
			 * \anchor nmo_to
			 * \n rdfs:range=nco:Contact
			 * \n tracker:indexed=true
			 * \n tracker:modified=1655
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class to
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#to"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from nmo:bcc
			 * \anchor nmo_bcc
			 * \n rdfs:range=nco:Contact
			 * \n tracker:modified=1817
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class bcc
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#bcc"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from nmo:cc
			 * \anchor nmo_cc
			 * \n rdfs:range=nco:Contact
			 * \n tracker:modified=1426
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class cc
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#cc"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from nmo:conversation
			 * \anchor nmo_conversation
			 * \n Connects this message to a conversation. Every message must only be part of a single conversation.
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmo:Conversation
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:indexed=true
			 * \n tracker:modified=1118
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class conversation
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#conversation"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef Conversation Range;
				/// The full, non-localized rdf range type of this property
				typedef Conversation RDFRange;
			};
			/*! Property generated from nmo:communicationChannel
			 * \anchor nmo_communicationChannel
			 * \n Connects this message to a communication channel. Every message must only be in a single channel.
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmo:CommunicationChannel
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:secondaryIndex=Unknown text
			 * \n tracker:indexed=true
			 * \n tracker:modified=1138
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class communicationChannel
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#communicationChannel"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef CommunicationChannel Range;
				/// The full, non-localized rdf range type of this property
				typedef CommunicationChannel RDFRange;
			};
			/*! Property generated from nmo:hasAttachment
			 * \anchor nmo_hasAttachment
			 * \n rdfs:range=nfo:Attachment
			 * \n tracker:modified=1371
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class hasAttachment
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#hasAttachment"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::Attachment Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::Attachment RDFRange;
			};
			/*! Property generated from nmo:deliveryStatus
			 * \anchor nmo_deliveryStatus
			 * \n rdfs:label=deliveryStatus
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmo:DeliveryStatus
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:modified=1473
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class deliveryStatus
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#deliveryStatus"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef DeliveryStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef DeliveryStatus RDFRange;
			};
			/*! Property generated from nmo:reportDelivery
			 * \anchor nmo_reportDelivery
			 * \n Report delivery has been requested for the message
			 * \n rdfs:label=Report delivery
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:modified=1323
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class reportDelivery
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#reportDelivery"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmo:sentWithReportRead
			 * \anchor nmo_sentWithReportRead
			 * \n The message has been send with a flag indicating that we want to receive a confirmation when the recipient reads it
			 * \n rdfs:label=Report read
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:modified=1161
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class sentWithReportRead
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sentWithReportRead"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmo:reportReadStatus
			 * \anchor nmo_reportReadStatus
			 * \n If the message was sent with report read enable, this property stores the status of that message: if the recipient has read it, delete it, or we are still waiting for an answer
			 * \n rdfs:label=reportReadStatus
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmo:ReportReadStatus
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:modified=1492
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class reportReadStatus
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#reportReadStatus"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef ReportReadStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef ReportReadStatus RDFRange;
			};
			/*! Property generated from nmo:mustAnswerReportRead
			 * \anchor nmo_mustAnswerReportRead
			 * \n The message came with the report-read flag enabled, and somebody must be send the answer back. Once the report is sent, this property goes to False.
			 * \n rdfs:label=Report read requested
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:modified=1579
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class mustAnswerReportRead
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#mustAnswerReportRead"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmo:mmsId
			 * \anchor nmo_mmsId
			 * \n Unique identifier of an MMS message. It comes from the server
			 * \n rdfs:label=mms id
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmo:Message
			 * \n tracker:modified=1845
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class mmsId
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#mmsId"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Message Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Message RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:headerName
			 * \anchor nmo_headerName
			 * \n Key of the message header key-value pair
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmo:MessageHeader
			 * \n tracker:weight=3
			 * \n tracker:modified=1605
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class headerName
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#headerName"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MessageHeader Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MessageHeader RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:headerValue
			 * \anchor nmo_headerValue
			 * \n Value of the message header key-value pair
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmo:MessageHeader
			 * \n tracker:weight=4
			 * \n tracker:modified=1903
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class headerValue
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#headerValue"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MessageHeader Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MessageHeader RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:charSet
			 * \anchor nmo_charSet
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1556
			 * \n rdfs:domain=nmo:MimePart
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class charSet
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#charSet"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MimePart Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MimePart RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:contentId
			 * \anchor nmo_contentId
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1006
			 * \n rdfs:domain=nmo:MimePart
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class contentId
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentId"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MimePart Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MimePart RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:contentTransferEncoding
			 * \anchor nmo_contentTransferEncoding
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1841
			 * \n rdfs:domain=nmo:MimePart
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class contentTransferEncoding
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentTransferEncoding"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MimePart Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MimePart RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:contentDescription
			 * \anchor nmo_contentDescription
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1557
			 * \n rdfs:domain=nmo:MimePart
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class contentDescription
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentDescription"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MimePart Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MimePart RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:contentDisposition
			 * \anchor nmo_contentDisposition
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1487
			 * \n rdfs:domain=nmo:MimePart
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmo_properties
			class contentDisposition
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentDisposition"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MimePart Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MimePart RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:mimeHeader
			 * \anchor nmo_mimeHeader
			 * \n rdfs:range=rdfs:Resource
			 * \n tracker:modified=1889
			 * \n rdfs:domain=nmo:MimePart
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class mimeHeader
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#mimeHeader"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef MimePart Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MimePart RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from nmo:partBoundary
			 * \anchor nmo_partBoundary
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1049
			 * \n rdfs:domain=nmo:Multipart
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class partBoundary
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#partBoundary"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Multipart Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Multipart RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:toVCard
			 * \anchor nmo_toVCard
			 * \n Reference to a VCard in the filesystem, containing the Contact information of 'to' recipients
			 * \n rdfs:range=nfo:FileDataObject
			 * \n rdfs:label=fromVCard
			 * \n tracker:modified=1418
			 * \n rdfs:domain=nmo:PhoneMessage
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class toVCard
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#toVCard"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef PhoneMessage Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PhoneMessage RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::FileDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::FileDataObject RDFRange;
			};
			/*! Property generated from nmo:fromVCard
			 * \anchor nmo_fromVCard
			 * \n Reference to a VCard in the filesystem, containing the Contact information of the 'from' recipient
			 * \n rdfs:label=fromVCard
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:FileDataObject
			 * \n rdfs:domain=nmo:PhoneMessage
			 * \n tracker:modified=1696
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class fromVCard
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#fromVCard"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef PhoneMessage Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PhoneMessage RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::FileDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::FileDataObject RDFRange;
			};
			/*! Property generated from nmo:encoding
			 * \anchor nmo_encoding
			 * \n Encoding of the message
			 * \n rdfs:label=enconding
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmo:PhoneMessage
			 * \n tracker:modified=1194
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class encoding
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#encoding"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PhoneMessage Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PhoneMessage RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:phoneMessageId
			 * \anchor nmo_phoneMessageId
			 * \n Id assigned in the system when the phone message is received
			 * \n rdfs:label=Phone message Id
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmo:PhoneMessage
			 * \n tracker:modified=1963
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class phoneMessageId
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#phoneMessageId"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PhoneMessage Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PhoneMessage RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmo:smsId
			 * \anchor nmo_smsId
			 * \n Id assigned in the system when the message is received. Use phoneMessageId instead
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=sms Id
			 * \n rdfs:subPropertyOf=nmo:phoneMessageId
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmo:PhoneMessage
			 * \n tracker:modified=1449
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class smsId
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#smsId"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PhoneMessage Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PhoneMessage RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmo:validityPeriod
			 * \anchor nmo_validityPeriod
			 * \n Validity period of an SMS in seconds. It is a value coming from the network
			 * \n rdfs:label=Validity period
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmo:PhoneMessage
			 * \n tracker:modified=1821
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class validityPeriod
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#validityPeriod"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PhoneMessage Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PhoneMessage RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmo:phoneMessageFolderId
			 * \anchor nmo_phoneMessageFolderId
			 * \n Id assigned to the folder for sync purpouses
			 * \n rdfs:label=folder id
			 * \n rdfs:subPropertyOf=nie:identifier
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmo:PhoneMessageFolder
			 * \n tracker:modified=1422
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class phoneMessageFolderId
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#phoneMessageFolderId"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PhoneMessageFolder Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PhoneMessageFolder RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:containsPhoneMessageFolder
			 * \anchor nmo_containsPhoneMessageFolder
			 * \n To link and reconstruct a hierarchy of folders
			 * \n rdfs:range=nmo:PhoneMessageFolder
			 * \n rdfs:label=contains Phone Message Folder
			 * \n tracker:modified=1918
			 * \n rdfs:domain=nmo:PhoneMessageFolder
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class containsPhoneMessageFolder
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#containsPhoneMessageFolder"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef PhoneMessageFolder Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PhoneMessageFolder RDFDomain;
				/// The localized c++ range type of this property
				typedef PhoneMessageFolder Range;
				/// The full, non-localized rdf range type of this property
				typedef PhoneMessageFolder RDFRange;
			};
			/*! Property generated from nmo:containsPhoneMessage
			 * \anchor nmo_containsPhoneMessage
			 * \n Link between an Phone Message and a Folder
			 * \n rdfs:range=nmo:PhoneMessage
			 * \n rdfs:label=Contains Phone Message
			 * \n tracker:modified=1766
			 * \n rdfs:domain=nmo:PhoneMessageFolder
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class containsPhoneMessage
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#containsPhoneMessage"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef PhoneMessageFolder Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PhoneMessageFolder RDFDomain;
				/// The localized c++ range type of this property
				typedef PhoneMessage Range;
				/// The full, non-localized rdf range type of this property
				typedef PhoneMessage RDFRange;
			};
			/*! Property generated from nmo:smsFolderId
			 * \anchor nmo_smsFolderId
			 * \n Id assigned to the folder for sync purpouses
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=folder id
			 * \n rdfs:subPropertyOf=nmo:phoneMessageFolderId
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmo:SMSFolder
			 * \n tracker:modified=1933
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class smsFolderId
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#smsFolderId"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef SMSFolder Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef SMSFolder RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmo:containsSMSFolder
			 * \anchor nmo_containsSMSFolder
			 * \n To link and reconstruct a hierarchy of folders. Use containsPhoneMessageFolder instead.
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=contains SMS Folder
			 * \n rdfs:subPropertyOf=nmo:containsPhoneMessageFolder
			 * \n rdfs:range=nmo:SMSFolder
			 * \n rdfs:domain=nmo:SMSFolder
			 * \n tracker:modified=1667
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class containsSMSFolder
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#containsSMSFolder"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef SMSFolder Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef SMSFolder RDFDomain;
				/// The localized c++ range type of this property
				typedef SMSFolder Range;
				/// The full, non-localized rdf range type of this property
				typedef SMSFolder RDFRange;
			};
			/*! Property generated from nmo:containsSMS
			 * \anchor nmo_containsSMS
			 * \n Link between an Phone Message and a Folder. Use containsPhoneMessage instead
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=Contains SMS
			 * \n rdfs:subPropertyOf=nmo:containsPhoneMessage
			 * \n rdfs:range=nmo:PhoneMessage
			 * \n rdfs:domain=nmo:SMSFolder
			 * \n tracker:modified=1716
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmo_properties
			class containsSMS
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#containsSMS"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef SMSFolder Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef SMSFolder RDFDomain;
				/// The localized c++ range type of this property
				typedef PhoneMessage Range;
				/// The full, non-localized rdf range type of this property
				typedef PhoneMessage RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			/*! Resource generated from nmo:default-sms-folder-draft
			 * \anchor nmo_default_sms_folder_draft
			 */
			/// \ingroup onto_nmo_resources
			class default_sms_folder_draft
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#default-sms-folder-draft"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef SMSFolder ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:default-sms-folder-inbox
			 * \anchor nmo_default_sms_folder_inbox
			 */
			/// \ingroup onto_nmo_resources
			class default_sms_folder_inbox
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#default-sms-folder-inbox"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef SMSFolder ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:default-sms-folder-myfolder
			 * \anchor nmo_default_sms_folder_myfolder
			 */
			/// \ingroup onto_nmo_resources
			class default_sms_folder_myfolder
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#default-sms-folder-myfolder"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef SMSFolder ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:default-sms-folder-outbox
			 * \anchor nmo_default_sms_folder_outbox
			 */
			/// \ingroup onto_nmo_resources
			class default_sms_folder_outbox
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#default-sms-folder-outbox"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef SMSFolder ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:default-sms-folder-sent
			 * \anchor nmo_default_sms_folder_sent
			 */
			/// \ingroup onto_nmo_resources
			class default_sms_folder_sent
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#default-sms-folder-sent"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef SMSFolder ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:delivery-status-delivered
			 * \anchor nmo_delivery_status_delivered
			 */
			/// \ingroup onto_nmo_resources
			class delivery_status_delivered
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#delivery-status-delivered"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef DeliveryStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:delivery-status-permanently-failed
			 * \anchor nmo_delivery_status_permanently_failed
			 */
			/// \ingroup onto_nmo_resources
			class delivery_status_permanently_failed
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#delivery-status-permanently-failed"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef DeliveryStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:delivery-status-sent
			 * \anchor nmo_delivery_status_sent
			 */
			/// \ingroup onto_nmo_resources
			class delivery_status_sent
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#delivery-status-sent"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef DeliveryStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:delivery-status-temporarily-failed
			 * \anchor nmo_delivery_status_temporarily_failed
			 */
			/// \ingroup onto_nmo_resources
			class delivery_status_temporarily_failed
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#delivery-status-temporarily-failed"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef DeliveryStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:predefined-phone-msg-folder-draft
			 * \anchor nmo_predefined_phone_msg_folder_draft
			 */
			/// \ingroup onto_nmo_resources
			class predefined_phone_msg_folder_draft
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#predefined-phone-msg-folder-draft"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PhoneMessageFolder ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:predefined-phone-msg-folder-inbox
			 * \anchor nmo_predefined_phone_msg_folder_inbox
			 */
			/// \ingroup onto_nmo_resources
			class predefined_phone_msg_folder_inbox
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#predefined-phone-msg-folder-inbox"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PhoneMessageFolder ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:predefined-phone-msg-folder-myfolder
			 * \anchor nmo_predefined_phone_msg_folder_myfolder
			 */
			/// \ingroup onto_nmo_resources
			class predefined_phone_msg_folder_myfolder
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#predefined-phone-msg-folder-myfolder"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PhoneMessageFolder ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:predefined-phone-msg-folder-outbox
			 * \anchor nmo_predefined_phone_msg_folder_outbox
			 */
			/// \ingroup onto_nmo_resources
			class predefined_phone_msg_folder_outbox
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#predefined-phone-msg-folder-outbox"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PhoneMessageFolder ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:predefined-phone-msg-folder-sent
			 * \anchor nmo_predefined_phone_msg_folder_sent
			 */
			/// \ingroup onto_nmo_resources
			class predefined_phone_msg_folder_sent
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#predefined-phone-msg-folder-sent"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PhoneMessageFolder ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:read-status-deleted
			 * \anchor nmo_read_status_deleted
			 */
			/// \ingroup onto_nmo_resources
			class read_status_deleted
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#read-status-deleted"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef ReportReadStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:read-status-read
			 * \anchor nmo_read_status_read
			 */
			/// \ingroup onto_nmo_resources
			class read_status_read
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#read-status-read"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef ReportReadStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmo:read-status-unknown
			 * \anchor nmo_read_status_unknown
			 */
			/// \ingroup onto_nmo_resources
			class read_status_unknown
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#read-status-unknown"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef ReportReadStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NMO_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NMO_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NMO_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdfs.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nmo
		{

			using namespace rdfs;
			using namespace nfo;
			using namespace nie;
			using namespace rdf;
			using namespace xsd;
			using namespace nco;

			/*! Class generated from nmo:MimePart
			 * \ingroup onto_nmo_classes
			 * 
			 * tracker:modified = 1890
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmo_hasContent "nmo:hasContent"
			 * 		\ref nmo_mmsHasContent "nmo:mmsHasContent"
			 */
			class MimePart
				: public virtual nfo::EmbeddedFileDataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#MimePart"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::EmbeddedFileDataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MimePart> Live;
				MimePart() { this->attachInterfaceHelper< MimePart >(); }
				~MimePart() { this->detachInterfaceHelper< MimePart >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:contentDisposition
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1487
				 * \n rdfs:domain=nmo:MimePart
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveContentDispositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_contentDisposition "nmo:contentDisposition" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContentDispositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::contentDisposition >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContentDispositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_contentDisposition "nmo:contentDisposition" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContentDispositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::contentDisposition >(object_info, strategy, parent); }
				/*!
					\fn void setContentDispositions(LiveNodes const &contentDisposition_)
					
					
					Sets the property \ref nmo_contentDisposition "nmo:contentDisposition" set to the given \a contentDisposition_ set.
					\sa LiveResource::setObjects
				 */
				void setContentDispositions(LiveNodes const &contentDisposition_) { baseSetObjects(nmo::contentDisposition::iri(), contentDisposition_); }
				/*!
					\fn void removeContentDispositions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_contentDisposition "nmo:contentDisposition" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContentDispositions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::contentDisposition::iri(), object_info); }
				/*!
					\fn QString getContentDisposition()
					
					
					Returns the property \ref nmo_contentDisposition "nmo:contentDisposition". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getContentDisposition() { return baseGetObject< nmo::contentDisposition >(); }
				/*!
					\fn void setContentDisposition(QString const &contentDisposition_)
					
					
					Sets the property \ref nmo_contentDisposition "nmo:contentDisposition" to the given \a contentDisposition.
					\sa LiveResource::setObject
				 */
				void setContentDisposition(QString const &contentDisposition_) { baseSetObject< nmo::contentDisposition >( contentDisposition_ ); }
				/*!
					\fn QString firstContentDisposition()
					
					
					Returns the first property \ref nmo_contentDisposition "nmo:contentDisposition". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstContentDisposition() { return baseFirstObject< nmo::contentDisposition >(); }
				/*!
					\fn void addContentDisposition(QString const &contentDisposition_)
					
					
					Adds the given \a contentDisposition_ to the property \ref nmo_contentDisposition "nmo:contentDisposition" set.
					\sa LiveResource::addObject
				 */
				void addContentDisposition(QString const &contentDisposition_) { baseAddObject< nmo::contentDisposition >( contentDisposition_ ); }
				/*!
					\fn void removeContentDisposition(QString const &contentDisposition_)
					
					
					Removes the given \a contentDisposition_ from the property \ref nmo_contentDisposition "nmo:contentDisposition" set.
					\sa LiveResource::removeObject
				 */
				void removeContentDisposition(QString const &contentDisposition_) { baseRemoveObject< nmo::contentDisposition >(contentDisposition_); }

				/* Property generated from nmo:contentDescription
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1557
				 * \n rdfs:domain=nmo:MimePart
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveContentDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_contentDescription "nmo:contentDescription" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContentDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::contentDescription >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContentDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_contentDescription "nmo:contentDescription" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContentDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::contentDescription >(object_info, strategy, parent); }
				/*!
					\fn void setContentDescriptions(LiveNodes const &contentDescription_)
					
					
					Sets the property \ref nmo_contentDescription "nmo:contentDescription" set to the given \a contentDescription_ set.
					\sa LiveResource::setObjects
				 */
				void setContentDescriptions(LiveNodes const &contentDescription_) { baseSetObjects(nmo::contentDescription::iri(), contentDescription_); }
				/*!
					\fn void removeContentDescriptions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_contentDescription "nmo:contentDescription" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContentDescriptions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::contentDescription::iri(), object_info); }
				/*!
					\fn QString getContentDescription()
					
					
					Returns the property \ref nmo_contentDescription "nmo:contentDescription". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getContentDescription() { return baseGetObject< nmo::contentDescription >(); }
				/*!
					\fn void setContentDescription(QString const &contentDescription_)
					
					
					Sets the property \ref nmo_contentDescription "nmo:contentDescription" to the given \a contentDescription.
					\sa LiveResource::setObject
				 */
				void setContentDescription(QString const &contentDescription_) { baseSetObject< nmo::contentDescription >( contentDescription_ ); }
				/*!
					\fn QString firstContentDescription()
					
					
					Returns the first property \ref nmo_contentDescription "nmo:contentDescription". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstContentDescription() { return baseFirstObject< nmo::contentDescription >(); }
				/*!
					\fn void addContentDescription(QString const &contentDescription_)
					
					
					Adds the given \a contentDescription_ to the property \ref nmo_contentDescription "nmo:contentDescription" set.
					\sa LiveResource::addObject
				 */
				void addContentDescription(QString const &contentDescription_) { baseAddObject< nmo::contentDescription >( contentDescription_ ); }
				/*!
					\fn void removeContentDescription(QString const &contentDescription_)
					
					
					Removes the given \a contentDescription_ from the property \ref nmo_contentDescription "nmo:contentDescription" set.
					\sa LiveResource::removeObject
				 */
				void removeContentDescription(QString const &contentDescription_) { baseRemoveObject< nmo::contentDescription >(contentDescription_); }

				/* Property generated from nmo:contentId
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1006
				 * \n rdfs:domain=nmo:MimePart
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveContentIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_contentId "nmo:contentId" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContentIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::contentId >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContentIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_contentId "nmo:contentId" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContentIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::contentId >(object_info, strategy, parent); }
				/*!
					\fn void setContentIds(LiveNodes const &contentId_)
					
					
					Sets the property \ref nmo_contentId "nmo:contentId" set to the given \a contentId_ set.
					\sa LiveResource::setObjects
				 */
				void setContentIds(LiveNodes const &contentId_) { baseSetObjects(nmo::contentId::iri(), contentId_); }
				/*!
					\fn void removeContentIds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_contentId "nmo:contentId" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContentIds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::contentId::iri(), object_info); }
				/*!
					\fn QString getContentId()
					
					
					Returns the property \ref nmo_contentId "nmo:contentId". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getContentId() { return baseGetObject< nmo::contentId >(); }
				/*!
					\fn void setContentId(QString const &contentId_)
					
					
					Sets the property \ref nmo_contentId "nmo:contentId" to the given \a contentId.
					\sa LiveResource::setObject
				 */
				void setContentId(QString const &contentId_) { baseSetObject< nmo::contentId >( contentId_ ); }
				/*!
					\fn QString firstContentId()
					
					
					Returns the first property \ref nmo_contentId "nmo:contentId". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstContentId() { return baseFirstObject< nmo::contentId >(); }
				/*!
					\fn void addContentId(QString const &contentId_)
					
					
					Adds the given \a contentId_ to the property \ref nmo_contentId "nmo:contentId" set.
					\sa LiveResource::addObject
				 */
				void addContentId(QString const &contentId_) { baseAddObject< nmo::contentId >( contentId_ ); }
				/*!
					\fn void removeContentId(QString const &contentId_)
					
					
					Removes the given \a contentId_ from the property \ref nmo_contentId "nmo:contentId" set.
					\sa LiveResource::removeObject
				 */
				void removeContentId(QString const &contentId_) { baseRemoveObject< nmo::contentId >(contentId_); }

				/* Property generated from nmo:contentTransferEncoding
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1841
				 * \n rdfs:domain=nmo:MimePart
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveContentTransferEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_contentTransferEncoding "nmo:contentTransferEncoding" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContentTransferEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::contentTransferEncoding >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContentTransferEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_contentTransferEncoding "nmo:contentTransferEncoding" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContentTransferEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::contentTransferEncoding >(object_info, strategy, parent); }
				/*!
					\fn void setContentTransferEncodings(LiveNodes const &contentTransferEncoding_)
					
					
					Sets the property \ref nmo_contentTransferEncoding "nmo:contentTransferEncoding" set to the given \a contentTransferEncoding_ set.
					\sa LiveResource::setObjects
				 */
				void setContentTransferEncodings(LiveNodes const &contentTransferEncoding_) { baseSetObjects(nmo::contentTransferEncoding::iri(), contentTransferEncoding_); }
				/*!
					\fn void removeContentTransferEncodings(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_contentTransferEncoding "nmo:contentTransferEncoding" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContentTransferEncodings(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::contentTransferEncoding::iri(), object_info); }
				/*!
					\fn QString getContentTransferEncoding()
					
					
					Returns the property \ref nmo_contentTransferEncoding "nmo:contentTransferEncoding". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getContentTransferEncoding() { return baseGetObject< nmo::contentTransferEncoding >(); }
				/*!
					\fn void setContentTransferEncoding(QString const &contentTransferEncoding_)
					
					
					Sets the property \ref nmo_contentTransferEncoding "nmo:contentTransferEncoding" to the given \a contentTransferEncoding.
					\sa LiveResource::setObject
				 */
				void setContentTransferEncoding(QString const &contentTransferEncoding_) { baseSetObject< nmo::contentTransferEncoding >( contentTransferEncoding_ ); }
				/*!
					\fn QString firstContentTransferEncoding()
					
					
					Returns the first property \ref nmo_contentTransferEncoding "nmo:contentTransferEncoding". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstContentTransferEncoding() { return baseFirstObject< nmo::contentTransferEncoding >(); }
				/*!
					\fn void addContentTransferEncoding(QString const &contentTransferEncoding_)
					
					
					Adds the given \a contentTransferEncoding_ to the property \ref nmo_contentTransferEncoding "nmo:contentTransferEncoding" set.
					\sa LiveResource::addObject
				 */
				void addContentTransferEncoding(QString const &contentTransferEncoding_) { baseAddObject< nmo::contentTransferEncoding >( contentTransferEncoding_ ); }
				/*!
					\fn void removeContentTransferEncoding(QString const &contentTransferEncoding_)
					
					
					Removes the given \a contentTransferEncoding_ from the property \ref nmo_contentTransferEncoding "nmo:contentTransferEncoding" set.
					\sa LiveResource::removeObject
				 */
				void removeContentTransferEncoding(QString const &contentTransferEncoding_) { baseRemoveObject< nmo::contentTransferEncoding >(contentTransferEncoding_); }

				/* Property generated from nmo:mimeHeader
				 * \n rdfs:range=rdfs:Resource
				 * \n tracker:modified=1889
				 * \n rdfs:domain=nmo:MimePart
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveMimeHeaders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_mimeHeader "nmo:mimeHeader" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMimeHeaders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::mimeHeader >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMimeHeaders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_mimeHeader "nmo:mimeHeader" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMimeHeaders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::mimeHeader >(object_info, strategy, parent); }
				/*!
					\fn void setMimeHeaders(LiveNodes const &mimeHeader_)
					
					
					Sets the property \ref nmo_mimeHeader "nmo:mimeHeader" set to the given \a mimeHeader_ set.
					\sa LiveResource::setObjects
				 */
				void setMimeHeaders(LiveNodes const &mimeHeader_) { baseSetObjects(nmo::mimeHeader::iri(), mimeHeader_); }
				/*!
					\fn void removeMimeHeaders(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_mimeHeader "nmo:mimeHeader" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMimeHeaders(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::mimeHeader::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstMimeHeader()
					
					
					Returns the first property \ref nmo_mimeHeader "nmo:mimeHeader". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstMimeHeader() { return baseFirstObject< nmo::mimeHeader >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addMimeHeader()
					
					
					Adds a new uniquely named resource to the property \ref nmo_mimeHeader "nmo:mimeHeader" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addMimeHeader() { return baseAddObject< nmo::mimeHeader >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addMimeHeader(::SopranoLive::Live< rdfs::Resource > const &mimeHeader_)
					
					
					Adds the given \a mimeHeader_ to the property \ref nmo_mimeHeader "nmo:mimeHeader" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addMimeHeader(::SopranoLive::Live< rdfs::Resource > const &mimeHeader_) { return baseAddObject< nmo::mimeHeader >( mimeHeader_ ); }
				/*!
					\fn void removeMimeHeader(::SopranoLive::Live< rdfs::Resource > const &mimeHeader_)
					
					
					Removes the given \a mimeHeader_ from the property \ref nmo_mimeHeader "nmo:mimeHeader" set.
					\sa LiveResource::removeObject
				 */
				void removeMimeHeader(::SopranoLive::Live< rdfs::Resource > const &mimeHeader_) { baseRemoveObject< nmo::mimeHeader >(mimeHeader_); }

				/* Property generated from nmo:charSet
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1556
				 * \n rdfs:domain=nmo:MimePart
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveCharSets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_charSet "nmo:charSet" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCharSets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::charSet >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCharSets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_charSet "nmo:charSet" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCharSets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::charSet >(object_info, strategy, parent); }
				/*!
					\fn void setCharSets(LiveNodes const &charSet_)
					
					
					Sets the property \ref nmo_charSet "nmo:charSet" set to the given \a charSet_ set.
					\sa LiveResource::setObjects
				 */
				void setCharSets(LiveNodes const &charSet_) { baseSetObjects(nmo::charSet::iri(), charSet_); }
				/*!
					\fn void removeCharSets(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_charSet "nmo:charSet" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCharSets(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::charSet::iri(), object_info); }
				/*!
					\fn QString getCharSet()
					
					
					Returns the property \ref nmo_charSet "nmo:charSet". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getCharSet() { return baseGetObject< nmo::charSet >(); }
				/*!
					\fn void setCharSet(QString const &charSet_)
					
					
					Sets the property \ref nmo_charSet "nmo:charSet" to the given \a charSet.
					\sa LiveResource::setObject
				 */
				void setCharSet(QString const &charSet_) { baseSetObject< nmo::charSet >( charSet_ ); }
				/*!
					\fn QString firstCharSet()
					
					
					Returns the first property \ref nmo_charSet "nmo:charSet". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstCharSet() { return baseFirstObject< nmo::charSet >(); }
				/*!
					\fn void addCharSet(QString const &charSet_)
					
					
					Adds the given \a charSet_ to the property \ref nmo_charSet "nmo:charSet" set.
					\sa LiveResource::addObject
				 */
				void addCharSet(QString const &charSet_) { baseAddObject< nmo::charSet >( charSet_ ); }
				/*!
					\fn void removeCharSet(QString const &charSet_)
					
					
					Removes the given \a charSet_ from the property \ref nmo_charSet "nmo:charSet" set.
					\sa LiveResource::removeObject
				 */
				void removeCharSet(QString const &charSet_) { baseRemoveObject< nmo::charSet >(charSet_); }
				 //@}
			};

			/*! Class generated from nmo:Attachment
			 * \ingroup onto_nmo_classes
			 * 
			 * tracker:modified = 1877
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Attachment
				: public virtual nfo::Attachment, public virtual MimePart

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Attachment"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::Attachment, QPair<MimePart, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Attachment> Live;
				Attachment() { this->attachInterfaceHelper< Attachment >(); }
				~Attachment() { this->detachInterfaceHelper< Attachment >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmo:Message
			 * \ingroup onto_nmo_classes
			 * A message. Could be an email, instant messanging message, SMS message etc.
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1715
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmo_references "nmo:references"
			 * 		\ref nmo_inReplyTo "nmo:inReplyTo"
			 */
			class Message
				: public virtual nfo::TextDocument

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Message"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::TextDocument, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Message> Live;
				Message() { this->attachInterfaceHelper< Message >(); }
				~Message() { this->detachInterfaceHelper< Message >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:sender
				 * \n rdfs:subPropertyOf=nmo:recipient
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:indexed=true
				 * \n tracker:modified=1678
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nco::Contact Contact;
				/*!
					\fn LiveNodes liveSenders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_sender "nmo:sender" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSenders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::sender >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSenders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_sender "nmo:sender" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSenders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::sender >(object_info, strategy, parent); }
				/*!
					\fn void setSenders(LiveNodes const &sender_)
					
					
					Sets the property \ref nmo_sender "nmo:sender" set to the given \a sender_ set.
					\sa LiveResource::setObjects
				 */
				void setSenders(LiveNodes const &sender_) { baseSetObjects(nmo::sender::iri(), sender_); }
				/*!
					\fn void removeSenders(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_sender "nmo:sender" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSenders(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::sender::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > getSender()
					
					
					Returns the property \ref nmo_sender "nmo:sender". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::Contact > getSender() { return baseGetObject< nmo::sender >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > setSender(::SopranoLive::Live< nco::Contact > const &sender_)
					
					
					Sets the property \ref nmo_sender "nmo:sender" to the given \a sender.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::Contact > setSender(::SopranoLive::Live< nco::Contact > const &sender_) { return baseSetObject< nmo::sender >( sender_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstSender()
					
					
					Returns the first property \ref nmo_sender "nmo:sender". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstSender() { return baseFirstObject< nmo::sender >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addSender()
					
					
					Adds a new uniquely named resource to the property \ref nmo_sender "nmo:sender" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addSender() { return baseAddObject< nmo::sender >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addSender(::SopranoLive::Live< nco::Contact > const &sender_)
					
					
					Adds the given \a sender_ to the property \ref nmo_sender "nmo:sender" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addSender(::SopranoLive::Live< nco::Contact > const &sender_) { return baseAddObject< nmo::sender >( sender_ ); }
				/*!
					\fn void removeSender(::SopranoLive::Live< nco::Contact > const &sender_)
					
					
					Removes the given \a sender_ from the property \ref nmo_sender "nmo:sender" set.
					\sa LiveResource::removeObject
				 */
				void removeSender(::SopranoLive::Live< nco::Contact > const &sender_) { baseRemoveObject< nmo::sender >(sender_); }

				/* Property generated from nmo:mmsId
				 * \n Unique identifier of an MMS message. It comes from the server
				 * \n rdfs:label=mms id
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:modified=1845
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMmsIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_mmsId "nmo:mmsId" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMmsIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::mmsId >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMmsIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_mmsId "nmo:mmsId" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMmsIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::mmsId >(object_info, strategy, parent); }
				/*!
					\fn void setMmsIds(LiveNodes const &mmsId_)
					
					
					Sets the property \ref nmo_mmsId "nmo:mmsId" set to the given \a mmsId_ set.
					\sa LiveResource::setObjects
				 */
				void setMmsIds(LiveNodes const &mmsId_) { baseSetObjects(nmo::mmsId::iri(), mmsId_); }
				/*!
					\fn void removeMmsIds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_mmsId "nmo:mmsId" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMmsIds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::mmsId::iri(), object_info); }
				/*!
					\fn QString getMmsId()
					
					
					Returns the property \ref nmo_mmsId "nmo:mmsId". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getMmsId() { return baseGetObject< nmo::mmsId >(); }
				/*!
					\fn void setMmsId(QString const &mmsId_)
					
					
					Sets the property \ref nmo_mmsId "nmo:mmsId" to the given \a mmsId.
					\sa LiveResource::setObject
				 */
				void setMmsId(QString const &mmsId_) { baseSetObject< nmo::mmsId >( mmsId_ ); }
				/*!
					\fn QString firstMmsId()
					
					
					Returns the first property \ref nmo_mmsId "nmo:mmsId". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMmsId() { return baseFirstObject< nmo::mmsId >(); }
				/*!
					\fn void addMmsId(QString const &mmsId_)
					
					
					Adds the given \a mmsId_ to the property \ref nmo_mmsId "nmo:mmsId" set.
					\sa LiveResource::addObject
				 */
				void addMmsId(QString const &mmsId_) { baseAddObject< nmo::mmsId >( mmsId_ ); }
				/*!
					\fn void removeMmsId(QString const &mmsId_)
					
					
					Removes the given \a mmsId_ from the property \ref nmo_mmsId "nmo:mmsId" set.
					\sa LiveResource::removeObject
				 */
				void removeMmsId(QString const &mmsId_) { baseRemoveObject< nmo::mmsId >(mmsId_); }

				/* Property generated from nmo:reportReadStatus
				 * \n If the message was sent with report read enable, this property stores the status of that message: if the recipient has read it, delete it, or we are still waiting for an answer
				 * \n rdfs:label=reportReadStatus
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmo:ReportReadStatus
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:modified=1492
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveReportReadStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_reportReadStatus "nmo:reportReadStatus" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveReportReadStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::reportReadStatus >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getReportReadStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_reportReadStatus "nmo:reportReadStatus" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getReportReadStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::reportReadStatus >(object_info, strategy, parent); }
				/*!
					\fn void setReportReadStatuss(LiveNodes const &reportReadStatus_)
					
					
					Sets the property \ref nmo_reportReadStatus "nmo:reportReadStatus" set to the given \a reportReadStatus_ set.
					\sa LiveResource::setObjects
				 */
				void setReportReadStatuss(LiveNodes const &reportReadStatus_) { baseSetObjects(nmo::reportReadStatus::iri(), reportReadStatus_); }
				/*!
					\fn void removeReportReadStatuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_reportReadStatus "nmo:reportReadStatus" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeReportReadStatuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::reportReadStatus::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< ReportReadStatus > getReportReadStatus()
					
					
					Returns the property \ref nmo_reportReadStatus "nmo:reportReadStatus". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< ReportReadStatus > getReportReadStatus() { return baseGetObject< nmo::reportReadStatus >(); }
				/*!
					\fn ::SopranoLive::Live< ReportReadStatus > setReportReadStatus(::SopranoLive::Live< ReportReadStatus > const &reportReadStatus_)
					
					
					Sets the property \ref nmo_reportReadStatus "nmo:reportReadStatus" to the given \a reportReadStatus.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< ReportReadStatus > setReportReadStatus(::SopranoLive::Live< ReportReadStatus > const &reportReadStatus_) { return baseSetObject< nmo::reportReadStatus >( reportReadStatus_ ); }
				/*!
					\fn ::SopranoLive::Live< ReportReadStatus > firstReportReadStatus()
					
					
					Returns the first property \ref nmo_reportReadStatus "nmo:reportReadStatus". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< ReportReadStatus > firstReportReadStatus() { return baseFirstObject< nmo::reportReadStatus >(); }
				/*!
					\fn ::SopranoLive::Live< ReportReadStatus > addReportReadStatus()
					
					
					Adds a new uniquely named resource to the property \ref nmo_reportReadStatus "nmo:reportReadStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ReportReadStatus > addReportReadStatus() { return baseAddObject< nmo::reportReadStatus >(); }
				/*!
					\fn ::SopranoLive::Live< ReportReadStatus > addReportReadStatus(::SopranoLive::Live< ReportReadStatus > const &reportReadStatus_)
					
					
					Adds the given \a reportReadStatus_ to the property \ref nmo_reportReadStatus "nmo:reportReadStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ReportReadStatus > addReportReadStatus(::SopranoLive::Live< ReportReadStatus > const &reportReadStatus_) { return baseAddObject< nmo::reportReadStatus >( reportReadStatus_ ); }
				/*!
					\fn void removeReportReadStatus(::SopranoLive::Live< ReportReadStatus > const &reportReadStatus_)
					
					
					Removes the given \a reportReadStatus_ from the property \ref nmo_reportReadStatus "nmo:reportReadStatus" set.
					\sa LiveResource::removeObject
				 */
				void removeReportReadStatus(::SopranoLive::Live< ReportReadStatus > const &reportReadStatus_) { baseRemoveObject< nmo::reportReadStatus >(reportReadStatus_); }

				/* Property generated from nmo:sentDate
				 * \n Date when this message was sent.
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:indexed=true
				 * \n tracker:modified=1699
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSentDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_sentDate "nmo:sentDate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSentDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::sentDate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSentDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_sentDate "nmo:sentDate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSentDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::sentDate >(object_info, strategy, parent); }
				/*!
					\fn void setSentDates(LiveNodes const &sentDate_)
					
					
					Sets the property \ref nmo_sentDate "nmo:sentDate" set to the given \a sentDate_ set.
					\sa LiveResource::setObjects
				 */
				void setSentDates(LiveNodes const &sentDate_) { baseSetObjects(nmo::sentDate::iri(), sentDate_); }
				/*!
					\fn void removeSentDates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_sentDate "nmo:sentDate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSentDates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::sentDate::iri(), object_info); }
				/*!
					\fn QDateTime getSentDate()
					
					
					Returns the property \ref nmo_sentDate "nmo:sentDate". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getSentDate() { return baseGetObject< nmo::sentDate >(); }
				/*!
					\fn void setSentDate(QDateTime const &sentDate_)
					
					
					Sets the property \ref nmo_sentDate "nmo:sentDate" to the given \a sentDate.
					\sa LiveResource::setObject
				 */
				void setSentDate(QDateTime const &sentDate_) { baseSetObject< nmo::sentDate >( sentDate_ ); }
				/*!
					\fn QDateTime firstSentDate()
					
					
					Returns the first property \ref nmo_sentDate "nmo:sentDate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstSentDate() { return baseFirstObject< nmo::sentDate >(); }
				/*!
					\fn void addSentDate(QDateTime const &sentDate_)
					
					
					Adds the given \a sentDate_ to the property \ref nmo_sentDate "nmo:sentDate" set.
					\sa LiveResource::addObject
				 */
				void addSentDate(QDateTime const &sentDate_) { baseAddObject< nmo::sentDate >( sentDate_ ); }
				/*!
					\fn void removeSentDate(QDateTime const &sentDate_)
					
					
					Removes the given \a sentDate_ from the property \ref nmo_sentDate "nmo:sentDate" set.
					\sa LiveResource::removeObject
				 */
				void removeSentDate(QDateTime const &sentDate_) { baseRemoveObject< nmo::sentDate >(sentDate_); }

				/* Property generated from nmo:sentWithReportRead
				 * \n The message has been send with a flag indicating that we want to receive a confirmation when the recipient reads it
				 * \n rdfs:label=Report read
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:modified=1161
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSentWithReportReads(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_sentWithReportRead "nmo:sentWithReportRead" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSentWithReportReads(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::sentWithReportRead >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSentWithReportReads(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_sentWithReportRead "nmo:sentWithReportRead" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSentWithReportReads(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::sentWithReportRead >(object_info, strategy, parent); }
				/*!
					\fn void setSentWithReportReads(LiveNodes const &sentWithReportRead_)
					
					
					Sets the property \ref nmo_sentWithReportRead "nmo:sentWithReportRead" set to the given \a sentWithReportRead_ set.
					\sa LiveResource::setObjects
				 */
				void setSentWithReportReads(LiveNodes const &sentWithReportRead_) { baseSetObjects(nmo::sentWithReportRead::iri(), sentWithReportRead_); }
				/*!
					\fn void removeSentWithReportReads(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_sentWithReportRead "nmo:sentWithReportRead" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSentWithReportReads(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::sentWithReportRead::iri(), object_info); }
				/*!
					\fn bool getSentWithReportRead()
					
					
					Returns the property \ref nmo_sentWithReportRead "nmo:sentWithReportRead". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getSentWithReportRead() { return baseGetObject< nmo::sentWithReportRead >(); }
				/*!
					\fn void setSentWithReportRead(bool const &sentWithReportRead_)
					
					
					Sets the property \ref nmo_sentWithReportRead "nmo:sentWithReportRead" to the given \a sentWithReportRead.
					\sa LiveResource::setObject
				 */
				void setSentWithReportRead(bool const &sentWithReportRead_) { baseSetObject< nmo::sentWithReportRead >( sentWithReportRead_ ); }
				/*!
					\fn bool firstSentWithReportRead()
					
					
					Returns the first property \ref nmo_sentWithReportRead "nmo:sentWithReportRead". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstSentWithReportRead() { return baseFirstObject< nmo::sentWithReportRead >(); }
				/*!
					\fn void addSentWithReportRead(bool const &sentWithReportRead_)
					
					
					Adds the given \a sentWithReportRead_ to the property \ref nmo_sentWithReportRead "nmo:sentWithReportRead" set.
					\sa LiveResource::addObject
				 */
				void addSentWithReportRead(bool const &sentWithReportRead_) { baseAddObject< nmo::sentWithReportRead >( sentWithReportRead_ ); }
				/*!
					\fn void removeSentWithReportRead(bool const &sentWithReportRead_)
					
					
					Removes the given \a sentWithReportRead_ from the property \ref nmo_sentWithReportRead "nmo:sentWithReportRead" set.
					\sa LiveResource::removeObject
				 */
				void removeSentWithReportRead(bool const &sentWithReportRead_) { baseRemoveObject< nmo::sentWithReportRead >(sentWithReportRead_); }

				/* Property generated from nmo:receivedDate
				 * \n rdfs:range=xsd:dateTime
				 * \n tracker:modified=1503
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveReceivedDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_receivedDate "nmo:receivedDate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveReceivedDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::receivedDate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getReceivedDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_receivedDate "nmo:receivedDate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getReceivedDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::receivedDate >(object_info, strategy, parent); }
				/*!
					\fn void setReceivedDates(LiveNodes const &receivedDate_)
					
					
					Sets the property \ref nmo_receivedDate "nmo:receivedDate" set to the given \a receivedDate_ set.
					\sa LiveResource::setObjects
				 */
				void setReceivedDates(LiveNodes const &receivedDate_) { baseSetObjects(nmo::receivedDate::iri(), receivedDate_); }
				/*!
					\fn void removeReceivedDates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_receivedDate "nmo:receivedDate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeReceivedDates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::receivedDate::iri(), object_info); }
				/*!
					\fn QDateTime getReceivedDate()
					
					
					Returns the property \ref nmo_receivedDate "nmo:receivedDate". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getReceivedDate() { return baseGetObject< nmo::receivedDate >(); }
				/*!
					\fn void setReceivedDate(QDateTime const &receivedDate_)
					
					
					Sets the property \ref nmo_receivedDate "nmo:receivedDate" to the given \a receivedDate.
					\sa LiveResource::setObject
				 */
				void setReceivedDate(QDateTime const &receivedDate_) { baseSetObject< nmo::receivedDate >( receivedDate_ ); }
				/*!
					\fn QDateTime firstReceivedDate()
					
					
					Returns the first property \ref nmo_receivedDate "nmo:receivedDate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstReceivedDate() { return baseFirstObject< nmo::receivedDate >(); }
				/*!
					\fn void addReceivedDate(QDateTime const &receivedDate_)
					
					
					Adds the given \a receivedDate_ to the property \ref nmo_receivedDate "nmo:receivedDate" set.
					\sa LiveResource::addObject
				 */
				void addReceivedDate(QDateTime const &receivedDate_) { baseAddObject< nmo::receivedDate >( receivedDate_ ); }
				/*!
					\fn void removeReceivedDate(QDateTime const &receivedDate_)
					
					
					Removes the given \a receivedDate_ from the property \ref nmo_receivedDate "nmo:receivedDate" set.
					\sa LiveResource::removeObject
				 */
				void removeReceivedDate(QDateTime const &receivedDate_) { baseRemoveObject< nmo::receivedDate >(receivedDate_); }

				/* Property generated from nmo:from
				 * \n The sender of the message.
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:indexed=true
				 * \n tracker:modified=1040
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_from "nmo:from" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::from >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_from "nmo:from" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::from >(object_info, strategy, parent); }
				/*!
					\fn void setFroms(LiveNodes const &from_)
					
					
					Sets the property \ref nmo_from "nmo:from" set to the given \a from_ set.
					\sa LiveResource::setObjects
				 */
				void setFroms(LiveNodes const &from_) { baseSetObjects(nmo::from::iri(), from_); }
				/*!
					\fn void removeFroms(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_from "nmo:from" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFroms(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::from::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > getFrom()
					
					
					Returns the property \ref nmo_from "nmo:from". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::Contact > getFrom() { return baseGetObject< nmo::from >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > setFrom(::SopranoLive::Live< nco::Contact > const &from_)
					
					
					Sets the property \ref nmo_from "nmo:from" to the given \a from.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::Contact > setFrom(::SopranoLive::Live< nco::Contact > const &from_) { return baseSetObject< nmo::from >( from_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstFrom()
					
					
					Returns the first property \ref nmo_from "nmo:from". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstFrom() { return baseFirstObject< nmo::from >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addFrom()
					
					
					Adds a new uniquely named resource to the property \ref nmo_from "nmo:from" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addFrom() { return baseAddObject< nmo::from >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addFrom(::SopranoLive::Live< nco::Contact > const &from_)
					
					
					Adds the given \a from_ to the property \ref nmo_from "nmo:from" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addFrom(::SopranoLive::Live< nco::Contact > const &from_) { return baseAddObject< nmo::from >( from_ ); }
				/*!
					\fn void removeFrom(::SopranoLive::Live< nco::Contact > const &from_)
					
					
					Removes the given \a from_ from the property \ref nmo_from "nmo:from" set.
					\sa LiveResource::removeObject
				 */
				void removeFrom(::SopranoLive::Live< nco::Contact > const &from_) { baseRemoveObject< nmo::from >(from_); }

				/* Property generated from nmo:plainTextMessageContent
				 * \n nmo:plainTextMessageContent is deprecated, use nie:plainTextContent instead
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1166
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes livePlainTextMessageContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmo::plainTextMessageContent for replacement
					Returns a live model of property \ref nmo_plainTextMessageContent "nmo:plainTextMessageContent" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes livePlainTextMessageContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::plainTextMessageContent >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPlainTextMessageContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmo::plainTextMessageContent for replacement
					Returns all current values of property \ref nmo_plainTextMessageContent "nmo:plainTextMessageContent" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getPlainTextMessageContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::plainTextMessageContent >(object_info, strategy, parent); }
				/*!
					\fn void setPlainTextMessageContents(LiveNodes const &plainTextMessageContent_)
					
					\deprecated See \ref nmo::plainTextMessageContent for replacement
					Sets the property \ref nmo_plainTextMessageContent "nmo:plainTextMessageContent" set to the given \a plainTextMessageContent_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setPlainTextMessageContents(LiveNodes const &plainTextMessageContent_) { baseSetObjects(nmo::plainTextMessageContent::iri(), plainTextMessageContent_); }
				/*!
					\fn void removePlainTextMessageContents(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nmo::plainTextMessageContent for replacement
					Removes the properties from property \ref nmo_plainTextMessageContent "nmo:plainTextMessageContent" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removePlainTextMessageContents(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::plainTextMessageContent::iri(), object_info); }
				/*!
					\fn QString getPlainTextMessageContent()
					
					\deprecated See \ref nmo::plainTextMessageContent for replacement
					Returns the property \ref nmo_plainTextMessageContent "nmo:plainTextMessageContent". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED QString getPlainTextMessageContent() { return baseGetObject< nmo::plainTextMessageContent >(); }
				/*!
					\fn void setPlainTextMessageContent(QString const &plainTextMessageContent_)
					
					\deprecated See \ref nmo::plainTextMessageContent for replacement
					Sets the property \ref nmo_plainTextMessageContent "nmo:plainTextMessageContent" to the given \a plainTextMessageContent.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED void setPlainTextMessageContent(QString const &plainTextMessageContent_) { baseSetObject< nmo::plainTextMessageContent >( plainTextMessageContent_ ); }
				/*!
					\fn QString firstPlainTextMessageContent()
					
					\deprecated See \ref nmo::plainTextMessageContent for replacement
					Returns the first property \ref nmo_plainTextMessageContent "nmo:plainTextMessageContent". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED QString firstPlainTextMessageContent() { return baseFirstObject< nmo::plainTextMessageContent >(); }
				/*!
					\fn void addPlainTextMessageContent(QString const &plainTextMessageContent_)
					
					\deprecated See \ref nmo::plainTextMessageContent for replacement
					Adds the given \a plainTextMessageContent_ to the property \ref nmo_plainTextMessageContent "nmo:plainTextMessageContent" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addPlainTextMessageContent(QString const &plainTextMessageContent_) { baseAddObject< nmo::plainTextMessageContent >( plainTextMessageContent_ ); }
				/*!
					\fn void removePlainTextMessageContent(QString const &plainTextMessageContent_)
					
					\deprecated See \ref nmo::plainTextMessageContent for replacement
					Removes the given \a plainTextMessageContent_ from the property \ref nmo_plainTextMessageContent "nmo:plainTextMessageContent" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removePlainTextMessageContent(QString const &plainTextMessageContent_) { baseRemoveObject< nmo::plainTextMessageContent >(plainTextMessageContent_); }

				/* Property generated from nmo:isRead
				 * \n The messsage has been readed. The user has opened the message or has marked it directly as readed
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1207
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsReads(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_isRead "nmo:isRead" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsReads(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::isRead >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsReads(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_isRead "nmo:isRead" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsReads(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::isRead >(object_info, strategy, parent); }
				/*!
					\fn void setIsReads(LiveNodes const &isRead_)
					
					
					Sets the property \ref nmo_isRead "nmo:isRead" set to the given \a isRead_ set.
					\sa LiveResource::setObjects
				 */
				void setIsReads(LiveNodes const &isRead_) { baseSetObjects(nmo::isRead::iri(), isRead_); }
				/*!
					\fn void removeIsReads(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_isRead "nmo:isRead" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsReads(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::isRead::iri(), object_info); }
				/*!
					\fn bool getIsRead()
					
					
					Returns the property \ref nmo_isRead "nmo:isRead". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsRead() { return baseGetObject< nmo::isRead >(); }
				/*!
					\fn void setIsRead(bool const &isRead_)
					
					
					Sets the property \ref nmo_isRead "nmo:isRead" to the given \a isRead.
					\sa LiveResource::setObject
				 */
				void setIsRead(bool const &isRead_) { baseSetObject< nmo::isRead >( isRead_ ); }
				/*!
					\fn bool firstIsRead()
					
					
					Returns the first property \ref nmo_isRead "nmo:isRead". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsRead() { return baseFirstObject< nmo::isRead >(); }
				/*!
					\fn void addIsRead(bool const &isRead_)
					
					
					Adds the given \a isRead_ to the property \ref nmo_isRead "nmo:isRead" set.
					\sa LiveResource::addObject
				 */
				void addIsRead(bool const &isRead_) { baseAddObject< nmo::isRead >( isRead_ ); }
				/*!
					\fn void removeIsRead(bool const &isRead_)
					
					
					Removes the given \a isRead_ from the property \ref nmo_isRead "nmo:isRead" set.
					\sa LiveResource::removeObject
				 */
				void removeIsRead(bool const &isRead_) { baseRemoveObject< nmo::isRead >(isRead_); }

				/* Property generated from nmo:messageHeader
				 * \n rdfs:range=nmo:MessageHeader
				 * \n tracker:modified=1423
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMessageHeaders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_messageHeader "nmo:messageHeader" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMessageHeaders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::messageHeader >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMessageHeaders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_messageHeader "nmo:messageHeader" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMessageHeaders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::messageHeader >(object_info, strategy, parent); }
				/*!
					\fn void setMessageHeaders(LiveNodes const &messageHeader_)
					
					
					Sets the property \ref nmo_messageHeader "nmo:messageHeader" set to the given \a messageHeader_ set.
					\sa LiveResource::setObjects
				 */
				void setMessageHeaders(LiveNodes const &messageHeader_) { baseSetObjects(nmo::messageHeader::iri(), messageHeader_); }
				/*!
					\fn void removeMessageHeaders(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_messageHeader "nmo:messageHeader" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMessageHeaders(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::messageHeader::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< MessageHeader > firstMessageHeader()
					
					
					Returns the first property \ref nmo_messageHeader "nmo:messageHeader". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< MessageHeader > firstMessageHeader() { return baseFirstObject< nmo::messageHeader >(); }
				/*!
					\fn ::SopranoLive::Live< MessageHeader > addMessageHeader()
					
					
					Adds a new uniquely named resource to the property \ref nmo_messageHeader "nmo:messageHeader" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< MessageHeader > addMessageHeader() { return baseAddObject< nmo::messageHeader >(); }
				/*!
					\fn ::SopranoLive::Live< MessageHeader > addMessageHeader(::SopranoLive::Live< MessageHeader > const &messageHeader_)
					
					
					Adds the given \a messageHeader_ to the property \ref nmo_messageHeader "nmo:messageHeader" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< MessageHeader > addMessageHeader(::SopranoLive::Live< MessageHeader > const &messageHeader_) { return baseAddObject< nmo::messageHeader >( messageHeader_ ); }
				/*!
					\fn void removeMessageHeader(::SopranoLive::Live< MessageHeader > const &messageHeader_)
					
					
					Removes the given \a messageHeader_ from the property \ref nmo_messageHeader "nmo:messageHeader" set.
					\sa LiveResource::removeObject
				 */
				void removeMessageHeader(::SopranoLive::Live< MessageHeader > const &messageHeader_) { baseRemoveObject< nmo::messageHeader >(messageHeader_); }

				/* Property generated from nmo:reportDelivery
				 * \n Report delivery has been requested for the message
				 * \n rdfs:label=Report delivery
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:modified=1323
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveReportDeliverys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_reportDelivery "nmo:reportDelivery" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveReportDeliverys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::reportDelivery >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getReportDeliverys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_reportDelivery "nmo:reportDelivery" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getReportDeliverys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::reportDelivery >(object_info, strategy, parent); }
				/*!
					\fn void setReportDeliverys(LiveNodes const &reportDelivery_)
					
					
					Sets the property \ref nmo_reportDelivery "nmo:reportDelivery" set to the given \a reportDelivery_ set.
					\sa LiveResource::setObjects
				 */
				void setReportDeliverys(LiveNodes const &reportDelivery_) { baseSetObjects(nmo::reportDelivery::iri(), reportDelivery_); }
				/*!
					\fn void removeReportDeliverys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_reportDelivery "nmo:reportDelivery" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeReportDeliverys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::reportDelivery::iri(), object_info); }
				/*!
					\fn bool getReportDelivery()
					
					
					Returns the property \ref nmo_reportDelivery "nmo:reportDelivery". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getReportDelivery() { return baseGetObject< nmo::reportDelivery >(); }
				/*!
					\fn void setReportDelivery(bool const &reportDelivery_)
					
					
					Sets the property \ref nmo_reportDelivery "nmo:reportDelivery" to the given \a reportDelivery.
					\sa LiveResource::setObject
				 */
				void setReportDelivery(bool const &reportDelivery_) { baseSetObject< nmo::reportDelivery >( reportDelivery_ ); }
				/*!
					\fn bool firstReportDelivery()
					
					
					Returns the first property \ref nmo_reportDelivery "nmo:reportDelivery". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstReportDelivery() { return baseFirstObject< nmo::reportDelivery >(); }
				/*!
					\fn void addReportDelivery(bool const &reportDelivery_)
					
					
					Adds the given \a reportDelivery_ to the property \ref nmo_reportDelivery "nmo:reportDelivery" set.
					\sa LiveResource::addObject
				 */
				void addReportDelivery(bool const &reportDelivery_) { baseAddObject< nmo::reportDelivery >( reportDelivery_ ); }
				/*!
					\fn void removeReportDelivery(bool const &reportDelivery_)
					
					
					Removes the given \a reportDelivery_ from the property \ref nmo_reportDelivery "nmo:reportDelivery" set.
					\sa LiveResource::removeObject
				 */
				void removeReportDelivery(bool const &reportDelivery_) { baseRemoveObject< nmo::reportDelivery >(reportDelivery_); }

				/* Property generated from nmo:isAnswered
				 * \n True when the user has sent a replay to this message
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1491
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsAnswereds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_isAnswered "nmo:isAnswered" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsAnswereds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::isAnswered >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsAnswereds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_isAnswered "nmo:isAnswered" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsAnswereds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::isAnswered >(object_info, strategy, parent); }
				/*!
					\fn void setIsAnswereds(LiveNodes const &isAnswered_)
					
					
					Sets the property \ref nmo_isAnswered "nmo:isAnswered" set to the given \a isAnswered_ set.
					\sa LiveResource::setObjects
				 */
				void setIsAnswereds(LiveNodes const &isAnswered_) { baseSetObjects(nmo::isAnswered::iri(), isAnswered_); }
				/*!
					\fn void removeIsAnswereds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_isAnswered "nmo:isAnswered" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsAnswereds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::isAnswered::iri(), object_info); }
				/*!
					\fn bool getIsAnswered()
					
					
					Returns the property \ref nmo_isAnswered "nmo:isAnswered". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsAnswered() { return baseGetObject< nmo::isAnswered >(); }
				/*!
					\fn void setIsAnswered(bool const &isAnswered_)
					
					
					Sets the property \ref nmo_isAnswered "nmo:isAnswered" to the given \a isAnswered.
					\sa LiveResource::setObject
				 */
				void setIsAnswered(bool const &isAnswered_) { baseSetObject< nmo::isAnswered >( isAnswered_ ); }
				/*!
					\fn bool firstIsAnswered()
					
					
					Returns the first property \ref nmo_isAnswered "nmo:isAnswered". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsAnswered() { return baseFirstObject< nmo::isAnswered >(); }
				/*!
					\fn void addIsAnswered(bool const &isAnswered_)
					
					
					Adds the given \a isAnswered_ to the property \ref nmo_isAnswered "nmo:isAnswered" set.
					\sa LiveResource::addObject
				 */
				void addIsAnswered(bool const &isAnswered_) { baseAddObject< nmo::isAnswered >( isAnswered_ ); }
				/*!
					\fn void removeIsAnswered(bool const &isAnswered_)
					
					
					Removes the given \a isAnswered_ from the property \ref nmo_isAnswered "nmo:isAnswered" set.
					\sa LiveResource::removeObject
				 */
				void removeIsAnswered(bool const &isAnswered_) { baseRemoveObject< nmo::isAnswered >(isAnswered_); }

				/* Property generated from nmo:messageId
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1536
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveMessageIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_messageId "nmo:messageId" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMessageIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::messageId >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMessageIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_messageId "nmo:messageId" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMessageIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::messageId >(object_info, strategy, parent); }
				/*!
					\fn void setMessageIds(LiveNodes const &messageId_)
					
					
					Sets the property \ref nmo_messageId "nmo:messageId" set to the given \a messageId_ set.
					\sa LiveResource::setObjects
				 */
				void setMessageIds(LiveNodes const &messageId_) { baseSetObjects(nmo::messageId::iri(), messageId_); }
				/*!
					\fn void removeMessageIds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_messageId "nmo:messageId" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMessageIds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::messageId::iri(), object_info); }
				/*!
					\fn QString getMessageId()
					
					
					Returns the property \ref nmo_messageId "nmo:messageId". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getMessageId() { return baseGetObject< nmo::messageId >(); }
				/*!
					\fn void setMessageId(QString const &messageId_)
					
					
					Sets the property \ref nmo_messageId "nmo:messageId" to the given \a messageId.
					\sa LiveResource::setObject
				 */
				void setMessageId(QString const &messageId_) { baseSetObject< nmo::messageId >( messageId_ ); }
				/*!
					\fn QString firstMessageId()
					
					
					Returns the first property \ref nmo_messageId "nmo:messageId". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMessageId() { return baseFirstObject< nmo::messageId >(); }
				/*!
					\fn void addMessageId(QString const &messageId_)
					
					
					Adds the given \a messageId_ to the property \ref nmo_messageId "nmo:messageId" set.
					\sa LiveResource::addObject
				 */
				void addMessageId(QString const &messageId_) { baseAddObject< nmo::messageId >( messageId_ ); }
				/*!
					\fn void removeMessageId(QString const &messageId_)
					
					
					Removes the given \a messageId_ from the property \ref nmo_messageId "nmo:messageId" set.
					\sa LiveResource::removeObject
				 */
				void removeMessageId(QString const &messageId_) { baseRemoveObject< nmo::messageId >(messageId_); }

				/* Property generated from nmo:recipient
				 * \n rdfs:range=nco:Contact
				 * \n tracker:modified=1723
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRecipients(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_recipient "nmo:recipient" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRecipients(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::recipient >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRecipients(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_recipient "nmo:recipient" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRecipients(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::recipient >(object_info, strategy, parent); }
				/*!
					\fn void setRecipients(LiveNodes const &recipient_)
					
					
					Sets the property \ref nmo_recipient "nmo:recipient" set to the given \a recipient_ set.
					\sa LiveResource::setObjects
				 */
				void setRecipients(LiveNodes const &recipient_) { baseSetObjects(nmo::recipient::iri(), recipient_); }
				/*!
					\fn void removeRecipients(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_recipient "nmo:recipient" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRecipients(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::recipient::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstRecipient()
					
					
					Returns the first property \ref nmo_recipient "nmo:recipient". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstRecipient() { return baseFirstObject< nmo::recipient >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addRecipient()
					
					
					Adds a new uniquely named resource to the property \ref nmo_recipient "nmo:recipient" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addRecipient() { return baseAddObject< nmo::recipient >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addRecipient(::SopranoLive::Live< nco::Contact > const &recipient_)
					
					
					Adds the given \a recipient_ to the property \ref nmo_recipient "nmo:recipient" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addRecipient(::SopranoLive::Live< nco::Contact > const &recipient_) { return baseAddObject< nmo::recipient >( recipient_ ); }
				/*!
					\fn void removeRecipient(::SopranoLive::Live< nco::Contact > const &recipient_)
					
					
					Removes the given \a recipient_ from the property \ref nmo_recipient "nmo:recipient" set.
					\sa LiveResource::removeObject
				 */
				void removeRecipient(::SopranoLive::Live< nco::Contact > const &recipient_) { baseRemoveObject< nmo::recipient >(recipient_); }

				/* Property generated from nmo:messageSubject
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:weight=5
				 * \n tracker:modified=1739
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMessageSubjects(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_messageSubject "nmo:messageSubject" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMessageSubjects(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::messageSubject >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMessageSubjects(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_messageSubject "nmo:messageSubject" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMessageSubjects(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::messageSubject >(object_info, strategy, parent); }
				/*!
					\fn void setMessageSubjects(LiveNodes const &messageSubject_)
					
					
					Sets the property \ref nmo_messageSubject "nmo:messageSubject" set to the given \a messageSubject_ set.
					\sa LiveResource::setObjects
				 */
				void setMessageSubjects(LiveNodes const &messageSubject_) { baseSetObjects(nmo::messageSubject::iri(), messageSubject_); }
				/*!
					\fn void removeMessageSubjects(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_messageSubject "nmo:messageSubject" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMessageSubjects(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::messageSubject::iri(), object_info); }
				/*!
					\fn QString getMessageSubject()
					
					
					Returns the property \ref nmo_messageSubject "nmo:messageSubject". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getMessageSubject() { return baseGetObject< nmo::messageSubject >(); }
				/*!
					\fn void setMessageSubject(QString const &messageSubject_)
					
					
					Sets the property \ref nmo_messageSubject "nmo:messageSubject" to the given \a messageSubject.
					\sa LiveResource::setObject
				 */
				void setMessageSubject(QString const &messageSubject_) { baseSetObject< nmo::messageSubject >( messageSubject_ ); }
				/*!
					\fn QString firstMessageSubject()
					
					
					Returns the first property \ref nmo_messageSubject "nmo:messageSubject". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMessageSubject() { return baseFirstObject< nmo::messageSubject >(); }
				/*!
					\fn void addMessageSubject(QString const &messageSubject_)
					
					
					Adds the given \a messageSubject_ to the property \ref nmo_messageSubject "nmo:messageSubject" set.
					\sa LiveResource::addObject
				 */
				void addMessageSubject(QString const &messageSubject_) { baseAddObject< nmo::messageSubject >( messageSubject_ ); }
				/*!
					\fn void removeMessageSubject(QString const &messageSubject_)
					
					
					Removes the given \a messageSubject_ from the property \ref nmo_messageSubject "nmo:messageSubject" set.
					\sa LiveResource::removeObject
				 */
				void removeMessageSubject(QString const &messageSubject_) { baseRemoveObject< nmo::messageSubject >(messageSubject_); }

				/* Property generated from nmo:hasAttachment
				 * \n rdfs:range=nfo:Attachment
				 * \n tracker:modified=1371
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nfo::Attachment Attachment;
				/*!
					\fn LiveNodes liveHasAttachments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_hasAttachment "nmo:hasAttachment" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasAttachments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::hasAttachment >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasAttachments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_hasAttachment "nmo:hasAttachment" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasAttachments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::hasAttachment >(object_info, strategy, parent); }
				/*!
					\fn void setHasAttachments(LiveNodes const &hasAttachment_)
					
					
					Sets the property \ref nmo_hasAttachment "nmo:hasAttachment" set to the given \a hasAttachment_ set.
					\sa LiveResource::setObjects
				 */
				void setHasAttachments(LiveNodes const &hasAttachment_) { baseSetObjects(nmo::hasAttachment::iri(), hasAttachment_); }
				/*!
					\fn void removeHasAttachments(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_hasAttachment "nmo:hasAttachment" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasAttachments(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::hasAttachment::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::Attachment > firstHasAttachment()
					
					
					Returns the first property \ref nmo_hasAttachment "nmo:hasAttachment". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::Attachment > firstHasAttachment() { return baseFirstObject< nmo::hasAttachment >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::Attachment > addHasAttachment()
					
					
					Adds a new uniquely named resource to the property \ref nmo_hasAttachment "nmo:hasAttachment" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::Attachment > addHasAttachment() { return baseAddObject< nmo::hasAttachment >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::Attachment > addHasAttachment(::SopranoLive::Live< nfo::Attachment > const &hasAttachment_)
					
					
					Adds the given \a hasAttachment_ to the property \ref nmo_hasAttachment "nmo:hasAttachment" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::Attachment > addHasAttachment(::SopranoLive::Live< nfo::Attachment > const &hasAttachment_) { return baseAddObject< nmo::hasAttachment >( hasAttachment_ ); }
				/*!
					\fn void removeHasAttachment(::SopranoLive::Live< nfo::Attachment > const &hasAttachment_)
					
					
					Removes the given \a hasAttachment_ from the property \ref nmo_hasAttachment "nmo:hasAttachment" set.
					\sa LiveResource::removeObject
				 */
				void removeHasAttachment(::SopranoLive::Live< nfo::Attachment > const &hasAttachment_) { baseRemoveObject< nmo::hasAttachment >(hasAttachment_); }

				/* Property generated from nmo:isSent
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1997
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsSents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_isSent "nmo:isSent" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsSents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::isSent >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsSents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_isSent "nmo:isSent" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsSents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::isSent >(object_info, strategy, parent); }
				/*!
					\fn void setIsSents(LiveNodes const &isSent_)
					
					
					Sets the property \ref nmo_isSent "nmo:isSent" set to the given \a isSent_ set.
					\sa LiveResource::setObjects
				 */
				void setIsSents(LiveNodes const &isSent_) { baseSetObjects(nmo::isSent::iri(), isSent_); }
				/*!
					\fn void removeIsSents(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_isSent "nmo:isSent" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsSents(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::isSent::iri(), object_info); }
				/*!
					\fn bool getIsSent()
					
					
					Returns the property \ref nmo_isSent "nmo:isSent". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsSent() { return baseGetObject< nmo::isSent >(); }
				/*!
					\fn void setIsSent(bool const &isSent_)
					
					
					Sets the property \ref nmo_isSent "nmo:isSent" to the given \a isSent.
					\sa LiveResource::setObject
				 */
				void setIsSent(bool const &isSent_) { baseSetObject< nmo::isSent >( isSent_ ); }
				/*!
					\fn bool firstIsSent()
					
					
					Returns the first property \ref nmo_isSent "nmo:isSent". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsSent() { return baseFirstObject< nmo::isSent >(); }
				/*!
					\fn void addIsSent(bool const &isSent_)
					
					
					Adds the given \a isSent_ to the property \ref nmo_isSent "nmo:isSent" set.
					\sa LiveResource::addObject
				 */
				void addIsSent(bool const &isSent_) { baseAddObject< nmo::isSent >( isSent_ ); }
				/*!
					\fn void removeIsSent(bool const &isSent_)
					
					
					Removes the given \a isSent_ from the property \ref nmo_isSent "nmo:isSent" set.
					\sa LiveResource::removeObject
				 */
				void removeIsSent(bool const &isSent_) { baseRemoveObject< nmo::isSent >(isSent_); }

				/* Property generated from nmo:communicationChannel
				 * \n Connects this message to a communication channel. Every message must only be in a single channel.
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmo:CommunicationChannel
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:secondaryIndex=Unknown text
				 * \n tracker:indexed=true
				 * \n tracker:modified=1138
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCommunicationChannels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_communicationChannel "nmo:communicationChannel" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCommunicationChannels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::communicationChannel >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCommunicationChannels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_communicationChannel "nmo:communicationChannel" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCommunicationChannels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::communicationChannel >(object_info, strategy, parent); }
				/*!
					\fn void setCommunicationChannels(LiveNodes const &communicationChannel_)
					
					
					Sets the property \ref nmo_communicationChannel "nmo:communicationChannel" set to the given \a communicationChannel_ set.
					\sa LiveResource::setObjects
				 */
				void setCommunicationChannels(LiveNodes const &communicationChannel_) { baseSetObjects(nmo::communicationChannel::iri(), communicationChannel_); }
				/*!
					\fn void removeCommunicationChannels(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_communicationChannel "nmo:communicationChannel" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCommunicationChannels(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::communicationChannel::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< CommunicationChannel > getCommunicationChannel()
					
					
					Returns the property \ref nmo_communicationChannel "nmo:communicationChannel". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< CommunicationChannel > getCommunicationChannel() { return baseGetObject< nmo::communicationChannel >(); }
				/*!
					\fn ::SopranoLive::Live< CommunicationChannel > setCommunicationChannel(::SopranoLive::Live< CommunicationChannel > const &communicationChannel_)
					
					
					Sets the property \ref nmo_communicationChannel "nmo:communicationChannel" to the given \a communicationChannel.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< CommunicationChannel > setCommunicationChannel(::SopranoLive::Live< CommunicationChannel > const &communicationChannel_) { return baseSetObject< nmo::communicationChannel >( communicationChannel_ ); }
				/*!
					\fn ::SopranoLive::Live< CommunicationChannel > firstCommunicationChannel()
					
					
					Returns the first property \ref nmo_communicationChannel "nmo:communicationChannel". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< CommunicationChannel > firstCommunicationChannel() { return baseFirstObject< nmo::communicationChannel >(); }
				/*!
					\fn ::SopranoLive::Live< CommunicationChannel > addCommunicationChannel()
					
					
					Adds a new uniquely named resource to the property \ref nmo_communicationChannel "nmo:communicationChannel" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CommunicationChannel > addCommunicationChannel() { return baseAddObject< nmo::communicationChannel >(); }
				/*!
					\fn ::SopranoLive::Live< CommunicationChannel > addCommunicationChannel(::SopranoLive::Live< CommunicationChannel > const &communicationChannel_)
					
					
					Adds the given \a communicationChannel_ to the property \ref nmo_communicationChannel "nmo:communicationChannel" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CommunicationChannel > addCommunicationChannel(::SopranoLive::Live< CommunicationChannel > const &communicationChannel_) { return baseAddObject< nmo::communicationChannel >( communicationChannel_ ); }
				/*!
					\fn void removeCommunicationChannel(::SopranoLive::Live< CommunicationChannel > const &communicationChannel_)
					
					
					Removes the given \a communicationChannel_ from the property \ref nmo_communicationChannel "nmo:communicationChannel" set.
					\sa LiveResource::removeObject
				 */
				void removeCommunicationChannel(::SopranoLive::Live< CommunicationChannel > const &communicationChannel_) { baseRemoveObject< nmo::communicationChannel >(communicationChannel_); }

				/* Property generated from nmo:bcc
				 * \n rdfs:range=nco:Contact
				 * \n tracker:modified=1817
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBccs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_bcc "nmo:bcc" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBccs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::bcc >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBccs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_bcc "nmo:bcc" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBccs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::bcc >(object_info, strategy, parent); }
				/*!
					\fn void setBccs(LiveNodes const &bcc_)
					
					
					Sets the property \ref nmo_bcc "nmo:bcc" set to the given \a bcc_ set.
					\sa LiveResource::setObjects
				 */
				void setBccs(LiveNodes const &bcc_) { baseSetObjects(nmo::bcc::iri(), bcc_); }
				/*!
					\fn void removeBccs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_bcc "nmo:bcc" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBccs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::bcc::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstBcc()
					
					
					Returns the first property \ref nmo_bcc "nmo:bcc". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstBcc() { return baseFirstObject< nmo::bcc >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addBcc()
					
					
					Adds a new uniquely named resource to the property \ref nmo_bcc "nmo:bcc" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addBcc() { return baseAddObject< nmo::bcc >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addBcc(::SopranoLive::Live< nco::Contact > const &bcc_)
					
					
					Adds the given \a bcc_ to the property \ref nmo_bcc "nmo:bcc" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addBcc(::SopranoLive::Live< nco::Contact > const &bcc_) { return baseAddObject< nmo::bcc >( bcc_ ); }
				/*!
					\fn void removeBcc(::SopranoLive::Live< nco::Contact > const &bcc_)
					
					
					Removes the given \a bcc_ from the property \ref nmo_bcc "nmo:bcc" set.
					\sa LiveResource::removeObject
				 */
				void removeBcc(::SopranoLive::Live< nco::Contact > const &bcc_) { baseRemoveObject< nmo::bcc >(bcc_); }

				/* Property generated from nmo:conversation
				 * \n Connects this message to a conversation. Every message must only be part of a single conversation.
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmo:Conversation
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:indexed=true
				 * \n tracker:modified=1118
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveConversations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_conversation "nmo:conversation" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveConversations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::conversation >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getConversations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_conversation "nmo:conversation" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getConversations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::conversation >(object_info, strategy, parent); }
				/*!
					\fn void setConversations(LiveNodes const &conversation_)
					
					
					Sets the property \ref nmo_conversation "nmo:conversation" set to the given \a conversation_ set.
					\sa LiveResource::setObjects
				 */
				void setConversations(LiveNodes const &conversation_) { baseSetObjects(nmo::conversation::iri(), conversation_); }
				/*!
					\fn void removeConversations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_conversation "nmo:conversation" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeConversations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::conversation::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Conversation > getConversation()
					
					
					Returns the property \ref nmo_conversation "nmo:conversation". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Conversation > getConversation() { return baseGetObject< nmo::conversation >(); }
				/*!
					\fn ::SopranoLive::Live< Conversation > setConversation(::SopranoLive::Live< Conversation > const &conversation_)
					
					
					Sets the property \ref nmo_conversation "nmo:conversation" to the given \a conversation.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Conversation > setConversation(::SopranoLive::Live< Conversation > const &conversation_) { return baseSetObject< nmo::conversation >( conversation_ ); }
				/*!
					\fn ::SopranoLive::Live< Conversation > firstConversation()
					
					
					Returns the first property \ref nmo_conversation "nmo:conversation". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Conversation > firstConversation() { return baseFirstObject< nmo::conversation >(); }
				/*!
					\fn ::SopranoLive::Live< Conversation > addConversation()
					
					
					Adds a new uniquely named resource to the property \ref nmo_conversation "nmo:conversation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Conversation > addConversation() { return baseAddObject< nmo::conversation >(); }
				/*!
					\fn ::SopranoLive::Live< Conversation > addConversation(::SopranoLive::Live< Conversation > const &conversation_)
					
					
					Adds the given \a conversation_ to the property \ref nmo_conversation "nmo:conversation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Conversation > addConversation(::SopranoLive::Live< Conversation > const &conversation_) { return baseAddObject< nmo::conversation >( conversation_ ); }
				/*!
					\fn void removeConversation(::SopranoLive::Live< Conversation > const &conversation_)
					
					
					Removes the given \a conversation_ from the property \ref nmo_conversation "nmo:conversation" set.
					\sa LiveResource::removeObject
				 */
				void removeConversation(::SopranoLive::Live< Conversation > const &conversation_) { baseRemoveObject< nmo::conversation >(conversation_); }

				/* Property generated from nmo:deliveryStatus
				 * \n rdfs:label=deliveryStatus
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmo:DeliveryStatus
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:modified=1473
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDeliveryStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_deliveryStatus "nmo:deliveryStatus" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDeliveryStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::deliveryStatus >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDeliveryStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_deliveryStatus "nmo:deliveryStatus" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDeliveryStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::deliveryStatus >(object_info, strategy, parent); }
				/*!
					\fn void setDeliveryStatuss(LiveNodes const &deliveryStatus_)
					
					
					Sets the property \ref nmo_deliveryStatus "nmo:deliveryStatus" set to the given \a deliveryStatus_ set.
					\sa LiveResource::setObjects
				 */
				void setDeliveryStatuss(LiveNodes const &deliveryStatus_) { baseSetObjects(nmo::deliveryStatus::iri(), deliveryStatus_); }
				/*!
					\fn void removeDeliveryStatuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_deliveryStatus "nmo:deliveryStatus" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDeliveryStatuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::deliveryStatus::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< DeliveryStatus > getDeliveryStatus()
					
					
					Returns the property \ref nmo_deliveryStatus "nmo:deliveryStatus". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< DeliveryStatus > getDeliveryStatus() { return baseGetObject< nmo::deliveryStatus >(); }
				/*!
					\fn ::SopranoLive::Live< DeliveryStatus > setDeliveryStatus(::SopranoLive::Live< DeliveryStatus > const &deliveryStatus_)
					
					
					Sets the property \ref nmo_deliveryStatus "nmo:deliveryStatus" to the given \a deliveryStatus.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< DeliveryStatus > setDeliveryStatus(::SopranoLive::Live< DeliveryStatus > const &deliveryStatus_) { return baseSetObject< nmo::deliveryStatus >( deliveryStatus_ ); }
				/*!
					\fn ::SopranoLive::Live< DeliveryStatus > firstDeliveryStatus()
					
					
					Returns the first property \ref nmo_deliveryStatus "nmo:deliveryStatus". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< DeliveryStatus > firstDeliveryStatus() { return baseFirstObject< nmo::deliveryStatus >(); }
				/*!
					\fn ::SopranoLive::Live< DeliveryStatus > addDeliveryStatus()
					
					
					Adds a new uniquely named resource to the property \ref nmo_deliveryStatus "nmo:deliveryStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DeliveryStatus > addDeliveryStatus() { return baseAddObject< nmo::deliveryStatus >(); }
				/*!
					\fn ::SopranoLive::Live< DeliveryStatus > addDeliveryStatus(::SopranoLive::Live< DeliveryStatus > const &deliveryStatus_)
					
					
					Adds the given \a deliveryStatus_ to the property \ref nmo_deliveryStatus "nmo:deliveryStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DeliveryStatus > addDeliveryStatus(::SopranoLive::Live< DeliveryStatus > const &deliveryStatus_) { return baseAddObject< nmo::deliveryStatus >( deliveryStatus_ ); }
				/*!
					\fn void removeDeliveryStatus(::SopranoLive::Live< DeliveryStatus > const &deliveryStatus_)
					
					
					Removes the given \a deliveryStatus_ from the property \ref nmo_deliveryStatus "nmo:deliveryStatus" set.
					\sa LiveResource::removeObject
				 */
				void removeDeliveryStatus(::SopranoLive::Live< DeliveryStatus > const &deliveryStatus_) { baseRemoveObject< nmo::deliveryStatus >(deliveryStatus_); }

				/* Property generated from nmo:cc
				 * \n rdfs:range=nco:Contact
				 * \n tracker:modified=1426
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCcs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_cc "nmo:cc" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCcs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::cc >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCcs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_cc "nmo:cc" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCcs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::cc >(object_info, strategy, parent); }
				/*!
					\fn void setCcs(LiveNodes const &cc_)
					
					
					Sets the property \ref nmo_cc "nmo:cc" set to the given \a cc_ set.
					\sa LiveResource::setObjects
				 */
				void setCcs(LiveNodes const &cc_) { baseSetObjects(nmo::cc::iri(), cc_); }
				/*!
					\fn void removeCcs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_cc "nmo:cc" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCcs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::cc::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstCc()
					
					
					Returns the first property \ref nmo_cc "nmo:cc". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstCc() { return baseFirstObject< nmo::cc >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addCc()
					
					
					Adds a new uniquely named resource to the property \ref nmo_cc "nmo:cc" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addCc() { return baseAddObject< nmo::cc >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addCc(::SopranoLive::Live< nco::Contact > const &cc_)
					
					
					Adds the given \a cc_ to the property \ref nmo_cc "nmo:cc" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addCc(::SopranoLive::Live< nco::Contact > const &cc_) { return baseAddObject< nmo::cc >( cc_ ); }
				/*!
					\fn void removeCc(::SopranoLive::Live< nco::Contact > const &cc_)
					
					
					Removes the given \a cc_ from the property \ref nmo_cc "nmo:cc" set.
					\sa LiveResource::removeObject
				 */
				void removeCc(::SopranoLive::Live< nco::Contact > const &cc_) { baseRemoveObject< nmo::cc >(cc_); }

				/* Property generated from nmo:mustAnswerReportRead
				 * \n The message came with the report-read flag enabled, and somebody must be send the answer back. Once the report is sent, this property goes to False.
				 * \n rdfs:label=Report read requested
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:modified=1579
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMustAnswerReportReads(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_mustAnswerReportRead "nmo:mustAnswerReportRead" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMustAnswerReportReads(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::mustAnswerReportRead >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMustAnswerReportReads(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_mustAnswerReportRead "nmo:mustAnswerReportRead" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMustAnswerReportReads(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::mustAnswerReportRead >(object_info, strategy, parent); }
				/*!
					\fn void setMustAnswerReportReads(LiveNodes const &mustAnswerReportRead_)
					
					
					Sets the property \ref nmo_mustAnswerReportRead "nmo:mustAnswerReportRead" set to the given \a mustAnswerReportRead_ set.
					\sa LiveResource::setObjects
				 */
				void setMustAnswerReportReads(LiveNodes const &mustAnswerReportRead_) { baseSetObjects(nmo::mustAnswerReportRead::iri(), mustAnswerReportRead_); }
				/*!
					\fn void removeMustAnswerReportReads(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_mustAnswerReportRead "nmo:mustAnswerReportRead" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMustAnswerReportReads(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::mustAnswerReportRead::iri(), object_info); }
				/*!
					\fn bool getMustAnswerReportRead()
					
					
					Returns the property \ref nmo_mustAnswerReportRead "nmo:mustAnswerReportRead". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getMustAnswerReportRead() { return baseGetObject< nmo::mustAnswerReportRead >(); }
				/*!
					\fn void setMustAnswerReportRead(bool const &mustAnswerReportRead_)
					
					
					Sets the property \ref nmo_mustAnswerReportRead "nmo:mustAnswerReportRead" to the given \a mustAnswerReportRead.
					\sa LiveResource::setObject
				 */
				void setMustAnswerReportRead(bool const &mustAnswerReportRead_) { baseSetObject< nmo::mustAnswerReportRead >( mustAnswerReportRead_ ); }
				/*!
					\fn bool firstMustAnswerReportRead()
					
					
					Returns the first property \ref nmo_mustAnswerReportRead "nmo:mustAnswerReportRead". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstMustAnswerReportRead() { return baseFirstObject< nmo::mustAnswerReportRead >(); }
				/*!
					\fn void addMustAnswerReportRead(bool const &mustAnswerReportRead_)
					
					
					Adds the given \a mustAnswerReportRead_ to the property \ref nmo_mustAnswerReportRead "nmo:mustAnswerReportRead" set.
					\sa LiveResource::addObject
				 */
				void addMustAnswerReportRead(bool const &mustAnswerReportRead_) { baseAddObject< nmo::mustAnswerReportRead >( mustAnswerReportRead_ ); }
				/*!
					\fn void removeMustAnswerReportRead(bool const &mustAnswerReportRead_)
					
					
					Removes the given \a mustAnswerReportRead_ from the property \ref nmo_mustAnswerReportRead "nmo:mustAnswerReportRead" set.
					\sa LiveResource::removeObject
				 */
				void removeMustAnswerReportRead(bool const &mustAnswerReportRead_) { baseRemoveObject< nmo::mustAnswerReportRead >(mustAnswerReportRead_); }

				/* Property generated from nmo:replyTo
				 * \n rdfs:range=nco:Contact
				 * \n tracker:modified=1913
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveReplyTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_replyTo "nmo:replyTo" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveReplyTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::replyTo >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getReplyTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_replyTo "nmo:replyTo" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getReplyTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::replyTo >(object_info, strategy, parent); }
				/*!
					\fn void setReplyTos(LiveNodes const &replyTo_)
					
					
					Sets the property \ref nmo_replyTo "nmo:replyTo" set to the given \a replyTo_ set.
					\sa LiveResource::setObjects
				 */
				void setReplyTos(LiveNodes const &replyTo_) { baseSetObjects(nmo::replyTo::iri(), replyTo_); }
				/*!
					\fn void removeReplyTos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_replyTo "nmo:replyTo" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeReplyTos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::replyTo::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > getReplyTo()
					
					
					Returns the property \ref nmo_replyTo "nmo:replyTo". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::Contact > getReplyTo() { return baseGetObject< nmo::replyTo >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > setReplyTo(::SopranoLive::Live< nco::Contact > const &replyTo_)
					
					
					Sets the property \ref nmo_replyTo "nmo:replyTo" to the given \a replyTo.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::Contact > setReplyTo(::SopranoLive::Live< nco::Contact > const &replyTo_) { return baseSetObject< nmo::replyTo >( replyTo_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstReplyTo()
					
					
					Returns the first property \ref nmo_replyTo "nmo:replyTo". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstReplyTo() { return baseFirstObject< nmo::replyTo >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addReplyTo()
					
					
					Adds a new uniquely named resource to the property \ref nmo_replyTo "nmo:replyTo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addReplyTo() { return baseAddObject< nmo::replyTo >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addReplyTo(::SopranoLive::Live< nco::Contact > const &replyTo_)
					
					
					Adds the given \a replyTo_ to the property \ref nmo_replyTo "nmo:replyTo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addReplyTo(::SopranoLive::Live< nco::Contact > const &replyTo_) { return baseAddObject< nmo::replyTo >( replyTo_ ); }
				/*!
					\fn void removeReplyTo(::SopranoLive::Live< nco::Contact > const &replyTo_)
					
					
					Removes the given \a replyTo_ from the property \ref nmo_replyTo "nmo:replyTo" set.
					\sa LiveResource::removeObject
				 */
				void removeReplyTo(::SopranoLive::Live< nco::Contact > const &replyTo_) { baseRemoveObject< nmo::replyTo >(replyTo_); }

				/* Property generated from nmo:to
				 * \n rdfs:range=nco:Contact
				 * \n tracker:indexed=true
				 * \n tracker:modified=1655
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_to "nmo:to" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::to >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_to "nmo:to" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::to >(object_info, strategy, parent); }
				/*!
					\fn void setTos(LiveNodes const &to_)
					
					
					Sets the property \ref nmo_to "nmo:to" set to the given \a to_ set.
					\sa LiveResource::setObjects
				 */
				void setTos(LiveNodes const &to_) { baseSetObjects(nmo::to::iri(), to_); }
				/*!
					\fn void removeTos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_to "nmo:to" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::to::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstTo()
					
					
					Returns the first property \ref nmo_to "nmo:to". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstTo() { return baseFirstObject< nmo::to >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addTo()
					
					
					Adds a new uniquely named resource to the property \ref nmo_to "nmo:to" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addTo() { return baseAddObject< nmo::to >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addTo(::SopranoLive::Live< nco::Contact > const &to_)
					
					
					Adds the given \a to_ to the property \ref nmo_to "nmo:to" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addTo(::SopranoLive::Live< nco::Contact > const &to_) { return baseAddObject< nmo::to >( to_ ); }
				/*!
					\fn void removeTo(::SopranoLive::Live< nco::Contact > const &to_)
					
					
					Removes the given \a to_ from the property \ref nmo_to "nmo:to" set.
					\sa LiveResource::removeObject
				 */
				void removeTo(::SopranoLive::Live< nco::Contact > const &to_) { baseRemoveObject< nmo::to >(to_); }

				/* Property generated from nmo:inReplyTo
				 * \n rdfs:range=nmo:Message
				 * \n tracker:modified=1143
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n rdfs:subPropertyOf=nmo:references
				 */
				/*!
					\fn LiveNodes liveInReplyTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_inReplyTo "nmo:inReplyTo" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveInReplyTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::inReplyTo >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getInReplyTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_inReplyTo "nmo:inReplyTo" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getInReplyTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::inReplyTo >(object_info, strategy, parent); }
				/*!
					\fn void setInReplyTos(LiveNodes const &inReplyTo_)
					
					
					Sets the property \ref nmo_inReplyTo "nmo:inReplyTo" set to the given \a inReplyTo_ set.
					\sa LiveResource::setObjects
				 */
				void setInReplyTos(LiveNodes const &inReplyTo_) { baseSetObjects(nmo::inReplyTo::iri(), inReplyTo_); }
				/*!
					\fn void removeInReplyTos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_inReplyTo "nmo:inReplyTo" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeInReplyTos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::inReplyTo::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Message > firstInReplyTo()
					
					
					Returns the first property \ref nmo_inReplyTo "nmo:inReplyTo". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Message > firstInReplyTo() { return baseFirstObject< nmo::inReplyTo >(); }
				/*!
					\fn ::SopranoLive::Live< Message > addInReplyTo()
					
					
					Adds a new uniquely named resource to the property \ref nmo_inReplyTo "nmo:inReplyTo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Message > addInReplyTo() { return baseAddObject< nmo::inReplyTo >(); }
				/*!
					\fn ::SopranoLive::Live< Message > addInReplyTo(::SopranoLive::Live< Message > const &inReplyTo_)
					
					
					Adds the given \a inReplyTo_ to the property \ref nmo_inReplyTo "nmo:inReplyTo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Message > addInReplyTo(::SopranoLive::Live< Message > const &inReplyTo_) { return baseAddObject< nmo::inReplyTo >( inReplyTo_ ); }
				/*!
					\fn void removeInReplyTo(::SopranoLive::Live< Message > const &inReplyTo_)
					
					
					Removes the given \a inReplyTo_ from the property \ref nmo_inReplyTo "nmo:inReplyTo" set.
					\sa LiveResource::removeObject
				 */
				void removeInReplyTo(::SopranoLive::Live< Message > const &inReplyTo_) { baseRemoveObject< nmo::inReplyTo >(inReplyTo_); }

				/* Property generated from nmo:references
				 * \n rdfs:range=nmo:Message
				 * \n tracker:modified=1855
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveReferencess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_references "nmo:references" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveReferencess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::references >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getReferencess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_references "nmo:references" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getReferencess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::references >(object_info, strategy, parent); }
				/*!
					\fn void setReferencess(LiveNodes const &references_)
					
					
					Sets the property \ref nmo_references "nmo:references" set to the given \a references_ set.
					\sa LiveResource::setObjects
				 */
				void setReferencess(LiveNodes const &references_) { baseSetObjects(nmo::references::iri(), references_); }
				/*!
					\fn void removeReferencess(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_references "nmo:references" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeReferencess(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::references::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Message > firstReferences()
					
					
					Returns the first property \ref nmo_references "nmo:references". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Message > firstReferences() { return baseFirstObject< nmo::references >(); }
				/*!
					\fn ::SopranoLive::Live< Message > addReferences()
					
					
					Adds a new uniquely named resource to the property \ref nmo_references "nmo:references" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Message > addReferences() { return baseAddObject< nmo::references >(); }
				/*!
					\fn ::SopranoLive::Live< Message > addReferences(::SopranoLive::Live< Message > const &references_)
					
					
					Adds the given \a references_ to the property \ref nmo_references "nmo:references" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Message > addReferences(::SopranoLive::Live< Message > const &references_) { return baseAddObject< nmo::references >( references_ ); }
				/*!
					\fn void removeReferences(::SopranoLive::Live< Message > const &references_)
					
					
					Removes the given \a references_ from the property \ref nmo_references "nmo:references" set.
					\sa LiveResource::removeObject
				 */
				void removeReferences(::SopranoLive::Live< Message > const &references_) { baseRemoveObject< nmo::references >(references_); }

				/* Property generated from nmo:isEmergency
				 * \n Special message from the network, probably coming via Cell broadcasting with emergency information
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1671
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsEmergencys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_isEmergency "nmo:isEmergency" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsEmergencys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::isEmergency >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsEmergencys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_isEmergency "nmo:isEmergency" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsEmergencys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::isEmergency >(object_info, strategy, parent); }
				/*!
					\fn void setIsEmergencys(LiveNodes const &isEmergency_)
					
					
					Sets the property \ref nmo_isEmergency "nmo:isEmergency" set to the given \a isEmergency_ set.
					\sa LiveResource::setObjects
				 */
				void setIsEmergencys(LiveNodes const &isEmergency_) { baseSetObjects(nmo::isEmergency::iri(), isEmergency_); }
				/*!
					\fn void removeIsEmergencys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_isEmergency "nmo:isEmergency" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsEmergencys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::isEmergency::iri(), object_info); }
				/*!
					\fn bool getIsEmergency()
					
					
					Returns the property \ref nmo_isEmergency "nmo:isEmergency". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsEmergency() { return baseGetObject< nmo::isEmergency >(); }
				/*!
					\fn void setIsEmergency(bool const &isEmergency_)
					
					
					Sets the property \ref nmo_isEmergency "nmo:isEmergency" to the given \a isEmergency.
					\sa LiveResource::setObject
				 */
				void setIsEmergency(bool const &isEmergency_) { baseSetObject< nmo::isEmergency >( isEmergency_ ); }
				/*!
					\fn bool firstIsEmergency()
					
					
					Returns the first property \ref nmo_isEmergency "nmo:isEmergency". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsEmergency() { return baseFirstObject< nmo::isEmergency >(); }
				/*!
					\fn void addIsEmergency(bool const &isEmergency_)
					
					
					Adds the given \a isEmergency_ to the property \ref nmo_isEmergency "nmo:isEmergency" set.
					\sa LiveResource::addObject
				 */
				void addIsEmergency(bool const &isEmergency_) { baseAddObject< nmo::isEmergency >( isEmergency_ ); }
				/*!
					\fn void removeIsEmergency(bool const &isEmergency_)
					
					
					Removes the given \a isEmergency_ from the property \ref nmo_isEmergency "nmo:isEmergency" set.
					\sa LiveResource::removeObject
				 */
				void removeIsEmergency(bool const &isEmergency_) { baseRemoveObject< nmo::isEmergency >(isEmergency_); }

				/* Property generated from nmo:isDeleted
				 * \n True when the user has removed the Email in the UI but still exists in the DB. Usually a purge or confirmation from the user will actually remove the data.
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1991
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsDeleteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_isDeleted "nmo:isDeleted" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsDeleteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::isDeleted >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsDeleteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_isDeleted "nmo:isDeleted" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsDeleteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::isDeleted >(object_info, strategy, parent); }
				/*!
					\fn void setIsDeleteds(LiveNodes const &isDeleted_)
					
					
					Sets the property \ref nmo_isDeleted "nmo:isDeleted" set to the given \a isDeleted_ set.
					\sa LiveResource::setObjects
				 */
				void setIsDeleteds(LiveNodes const &isDeleted_) { baseSetObjects(nmo::isDeleted::iri(), isDeleted_); }
				/*!
					\fn void removeIsDeleteds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_isDeleted "nmo:isDeleted" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsDeleteds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::isDeleted::iri(), object_info); }
				/*!
					\fn bool getIsDeleted()
					
					
					Returns the property \ref nmo_isDeleted "nmo:isDeleted". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsDeleted() { return baseGetObject< nmo::isDeleted >(); }
				/*!
					\fn void setIsDeleted(bool const &isDeleted_)
					
					
					Sets the property \ref nmo_isDeleted "nmo:isDeleted" to the given \a isDeleted.
					\sa LiveResource::setObject
				 */
				void setIsDeleted(bool const &isDeleted_) { baseSetObject< nmo::isDeleted >( isDeleted_ ); }
				/*!
					\fn bool firstIsDeleted()
					
					
					Returns the first property \ref nmo_isDeleted "nmo:isDeleted". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsDeleted() { return baseFirstObject< nmo::isDeleted >(); }
				/*!
					\fn void addIsDeleted(bool const &isDeleted_)
					
					
					Adds the given \a isDeleted_ to the property \ref nmo_isDeleted "nmo:isDeleted" set.
					\sa LiveResource::addObject
				 */
				void addIsDeleted(bool const &isDeleted_) { baseAddObject< nmo::isDeleted >( isDeleted_ ); }
				/*!
					\fn void removeIsDeleted(bool const &isDeleted_)
					
					
					Removes the given \a isDeleted_ from the property \ref nmo_isDeleted "nmo:isDeleted" set.
					\sa LiveResource::removeObject
				 */
				void removeIsDeleted(bool const &isDeleted_) { baseRemoveObject< nmo::isDeleted >(isDeleted_); }

				/* Property generated from nmo:htmlMessageContent
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1669
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveHtmlMessageContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_htmlMessageContent "nmo:htmlMessageContent" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHtmlMessageContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::htmlMessageContent >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHtmlMessageContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_htmlMessageContent "nmo:htmlMessageContent" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHtmlMessageContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::htmlMessageContent >(object_info, strategy, parent); }
				/*!
					\fn void setHtmlMessageContents(LiveNodes const &htmlMessageContent_)
					
					
					Sets the property \ref nmo_htmlMessageContent "nmo:htmlMessageContent" set to the given \a htmlMessageContent_ set.
					\sa LiveResource::setObjects
				 */
				void setHtmlMessageContents(LiveNodes const &htmlMessageContent_) { baseSetObjects(nmo::htmlMessageContent::iri(), htmlMessageContent_); }
				/*!
					\fn void removeHtmlMessageContents(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_htmlMessageContent "nmo:htmlMessageContent" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHtmlMessageContents(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::htmlMessageContent::iri(), object_info); }
				/*!
					\fn QString getHtmlMessageContent()
					
					
					Returns the property \ref nmo_htmlMessageContent "nmo:htmlMessageContent". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getHtmlMessageContent() { return baseGetObject< nmo::htmlMessageContent >(); }
				/*!
					\fn void setHtmlMessageContent(QString const &htmlMessageContent_)
					
					
					Sets the property \ref nmo_htmlMessageContent "nmo:htmlMessageContent" to the given \a htmlMessageContent.
					\sa LiveResource::setObject
				 */
				void setHtmlMessageContent(QString const &htmlMessageContent_) { baseSetObject< nmo::htmlMessageContent >( htmlMessageContent_ ); }
				/*!
					\fn QString firstHtmlMessageContent()
					
					
					Returns the first property \ref nmo_htmlMessageContent "nmo:htmlMessageContent". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstHtmlMessageContent() { return baseFirstObject< nmo::htmlMessageContent >(); }
				/*!
					\fn void addHtmlMessageContent(QString const &htmlMessageContent_)
					
					
					Adds the given \a htmlMessageContent_ to the property \ref nmo_htmlMessageContent "nmo:htmlMessageContent" set.
					\sa LiveResource::addObject
				 */
				void addHtmlMessageContent(QString const &htmlMessageContent_) { baseAddObject< nmo::htmlMessageContent >( htmlMessageContent_ ); }
				/*!
					\fn void removeHtmlMessageContent(QString const &htmlMessageContent_)
					
					
					Removes the given \a htmlMessageContent_ from the property \ref nmo_htmlMessageContent "nmo:htmlMessageContent" set.
					\sa LiveResource::removeObject
				 */
				void removeHtmlMessageContent(QString const &htmlMessageContent_) { baseRemoveObject< nmo::htmlMessageContent >(htmlMessageContent_); }

				/* Property generated from nmo:isDraft
				 * \n The user hasn't finished editing the message and might want to continue later
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1594
				 * \n rdfs:domain=nmo:Message
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsDrafts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_isDraft "nmo:isDraft" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsDrafts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::isDraft >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsDrafts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_isDraft "nmo:isDraft" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsDrafts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::isDraft >(object_info, strategy, parent); }
				/*!
					\fn void setIsDrafts(LiveNodes const &isDraft_)
					
					
					Sets the property \ref nmo_isDraft "nmo:isDraft" set to the given \a isDraft_ set.
					\sa LiveResource::setObjects
				 */
				void setIsDrafts(LiveNodes const &isDraft_) { baseSetObjects(nmo::isDraft::iri(), isDraft_); }
				/*!
					\fn void removeIsDrafts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_isDraft "nmo:isDraft" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsDrafts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::isDraft::iri(), object_info); }
				/*!
					\fn bool getIsDraft()
					
					
					Returns the property \ref nmo_isDraft "nmo:isDraft". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsDraft() { return baseGetObject< nmo::isDraft >(); }
				/*!
					\fn void setIsDraft(bool const &isDraft_)
					
					
					Sets the property \ref nmo_isDraft "nmo:isDraft" to the given \a isDraft.
					\sa LiveResource::setObject
				 */
				void setIsDraft(bool const &isDraft_) { baseSetObject< nmo::isDraft >( isDraft_ ); }
				/*!
					\fn bool firstIsDraft()
					
					
					Returns the first property \ref nmo_isDraft "nmo:isDraft". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsDraft() { return baseFirstObject< nmo::isDraft >(); }
				/*!
					\fn void addIsDraft(bool const &isDraft_)
					
					
					Adds the given \a isDraft_ to the property \ref nmo_isDraft "nmo:isDraft" set.
					\sa LiveResource::addObject
				 */
				void addIsDraft(bool const &isDraft_) { baseAddObject< nmo::isDraft >( isDraft_ ); }
				/*!
					\fn void removeIsDraft(bool const &isDraft_)
					
					
					Removes the given \a isDraft_ from the property \ref nmo_isDraft "nmo:isDraft" set.
					\sa LiveResource::removeObject
				 */
				void removeIsDraft(bool const &isDraft_) { baseRemoveObject< nmo::isDraft >(isDraft_); }
				 //@}
			};

			/*! Class generated from nmo:Call
			 * \ingroup onto_nmo_classes
			 * Phone call. Voice communication with the user with somebody else.
			 * 
			 * rdfs:label = Call
			 * 
			 * tracker:modified = 1613
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Call
				: public virtual Message

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Call"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Message, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Call> Live;
				Call() { this->attachInterfaceHelper< Call >(); }
				~Call() { this->detachInterfaceHelper< Call >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:duration
				 * \n Duration of the call in seconds
				 * \n rdfs:range=xsd:integer
				 * \n tracker:modified=1539
				 * \n rdfs:domain=nmo:Call
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_duration "nmo:duration" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::duration >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_duration "nmo:duration" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::duration >(object_info, strategy, parent); }
				/*!
					\fn void setDurations(LiveNodes const &duration_)
					
					
					Sets the property \ref nmo_duration "nmo:duration" set to the given \a duration_ set.
					\sa LiveResource::setObjects
				 */
				void setDurations(LiveNodes const &duration_) { baseSetObjects(nmo::duration::iri(), duration_); }
				/*!
					\fn void removeDurations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_duration "nmo:duration" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDurations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::duration::iri(), object_info); }
				/*!
					\fn qint64 getDuration()
					
					
					Returns the property \ref nmo_duration "nmo:duration". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getDuration() { return baseGetObject< nmo::duration >(); }
				/*!
					\fn void setDuration(qint64 const &duration_)
					
					
					Sets the property \ref nmo_duration "nmo:duration" to the given \a duration.
					\sa LiveResource::setObject
				 */
				void setDuration(qint64 const &duration_) { baseSetObject< nmo::duration >( duration_ ); }
				/*!
					\fn qint64 firstDuration()
					
					
					Returns the first property \ref nmo_duration "nmo:duration". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstDuration() { return baseFirstObject< nmo::duration >(); }
				/*!
					\fn void addDuration(qint64 const &duration_)
					
					
					Adds the given \a duration_ to the property \ref nmo_duration "nmo:duration" set.
					\sa LiveResource::addObject
				 */
				void addDuration(qint64 const &duration_) { baseAddObject< nmo::duration >( duration_ ); }
				/*!
					\fn void removeDuration(qint64 const &duration_)
					
					
					Removes the given \a duration_ from the property \ref nmo_duration "nmo:duration" set.
					\sa LiveResource::removeObject
				 */
				void removeDuration(qint64 const &duration_) { baseRemoveObject< nmo::duration >(duration_); }
				 //@}
			};

			/*! Class generated from nmo:CommunicationChannel
			 * \ingroup onto_nmo_classes
			 * A communication channel. The container for all messages between participants of a specific group or in a persistent channel.
			 * 
			 * tracker:modified = 1285
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmo_communicationChannel "nmo:communicationChannel"
			 */
			class CommunicationChannel
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#CommunicationChannel"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<CommunicationChannel> Live;
				CommunicationChannel() { this->attachInterfaceHelper< CommunicationChannel >(); }
				~CommunicationChannel() { this->detachInterfaceHelper< CommunicationChannel >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:hasParticipant
				 * \n rdfs:range=nco:Contact
				 * \n tracker:indexed=true
				 * \n tracker:modified=1079
				 * \n rdfs:domain=nmo:CommunicationChannel
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nco::Contact Contact;
				/*!
					\fn LiveNodes liveHasParticipants(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_hasParticipant "nmo:hasParticipant" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasParticipants(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::hasParticipant >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasParticipants(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_hasParticipant "nmo:hasParticipant" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasParticipants(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::hasParticipant >(object_info, strategy, parent); }
				/*!
					\fn void setHasParticipants(LiveNodes const &hasParticipant_)
					
					
					Sets the property \ref nmo_hasParticipant "nmo:hasParticipant" set to the given \a hasParticipant_ set.
					\sa LiveResource::setObjects
				 */
				void setHasParticipants(LiveNodes const &hasParticipant_) { baseSetObjects(nmo::hasParticipant::iri(), hasParticipant_); }
				/*!
					\fn void removeHasParticipants(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_hasParticipant "nmo:hasParticipant" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasParticipants(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::hasParticipant::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstHasParticipant()
					
					
					Returns the first property \ref nmo_hasParticipant "nmo:hasParticipant". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstHasParticipant() { return baseFirstObject< nmo::hasParticipant >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addHasParticipant()
					
					
					Adds a new uniquely named resource to the property \ref nmo_hasParticipant "nmo:hasParticipant" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addHasParticipant() { return baseAddObject< nmo::hasParticipant >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addHasParticipant(::SopranoLive::Live< nco::Contact > const &hasParticipant_)
					
					
					Adds the given \a hasParticipant_ to the property \ref nmo_hasParticipant "nmo:hasParticipant" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addHasParticipant(::SopranoLive::Live< nco::Contact > const &hasParticipant_) { return baseAddObject< nmo::hasParticipant >( hasParticipant_ ); }
				/*!
					\fn void removeHasParticipant(::SopranoLive::Live< nco::Contact > const &hasParticipant_)
					
					
					Removes the given \a hasParticipant_ from the property \ref nmo_hasParticipant "nmo:hasParticipant" set.
					\sa LiveResource::removeObject
				 */
				void removeHasParticipant(::SopranoLive::Live< nco::Contact > const &hasParticipant_) { baseRemoveObject< nmo::hasParticipant >(hasParticipant_); }

				/* Property generated from nmo:lastMessageDate
				 * \n nmo:sentDate of the most recent message in this channel.
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=nmo:CommunicationChannel
				 * \n tracker:indexed=true
				 * \n tracker:modified=1611
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLastMessageDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_lastMessageDate "nmo:lastMessageDate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLastMessageDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::lastMessageDate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLastMessageDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_lastMessageDate "nmo:lastMessageDate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLastMessageDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::lastMessageDate >(object_info, strategy, parent); }
				/*!
					\fn void setLastMessageDates(LiveNodes const &lastMessageDate_)
					
					
					Sets the property \ref nmo_lastMessageDate "nmo:lastMessageDate" set to the given \a lastMessageDate_ set.
					\sa LiveResource::setObjects
				 */
				void setLastMessageDates(LiveNodes const &lastMessageDate_) { baseSetObjects(nmo::lastMessageDate::iri(), lastMessageDate_); }
				/*!
					\fn void removeLastMessageDates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_lastMessageDate "nmo:lastMessageDate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLastMessageDates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::lastMessageDate::iri(), object_info); }
				/*!
					\fn QDateTime getLastMessageDate()
					
					
					Returns the property \ref nmo_lastMessageDate "nmo:lastMessageDate". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getLastMessageDate() { return baseGetObject< nmo::lastMessageDate >(); }
				/*!
					\fn void setLastMessageDate(QDateTime const &lastMessageDate_)
					
					
					Sets the property \ref nmo_lastMessageDate "nmo:lastMessageDate" to the given \a lastMessageDate.
					\sa LiveResource::setObject
				 */
				void setLastMessageDate(QDateTime const &lastMessageDate_) { baseSetObject< nmo::lastMessageDate >( lastMessageDate_ ); }
				/*!
					\fn QDateTime firstLastMessageDate()
					
					
					Returns the first property \ref nmo_lastMessageDate "nmo:lastMessageDate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstLastMessageDate() { return baseFirstObject< nmo::lastMessageDate >(); }
				/*!
					\fn void addLastMessageDate(QDateTime const &lastMessageDate_)
					
					
					Adds the given \a lastMessageDate_ to the property \ref nmo_lastMessageDate "nmo:lastMessageDate" set.
					\sa LiveResource::addObject
				 */
				void addLastMessageDate(QDateTime const &lastMessageDate_) { baseAddObject< nmo::lastMessageDate >( lastMessageDate_ ); }
				/*!
					\fn void removeLastMessageDate(QDateTime const &lastMessageDate_)
					
					
					Removes the given \a lastMessageDate_ from the property \ref nmo_lastMessageDate "nmo:lastMessageDate" set.
					\sa LiveResource::removeObject
				 */
				void removeLastMessageDate(QDateTime const &lastMessageDate_) { baseRemoveObject< nmo::lastMessageDate >(lastMessageDate_); }
				 //@}
			};

			/*! Class generated from nmo:Conversation
			 * \ingroup onto_nmo_classes
			 * A conversation. An exchange of one or multiple messages within a time frame or about a specific topic.
			 * 
			 * tracker:modified = 1789
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmo_conversation "nmo:conversation"
			 */
			class Conversation
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Conversation"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Conversation> Live;
				Conversation() { this->attachInterfaceHelper< Conversation >(); }
				~Conversation() { this->detachInterfaceHelper< Conversation >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmo:DeliveryStatus
			 * \ingroup onto_nmo_classes
			 * Predefined set of delivery status instances
			 * 
			 * rdfs:label = Delivery statuses
			 * 
			 * tracker:modified = 1456
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nmo_delivery_status_delivered "nmo:delivery-status-delivered"
			 * 		\ref nmo_delivery_status_permanently_failed "nmo:delivery-status-permanently-failed"
			 * 		\ref nmo_delivery_status_temporarily_failed "nmo:delivery-status-temporarily-failed"
			 * 		\ref nmo_delivery_status_sent "nmo:delivery-status-sent"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmo_deliveryStatus "nmo:deliveryStatus"
			 */
			class DeliveryStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#DeliveryStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<DeliveryStatus> Live;
				DeliveryStatus() { this->attachInterfaceHelper< DeliveryStatus >(); }
				~DeliveryStatus() { this->detachInterfaceHelper< DeliveryStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmo:Email
			 * \ingroup onto_nmo_classes
			 * Root node in a MIME Email
			 * 
			 * rdfs:label = Email envelope
			 * 
			 * tracker:modified = 1717
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Email
				: public virtual Message

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Email"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Message, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Email> Live;
				Email() { this->attachInterfaceHelper< Email >(); }
				~Email() { this->detachInterfaceHelper< Email >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:contentMimeType
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1738
				 * \n rdfs:domain=nmo:Email
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n rdfs:subPropertyOf=nie:mimeType
				 */
				/*!
					\fn LiveNodes liveContentMimeTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_contentMimeType "nmo:contentMimeType" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContentMimeTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::contentMimeType >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContentMimeTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_contentMimeType "nmo:contentMimeType" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContentMimeTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::contentMimeType >(object_info, strategy, parent); }
				/*!
					\fn void setContentMimeTypes(LiveNodes const &contentMimeType_)
					
					
					Sets the property \ref nmo_contentMimeType "nmo:contentMimeType" set to the given \a contentMimeType_ set.
					\sa LiveResource::setObjects
				 */
				void setContentMimeTypes(LiveNodes const &contentMimeType_) { baseSetObjects(nmo::contentMimeType::iri(), contentMimeType_); }
				/*!
					\fn void removeContentMimeTypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_contentMimeType "nmo:contentMimeType" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContentMimeTypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::contentMimeType::iri(), object_info); }
				/*!
					\fn QString firstContentMimeType()
					
					
					Returns the first property \ref nmo_contentMimeType "nmo:contentMimeType". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstContentMimeType() { return baseFirstObject< nmo::contentMimeType >(); }
				/*!
					\fn void addContentMimeType(QString const &contentMimeType_)
					
					
					Adds the given \a contentMimeType_ to the property \ref nmo_contentMimeType "nmo:contentMimeType" set.
					\sa LiveResource::addObject
				 */
				void addContentMimeType(QString const &contentMimeType_) { baseAddObject< nmo::contentMimeType >( contentMimeType_ ); }
				/*!
					\fn void removeContentMimeType(QString const &contentMimeType_)
					
					
					Removes the given \a contentMimeType_ from the property \ref nmo_contentMimeType "nmo:contentMimeType" set.
					\sa LiveResource::removeObject
				 */
				void removeContentMimeType(QString const &contentMimeType_) { baseRemoveObject< nmo::contentMimeType >(contentMimeType_); }

				/* Property generated from nmo:isRecent
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1185
				 * \n rdfs:domain=nmo:Email
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsRecents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_isRecent "nmo:isRecent" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsRecents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::isRecent >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsRecents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_isRecent "nmo:isRecent" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsRecents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::isRecent >(object_info, strategy, parent); }
				/*!
					\fn void setIsRecents(LiveNodes const &isRecent_)
					
					
					Sets the property \ref nmo_isRecent "nmo:isRecent" set to the given \a isRecent_ set.
					\sa LiveResource::setObjects
				 */
				void setIsRecents(LiveNodes const &isRecent_) { baseSetObjects(nmo::isRecent::iri(), isRecent_); }
				/*!
					\fn void removeIsRecents(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_isRecent "nmo:isRecent" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsRecents(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::isRecent::iri(), object_info); }
				/*!
					\fn bool getIsRecent()
					
					
					Returns the property \ref nmo_isRecent "nmo:isRecent". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsRecent() { return baseGetObject< nmo::isRecent >(); }
				/*!
					\fn void setIsRecent(bool const &isRecent_)
					
					
					Sets the property \ref nmo_isRecent "nmo:isRecent" to the given \a isRecent.
					\sa LiveResource::setObject
				 */
				void setIsRecent(bool const &isRecent_) { baseSetObject< nmo::isRecent >( isRecent_ ); }
				/*!
					\fn bool firstIsRecent()
					
					
					Returns the first property \ref nmo_isRecent "nmo:isRecent". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsRecent() { return baseFirstObject< nmo::isRecent >(); }
				/*!
					\fn void addIsRecent(bool const &isRecent_)
					
					
					Adds the given \a isRecent_ to the property \ref nmo_isRecent "nmo:isRecent" set.
					\sa LiveResource::addObject
				 */
				void addIsRecent(bool const &isRecent_) { baseAddObject< nmo::isRecent >( isRecent_ ); }
				/*!
					\fn void removeIsRecent(bool const &isRecent_)
					
					
					Removes the given \a isRecent_ from the property \ref nmo_isRecent "nmo:isRecent" set.
					\sa LiveResource::removeObject
				 */
				void removeIsRecent(bool const &isRecent_) { baseRemoveObject< nmo::isRecent >(isRecent_); }

				/* Property generated from nmo:status
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1476
				 * \n rdfs:domain=nmo:Email
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_status "nmo:status" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::status >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_status "nmo:status" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::status >(object_info, strategy, parent); }
				/*!
					\fn void setStatuss(LiveNodes const &status_)
					
					
					Sets the property \ref nmo_status "nmo:status" set to the given \a status_ set.
					\sa LiveResource::setObjects
				 */
				void setStatuss(LiveNodes const &status_) { baseSetObjects(nmo::status::iri(), status_); }
				/*!
					\fn void removeStatuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_status "nmo:status" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStatuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::status::iri(), object_info); }
				/*!
					\fn QString getStatus()
					
					
					Returns the property \ref nmo_status "nmo:status". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getStatus() { return baseGetObject< nmo::status >(); }
				/*!
					\fn void setStatus(QString const &status_)
					
					
					Sets the property \ref nmo_status "nmo:status" to the given \a status.
					\sa LiveResource::setObject
				 */
				void setStatus(QString const &status_) { baseSetObject< nmo::status >( status_ ); }
				/*!
					\fn QString firstStatus()
					
					
					Returns the first property \ref nmo_status "nmo:status". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstStatus() { return baseFirstObject< nmo::status >(); }
				/*!
					\fn void addStatus(QString const &status_)
					
					
					Adds the given \a status_ to the property \ref nmo_status "nmo:status" set.
					\sa LiveResource::addObject
				 */
				void addStatus(QString const &status_) { baseAddObject< nmo::status >( status_ ); }
				/*!
					\fn void removeStatus(QString const &status_)
					
					
					Removes the given \a status_ from the property \ref nmo_status "nmo:status" set.
					\sa LiveResource::removeObject
				 */
				void removeStatus(QString const &status_) { baseRemoveObject< nmo::status >(status_); }

				/* Property generated from nmo:hasContent
				 * \n Link between the root node and the first MIME node in the Email tree
				 * \n rdfs:label=Has content
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmo:MimePart
				 * \n rdfs:domain=nmo:Email
				 * \n tracker:modified=1754
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_hasContent "nmo:hasContent" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::hasContent >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_hasContent "nmo:hasContent" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::hasContent >(object_info, strategy, parent); }
				/*!
					\fn void setHasContents(LiveNodes const &hasContent_)
					
					
					Sets the property \ref nmo_hasContent "nmo:hasContent" set to the given \a hasContent_ set.
					\sa LiveResource::setObjects
				 */
				void setHasContents(LiveNodes const &hasContent_) { baseSetObjects(nmo::hasContent::iri(), hasContent_); }
				/*!
					\fn void removeHasContents(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_hasContent "nmo:hasContent" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasContents(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::hasContent::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< MimePart > getHasContent()
					
					
					Returns the property \ref nmo_hasContent "nmo:hasContent". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< MimePart > getHasContent() { return baseGetObject< nmo::hasContent >(); }
				/*!
					\fn ::SopranoLive::Live< MimePart > setHasContent(::SopranoLive::Live< MimePart > const &hasContent_)
					
					
					Sets the property \ref nmo_hasContent "nmo:hasContent" to the given \a hasContent.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< MimePart > setHasContent(::SopranoLive::Live< MimePart > const &hasContent_) { return baseSetObject< nmo::hasContent >( hasContent_ ); }
				/*!
					\fn ::SopranoLive::Live< MimePart > firstHasContent()
					
					
					Returns the first property \ref nmo_hasContent "nmo:hasContent". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< MimePart > firstHasContent() { return baseFirstObject< nmo::hasContent >(); }
				/*!
					\fn ::SopranoLive::Live< MimePart > addHasContent()
					
					
					Adds a new uniquely named resource to the property \ref nmo_hasContent "nmo:hasContent" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< MimePart > addHasContent() { return baseAddObject< nmo::hasContent >(); }
				/*!
					\fn ::SopranoLive::Live< MimePart > addHasContent(::SopranoLive::Live< MimePart > const &hasContent_)
					
					
					Adds the given \a hasContent_ to the property \ref nmo_hasContent "nmo:hasContent" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< MimePart > addHasContent(::SopranoLive::Live< MimePart > const &hasContent_) { return baseAddObject< nmo::hasContent >( hasContent_ ); }
				/*!
					\fn void removeHasContent(::SopranoLive::Live< MimePart > const &hasContent_)
					
					
					Removes the given \a hasContent_ from the property \ref nmo_hasContent "nmo:hasContent" set.
					\sa LiveResource::removeObject
				 */
				void removeHasContent(::SopranoLive::Live< MimePart > const &hasContent_) { baseRemoveObject< nmo::hasContent >(hasContent_); }

				/* Property generated from nmo:responseType
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1148
				 * \n rdfs:domain=nmo:Email
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveResponseTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_responseType "nmo:responseType" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveResponseTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::responseType >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getResponseTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_responseType "nmo:responseType" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getResponseTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::responseType >(object_info, strategy, parent); }
				/*!
					\fn void setResponseTypes(LiveNodes const &responseType_)
					
					
					Sets the property \ref nmo_responseType "nmo:responseType" set to the given \a responseType_ set.
					\sa LiveResource::setObjects
				 */
				void setResponseTypes(LiveNodes const &responseType_) { baseSetObjects(nmo::responseType::iri(), responseType_); }
				/*!
					\fn void removeResponseTypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_responseType "nmo:responseType" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeResponseTypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::responseType::iri(), object_info); }
				/*!
					\fn QString getResponseType()
					
					
					Returns the property \ref nmo_responseType "nmo:responseType". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getResponseType() { return baseGetObject< nmo::responseType >(); }
				/*!
					\fn void setResponseType(QString const &responseType_)
					
					
					Sets the property \ref nmo_responseType "nmo:responseType" to the given \a responseType.
					\sa LiveResource::setObject
				 */
				void setResponseType(QString const &responseType_) { baseSetObject< nmo::responseType >( responseType_ ); }
				/*!
					\fn QString firstResponseType()
					
					
					Returns the first property \ref nmo_responseType "nmo:responseType". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstResponseType() { return baseFirstObject< nmo::responseType >(); }
				/*!
					\fn void addResponseType(QString const &responseType_)
					
					
					Adds the given \a responseType_ to the property \ref nmo_responseType "nmo:responseType" set.
					\sa LiveResource::addObject
				 */
				void addResponseType(QString const &responseType_) { baseAddObject< nmo::responseType >( responseType_ ); }
				/*!
					\fn void removeResponseType(QString const &responseType_)
					
					
					Removes the given \a responseType_ from the property \ref nmo_responseType "nmo:responseType" set.
					\sa LiveResource::removeObject
				 */
				void removeResponseType(QString const &responseType_) { baseRemoveObject< nmo::responseType >(responseType_); }

				/* Property generated from nmo:isFlagged
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1713
				 * \n rdfs:domain=nmo:Email
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsFlaggeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_isFlagged "nmo:isFlagged" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsFlaggeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::isFlagged >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsFlaggeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_isFlagged "nmo:isFlagged" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsFlaggeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::isFlagged >(object_info, strategy, parent); }
				/*!
					\fn void setIsFlaggeds(LiveNodes const &isFlagged_)
					
					
					Sets the property \ref nmo_isFlagged "nmo:isFlagged" set to the given \a isFlagged_ set.
					\sa LiveResource::setObjects
				 */
				void setIsFlaggeds(LiveNodes const &isFlagged_) { baseSetObjects(nmo::isFlagged::iri(), isFlagged_); }
				/*!
					\fn void removeIsFlaggeds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_isFlagged "nmo:isFlagged" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsFlaggeds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::isFlagged::iri(), object_info); }
				/*!
					\fn bool getIsFlagged()
					
					
					Returns the property \ref nmo_isFlagged "nmo:isFlagged". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsFlagged() { return baseGetObject< nmo::isFlagged >(); }
				/*!
					\fn void setIsFlagged(bool const &isFlagged_)
					
					
					Sets the property \ref nmo_isFlagged "nmo:isFlagged" to the given \a isFlagged.
					\sa LiveResource::setObject
				 */
				void setIsFlagged(bool const &isFlagged_) { baseSetObject< nmo::isFlagged >( isFlagged_ ); }
				/*!
					\fn bool firstIsFlagged()
					
					
					Returns the first property \ref nmo_isFlagged "nmo:isFlagged". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsFlagged() { return baseFirstObject< nmo::isFlagged >(); }
				/*!
					\fn void addIsFlagged(bool const &isFlagged_)
					
					
					Adds the given \a isFlagged_ to the property \ref nmo_isFlagged "nmo:isFlagged" set.
					\sa LiveResource::addObject
				 */
				void addIsFlagged(bool const &isFlagged_) { baseAddObject< nmo::isFlagged >( isFlagged_ ); }
				/*!
					\fn void removeIsFlagged(bool const &isFlagged_)
					
					
					Removes the given \a isFlagged_ from the property \ref nmo_isFlagged "nmo:isFlagged" set.
					\sa LiveResource::removeObject
				 */
				void removeIsFlagged(bool const &isFlagged_) { baseRemoveObject< nmo::isFlagged >(isFlagged_); }
				 //@}
			};

			/*! Class generated from nmo:IMMessage
			 * \ingroup onto_nmo_classes
			 * 
			 * tracker:modified = 1986
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class IMMessage
				: public virtual Message

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#IMMessage"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Message, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<IMMessage> Live;
				IMMessage() { this->attachInterfaceHelper< IMMessage >(); }
				~IMMessage() { this->detachInterfaceHelper< IMMessage >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmo:PhoneMessage
			 * \ingroup onto_nmo_classes
			 * Superclass with shared properties between SMS and MMS.
			 * 
			 * rdfs:label = Phone messages (sms and mms)
			 * 
			 * tracker:modified = 1340
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmo_containsSMS "nmo:containsSMS"
			 * 		\ref nmo_containsPhoneMessage "nmo:containsPhoneMessage"
			 */
			class PhoneMessage
				: public virtual Message

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#PhoneMessage"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Message, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<PhoneMessage> Live;
				PhoneMessage() { this->attachInterfaceHelper< PhoneMessage >(); }
				~PhoneMessage() { this->detachInterfaceHelper< PhoneMessage >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:smsId
				 * \n Id assigned in the system when the message is received. Use phoneMessageId instead
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=sms Id
				 * \n rdfs:subPropertyOf=nmo:phoneMessageId
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmo:PhoneMessage
				 * \n tracker:modified=1449
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSmsIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmo::smsId for replacement
					Returns a live model of property \ref nmo_smsId "nmo:smsId" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveSmsIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::smsId >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSmsIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmo::smsId for replacement
					Returns all current values of property \ref nmo_smsId "nmo:smsId" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getSmsIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::smsId >(object_info, strategy, parent); }
				/*!
					\fn void setSmsIds(LiveNodes const &smsId_)
					
					\deprecated See \ref nmo::smsId for replacement
					Sets the property \ref nmo_smsId "nmo:smsId" set to the given \a smsId_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setSmsIds(LiveNodes const &smsId_) { baseSetObjects(nmo::smsId::iri(), smsId_); }
				/*!
					\fn void removeSmsIds(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nmo::smsId for replacement
					Removes the properties from property \ref nmo_smsId "nmo:smsId" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeSmsIds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::smsId::iri(), object_info); }
				/*!
					\fn qint64 getSmsId()
					
					\deprecated See \ref nmo::smsId for replacement
					Returns the property \ref nmo_smsId "nmo:smsId". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED qint64 getSmsId() { return baseGetObject< nmo::smsId >(); }
				/*!
					\fn void setSmsId(qint64 const &smsId_)
					
					\deprecated See \ref nmo::smsId for replacement
					Sets the property \ref nmo_smsId "nmo:smsId" to the given \a smsId.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED void setSmsId(qint64 const &smsId_) { baseSetObject< nmo::smsId >( smsId_ ); }
				/*!
					\fn qint64 firstSmsId()
					
					\deprecated See \ref nmo::smsId for replacement
					Returns the first property \ref nmo_smsId "nmo:smsId". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED qint64 firstSmsId() { return baseFirstObject< nmo::smsId >(); }
				/*!
					\fn void addSmsId(qint64 const &smsId_)
					
					\deprecated See \ref nmo::smsId for replacement
					Adds the given \a smsId_ to the property \ref nmo_smsId "nmo:smsId" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addSmsId(qint64 const &smsId_) { baseAddObject< nmo::smsId >( smsId_ ); }
				/*!
					\fn void removeSmsId(qint64 const &smsId_)
					
					\deprecated See \ref nmo::smsId for replacement
					Removes the given \a smsId_ from the property \ref nmo_smsId "nmo:smsId" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeSmsId(qint64 const &smsId_) { baseRemoveObject< nmo::smsId >(smsId_); }

				/* Property generated from nmo:fromVCard
				 * \n Reference to a VCard in the filesystem, containing the Contact information of the 'from' recipient
				 * \n rdfs:label=fromVCard
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:FileDataObject
				 * \n rdfs:domain=nmo:PhoneMessage
				 * \n tracker:modified=1696
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nfo::FileDataObject FileDataObject;
				/*!
					\fn LiveNodes liveFromVCards(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_fromVCard "nmo:fromVCard" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFromVCards(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::fromVCard >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFromVCards(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_fromVCard "nmo:fromVCard" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFromVCards(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::fromVCard >(object_info, strategy, parent); }
				/*!
					\fn void setFromVCards(LiveNodes const &fromVCard_)
					
					
					Sets the property \ref nmo_fromVCard "nmo:fromVCard" set to the given \a fromVCard_ set.
					\sa LiveResource::setObjects
				 */
				void setFromVCards(LiveNodes const &fromVCard_) { baseSetObjects(nmo::fromVCard::iri(), fromVCard_); }
				/*!
					\fn void removeFromVCards(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_fromVCard "nmo:fromVCard" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFromVCards(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::fromVCard::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > getFromVCard()
					
					
					Returns the property \ref nmo_fromVCard "nmo:fromVCard". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > getFromVCard() { return baseGetObject< nmo::fromVCard >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > setFromVCard(::SopranoLive::Live< nfo::FileDataObject > const &fromVCard_)
					
					
					Sets the property \ref nmo_fromVCard "nmo:fromVCard" to the given \a fromVCard.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > setFromVCard(::SopranoLive::Live< nfo::FileDataObject > const &fromVCard_) { return baseSetObject< nmo::fromVCard >( fromVCard_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > firstFromVCard()
					
					
					Returns the first property \ref nmo_fromVCard "nmo:fromVCard". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > firstFromVCard() { return baseFirstObject< nmo::fromVCard >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addFromVCard()
					
					
					Adds a new uniquely named resource to the property \ref nmo_fromVCard "nmo:fromVCard" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addFromVCard() { return baseAddObject< nmo::fromVCard >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addFromVCard(::SopranoLive::Live< nfo::FileDataObject > const &fromVCard_)
					
					
					Adds the given \a fromVCard_ to the property \ref nmo_fromVCard "nmo:fromVCard" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addFromVCard(::SopranoLive::Live< nfo::FileDataObject > const &fromVCard_) { return baseAddObject< nmo::fromVCard >( fromVCard_ ); }
				/*!
					\fn void removeFromVCard(::SopranoLive::Live< nfo::FileDataObject > const &fromVCard_)
					
					
					Removes the given \a fromVCard_ from the property \ref nmo_fromVCard "nmo:fromVCard" set.
					\sa LiveResource::removeObject
				 */
				void removeFromVCard(::SopranoLive::Live< nfo::FileDataObject > const &fromVCard_) { baseRemoveObject< nmo::fromVCard >(fromVCard_); }

				/* Property generated from nmo:phoneMessageId
				 * \n Id assigned in the system when the phone message is received
				 * \n rdfs:label=Phone message Id
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmo:PhoneMessage
				 * \n tracker:modified=1963
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePhoneMessageIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_phoneMessageId "nmo:phoneMessageId" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePhoneMessageIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::phoneMessageId >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPhoneMessageIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_phoneMessageId "nmo:phoneMessageId" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPhoneMessageIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::phoneMessageId >(object_info, strategy, parent); }
				/*!
					\fn void setPhoneMessageIds(LiveNodes const &phoneMessageId_)
					
					
					Sets the property \ref nmo_phoneMessageId "nmo:phoneMessageId" set to the given \a phoneMessageId_ set.
					\sa LiveResource::setObjects
				 */
				void setPhoneMessageIds(LiveNodes const &phoneMessageId_) { baseSetObjects(nmo::phoneMessageId::iri(), phoneMessageId_); }
				/*!
					\fn void removePhoneMessageIds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_phoneMessageId "nmo:phoneMessageId" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePhoneMessageIds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::phoneMessageId::iri(), object_info); }
				/*!
					\fn qint64 getPhoneMessageId()
					
					
					Returns the property \ref nmo_phoneMessageId "nmo:phoneMessageId". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getPhoneMessageId() { return baseGetObject< nmo::phoneMessageId >(); }
				/*!
					\fn void setPhoneMessageId(qint64 const &phoneMessageId_)
					
					
					Sets the property \ref nmo_phoneMessageId "nmo:phoneMessageId" to the given \a phoneMessageId.
					\sa LiveResource::setObject
				 */
				void setPhoneMessageId(qint64 const &phoneMessageId_) { baseSetObject< nmo::phoneMessageId >( phoneMessageId_ ); }
				/*!
					\fn qint64 firstPhoneMessageId()
					
					
					Returns the first property \ref nmo_phoneMessageId "nmo:phoneMessageId". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstPhoneMessageId() { return baseFirstObject< nmo::phoneMessageId >(); }
				/*!
					\fn void addPhoneMessageId(qint64 const &phoneMessageId_)
					
					
					Adds the given \a phoneMessageId_ to the property \ref nmo_phoneMessageId "nmo:phoneMessageId" set.
					\sa LiveResource::addObject
				 */
				void addPhoneMessageId(qint64 const &phoneMessageId_) { baseAddObject< nmo::phoneMessageId >( phoneMessageId_ ); }
				/*!
					\fn void removePhoneMessageId(qint64 const &phoneMessageId_)
					
					
					Removes the given \a phoneMessageId_ from the property \ref nmo_phoneMessageId "nmo:phoneMessageId" set.
					\sa LiveResource::removeObject
				 */
				void removePhoneMessageId(qint64 const &phoneMessageId_) { baseRemoveObject< nmo::phoneMessageId >(phoneMessageId_); }

				/* Property generated from nmo:encoding
				 * \n Encoding of the message
				 * \n rdfs:label=enconding
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmo:PhoneMessage
				 * \n tracker:modified=1194
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_encoding "nmo:encoding" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::encoding >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_encoding "nmo:encoding" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::encoding >(object_info, strategy, parent); }
				/*!
					\fn void setEncodings(LiveNodes const &encoding_)
					
					
					Sets the property \ref nmo_encoding "nmo:encoding" set to the given \a encoding_ set.
					\sa LiveResource::setObjects
				 */
				void setEncodings(LiveNodes const &encoding_) { baseSetObjects(nmo::encoding::iri(), encoding_); }
				/*!
					\fn void removeEncodings(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_encoding "nmo:encoding" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEncodings(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::encoding::iri(), object_info); }
				/*!
					\fn QString getEncoding()
					
					
					Returns the property \ref nmo_encoding "nmo:encoding". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getEncoding() { return baseGetObject< nmo::encoding >(); }
				/*!
					\fn void setEncoding(QString const &encoding_)
					
					
					Sets the property \ref nmo_encoding "nmo:encoding" to the given \a encoding.
					\sa LiveResource::setObject
				 */
				void setEncoding(QString const &encoding_) { baseSetObject< nmo::encoding >( encoding_ ); }
				/*!
					\fn QString firstEncoding()
					
					
					Returns the first property \ref nmo_encoding "nmo:encoding". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstEncoding() { return baseFirstObject< nmo::encoding >(); }
				/*!
					\fn void addEncoding(QString const &encoding_)
					
					
					Adds the given \a encoding_ to the property \ref nmo_encoding "nmo:encoding" set.
					\sa LiveResource::addObject
				 */
				void addEncoding(QString const &encoding_) { baseAddObject< nmo::encoding >( encoding_ ); }
				/*!
					\fn void removeEncoding(QString const &encoding_)
					
					
					Removes the given \a encoding_ from the property \ref nmo_encoding "nmo:encoding" set.
					\sa LiveResource::removeObject
				 */
				void removeEncoding(QString const &encoding_) { baseRemoveObject< nmo::encoding >(encoding_); }

				/* Property generated from nmo:toVCard
				 * \n Reference to a VCard in the filesystem, containing the Contact information of 'to' recipients
				 * \n rdfs:range=nfo:FileDataObject
				 * \n rdfs:label=fromVCard
				 * \n tracker:modified=1418
				 * \n rdfs:domain=nmo:PhoneMessage
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveToVCards(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_toVCard "nmo:toVCard" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveToVCards(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::toVCard >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getToVCards(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_toVCard "nmo:toVCard" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getToVCards(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::toVCard >(object_info, strategy, parent); }
				/*!
					\fn void setToVCards(LiveNodes const &toVCard_)
					
					
					Sets the property \ref nmo_toVCard "nmo:toVCard" set to the given \a toVCard_ set.
					\sa LiveResource::setObjects
				 */
				void setToVCards(LiveNodes const &toVCard_) { baseSetObjects(nmo::toVCard::iri(), toVCard_); }
				/*!
					\fn void removeToVCards(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_toVCard "nmo:toVCard" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeToVCards(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::toVCard::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > firstToVCard()
					
					
					Returns the first property \ref nmo_toVCard "nmo:toVCard". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > firstToVCard() { return baseFirstObject< nmo::toVCard >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addToVCard()
					
					
					Adds a new uniquely named resource to the property \ref nmo_toVCard "nmo:toVCard" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addToVCard() { return baseAddObject< nmo::toVCard >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addToVCard(::SopranoLive::Live< nfo::FileDataObject > const &toVCard_)
					
					
					Adds the given \a toVCard_ to the property \ref nmo_toVCard "nmo:toVCard" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addToVCard(::SopranoLive::Live< nfo::FileDataObject > const &toVCard_) { return baseAddObject< nmo::toVCard >( toVCard_ ); }
				/*!
					\fn void removeToVCard(::SopranoLive::Live< nfo::FileDataObject > const &toVCard_)
					
					
					Removes the given \a toVCard_ from the property \ref nmo_toVCard "nmo:toVCard" set.
					\sa LiveResource::removeObject
				 */
				void removeToVCard(::SopranoLive::Live< nfo::FileDataObject > const &toVCard_) { baseRemoveObject< nmo::toVCard >(toVCard_); }

				/* Property generated from nmo:validityPeriod
				 * \n Validity period of an SMS in seconds. It is a value coming from the network
				 * \n rdfs:label=Validity period
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmo:PhoneMessage
				 * \n tracker:modified=1821
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveValidityPeriods(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_validityPeriod "nmo:validityPeriod" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveValidityPeriods(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::validityPeriod >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getValidityPeriods(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_validityPeriod "nmo:validityPeriod" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getValidityPeriods(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::validityPeriod >(object_info, strategy, parent); }
				/*!
					\fn void setValidityPeriods(LiveNodes const &validityPeriod_)
					
					
					Sets the property \ref nmo_validityPeriod "nmo:validityPeriod" set to the given \a validityPeriod_ set.
					\sa LiveResource::setObjects
				 */
				void setValidityPeriods(LiveNodes const &validityPeriod_) { baseSetObjects(nmo::validityPeriod::iri(), validityPeriod_); }
				/*!
					\fn void removeValidityPeriods(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_validityPeriod "nmo:validityPeriod" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeValidityPeriods(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::validityPeriod::iri(), object_info); }
				/*!
					\fn qint64 getValidityPeriod()
					
					
					Returns the property \ref nmo_validityPeriod "nmo:validityPeriod". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getValidityPeriod() { return baseGetObject< nmo::validityPeriod >(); }
				/*!
					\fn void setValidityPeriod(qint64 const &validityPeriod_)
					
					
					Sets the property \ref nmo_validityPeriod "nmo:validityPeriod" to the given \a validityPeriod.
					\sa LiveResource::setObject
				 */
				void setValidityPeriod(qint64 const &validityPeriod_) { baseSetObject< nmo::validityPeriod >( validityPeriod_ ); }
				/*!
					\fn qint64 firstValidityPeriod()
					
					
					Returns the first property \ref nmo_validityPeriod "nmo:validityPeriod". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstValidityPeriod() { return baseFirstObject< nmo::validityPeriod >(); }
				/*!
					\fn void addValidityPeriod(qint64 const &validityPeriod_)
					
					
					Adds the given \a validityPeriod_ to the property \ref nmo_validityPeriod "nmo:validityPeriod" set.
					\sa LiveResource::addObject
				 */
				void addValidityPeriod(qint64 const &validityPeriod_) { baseAddObject< nmo::validityPeriod >( validityPeriod_ ); }
				/*!
					\fn void removeValidityPeriod(qint64 const &validityPeriod_)
					
					
					Removes the given \a validityPeriod_ from the property \ref nmo_validityPeriod "nmo:validityPeriod" set.
					\sa LiveResource::removeObject
				 */
				void removeValidityPeriod(qint64 const &validityPeriod_) { baseRemoveObject< nmo::validityPeriod >(validityPeriod_); }
				 //@}
			};

			/*! Class generated from nmo:MMSMessage
			 * \ingroup onto_nmo_classes
			 * An MMS message is basically a Email with different envelop. It inherits also from SMS the folders and delivery status
			 * 
			 * rdfs:label = MMS Message
			 * 
			 * tracker:modified = 1583
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class MMSMessage
				: public virtual PhoneMessage

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#MMSMessage"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PhoneMessage, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MMSMessage> Live;
				MMSMessage() { this->attachInterfaceHelper< MMSMessage >(); }
				~MMSMessage() { this->detachInterfaceHelper< MMSMessage >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:mmsHasContent
				 * \n Link to the mimeparts with the multimedia content (miming nmo:hasContent)
				 * \n rdfs:label=MMS has content
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmo:MimePart
				 * \n rdfs:domain=nmo:MMSMessage
				 * \n tracker:modified=1281
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMmsHasContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_mmsHasContent "nmo:mmsHasContent" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMmsHasContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::mmsHasContent >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMmsHasContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_mmsHasContent "nmo:mmsHasContent" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMmsHasContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::mmsHasContent >(object_info, strategy, parent); }
				/*!
					\fn void setMmsHasContents(LiveNodes const &mmsHasContent_)
					
					
					Sets the property \ref nmo_mmsHasContent "nmo:mmsHasContent" set to the given \a mmsHasContent_ set.
					\sa LiveResource::setObjects
				 */
				void setMmsHasContents(LiveNodes const &mmsHasContent_) { baseSetObjects(nmo::mmsHasContent::iri(), mmsHasContent_); }
				/*!
					\fn void removeMmsHasContents(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_mmsHasContent "nmo:mmsHasContent" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMmsHasContents(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::mmsHasContent::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< MimePart > getMmsHasContent()
					
					
					Returns the property \ref nmo_mmsHasContent "nmo:mmsHasContent". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< MimePart > getMmsHasContent() { return baseGetObject< nmo::mmsHasContent >(); }
				/*!
					\fn ::SopranoLive::Live< MimePart > setMmsHasContent(::SopranoLive::Live< MimePart > const &mmsHasContent_)
					
					
					Sets the property \ref nmo_mmsHasContent "nmo:mmsHasContent" to the given \a mmsHasContent.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< MimePart > setMmsHasContent(::SopranoLive::Live< MimePart > const &mmsHasContent_) { return baseSetObject< nmo::mmsHasContent >( mmsHasContent_ ); }
				/*!
					\fn ::SopranoLive::Live< MimePart > firstMmsHasContent()
					
					
					Returns the first property \ref nmo_mmsHasContent "nmo:mmsHasContent". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< MimePart > firstMmsHasContent() { return baseFirstObject< nmo::mmsHasContent >(); }
				/*!
					\fn ::SopranoLive::Live< MimePart > addMmsHasContent()
					
					
					Adds a new uniquely named resource to the property \ref nmo_mmsHasContent "nmo:mmsHasContent" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< MimePart > addMmsHasContent() { return baseAddObject< nmo::mmsHasContent >(); }
				/*!
					\fn ::SopranoLive::Live< MimePart > addMmsHasContent(::SopranoLive::Live< MimePart > const &mmsHasContent_)
					
					
					Adds the given \a mmsHasContent_ to the property \ref nmo_mmsHasContent "nmo:mmsHasContent" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< MimePart > addMmsHasContent(::SopranoLive::Live< MimePart > const &mmsHasContent_) { return baseAddObject< nmo::mmsHasContent >( mmsHasContent_ ); }
				/*!
					\fn void removeMmsHasContent(::SopranoLive::Live< MimePart > const &mmsHasContent_)
					
					
					Removes the given \a mmsHasContent_ from the property \ref nmo_mmsHasContent "nmo:mmsHasContent" set.
					\sa LiveResource::removeObject
				 */
				void removeMmsHasContent(::SopranoLive::Live< MimePart > const &mmsHasContent_) { baseRemoveObject< nmo::mmsHasContent >(mmsHasContent_); }
				 //@}
			};

			/*! Class generated from nmo:MailAccount
			 * \ingroup onto_nmo_classes
			 * 
			 * tracker:modified = 1220
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class MailAccount
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#MailAccount"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MailAccount> Live;
				MailAccount() { this->attachInterfaceHelper< MailAccount >(); }
				~MailAccount() { this->detachInterfaceHelper< MailAccount >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:fromAddress
				 * \n From address of an account
				 * \n rdfs:range=nco:EmailAddress
				 * \n tracker:modified=1320
				 * \n rdfs:domain=nmo:MailAccount
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
// property api changing 			typedef nco::EmailAddress EmailAddress;
				/*!
					\fn LiveNodes liveFromAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_fromAddress "nmo:fromAddress" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFromAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::fromAddress >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFromAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_fromAddress "nmo:fromAddress" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFromAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::fromAddress >(object_info, strategy, parent); }
				/*!
					\fn void setFromAddresss(LiveNodes const &fromAddress_)
					
					
					Sets the property \ref nmo_fromAddress "nmo:fromAddress" set to the given \a fromAddress_ set.
					\sa LiveResource::setObjects
				 */
				void setFromAddresss(LiveNodes const &fromAddress_) { baseSetObjects(nmo::fromAddress::iri(), fromAddress_); }
				/*!
					\fn void removeFromAddresss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_fromAddress "nmo:fromAddress" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFromAddresss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::fromAddress::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::EmailAddress > getFromAddress()
					
					
					Returns the property \ref nmo_fromAddress "nmo:fromAddress". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::EmailAddress > getFromAddress() { return baseGetObject< nmo::fromAddress >(); }
				/*!
					\fn ::SopranoLive::Live< nco::EmailAddress > setFromAddress(::SopranoLive::Live< nco::EmailAddress > const &fromAddress_)
					
					
					Sets the property \ref nmo_fromAddress "nmo:fromAddress" to the given \a fromAddress.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::EmailAddress > setFromAddress(::SopranoLive::Live< nco::EmailAddress > const &fromAddress_) { return baseSetObject< nmo::fromAddress >( fromAddress_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::EmailAddress > firstFromAddress()
					
					
					Returns the first property \ref nmo_fromAddress "nmo:fromAddress". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::EmailAddress > firstFromAddress() { return baseFirstObject< nmo::fromAddress >(); }
				/*!
					\fn ::SopranoLive::Live< nco::EmailAddress > addFromAddress()
					
					
					Adds a new uniquely named resource to the property \ref nmo_fromAddress "nmo:fromAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::EmailAddress > addFromAddress() { return baseAddObject< nmo::fromAddress >(); }
				/*!
					\fn ::SopranoLive::Live< nco::EmailAddress > addFromAddress(::SopranoLive::Live< nco::EmailAddress > const &fromAddress_)
					
					
					Adds the given \a fromAddress_ to the property \ref nmo_fromAddress "nmo:fromAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::EmailAddress > addFromAddress(::SopranoLive::Live< nco::EmailAddress > const &fromAddress_) { return baseAddObject< nmo::fromAddress >( fromAddress_ ); }
				/*!
					\fn void removeFromAddress(::SopranoLive::Live< nco::EmailAddress > const &fromAddress_)
					
					
					Removes the given \a fromAddress_ from the property \ref nmo_fromAddress "nmo:fromAddress" set.
					\sa LiveResource::removeObject
				 */
				void removeFromAddress(::SopranoLive::Live< nco::EmailAddress > const &fromAddress_) { baseRemoveObject< nmo::fromAddress >(fromAddress_); }

				/* Property generated from nmo:signature
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmo:MailAccount
				 * \n tracker:weight=2
				 * \n tracker:modified=1907
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSignatures(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_signature "nmo:signature" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSignatures(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::signature >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSignatures(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_signature "nmo:signature" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSignatures(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::signature >(object_info, strategy, parent); }
				/*!
					\fn void setSignatures(LiveNodes const &signature_)
					
					
					Sets the property \ref nmo_signature "nmo:signature" set to the given \a signature_ set.
					\sa LiveResource::setObjects
				 */
				void setSignatures(LiveNodes const &signature_) { baseSetObjects(nmo::signature::iri(), signature_); }
				/*!
					\fn void removeSignatures(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_signature "nmo:signature" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSignatures(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::signature::iri(), object_info); }
				/*!
					\fn QString getSignature()
					
					
					Returns the property \ref nmo_signature "nmo:signature". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getSignature() { return baseGetObject< nmo::signature >(); }
				/*!
					\fn void setSignature(QString const &signature_)
					
					
					Sets the property \ref nmo_signature "nmo:signature" to the given \a signature.
					\sa LiveResource::setObject
				 */
				void setSignature(QString const &signature_) { baseSetObject< nmo::signature >( signature_ ); }
				/*!
					\fn QString firstSignature()
					
					
					Returns the first property \ref nmo_signature "nmo:signature". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstSignature() { return baseFirstObject< nmo::signature >(); }
				/*!
					\fn void addSignature(QString const &signature_)
					
					
					Adds the given \a signature_ to the property \ref nmo_signature "nmo:signature" set.
					\sa LiveResource::addObject
				 */
				void addSignature(QString const &signature_) { baseAddObject< nmo::signature >( signature_ ); }
				/*!
					\fn void removeSignature(QString const &signature_)
					
					
					Removes the given \a signature_ from the property \ref nmo_signature "nmo:signature" set.
					\sa LiveResource::removeObject
				 */
				void removeSignature(QString const &signature_) { baseRemoveObject< nmo::signature >(signature_); }

				/* Property generated from nmo:accountDisplayName
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmo:MailAccount
				 * \n tracker:weight=3
				 * \n tracker:modified=1690
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAccountDisplayNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_accountDisplayName "nmo:accountDisplayName" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAccountDisplayNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::accountDisplayName >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAccountDisplayNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_accountDisplayName "nmo:accountDisplayName" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAccountDisplayNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::accountDisplayName >(object_info, strategy, parent); }
				/*!
					\fn void setAccountDisplayNames(LiveNodes const &accountDisplayName_)
					
					
					Sets the property \ref nmo_accountDisplayName "nmo:accountDisplayName" set to the given \a accountDisplayName_ set.
					\sa LiveResource::setObjects
				 */
				void setAccountDisplayNames(LiveNodes const &accountDisplayName_) { baseSetObjects(nmo::accountDisplayName::iri(), accountDisplayName_); }
				/*!
					\fn void removeAccountDisplayNames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_accountDisplayName "nmo:accountDisplayName" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAccountDisplayNames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::accountDisplayName::iri(), object_info); }
				/*!
					\fn QString getAccountDisplayName()
					
					
					Returns the property \ref nmo_accountDisplayName "nmo:accountDisplayName". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getAccountDisplayName() { return baseGetObject< nmo::accountDisplayName >(); }
				/*!
					\fn void setAccountDisplayName(QString const &accountDisplayName_)
					
					
					Sets the property \ref nmo_accountDisplayName "nmo:accountDisplayName" to the given \a accountDisplayName.
					\sa LiveResource::setObject
				 */
				void setAccountDisplayName(QString const &accountDisplayName_) { baseSetObject< nmo::accountDisplayName >( accountDisplayName_ ); }
				/*!
					\fn QString firstAccountDisplayName()
					
					
					Returns the first property \ref nmo_accountDisplayName "nmo:accountDisplayName". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstAccountDisplayName() { return baseFirstObject< nmo::accountDisplayName >(); }
				/*!
					\fn void addAccountDisplayName(QString const &accountDisplayName_)
					
					
					Adds the given \a accountDisplayName_ to the property \ref nmo_accountDisplayName "nmo:accountDisplayName" set.
					\sa LiveResource::addObject
				 */
				void addAccountDisplayName(QString const &accountDisplayName_) { baseAddObject< nmo::accountDisplayName >( accountDisplayName_ ); }
				/*!
					\fn void removeAccountDisplayName(QString const &accountDisplayName_)
					
					
					Removes the given \a accountDisplayName_ from the property \ref nmo_accountDisplayName "nmo:accountDisplayName" set.
					\sa LiveResource::removeObject
				 */
				void removeAccountDisplayName(QString const &accountDisplayName_) { baseRemoveObject< nmo::accountDisplayName >(accountDisplayName_); }

				/* Property generated from nmo:accountName
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmo:MailAccount
				 * \n tracker:weight=3
				 * \n tracker:modified=1695
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAccountNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_accountName "nmo:accountName" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAccountNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::accountName >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAccountNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_accountName "nmo:accountName" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAccountNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::accountName >(object_info, strategy, parent); }
				/*!
					\fn void setAccountNames(LiveNodes const &accountName_)
					
					
					Sets the property \ref nmo_accountName "nmo:accountName" set to the given \a accountName_ set.
					\sa LiveResource::setObjects
				 */
				void setAccountNames(LiveNodes const &accountName_) { baseSetObjects(nmo::accountName::iri(), accountName_); }
				/*!
					\fn void removeAccountNames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_accountName "nmo:accountName" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAccountNames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::accountName::iri(), object_info); }
				/*!
					\fn QString getAccountName()
					
					
					Returns the property \ref nmo_accountName "nmo:accountName". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getAccountName() { return baseGetObject< nmo::accountName >(); }
				/*!
					\fn void setAccountName(QString const &accountName_)
					
					
					Sets the property \ref nmo_accountName "nmo:accountName" to the given \a accountName.
					\sa LiveResource::setObject
				 */
				void setAccountName(QString const &accountName_) { baseSetObject< nmo::accountName >( accountName_ ); }
				/*!
					\fn QString firstAccountName()
					
					
					Returns the first property \ref nmo_accountName "nmo:accountName". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstAccountName() { return baseFirstObject< nmo::accountName >(); }
				/*!
					\fn void addAccountName(QString const &accountName_)
					
					
					Adds the given \a accountName_ to the property \ref nmo_accountName "nmo:accountName" set.
					\sa LiveResource::addObject
				 */
				void addAccountName(QString const &accountName_) { baseAddObject< nmo::accountName >( accountName_ ); }
				/*!
					\fn void removeAccountName(QString const &accountName_)
					
					
					Removes the given \a accountName_ from the property \ref nmo_accountName "nmo:accountName" set.
					\sa LiveResource::removeObject
				 */
				void removeAccountName(QString const &accountName_) { baseRemoveObject< nmo::accountName >(accountName_); }
				 //@}
			};

			/*! Class generated from nmo:MailFolder
			 * \ingroup onto_nmo_classes
			 * 
			 * tracker:modified = 1682
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class MailFolder
				: public virtual nfo::Folder

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#MailFolder"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::Folder, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MailFolder> Live;
				MailFolder() { this->attachInterfaceHelper< MailFolder >(); }
				~MailFolder() { this->detachInterfaceHelper< MailFolder >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:folderName
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmo:MailFolder
				 * \n tracker:weight=4
				 * \n tracker:modified=1100
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFolderNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_folderName "nmo:folderName" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFolderNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::folderName >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFolderNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_folderName "nmo:folderName" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFolderNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::folderName >(object_info, strategy, parent); }
				/*!
					\fn void setFolderNames(LiveNodes const &folderName_)
					
					
					Sets the property \ref nmo_folderName "nmo:folderName" set to the given \a folderName_ set.
					\sa LiveResource::setObjects
				 */
				void setFolderNames(LiveNodes const &folderName_) { baseSetObjects(nmo::folderName::iri(), folderName_); }
				/*!
					\fn void removeFolderNames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_folderName "nmo:folderName" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFolderNames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::folderName::iri(), object_info); }
				/*!
					\fn QString getFolderName()
					
					
					Returns the property \ref nmo_folderName "nmo:folderName". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getFolderName() { return baseGetObject< nmo::folderName >(); }
				/*!
					\fn void setFolderName(QString const &folderName_)
					
					
					Sets the property \ref nmo_folderName "nmo:folderName" to the given \a folderName.
					\sa LiveResource::setObject
				 */
				void setFolderName(QString const &folderName_) { baseSetObject< nmo::folderName >( folderName_ ); }
				/*!
					\fn QString firstFolderName()
					
					
					Returns the first property \ref nmo_folderName "nmo:folderName". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstFolderName() { return baseFirstObject< nmo::folderName >(); }
				/*!
					\fn void addFolderName(QString const &folderName_)
					
					
					Adds the given \a folderName_ to the property \ref nmo_folderName "nmo:folderName" set.
					\sa LiveResource::addObject
				 */
				void addFolderName(QString const &folderName_) { baseAddObject< nmo::folderName >( folderName_ ); }
				/*!
					\fn void removeFolderName(QString const &folderName_)
					
					
					Removes the given \a folderName_ from the property \ref nmo_folderName "nmo:folderName" set.
					\sa LiveResource::removeObject
				 */
				void removeFolderName(QString const &folderName_) { baseRemoveObject< nmo::folderName >(folderName_); }

				/* Property generated from nmo:serverUnreadCount
				 * \n rdfs:range=xsd:integer
				 * \n tracker:modified=1748
				 * \n rdfs:domain=nmo:MailFolder
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveServerUnreadCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_serverUnreadCount "nmo:serverUnreadCount" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveServerUnreadCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::serverUnreadCount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getServerUnreadCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_serverUnreadCount "nmo:serverUnreadCount" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getServerUnreadCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::serverUnreadCount >(object_info, strategy, parent); }
				/*!
					\fn void setServerUnreadCounts(LiveNodes const &serverUnreadCount_)
					
					
					Sets the property \ref nmo_serverUnreadCount "nmo:serverUnreadCount" set to the given \a serverUnreadCount_ set.
					\sa LiveResource::setObjects
				 */
				void setServerUnreadCounts(LiveNodes const &serverUnreadCount_) { baseSetObjects(nmo::serverUnreadCount::iri(), serverUnreadCount_); }
				/*!
					\fn void removeServerUnreadCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_serverUnreadCount "nmo:serverUnreadCount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeServerUnreadCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::serverUnreadCount::iri(), object_info); }
				/*!
					\fn qint64 getServerUnreadCount()
					
					
					Returns the property \ref nmo_serverUnreadCount "nmo:serverUnreadCount". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getServerUnreadCount() { return baseGetObject< nmo::serverUnreadCount >(); }
				/*!
					\fn void setServerUnreadCount(qint64 const &serverUnreadCount_)
					
					
					Sets the property \ref nmo_serverUnreadCount "nmo:serverUnreadCount" to the given \a serverUnreadCount.
					\sa LiveResource::setObject
				 */
				void setServerUnreadCount(qint64 const &serverUnreadCount_) { baseSetObject< nmo::serverUnreadCount >( serverUnreadCount_ ); }
				/*!
					\fn qint64 firstServerUnreadCount()
					
					
					Returns the first property \ref nmo_serverUnreadCount "nmo:serverUnreadCount". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstServerUnreadCount() { return baseFirstObject< nmo::serverUnreadCount >(); }
				/*!
					\fn void addServerUnreadCount(qint64 const &serverUnreadCount_)
					
					
					Adds the given \a serverUnreadCount_ to the property \ref nmo_serverUnreadCount "nmo:serverUnreadCount" set.
					\sa LiveResource::addObject
				 */
				void addServerUnreadCount(qint64 const &serverUnreadCount_) { baseAddObject< nmo::serverUnreadCount >( serverUnreadCount_ ); }
				/*!
					\fn void removeServerUnreadCount(qint64 const &serverUnreadCount_)
					
					
					Removes the given \a serverUnreadCount_ from the property \ref nmo_serverUnreadCount "nmo:serverUnreadCount" set.
					\sa LiveResource::removeObject
				 */
				void removeServerUnreadCount(qint64 const &serverUnreadCount_) { baseRemoveObject< nmo::serverUnreadCount >(serverUnreadCount_); }

				/* Property generated from nmo:serverCount
				 * \n rdfs:range=xsd:integer
				 * \n tracker:modified=1229
				 * \n rdfs:domain=nmo:MailFolder
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveServerCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_serverCount "nmo:serverCount" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveServerCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::serverCount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getServerCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_serverCount "nmo:serverCount" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getServerCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::serverCount >(object_info, strategy, parent); }
				/*!
					\fn void setServerCounts(LiveNodes const &serverCount_)
					
					
					Sets the property \ref nmo_serverCount "nmo:serverCount" set to the given \a serverCount_ set.
					\sa LiveResource::setObjects
				 */
				void setServerCounts(LiveNodes const &serverCount_) { baseSetObjects(nmo::serverCount::iri(), serverCount_); }
				/*!
					\fn void removeServerCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_serverCount "nmo:serverCount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeServerCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::serverCount::iri(), object_info); }
				/*!
					\fn qint64 getServerCount()
					
					
					Returns the property \ref nmo_serverCount "nmo:serverCount". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getServerCount() { return baseGetObject< nmo::serverCount >(); }
				/*!
					\fn void setServerCount(qint64 const &serverCount_)
					
					
					Sets the property \ref nmo_serverCount "nmo:serverCount" to the given \a serverCount.
					\sa LiveResource::setObject
				 */
				void setServerCount(qint64 const &serverCount_) { baseSetObject< nmo::serverCount >( serverCount_ ); }
				/*!
					\fn qint64 firstServerCount()
					
					
					Returns the first property \ref nmo_serverCount "nmo:serverCount". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstServerCount() { return baseFirstObject< nmo::serverCount >(); }
				/*!
					\fn void addServerCount(qint64 const &serverCount_)
					
					
					Adds the given \a serverCount_ to the property \ref nmo_serverCount "nmo:serverCount" set.
					\sa LiveResource::addObject
				 */
				void addServerCount(qint64 const &serverCount_) { baseAddObject< nmo::serverCount >( serverCount_ ); }
				/*!
					\fn void removeServerCount(qint64 const &serverCount_)
					
					
					Removes the given \a serverCount_ from the property \ref nmo_serverCount "nmo:serverCount" set.
					\sa LiveResource::removeObject
				 */
				void removeServerCount(qint64 const &serverCount_) { baseRemoveObject< nmo::serverCount >(serverCount_); }
				 //@}
			};

			/*! Class generated from nmo:Mailbox
			 * \ingroup onto_nmo_classes
			 * This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * 
			 * tracker:modified = 1632
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Mailbox
				: public virtual MailAccount

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Mailbox"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<MailAccount, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Mailbox> Live;
				Mailbox() { this->attachInterfaceHelper< Mailbox >(); }
				~Mailbox() { this->detachInterfaceHelper< Mailbox >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmo:MailboxDataObject
			 * \ingroup onto_nmo_classes
			 * 
			 * tracker:modified = 1262
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class MailboxDataObject
				: public virtual nie::DataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#MailboxDataObject"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::DataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MailboxDataObject> Live;
				MailboxDataObject() { this->attachInterfaceHelper< MailboxDataObject >(); }
				~MailboxDataObject() { this->detachInterfaceHelper< MailboxDataObject >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmo:MessageHeader
			 * \ingroup onto_nmo_classes
			 * Pairs key=value to store arbitrary message header. Note that if a property exists already in the ontology for those headers it should be used. This is just a safe guard mechanism.
			 * 
			 * rdfs:label = Message header
			 * 
			 * tracker:modified = 1357
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmo_messageHeader "nmo:messageHeader"
			 */
			class MessageHeader
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#MessageHeader"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MessageHeader> Live;
				MessageHeader() { this->attachInterfaceHelper< MessageHeader >(); }
				~MessageHeader() { this->detachInterfaceHelper< MessageHeader >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:headerName
				 * \n Key of the message header key-value pair
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmo:MessageHeader
				 * \n tracker:weight=3
				 * \n tracker:modified=1605
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHeaderNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_headerName "nmo:headerName" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHeaderNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::headerName >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHeaderNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_headerName "nmo:headerName" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHeaderNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::headerName >(object_info, strategy, parent); }
				/*!
					\fn void setHeaderNames(LiveNodes const &headerName_)
					
					
					Sets the property \ref nmo_headerName "nmo:headerName" set to the given \a headerName_ set.
					\sa LiveResource::setObjects
				 */
				void setHeaderNames(LiveNodes const &headerName_) { baseSetObjects(nmo::headerName::iri(), headerName_); }
				/*!
					\fn void removeHeaderNames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_headerName "nmo:headerName" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHeaderNames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::headerName::iri(), object_info); }
				/*!
					\fn QString getHeaderName()
					
					
					Returns the property \ref nmo_headerName "nmo:headerName". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getHeaderName() { return baseGetObject< nmo::headerName >(); }
				/*!
					\fn void setHeaderName(QString const &headerName_)
					
					
					Sets the property \ref nmo_headerName "nmo:headerName" to the given \a headerName.
					\sa LiveResource::setObject
				 */
				void setHeaderName(QString const &headerName_) { baseSetObject< nmo::headerName >( headerName_ ); }
				/*!
					\fn QString firstHeaderName()
					
					
					Returns the first property \ref nmo_headerName "nmo:headerName". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstHeaderName() { return baseFirstObject< nmo::headerName >(); }
				/*!
					\fn void addHeaderName(QString const &headerName_)
					
					
					Adds the given \a headerName_ to the property \ref nmo_headerName "nmo:headerName" set.
					\sa LiveResource::addObject
				 */
				void addHeaderName(QString const &headerName_) { baseAddObject< nmo::headerName >( headerName_ ); }
				/*!
					\fn void removeHeaderName(QString const &headerName_)
					
					
					Removes the given \a headerName_ from the property \ref nmo_headerName "nmo:headerName" set.
					\sa LiveResource::removeObject
				 */
				void removeHeaderName(QString const &headerName_) { baseRemoveObject< nmo::headerName >(headerName_); }

				/* Property generated from nmo:headerValue
				 * \n Value of the message header key-value pair
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmo:MessageHeader
				 * \n tracker:weight=4
				 * \n tracker:modified=1903
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHeaderValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_headerValue "nmo:headerValue" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHeaderValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::headerValue >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHeaderValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_headerValue "nmo:headerValue" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHeaderValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::headerValue >(object_info, strategy, parent); }
				/*!
					\fn void setHeaderValues(LiveNodes const &headerValue_)
					
					
					Sets the property \ref nmo_headerValue "nmo:headerValue" set to the given \a headerValue_ set.
					\sa LiveResource::setObjects
				 */
				void setHeaderValues(LiveNodes const &headerValue_) { baseSetObjects(nmo::headerValue::iri(), headerValue_); }
				/*!
					\fn void removeHeaderValues(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_headerValue "nmo:headerValue" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHeaderValues(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::headerValue::iri(), object_info); }
				/*!
					\fn QString getHeaderValue()
					
					
					Returns the property \ref nmo_headerValue "nmo:headerValue". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getHeaderValue() { return baseGetObject< nmo::headerValue >(); }
				/*!
					\fn void setHeaderValue(QString const &headerValue_)
					
					
					Sets the property \ref nmo_headerValue "nmo:headerValue" to the given \a headerValue.
					\sa LiveResource::setObject
				 */
				void setHeaderValue(QString const &headerValue_) { baseSetObject< nmo::headerValue >( headerValue_ ); }
				/*!
					\fn QString firstHeaderValue()
					
					
					Returns the first property \ref nmo_headerValue "nmo:headerValue". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstHeaderValue() { return baseFirstObject< nmo::headerValue >(); }
				/*!
					\fn void addHeaderValue(QString const &headerValue_)
					
					
					Adds the given \a headerValue_ to the property \ref nmo_headerValue "nmo:headerValue" set.
					\sa LiveResource::addObject
				 */
				void addHeaderValue(QString const &headerValue_) { baseAddObject< nmo::headerValue >( headerValue_ ); }
				/*!
					\fn void removeHeaderValue(QString const &headerValue_)
					
					
					Removes the given \a headerValue_ from the property \ref nmo_headerValue "nmo:headerValue" set.
					\sa LiveResource::removeObject
				 */
				void removeHeaderValue(QString const &headerValue_) { baseRemoveObject< nmo::headerValue >(headerValue_); }
				 //@}
			};

			/*! Class generated from nmo:Multipart
			 * \ingroup onto_nmo_classes
			 * 
			 * tracker:modified = 1084
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Multipart
				: public virtual nfo::DataContainer

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Multipart"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::DataContainer, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Multipart> Live;
				Multipart() { this->attachInterfaceHelper< Multipart >(); }
				~Multipart() { this->detachInterfaceHelper< Multipart >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:partBoundary
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1049
				 * \n rdfs:domain=nmo:Multipart
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePartBoundarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_partBoundary "nmo:partBoundary" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePartBoundarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::partBoundary >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPartBoundarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_partBoundary "nmo:partBoundary" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPartBoundarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::partBoundary >(object_info, strategy, parent); }
				/*!
					\fn void setPartBoundarys(LiveNodes const &partBoundary_)
					
					
					Sets the property \ref nmo_partBoundary "nmo:partBoundary" set to the given \a partBoundary_ set.
					\sa LiveResource::setObjects
				 */
				void setPartBoundarys(LiveNodes const &partBoundary_) { baseSetObjects(nmo::partBoundary::iri(), partBoundary_); }
				/*!
					\fn void removePartBoundarys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_partBoundary "nmo:partBoundary" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePartBoundarys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::partBoundary::iri(), object_info); }
				/*!
					\fn QString firstPartBoundary()
					
					
					Returns the first property \ref nmo_partBoundary "nmo:partBoundary". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstPartBoundary() { return baseFirstObject< nmo::partBoundary >(); }
				/*!
					\fn void addPartBoundary(QString const &partBoundary_)
					
					
					Adds the given \a partBoundary_ to the property \ref nmo_partBoundary "nmo:partBoundary" set.
					\sa LiveResource::addObject
				 */
				void addPartBoundary(QString const &partBoundary_) { baseAddObject< nmo::partBoundary >( partBoundary_ ); }
				/*!
					\fn void removePartBoundary(QString const &partBoundary_)
					
					
					Removes the given \a partBoundary_ from the property \ref nmo_partBoundary "nmo:partBoundary" set.
					\sa LiveResource::removeObject
				 */
				void removePartBoundary(QString const &partBoundary_) { baseRemoveObject< nmo::partBoundary >(partBoundary_); }
				 //@}
			};

			/*! Class generated from nmo:PermanentChannel
			 * \ingroup onto_nmo_classes
			 * Well-known stable channel like an IRC room in a specific server. Predefined URL schema for the instances is recommended
			 * 
			 * tracker:modified = 1809
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class PermanentChannel
				: public virtual CommunicationChannel

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#PermanentChannel"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<CommunicationChannel, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<PermanentChannel> Live;
				PermanentChannel() { this->attachInterfaceHelper< PermanentChannel >(); }
				~PermanentChannel() { this->detachInterfaceHelper< PermanentChannel >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmo:PhoneMessageFolder
			 * \ingroup onto_nmo_classes
			 * Folder for phone message (SMS and MMS). Not a subclass of nfo:Folder because it would confuse filesystem folders
			 * 
			 * rdfs:label = Phone message Folder
			 * 
			 * tracker:modified = 1275
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nmo_predefined_phone_msg_folder_myfolder "nmo:predefined-phone-msg-folder-myfolder"
			 * 		\ref nmo_predefined_phone_msg_folder_outbox "nmo:predefined-phone-msg-folder-outbox"
			 * 		\ref nmo_predefined_phone_msg_folder_inbox "nmo:predefined-phone-msg-folder-inbox"
			 * 		\ref nmo_predefined_phone_msg_folder_sent "nmo:predefined-phone-msg-folder-sent"
			 * 		\ref nmo_predefined_phone_msg_folder_draft "nmo:predefined-phone-msg-folder-draft"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmo_containsPhoneMessageFolder "nmo:containsPhoneMessageFolder"
			 */
			class PhoneMessageFolder
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#PhoneMessageFolder"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<PhoneMessageFolder> Live;
				PhoneMessageFolder() { this->attachInterfaceHelper< PhoneMessageFolder >(); }
				~PhoneMessageFolder() { this->detachInterfaceHelper< PhoneMessageFolder >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:containsPhoneMessageFolder
				 * \n To link and reconstruct a hierarchy of folders
				 * \n rdfs:range=nmo:PhoneMessageFolder
				 * \n rdfs:label=contains Phone Message Folder
				 * \n tracker:modified=1918
				 * \n rdfs:domain=nmo:PhoneMessageFolder
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContainsPhoneMessageFolders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_containsPhoneMessageFolder "nmo:containsPhoneMessageFolder" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContainsPhoneMessageFolders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::containsPhoneMessageFolder >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContainsPhoneMessageFolders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_containsPhoneMessageFolder "nmo:containsPhoneMessageFolder" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContainsPhoneMessageFolders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::containsPhoneMessageFolder >(object_info, strategy, parent); }
				/*!
					\fn void setContainsPhoneMessageFolders(LiveNodes const &containsPhoneMessageFolder_)
					
					
					Sets the property \ref nmo_containsPhoneMessageFolder "nmo:containsPhoneMessageFolder" set to the given \a containsPhoneMessageFolder_ set.
					\sa LiveResource::setObjects
				 */
				void setContainsPhoneMessageFolders(LiveNodes const &containsPhoneMessageFolder_) { baseSetObjects(nmo::containsPhoneMessageFolder::iri(), containsPhoneMessageFolder_); }
				/*!
					\fn void removeContainsPhoneMessageFolders(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_containsPhoneMessageFolder "nmo:containsPhoneMessageFolder" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContainsPhoneMessageFolders(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::containsPhoneMessageFolder::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< PhoneMessageFolder > firstContainsPhoneMessageFolder()
					
					
					Returns the first property \ref nmo_containsPhoneMessageFolder "nmo:containsPhoneMessageFolder". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< PhoneMessageFolder > firstContainsPhoneMessageFolder() { return baseFirstObject< nmo::containsPhoneMessageFolder >(); }
				/*!
					\fn ::SopranoLive::Live< PhoneMessageFolder > addContainsPhoneMessageFolder()
					
					
					Adds a new uniquely named resource to the property \ref nmo_containsPhoneMessageFolder "nmo:containsPhoneMessageFolder" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< PhoneMessageFolder > addContainsPhoneMessageFolder() { return baseAddObject< nmo::containsPhoneMessageFolder >(); }
				/*!
					\fn ::SopranoLive::Live< PhoneMessageFolder > addContainsPhoneMessageFolder(::SopranoLive::Live< PhoneMessageFolder > const &containsPhoneMessageFolder_)
					
					
					Adds the given \a containsPhoneMessageFolder_ to the property \ref nmo_containsPhoneMessageFolder "nmo:containsPhoneMessageFolder" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< PhoneMessageFolder > addContainsPhoneMessageFolder(::SopranoLive::Live< PhoneMessageFolder > const &containsPhoneMessageFolder_) { return baseAddObject< nmo::containsPhoneMessageFolder >( containsPhoneMessageFolder_ ); }
				/*!
					\fn void removeContainsPhoneMessageFolder(::SopranoLive::Live< PhoneMessageFolder > const &containsPhoneMessageFolder_)
					
					
					Removes the given \a containsPhoneMessageFolder_ from the property \ref nmo_containsPhoneMessageFolder "nmo:containsPhoneMessageFolder" set.
					\sa LiveResource::removeObject
				 */
				void removeContainsPhoneMessageFolder(::SopranoLive::Live< PhoneMessageFolder > const &containsPhoneMessageFolder_) { baseRemoveObject< nmo::containsPhoneMessageFolder >(containsPhoneMessageFolder_); }

				/* Property generated from nmo:containsPhoneMessage
				 * \n Link between an Phone Message and a Folder
				 * \n rdfs:range=nmo:PhoneMessage
				 * \n rdfs:label=Contains Phone Message
				 * \n tracker:modified=1766
				 * \n rdfs:domain=nmo:PhoneMessageFolder
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContainsPhoneMessages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_containsPhoneMessage "nmo:containsPhoneMessage" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContainsPhoneMessages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::containsPhoneMessage >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContainsPhoneMessages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_containsPhoneMessage "nmo:containsPhoneMessage" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContainsPhoneMessages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::containsPhoneMessage >(object_info, strategy, parent); }
				/*!
					\fn void setContainsPhoneMessages(LiveNodes const &containsPhoneMessage_)
					
					
					Sets the property \ref nmo_containsPhoneMessage "nmo:containsPhoneMessage" set to the given \a containsPhoneMessage_ set.
					\sa LiveResource::setObjects
				 */
				void setContainsPhoneMessages(LiveNodes const &containsPhoneMessage_) { baseSetObjects(nmo::containsPhoneMessage::iri(), containsPhoneMessage_); }
				/*!
					\fn void removeContainsPhoneMessages(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_containsPhoneMessage "nmo:containsPhoneMessage" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContainsPhoneMessages(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::containsPhoneMessage::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< PhoneMessage > firstContainsPhoneMessage()
					
					
					Returns the first property \ref nmo_containsPhoneMessage "nmo:containsPhoneMessage". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< PhoneMessage > firstContainsPhoneMessage() { return baseFirstObject< nmo::containsPhoneMessage >(); }
				/*!
					\fn ::SopranoLive::Live< PhoneMessage > addContainsPhoneMessage()
					
					
					Adds a new uniquely named resource to the property \ref nmo_containsPhoneMessage "nmo:containsPhoneMessage" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< PhoneMessage > addContainsPhoneMessage() { return baseAddObject< nmo::containsPhoneMessage >(); }
				/*!
					\fn ::SopranoLive::Live< PhoneMessage > addContainsPhoneMessage(::SopranoLive::Live< PhoneMessage > const &containsPhoneMessage_)
					
					
					Adds the given \a containsPhoneMessage_ to the property \ref nmo_containsPhoneMessage "nmo:containsPhoneMessage" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< PhoneMessage > addContainsPhoneMessage(::SopranoLive::Live< PhoneMessage > const &containsPhoneMessage_) { return baseAddObject< nmo::containsPhoneMessage >( containsPhoneMessage_ ); }
				/*!
					\fn void removeContainsPhoneMessage(::SopranoLive::Live< PhoneMessage > const &containsPhoneMessage_)
					
					
					Removes the given \a containsPhoneMessage_ from the property \ref nmo_containsPhoneMessage "nmo:containsPhoneMessage" set.
					\sa LiveResource::removeObject
				 */
				void removeContainsPhoneMessage(::SopranoLive::Live< PhoneMessage > const &containsPhoneMessage_) { baseRemoveObject< nmo::containsPhoneMessage >(containsPhoneMessage_); }

				/* Property generated from nmo:phoneMessageFolderId
				 * \n Id assigned to the folder for sync purpouses
				 * \n rdfs:label=folder id
				 * \n rdfs:subPropertyOf=nie:identifier
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmo:PhoneMessageFolder
				 * \n tracker:modified=1422
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePhoneMessageFolderIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmo_phoneMessageFolderId "nmo:phoneMessageFolderId" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePhoneMessageFolderIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::phoneMessageFolderId >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPhoneMessageFolderIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmo_phoneMessageFolderId "nmo:phoneMessageFolderId" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPhoneMessageFolderIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::phoneMessageFolderId >(object_info, strategy, parent); }
				/*!
					\fn void setPhoneMessageFolderIds(LiveNodes const &phoneMessageFolderId_)
					
					
					Sets the property \ref nmo_phoneMessageFolderId "nmo:phoneMessageFolderId" set to the given \a phoneMessageFolderId_ set.
					\sa LiveResource::setObjects
				 */
				void setPhoneMessageFolderIds(LiveNodes const &phoneMessageFolderId_) { baseSetObjects(nmo::phoneMessageFolderId::iri(), phoneMessageFolderId_); }
				/*!
					\fn void removePhoneMessageFolderIds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmo_phoneMessageFolderId "nmo:phoneMessageFolderId" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePhoneMessageFolderIds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::phoneMessageFolderId::iri(), object_info); }
				/*!
					\fn QString getPhoneMessageFolderId()
					
					
					Returns the property \ref nmo_phoneMessageFolderId "nmo:phoneMessageFolderId". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getPhoneMessageFolderId() { return baseGetObject< nmo::phoneMessageFolderId >(); }
				/*!
					\fn void setPhoneMessageFolderId(QString const &phoneMessageFolderId_)
					
					
					Sets the property \ref nmo_phoneMessageFolderId "nmo:phoneMessageFolderId" to the given \a phoneMessageFolderId.
					\sa LiveResource::setObject
				 */
				void setPhoneMessageFolderId(QString const &phoneMessageFolderId_) { baseSetObject< nmo::phoneMessageFolderId >( phoneMessageFolderId_ ); }
				/*!
					\fn QString firstPhoneMessageFolderId()
					
					
					Returns the first property \ref nmo_phoneMessageFolderId "nmo:phoneMessageFolderId". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstPhoneMessageFolderId() { return baseFirstObject< nmo::phoneMessageFolderId >(); }
				/*!
					\fn void addPhoneMessageFolderId(QString const &phoneMessageFolderId_)
					
					
					Adds the given \a phoneMessageFolderId_ to the property \ref nmo_phoneMessageFolderId "nmo:phoneMessageFolderId" set.
					\sa LiveResource::addObject
				 */
				void addPhoneMessageFolderId(QString const &phoneMessageFolderId_) { baseAddObject< nmo::phoneMessageFolderId >( phoneMessageFolderId_ ); }
				/*!
					\fn void removePhoneMessageFolderId(QString const &phoneMessageFolderId_)
					
					
					Removes the given \a phoneMessageFolderId_ from the property \ref nmo_phoneMessageFolderId "nmo:phoneMessageFolderId" set.
					\sa LiveResource::removeObject
				 */
				void removePhoneMessageFolderId(QString const &phoneMessageFolderId_) { baseRemoveObject< nmo::phoneMessageFolderId >(phoneMessageFolderId_); }
				 //@}
			};

			/*! Class generated from nmo:ReportReadStatus
			 * \ingroup onto_nmo_classes
			 * Predefined set of read status instances
			 * 
			 * rdfs:label = Read statuses
			 * 
			 * tracker:modified = 1610
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nmo_read_status_read "nmo:read-status-read"
			 * 		\ref nmo_read_status_unknown "nmo:read-status-unknown"
			 * 		\ref nmo_read_status_deleted "nmo:read-status-deleted"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmo_reportReadStatus "nmo:reportReadStatus"
			 */
			class ReportReadStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#ReportReadStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<ReportReadStatus> Live;
				ReportReadStatus() { this->attachInterfaceHelper< ReportReadStatus >(); }
				~ReportReadStatus() { this->detachInterfaceHelper< ReportReadStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmo:SMSFolder
			 * \ingroup onto_nmo_classes
			 * Folder for SMS. Not a subclass of nfo:Folder because it would confuse filesystem folders. Use the superclass PhoneMessageFolder and its predefined instances.
			 * This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * 
			 * rdfs:label = SMS Folder
			 * 
			 * tracker:modified = 1178
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nmo_default_sms_folder_outbox "nmo:default-sms-folder-outbox"
			 * 		\ref nmo_default_sms_folder_myfolder "nmo:default-sms-folder-myfolder"
			 * 		\ref nmo_default_sms_folder_sent "nmo:default-sms-folder-sent"
			 * 		\ref nmo_default_sms_folder_inbox "nmo:default-sms-folder-inbox"
			 * 		\ref nmo_default_sms_folder_draft "nmo:default-sms-folder-draft"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmo_containsSMSFolder "nmo:containsSMSFolder"
			 */
			class SMSFolder
				: public virtual PhoneMessageFolder

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#SMSFolder"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PhoneMessageFolder, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<SMSFolder> Live;
				SMSFolder() { this->attachInterfaceHelper< SMSFolder >(); }
				~SMSFolder() { this->detachInterfaceHelper< SMSFolder >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmo:smsFolderId
				 * \n Id assigned to the folder for sync purpouses
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=folder id
				 * \n rdfs:subPropertyOf=nmo:phoneMessageFolderId
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmo:SMSFolder
				 * \n tracker:modified=1933
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSmsFolderIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmo::smsFolderId for replacement
					Returns a live model of property \ref nmo_smsFolderId "nmo:smsFolderId" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveSmsFolderIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::smsFolderId >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSmsFolderIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmo::smsFolderId for replacement
					Returns all current values of property \ref nmo_smsFolderId "nmo:smsFolderId" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getSmsFolderIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::smsFolderId >(object_info, strategy, parent); }
				/*!
					\fn void setSmsFolderIds(LiveNodes const &smsFolderId_)
					
					\deprecated See \ref nmo::smsFolderId for replacement
					Sets the property \ref nmo_smsFolderId "nmo:smsFolderId" set to the given \a smsFolderId_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setSmsFolderIds(LiveNodes const &smsFolderId_) { baseSetObjects(nmo::smsFolderId::iri(), smsFolderId_); }
				/*!
					\fn void removeSmsFolderIds(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nmo::smsFolderId for replacement
					Removes the properties from property \ref nmo_smsFolderId "nmo:smsFolderId" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeSmsFolderIds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::smsFolderId::iri(), object_info); }
				/*!
					\fn QString getSmsFolderId()
					
					\deprecated See \ref nmo::smsFolderId for replacement
					Returns the property \ref nmo_smsFolderId "nmo:smsFolderId". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED QString getSmsFolderId() { return baseGetObject< nmo::smsFolderId >(); }
				/*!
					\fn void setSmsFolderId(QString const &smsFolderId_)
					
					\deprecated See \ref nmo::smsFolderId for replacement
					Sets the property \ref nmo_smsFolderId "nmo:smsFolderId" to the given \a smsFolderId.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED void setSmsFolderId(QString const &smsFolderId_) { baseSetObject< nmo::smsFolderId >( smsFolderId_ ); }
				/*!
					\fn QString firstSmsFolderId()
					
					\deprecated See \ref nmo::smsFolderId for replacement
					Returns the first property \ref nmo_smsFolderId "nmo:smsFolderId". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED QString firstSmsFolderId() { return baseFirstObject< nmo::smsFolderId >(); }
				/*!
					\fn void addSmsFolderId(QString const &smsFolderId_)
					
					\deprecated See \ref nmo::smsFolderId for replacement
					Adds the given \a smsFolderId_ to the property \ref nmo_smsFolderId "nmo:smsFolderId" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addSmsFolderId(QString const &smsFolderId_) { baseAddObject< nmo::smsFolderId >( smsFolderId_ ); }
				/*!
					\fn void removeSmsFolderId(QString const &smsFolderId_)
					
					\deprecated See \ref nmo::smsFolderId for replacement
					Removes the given \a smsFolderId_ from the property \ref nmo_smsFolderId "nmo:smsFolderId" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeSmsFolderId(QString const &smsFolderId_) { baseRemoveObject< nmo::smsFolderId >(smsFolderId_); }

				/* Property generated from nmo:containsSMS
				 * \n Link between an Phone Message and a Folder. Use containsPhoneMessage instead
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=Contains SMS
				 * \n rdfs:subPropertyOf=nmo:containsPhoneMessage
				 * \n rdfs:range=nmo:PhoneMessage
				 * \n rdfs:domain=nmo:SMSFolder
				 * \n tracker:modified=1716
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContainsSMSs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmo::containsSMS for replacement
					Returns a live model of property \ref nmo_containsSMS "nmo:containsSMS" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveContainsSMSs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::containsSMS >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContainsSMSs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmo::containsSMS for replacement
					Returns all current values of property \ref nmo_containsSMS "nmo:containsSMS" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getContainsSMSs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::containsSMS >(object_info, strategy, parent); }
				/*!
					\fn void setContainsSMSs(LiveNodes const &containsSMS_)
					
					\deprecated See \ref nmo::containsSMS for replacement
					Sets the property \ref nmo_containsSMS "nmo:containsSMS" set to the given \a containsSMS_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setContainsSMSs(LiveNodes const &containsSMS_) { baseSetObjects(nmo::containsSMS::iri(), containsSMS_); }
				/*!
					\fn void removeContainsSMSs(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nmo::containsSMS for replacement
					Removes the properties from property \ref nmo_containsSMS "nmo:containsSMS" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeContainsSMSs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::containsSMS::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< PhoneMessage > firstContainsSMS()
					
					\deprecated See \ref nmo::containsSMS for replacement
					Returns the first property \ref nmo_containsSMS "nmo:containsSMS". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< PhoneMessage > firstContainsSMS() { return baseFirstObject< nmo::containsSMS >(); }
				/*!
					\fn ::SopranoLive::Live< PhoneMessage > addContainsSMS()
					
					\deprecated See \ref nmo::containsSMS for replacement
					Adds a new uniquely named resource to the property \ref nmo_containsSMS "nmo:containsSMS" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< PhoneMessage > addContainsSMS() { return baseAddObject< nmo::containsSMS >(); }
				/*!
					\fn ::SopranoLive::Live< PhoneMessage > addContainsSMS(::SopranoLive::Live< PhoneMessage > const &containsSMS_)
					
					\deprecated See \ref nmo::containsSMS for replacement
					Adds the given \a containsSMS_ to the property \ref nmo_containsSMS "nmo:containsSMS" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< PhoneMessage > addContainsSMS(::SopranoLive::Live< PhoneMessage > const &containsSMS_) { return baseAddObject< nmo::containsSMS >( containsSMS_ ); }
				/*!
					\fn void removeContainsSMS(::SopranoLive::Live< PhoneMessage > const &containsSMS_)
					
					\deprecated See \ref nmo::containsSMS for replacement
					Removes the given \a containsSMS_ from the property \ref nmo_containsSMS "nmo:containsSMS" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeContainsSMS(::SopranoLive::Live< PhoneMessage > const &containsSMS_) { baseRemoveObject< nmo::containsSMS >(containsSMS_); }

				/* Property generated from nmo:containsSMSFolder
				 * \n To link and reconstruct a hierarchy of folders. Use containsPhoneMessageFolder instead.
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=contains SMS Folder
				 * \n rdfs:subPropertyOf=nmo:containsPhoneMessageFolder
				 * \n rdfs:range=nmo:SMSFolder
				 * \n rdfs:domain=nmo:SMSFolder
				 * \n tracker:modified=1667
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContainsSMSFolders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmo::containsSMSFolder for replacement
					Returns a live model of property \ref nmo_containsSMSFolder "nmo:containsSMSFolder" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveContainsSMSFolders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmo::containsSMSFolder >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContainsSMSFolders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmo::containsSMSFolder for replacement
					Returns all current values of property \ref nmo_containsSMSFolder "nmo:containsSMSFolder" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getContainsSMSFolders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmo::containsSMSFolder >(object_info, strategy, parent); }
				/*!
					\fn void setContainsSMSFolders(LiveNodes const &containsSMSFolder_)
					
					\deprecated See \ref nmo::containsSMSFolder for replacement
					Sets the property \ref nmo_containsSMSFolder "nmo:containsSMSFolder" set to the given \a containsSMSFolder_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setContainsSMSFolders(LiveNodes const &containsSMSFolder_) { baseSetObjects(nmo::containsSMSFolder::iri(), containsSMSFolder_); }
				/*!
					\fn void removeContainsSMSFolders(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nmo::containsSMSFolder for replacement
					Removes the properties from property \ref nmo_containsSMSFolder "nmo:containsSMSFolder" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeContainsSMSFolders(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmo::containsSMSFolder::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< SMSFolder > firstContainsSMSFolder()
					
					\deprecated See \ref nmo::containsSMSFolder for replacement
					Returns the first property \ref nmo_containsSMSFolder "nmo:containsSMSFolder". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< SMSFolder > firstContainsSMSFolder() { return baseFirstObject< nmo::containsSMSFolder >(); }
				/*!
					\fn ::SopranoLive::Live< SMSFolder > addContainsSMSFolder()
					
					\deprecated See \ref nmo::containsSMSFolder for replacement
					Adds a new uniquely named resource to the property \ref nmo_containsSMSFolder "nmo:containsSMSFolder" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< SMSFolder > addContainsSMSFolder() { return baseAddObject< nmo::containsSMSFolder >(); }
				/*!
					\fn ::SopranoLive::Live< SMSFolder > addContainsSMSFolder(::SopranoLive::Live< SMSFolder > const &containsSMSFolder_)
					
					\deprecated See \ref nmo::containsSMSFolder for replacement
					Adds the given \a containsSMSFolder_ to the property \ref nmo_containsSMSFolder "nmo:containsSMSFolder" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< SMSFolder > addContainsSMSFolder(::SopranoLive::Live< SMSFolder > const &containsSMSFolder_) { return baseAddObject< nmo::containsSMSFolder >( containsSMSFolder_ ); }
				/*!
					\fn void removeContainsSMSFolder(::SopranoLive::Live< SMSFolder > const &containsSMSFolder_)
					
					\deprecated See \ref nmo::containsSMSFolder for replacement
					Removes the given \a containsSMSFolder_ from the property \ref nmo_containsSMSFolder "nmo:containsSMSFolder" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeContainsSMSFolder(::SopranoLive::Live< SMSFolder > const &containsSMSFolder_) { baseRemoveObject< nmo::containsSMSFolder >(containsSMSFolder_); }
				 //@}
			};

			/*! Class generated from nmo:SMSMessage
			 * \ingroup onto_nmo_classes
			 * Plain SMS Message
			 * 
			 * rdfs:label = SMS Message
			 * 
			 * tracker:modified = 1245
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class SMSMessage
				: public virtual PhoneMessage

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#SMSMessage"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PhoneMessage, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<SMSMessage> Live;
				SMSMessage() { this->attachInterfaceHelper< SMSMessage >(); }
				~SMSMessage() { this->detachInterfaceHelper< SMSMessage >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmo:TransientChannel
			 * \ingroup onto_nmo_classes
			 * Channel created ad-hoc for the communication like a multi chat in some systems
			 * 
			 * tracker:modified = 1303
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class TransientChannel
				: public virtual CommunicationChannel

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#TransientChannel"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<CommunicationChannel, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<TransientChannel> Live;
				TransientChannel() { this->attachInterfaceHelper< TransientChannel >(); }
				~TransientChannel() { this->detachInterfaceHelper< TransientChannel >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmo:VOIPCall
			 * \ingroup onto_nmo_classes
			 * 
			 * tracker:modified = 1742
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class VOIPCall
				: public virtual Call

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#VOIPCall"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Call, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<VOIPCall> Live;
				VOIPCall() { this->attachInterfaceHelper< VOIPCall >(); }
				~VOIPCall() { this->detachInterfaceHelper< VOIPCall >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::Attachment::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::Call::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::CommunicationChannel::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::Conversation::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::DeliveryStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::Email::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::IMMessage::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::MMSMessage::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::MailAccount::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::MailFolder::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::Mailbox::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::MailboxDataObject::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::Message::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::MessageHeader::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::MimePart::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::Multipart::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::PermanentChannel::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::PhoneMessage::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::PhoneMessageFolder::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::ReportReadStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::SMSFolder::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::SMSMessage::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::TransientChannel::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmo::VOIPCall::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_NMO_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_NMO_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_NMO_H_POST_INCLUDES
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#endif
