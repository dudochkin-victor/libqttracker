/*
 * nco.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:25.162961
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/nco.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_NCO_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_NCO_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_nco_classes namespace nco class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nco_properties namespace nco property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nco_resources namespace nco resource definitions
		 *  @{
		 *  @}
		 */
		static const char nco_namespace_prefix[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#";
		struct Ontology_nco
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(nco_namespace_prefix) + suffix;
			}
		};
		namespace nco
		{
			inline QUrl iri(QString suffix) { return Ontology_nco::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class Affiliation;
			class AuthorizationStatus;
			class BbsNumber;
			class CarPhoneNumber;
			class CellPhoneNumber;
			class Contact;
			class ContactGroup;
			class ContactList;
			class ContactListDataObject;
			class ContactMedium;
			class DomesticDeliveryAddress;
			class EmailAddress;
			class FaxNumber;
			class Gender;
			class IMAccount;
			class IMAddress;
			class IMCapability;
			class IMContact;
			class InternationalDeliveryAddress;
			class IsdnNumber;
			class MessagingNumber;
			class MetaContact;
			class ModemNumber;
			class OrganizationContact;
			class PagerNumber;
			class ParcelDeliveryAddress;
			class PcsNumber;
			class PersonContact;
			class PhoneNumber;
			class PostalAddress;
			class PresenceStatus;
			class Role;
			class VideoTelephoneNumber;
			class VoicePhoneNumber;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NCO_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NCO_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NCO_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/scal.h>
#include <QtTracker/ontologies/ncal.h>
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/scal.h>
#include <QtTracker/ontologies/ncal.h>
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/scal.h>
#include <QtTracker/ontologies/ncal.h>
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nco
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from nco:department
			 * \anchor nco_department
			 * \n Department. The organizational unit within the organization.
			 * \n rdfs:label=department
			 * \n tracker:fulltextNoLimit=true
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:Affiliation
			 * \n tracker:weight=4
			 * \n tracker:modified=1819
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class department
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#department"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Affiliation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Affiliation RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:org
			 * \anchor nco_org
			 * \n Name of an organization or a unit within an organization the object represented by a Contact is associated with. An equivalent of the 'ORG' property defined in RFC 2426 Sec. 3.5.5
			 * \n rdfs:label=org
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:OrganizationContact
			 * \n rdfs:domain=nco:Affiliation
			 * \n tracker:weight=4
			 * \n tracker:modified=1043
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class org
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#org"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Affiliation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Affiliation RDFDomain;
				/// The localized c++ range type of this property
				typedef OrganizationContact Range;
				/// The full, non-localized rdf range type of this property
				typedef OrganizationContact RDFRange;
			};
			/*! Property generated from nco:title
			 * \anchor nco_title
			 * \n rdfs:label=title
			 * \n tracker:fulltextNoLimit=true
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:Affiliation
			 * \n tracker:weight=10
			 * \n tracker:modified=1815
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class title
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#title"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Affiliation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Affiliation RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:role
			 * \anchor nco_role
			 * \n rdfs:label=role
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:Affiliation
			 * \n tracker:weight=2
			 * \n tracker:modified=1413
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class role
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#role"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Affiliation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Affiliation RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:key
			 * \anchor nco_key
			 * \n An encryption key attached to a contact. Inspired by the KEY property defined in RFC 2426 sec. 3.7.2
			 * \n rdfs:label=key
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:modified=1970
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class key
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#key"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef nie::DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nie::DataObject RDFRange;
			};
			/*! Property generated from nco:contactUID
			 * \anchor nco_contactUID
			 * \n A value that represents a globally unique  identifier corresponding to the individual or resource associated with the Contact. An equivalent of the 'UID' property defined in RFC 2426 Sec. 3.6.7
			 * \n rdfs:label=contactUID
			 * \n rdfs:subPropertyOf=nie:identifier
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:weight=5
			 * \n tracker:modified=1501
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class contactUID
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactUID"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:contactLocalUID
			 * \anchor nco_contactLocalUID
			 * \n Unique ID for the contact in the local storage
			 * \n rdfs:label=local contact UID
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:modified=1316
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class contactLocalUID
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactLocalUID"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:hasLocation
			 * \anchor nco_hasLocation
			 * \n Geographical location of the contact. Inspired by the 'GEO' property specified in RFC 2426 Sec. 3.4.2
			 * \n rdfs:label=hasLocation
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:modified=1554
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class hasLocation
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasLocation"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from nco:nickname
			 * \anchor nco_nickname
			 * \n A nickname of the Object represented by this Contact. This is an equivalen of the 'NICKNAME' property as defined in RFC 2426 Sec. 3.1.3.
			 * \n rdfs:label=nickname
			 * \n tracker:fulltextNoLimit=true
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:weight=5
			 * \n tracker:modified=1290
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class nickname
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nickname"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:note
			 * \anchor nco_note
			 * \n A note about the object represented by this Contact. An equivalent for the 'NOTE' property defined in RFC 2426 Sec. 3.6.2
			 * \n rdfs:label=note
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:weight=4
			 * \n tracker:modified=1052
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class note
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#note"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:representative
			 * \anchor nco_representative
			 * \n An object that represent an object represented by this Contact. Usually this property is used to link a Contact to an organization, to a contact to the representative of this organization the user directly interacts with. An equivalent for the 'AGENT' property defined in RFC 2426 Sec. 3.5.4
			 * \n rdfs:label=representative
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:modified=1778
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class representative
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef Contact RDFRange;
			};
			/*! Property generated from nco:fullname
			 * \anchor nco_fullname
			 * \n To specify the formatted text corresponding to the name of the object the Contact represents. An equivalent of the FN property as defined in RFC 2426 Sec. 3.1.1.
			 * \n rdfs:label=fullname
			 * \n rdfs:subPropertyOf=dc:title
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:weight=6
			 * \n tracker:modified=1909
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n tracker:fulltextNoLimit=true
			 */
			/// \ingroup onto_nco_properties
			class fullname
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#fullname"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:photo
			 * \anchor nco_photo
			 * \n Photograph attached to a Contact. The DataObject refered to by this property is usually interpreted as an nfo:Image. Inspired by the PHOTO property defined in RFC 2426 sec. 3.1.4
			 * \n rdfs:label=photo
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:modified=1287
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class photo
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#photo"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef nie::DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nie::DataObject RDFRange;
			};
			/*! Property generated from nco:birthDate
			 * \anchor nco_birthDate
			 * \n Birth date of the object represented by this Contact. An equivalent of the 'BDAY' property as defined in RFC 2426 Sec. 3.1.5.
			 * \n rdfs:label=birthDate
			 * \n rdfs:subPropertyOf=dc:date
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:weight=5
			 * \n tracker:modified=1134
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class birthDate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#birthDate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nco:belongsToGroup
			 * \anchor nco_belongsToGroup
			 * \n Links a Contact with a ContactGroup it belongs to.
			 * \n rdfs:range=nco:ContactGroup
			 * \n rdfs:label=addressLocation
			 * \n tracker:modified=1240
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class belongsToGroup
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#belongsToGroup"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef ContactGroup Range;
				/// The full, non-localized rdf range type of this property
				typedef ContactGroup RDFRange;
			};
			/*! Property generated from nco:sound
			 * \anchor nco_sound
			 * \n Sound clip attached to a Contact. The DataObject refered to by this property is usually interpreted as an nfo:Audio. Inspired by the SOUND property defined in RFC 2425 sec. 3.6.6.
			 * \n rdfs:label=sound
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:modified=1047
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class sound
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#sound"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef nie::DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nie::DataObject RDFRange;
			};
			/*! Property generated from nco:contactGroupName
			 * \anchor nco_contactGroupName
			 * \n The name of the contact group. This property was NOT defined in the VCARD standard. See documentation of the 'ContactGroup' class for details
			 * \n rdfs:label=contactGroupName
			 * \n rdfs:subPropertyOf=dc:title
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:ContactGroup
			 * \n tracker:weight=4
			 * \n tracker:modified=1268
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n tracker:fulltextNoLimit=true
			 */
			/// \ingroup onto_nco_properties
			class contactGroupName
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactGroupName"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef ContactGroup Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ContactGroup RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:containsContact
			 * \anchor nco_containsContact
			 * \n A property used to group contacts into contact groups. This property was NOT defined in the VCARD standard. See documentation for the 'ContactList' class for details
			 * \n rdfs:label=containsContact
			 * \n rdfs:subPropertyOf=nie:hasPart
			 * \n rdfs:range=nco:ContactListDataObject
			 * \n rdfs:domain=nco:ContactList
			 * \n tracker:modified=1063
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class containsContact
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#containsContact"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef ContactList Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ContactList RDFDomain;
				/// The localized c++ range type of this property
				typedef ContactListDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef ContactListDataObject RDFRange;
			};
			/*! Property generated from nco:contactMediumComment
			 * \anchor nco_contactMediumComment
			 * \n A comment about the contact medium.
			 * \n rdfs:label=contactMediumComment
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:ContactMedium
			 * \n tracker:modified=1952
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class contactMediumComment
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactMediumComment"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef ContactMedium Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ContactMedium RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:emailAddress
			 * \anchor nco_emailAddress
			 * \n rdfs:label=emailAddress
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:EmailAddress
			 * \n tracker:weight=4
			 * \n tracker:modified=1892
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class emailAddress
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#emailAddress"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef EmailAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef EmailAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:hasIMContact
			 * \anchor nco_hasIMContact
			 * \n Indicates that this Instant Messaging account has the specified Instant Messaging address in the contact list.
			 * \n rdfs:range=nco:IMAddress
			 * \n rdfs:label=hasIMAccount
			 * \n tracker:modified=1203
			 * \n rdfs:domain=nco:IMAccount
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class hasIMContact
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMContact"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef IMAccount Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAccount RDFDomain;
				/// The localized c++ range type of this property
				typedef IMAddress Range;
				/// The full, non-localized rdf range type of this property
				typedef IMAddress RDFRange;
			};
			/*! Property generated from nco:imAccountAddress
			 * \anchor nco_imAccountAddress
			 * \n Instant Messaging address of this IM account. The user 'me' can send and receive messages from this IM address.
			 * \n rdfs:label=imAccountAddress
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:IMAddress
			 * \n rdfs:domain=nco:IMAccount
			 * \n tracker:modified=1358
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imAccountAddress
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAccountAddress"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef IMAccount Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAccount RDFDomain;
				/// The localized c++ range type of this property
				typedef IMAddress Range;
				/// The full, non-localized rdf range type of this property
				typedef IMAddress RDFRange;
			};
			/*! Property generated from nco:imAccountType
			 * \anchor nco_imAccountType
			 * \n Type of the IM account. This may be the name of the service that provides the IM functionality. Examples might include Jabber, ICQ, MSN etc
			 * \n rdfs:label=imAccountType
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:IMAccount
			 * \n tracker:modified=1508
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imAccountType
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAccountType"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef IMAccount Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAccount RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:imDisplayName
			 * \anchor nco_imDisplayName
			 * \n The user-visible name of this account. This SHOULD be chosen by the user at account creation time. The account creation user interface is responsible for setting a reasonable default value in the user's locale; something like	'Jabber (bob@example.com)' would be sensible.
			 * \n rdfs:label=displayname
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:IMAccount
			 * \n tracker:modified=1026
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imDisplayName
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imDisplayName"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef IMAccount Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAccount RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:imEnabled
			 * \anchor nco_imEnabled
			 * \n Unknown text
			 * \n rdfs:label=enabled
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nco:IMAccount
			 * \n tracker:modified=1985
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imEnabled
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imEnabled"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef IMAccount Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAccount RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nco:imAccountAvatar
			 * \anchor nco_imAccountAvatar
			 * \n The picture the user wants to show to others in this account. This has been replaced by nco:imAvatar.
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=account avatar
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:domain=nco:IMAccount
			 * \n tracker:modified=1172
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imAccountAvatar
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAccountAvatar"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef IMAccount Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAccount RDFDomain;
				/// The localized c++ range type of this property
				typedef nie::DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nie::DataObject RDFRange;
			};
			/*! Property generated from nco:imID
			 * \anchor nco_imID
			 * \n Identifier of the IM account. Examples of such identifier might include ICQ UINs, Jabber IDs, Skype names etc.
			 * \n rdfs:label=imID
			 * \n rdfs:subPropertyOf=nao:identifier
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:IMAddress
			 * \n tracker:weight=5
			 * \n tracker:modified=1425
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imID
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imID"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef IMAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:imNickname
			 * \anchor nco_imNickname
			 * \n A nickname attached to a particular IM address.
			 * \n rdfs:label=imNickname
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:IMAddress
			 * \n tracker:weight=5
			 * \n tracker:modified=1387
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imNickname
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imNickname"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef IMAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:imAvatar
			 * \anchor nco_imAvatar
			 * \n A picture attached to a particular IM address.
			 * \n rdfs:label=imAvatar
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:domain=nco:IMAddress
			 * \n tracker:modified=1345
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imAvatar
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAvatar"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef IMAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef nie::DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nie::DataObject RDFRange;
			};
			/*! Property generated from nco:imProtocol
			 * \anchor nco_imProtocol
			 * \n Protocol of the account ('skype', 'gtalk', 'icq', ...)
			 * \n rdfs:label=imProtocol
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:IMAddress
			 * \n tracker:modified=1893
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imProtocol
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imProtocol"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef IMAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:imStatusMessage
			 * \anchor nco_imStatusMessage
			 * \n A feature common in most IM systems. A message left by the user for all his/her contacts to see.
			 * \n rdfs:label=imStatusMessage
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:IMAddress
			 * \n tracker:modified=1451
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imStatusMessage
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatusMessage"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef IMAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:imPresence
			 * \anchor nco_imPresence
			 * \n rdfs:label=imPresence
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:PresenceStatus
			 * \n rdfs:domain=nco:IMAddress
			 * \n tracker:modified=1731
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imPresence
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imPresence"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef IMAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef PresenceStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef PresenceStatus RDFRange;
			};
			/*! Property generated from nco:presenceLastModified
			 * \anchor nco_presenceLastModified
			 * \n Timestamp of the last change in the presence status
			 * \n rdfs:label=Presence last modified
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=nco:IMAddress
			 * \n tracker:modified=1718
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class presenceLastModified
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#presenceLastModified"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef IMAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nco:imCapability
			 * \anchor nco_imCapability
			 * \n Capabilities of an IM Contact, what can we interact with him
			 * \n rdfs:range=nco:IMCapability
			 * \n rdfs:label=imContact Capability
			 * \n tracker:modified=1814
			 * \n rdfs:domain=nco:IMAddress
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imCapability
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imCapability"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef IMAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef IMCapability Range;
				/// The full, non-localized rdf range type of this property
				typedef IMCapability RDFRange;
			};
			/*! Property generated from nco:imAddressAuthStatusFrom
			 * \anchor nco_imAddressAuthStatusFrom
			 * \n Has the other end authorize to receive information about his changes
			 * \n rdfs:label=IM Address authorization status in the remote end
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:AuthorizationStatus
			 * \n rdfs:domain=nco:IMAddress
			 * \n tracker:modified=1694
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imAddressAuthStatusFrom
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAddressAuthStatusFrom"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef IMAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef AuthorizationStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef AuthorizationStatus RDFRange;
			};
			/*! Property generated from nco:imAddressAuthStatusTo
			 * \anchor nco_imAddressAuthStatusTo
			 * \n Do i authorize this im Account to receive my information
			 * \n rdfs:label=IM Address authorization status in the local end
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:AuthorizationStatus
			 * \n rdfs:domain=nco:IMAddress
			 * \n tracker:modified=1211
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imAddressAuthStatusTo
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAddressAuthStatusTo"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef IMAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef AuthorizationStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef AuthorizationStatus RDFRange;
			};
			/*! Property generated from nco:fromIMAccount
			 * \anchor nco_fromIMAccount
			 * \n Indicates that an Instant Messaging account owned by an entity represented by this contact. This has been replaced by nco:fromIMAccount.
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:range=nco:IMAccount
			 * \n rdfs:label=hasIMAccount
			 * \n tracker:modified=1301
			 * \n rdfs:domain=nco:IMContact
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class fromIMAccount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#fromIMAccount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef IMContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMContact RDFDomain;
				/// The localized c++ range type of this property
				typedef IMAccount Range;
				/// The full, non-localized rdf range type of this property
				typedef IMAccount RDFRange;
			};
			/*! Property generated from nco:imContactId
			 * \anchor nco_imContactId
			 * \n ID of the contact in the service like my.friend@xmail.com. This has been replaced by nco:imId.
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=imContactId
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:IMContact
			 * \n tracker:modified=1324
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imContactId
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imContactId"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef IMContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMContact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:imContactNickname
			 * \anchor nco_imContactNickname
			 * \n Visible nickname of the user in a service. This has been replaced by nco:imNickname.
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=imContactNickname
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:IMContact
			 * \n tracker:modified=1308
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imContactNickname
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imContactNickname"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef IMContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMContact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:imContactStatusMessage
			 * \anchor nco_imContactStatusMessage
			 * \n Status message of the user in a service. This has been replaced by nco:imStatusMessage.
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=imContactStatusMessage
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:IMContact
			 * \n tracker:modified=1645
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imContactStatusMessage
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imContactStatusMessage"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef IMContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMContact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:imContactPresence
			 * \anchor nco_imContactPresence
			 * \n Online availability of the user in a service. This has been replaced by nco:imPresence.
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=imContactPresence
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:PresenceStatus
			 * \n rdfs:domain=nco:IMContact
			 * \n tracker:modified=1640
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imContactPresence
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imContactPresence"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef IMContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMContact RDFDomain;
				/// The localized c++ range type of this property
				typedef PresenceStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef PresenceStatus RDFRange;
			};
			/*! Property generated from nco:imContactCapability
			 * \anchor nco_imContactCapability
			 * \n Capabilities of an IM Contact, what can we interact with him. This has been replaced by nco:imCapability.
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:range=nco:IMCapability
			 * \n rdfs:label=imContact Capability
			 * \n tracker:modified=1854
			 * \n rdfs:domain=nco:IMContact
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class imContactCapability
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imContactCapability"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef IMContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef IMContact RDFDomain;
				/// The localized c++ range type of this property
				typedef IMCapability Range;
				/// The full, non-localized rdf range type of this property
				typedef IMCapability RDFRange;
			};
			/*! Property generated from nco:logo
			 * \anchor nco_logo
			 * \n Logo of a company. Inspired by the LOGO property defined in RFC 2426 sec. 3.5.3
			 * \n rdfs:label=logo
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:domain=nco:OrganizationContact
			 * \n tracker:modified=1635
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class logo
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#logo"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef OrganizationContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef OrganizationContact RDFDomain;
				/// The localized c++ range type of this property
				typedef nie::DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nie::DataObject RDFRange;
			};
			/*! Property generated from nco:metacontact
			 * \anchor nco_metacontact
			 * \n Link a single contact with a metacontact
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=metacontact
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:MetaContact
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:modified=1389
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class metacontact
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#metacontact"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef MetaContact Range;
				/// The full, non-localized rdf range type of this property
				typedef MetaContact RDFRange;
			};
			/*! Property generated from nco:nameHonorificSuffix
			 * \anchor nco_nameHonorificSuffix
			 * \n A suffix for the name of the Object represented by the given object. See documentation for the 'nameFamily' for details.
			 * \n rdfs:label=nameHonorificSuffix
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:weight=3
			 * \n tracker:modified=1546
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class nameHonorificSuffix
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificSuffix"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:nameFamily
			 * \anchor nco_nameFamily
			 * \n The family name of an Object represented by this Contact. These applies to people that have more than one given name. The 'first' one is considered 'the' given name (see nameGiven) property. All additional ones are considered 'additional' names. The name inherited from parents is the 'family name'. e.g. For Dr. John Phil Paul Stevenson Jr. M.D. A.C.P. we have contact with: honorificPrefix: 'Dr.', nameGiven: 'John', nameAdditional: 'Phil', nameAdditional: 'Paul', nameFamily: 'Stevenson', honorificSuffix: 'Jr.', honorificSuffix: 'M.D.', honorificSuffix: 'A.C.P.'. These properties form an equivalent of the compound 'N' property as defined in RFC 2426 Sec. 3.1.2
			 * \n rdfs:label=nameFamily
			 * \n tracker:fulltextNoLimit=true
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:weight=4
			 * \n tracker:indexed=true
			 * \n tracker:modified=1661
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class nameFamily
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameFamily"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:nameHonorificPrefix
			 * \anchor nco_nameHonorificPrefix
			 * \n A prefix for the name of the object represented by this Contact. See documentation for the 'nameFamily' property for details.
			 * \n rdfs:label=nameHonorificPrefix
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:weight=3
			 * \n tracker:modified=1812
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class nameHonorificPrefix
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificPrefix"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:hasIMAccount
			 * \anchor nco_hasIMAccount
			 * \n Indicates that an Instant Messaging account owned by an entity represented by this contact.
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=hasIMAccount
			 * \n rdfs:range=nco:IMAccount
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:indexed=true
			 * \n tracker:modified=1775
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class hasIMAccount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef IMAccount Range;
				/// The full, non-localized rdf range type of this property
				typedef IMAccount RDFRange;
			};
			/*! Property generated from nco:nameGiven
			 * \anchor nco_nameGiven
			 * \n The given name for the object represented by this Contact. See documentation for 'nameFamily' property for details.
			 * \n rdfs:label=nameGiven
			 * \n tracker:fulltextNoLimit=true
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:weight=5
			 * \n tracker:modified=1544
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class nameGiven
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameGiven"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:nameAdditional
			 * \anchor nco_nameAdditional
			 * \n Additional given name of an object represented by this contact. See documentation for 'nameFamily' property for details.
			 * \n rdfs:label=nameAdditional
			 * \n tracker:fulltextNoLimit=true
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:weight=5
			 * \n tracker:modified=1910
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class nameAdditional
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameAdditional"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:hobby
			 * \anchor nco_hobby
			 * \n A hobby associated with a PersonContact. This property can be used to express hobbies and interests.
			 * \n rdfs:label=hobby
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:weight=2
			 * \n tracker:modified=1710
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class hobby
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hobby"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:gender
			 * \anchor nco_gender
			 * \n Gender of the given contact.
			 * \n rdfs:label=gender
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Gender
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:modified=1799
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class gender
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef Gender Range;
				/// The full, non-localized rdf range type of this property
				typedef Gender RDFRange;
			};
			/*! Property generated from nco:hasAffiliation
			 * \anchor nco_hasAffiliation
			 * \n Links a PersonContact with an Affiliation.
			 * \n rdfs:range=nco:Affiliation
			 * \n rdfs:label=hasAffiliation
			 * \n tracker:modified=1784
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class hasAffiliation
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasAffiliation"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef Affiliation Range;
				/// The full, non-localized rdf range type of this property
				typedef Affiliation RDFRange;
			};
			/*! Property generated from nco:phoneNumber
			 * \anchor nco_phoneNumber
			 * \n rdfs:label=phoneNumber
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PhoneNumber
			 * \n tracker:weight=5
			 * \n tracker:modified=1181
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class phoneNumber
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#phoneNumber"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PhoneNumber Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PhoneNumber RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:region
			 * \anchor nco_region
			 * \n Region. Inspired by the fifth part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
			 * \n rdfs:label=region
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PostalAddress
			 * \n tracker:weight=3
			 * \n tracker:modified=1612
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class region
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#region"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PostalAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PostalAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:country
			 * \anchor nco_country
			 * \n A part of an address specifying the country. Inspired by the seventh part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
			 * \n rdfs:label=country
			 * \n tracker:fulltextNoLimit=true
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PostalAddress
			 * \n tracker:weight=3
			 * \n tracker:modified=1151
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class country
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#country"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PostalAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PostalAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:extendedAddress
			 * \anchor nco_extendedAddress
			 * \n An extended part of an address. This field might be used to express parts of an address that aren't include in the name of the Contact but also aren't part of the actual location. Usually the streed address and following fields are enough for a postal letter to arrive. Examples may include ('University of California Campus building 45', 'Sears Tower 34th floor' etc.) Inspired by the second part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
			 * \n rdfs:label=extendedAddress
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PostalAddress
			 * \n tracker:weight=6
			 * \n tracker:modified=1876
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class extendedAddress
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#extendedAddress"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PostalAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PostalAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:addressLocation
			 * \anchor nco_addressLocation
			 * \n The geographical location of a postal address.
			 * \n rdfs:label=addressLocation
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=nco:PostalAddress
			 * \n tracker:weight=3
			 * \n tracker:modified=1355
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class addressLocation
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#addressLocation"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef PostalAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PostalAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from nco:streetAddress
			 * \anchor nco_streetAddress
			 * \n The streed address. Inspired by the third part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
			 * \n rdfs:label=streetAddress
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PostalAddress
			 * \n tracker:weight=6
			 * \n tracker:modified=1438
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class streetAddress
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#streetAddress"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PostalAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PostalAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:postalcode
			 * \anchor nco_postalcode
			 * \n Postal Code. Inspired by the sixth part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
			 * \n rdfs:label=postalcode
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PostalAddress
			 * \n tracker:weight=6
			 * \n tracker:modified=1584
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class postalcode
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#postalcode"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PostalAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PostalAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:locality
			 * \anchor nco_locality
			 * \n Locality or City. Inspired by the fourth part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
			 * \n rdfs:label=locality
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PostalAddress
			 * \n tracker:weight=4
			 * \n tracker:modified=1538
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class locality
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#locality"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PostalAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PostalAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:pobox
			 * \anchor nco_pobox
			 * \n Post office box. This is the first part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
			 * \n rdfs:label=pobox
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PostalAddress
			 * \n tracker:weight=5
			 * \n tracker:modified=1360
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class pobox
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#pobox"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PostalAddress Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PostalAddress RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nco:hasContactMedium
			 * \anchor nco_hasContactMedium
			 * \n A superProperty for all properties linking a Contact to an instance of a contact medium.
			 * \n rdfs:range=nco:ContactMedium
			 * \n rdfs:label=hasContactMedium
			 * \n tracker:modified=1231
			 * \n rdfs:domain=nco:Role
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class hasContactMedium
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasContactMedium"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Role Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Role RDFDomain;
				/// The localized c++ range type of this property
				typedef ContactMedium Range;
				/// The full, non-localized rdf range type of this property
				typedef ContactMedium RDFRange;
			};
			/*! Property generated from nco:url
			 * \anchor nco_url
			 * \n A uniform resource locator associated with the given role of a Contact. Inspired by the 'URL' property defined in RFC 2426 Sec. 3.6.8.
			 * \n rdfs:label=url
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=nco:Role
			 * \n tracker:weight=4
			 * \n tracker:modified=1881
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class url
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#url"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Role Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Role RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from nco:hasPhoneNumber
			 * \anchor nco_hasPhoneNumber
			 * \n A number for telephony communication with the object represented by this Contact. An equivalent of the 'TEL' property defined in RFC 2426 Sec. 3.3.1
			 * \n rdfs:label=hasPhoneNumber
			 * \n rdfs:subPropertyOf=nco:hasContactMedium
			 * \n rdfs:range=nco:PhoneNumber
			 * \n rdfs:domain=nco:Role
			 * \n tracker:modified=1849
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class hasPhoneNumber
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPhoneNumber"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Role Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Role RDFDomain;
				/// The localized c++ range type of this property
				typedef PhoneNumber Range;
				/// The full, non-localized rdf range type of this property
				typedef PhoneNumber RDFRange;
			};
			/*! Property generated from nco:websiteUrl
			 * \anchor nco_websiteUrl
			 * \n A url of a website.
			 * \n rdfs:label=websiteUrl
			 * \n rdfs:subPropertyOf=nco:url
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=nco:Role
			 * \n tracker:weight=5
			 * \n tracker:modified=1477
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class websiteUrl
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#websiteUrl"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Role Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Role RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from nco:hasEmailAddress
			 * \anchor nco_hasEmailAddress
			 * \n An address for electronic mail communication with the object specified by this contact. An equivalent of the 'EMAIL' property as defined in RFC 2426 Sec. 3.3.1.
			 * \n rdfs:label=hasEmailAddress
			 * \n rdfs:subPropertyOf=nco:hasContactMedium
			 * \n rdfs:range=nco:EmailAddress
			 * \n rdfs:domain=nco:Role
			 * \n tracker:indexed=true
			 * \n tracker:modified=1838
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class hasEmailAddress
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Role Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Role RDFDomain;
				/// The localized c++ range type of this property
				typedef EmailAddress Range;
				/// The full, non-localized rdf range type of this property
				typedef EmailAddress RDFRange;
			};
			/*! Property generated from nco:foafUrl
			 * \anchor nco_foafUrl
			 * \n The URL of the FOAF file.
			 * \n rdfs:label=foafUrl
			 * \n rdfs:subPropertyOf=nco:url
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=nco:Role
			 * \n tracker:modified=1636
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class foafUrl
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#foafUrl"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Role Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Role RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from nco:blogUrl
			 * \anchor nco_blogUrl
			 * \n A Blog url.
			 * \n rdfs:label=blogUrl
			 * \n rdfs:subPropertyOf=nco:url
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=nco:Role
			 * \n tracker:modified=1165
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class blogUrl
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#blogUrl"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Role Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Role RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from nco:hasPostalAddress
			 * \anchor nco_hasPostalAddress
			 * \n The default Address for a Contact. An equivalent of the 'ADR' property as defined in RFC 2426 Sec. 3.2.1.
			 * \n rdfs:label=hasPostalAddress
			 * \n rdfs:subPropertyOf=nco:hasContactMedium
			 * \n rdfs:range=nco:PostalAddress
			 * \n rdfs:domain=nco:Role
			 * \n tracker:indexed=true
			 * \n tracker:modified=1475
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class hasPostalAddress
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPostalAddress"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Role Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Role RDFDomain;
				/// The localized c++ range type of this property
				typedef PostalAddress Range;
				/// The full, non-localized rdf range type of this property
				typedef PostalAddress RDFRange;
			};
			/*! Property generated from nco:hasIMAddress
			 * \anchor nco_hasIMAddress
			 * \n An address for communication using instant messages with the object specified by this contact.
			 * \n rdfs:label=imAddress
			 * \n rdfs:subPropertyOf=nco:hasContactMedium
			 * \n rdfs:range=nco:IMAddress
			 * \n rdfs:domain=nco:Role
			 * \n tracker:modified=1851
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class hasIMAddress
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAddress"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Role Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Role RDFDomain;
				/// The localized c++ range type of this property
				typedef IMAddress Range;
				/// The full, non-localized rdf range type of this property
				typedef IMAddress RDFRange;
			};
			/*! Property generated from nco:video
			 * \anchor nco_video
			 * \n Video avatar of a contact. Note that is an icon/avatar, not a generic 'present in video' property
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:label=Contact video
			 * \n tracker:modified=1024
			 * \n rdfs:domain=nco:Role
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class video
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#video"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Role Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Role RDFDomain;
				/// The localized c++ range type of this property
				typedef nie::DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nie::DataObject RDFRange;
			};
			/*! Property generated from nco:voiceMail
			 * \anchor nco_voiceMail
			 * \n Indicates if the given number accepts voice mail. (e.g. there is an answering machine). Inspired by TYPE=msg parameter of the TEL property defined in RFC 2426 sec. 3.3.1
			 * \n rdfs:label=voiceMail
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nco:VoicePhoneNumber
			 * \n tracker:modified=1462
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class voiceMail
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#voiceMail"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef VoicePhoneNumber Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef VoicePhoneNumber RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nco:contributor
			 * \anchor nco_contributor
			 * \n An entity responsible for making contributions to the content of the InformationElement.
			 * \n rdfs:label=contributor
			 * \n rdfs:subPropertyOf=dc:contributor
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:writeback=true
			 * \n tracker:modified=1373
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class contributor
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef nie::InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nie::InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef Contact RDFRange;
			};
			/*! Property generated from nco:creator
			 * \anchor nco_creator
			 * \n Creator of a data object, an entity primarily responsible for the creation of the content of the data object.
			 * \n rdfs:label=creator
			 * \n rdfs:subPropertyOf=nco:contributor
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:writeback=true
			 * \n tracker:weight=4
			 * \n tracker:modified=1639
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class creator
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef nie::InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nie::InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef Contact RDFRange;
			};
			/*! Property generated from nco:publisher
			 * \anchor nco_publisher
			 * \n An entity responsible for making the InformationElement available.
			 * \n rdfs:label=publisher
			 * \n rdfs:subPropertyOf=dc:publisher
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:weight=2
			 * \n tracker:modified=1983
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nco_properties
			class publisher
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nco Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef nie::InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nie::InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef Contact RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			/*! Resource generated from nco:default-contact-emergency
			 * \anchor nco_default_contact_emergency
			 */
			/// \ingroup onto_nco_resources
			class default_contact_emergency
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#default-contact-emergency"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PersonContact ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:default-contact-me
			 * \anchor nco_default_contact_me
			 */
			/// \ingroup onto_nco_resources
			class default_contact_me
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#default-contact-me"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PersonContact ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:gender-female
			 * \anchor nco_gender_female
			 */
			/// \ingroup onto_nco_resources
			class gender_female
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender-female"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Gender ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:gender-male
			 * \anchor nco_gender_male
			 */
			/// \ingroup onto_nco_resources
			class gender_male
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender-male"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Gender ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:im-capability-audio-calls
			 * \anchor nco_im_capability_audio_calls
			 */
			/// \ingroup onto_nco_resources
			class im_capability_audio_calls
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#im-capability-audio-calls"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef IMCapability ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:im-capability-dbus-tubes
			 * \anchor nco_im_capability_dbus_tubes
			 */
			/// \ingroup onto_nco_resources
			class im_capability_dbus_tubes
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#im-capability-dbus-tubes"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef IMCapability ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:im-capability-file-transfers
			 * \anchor nco_im_capability_file_transfers
			 */
			/// \ingroup onto_nco_resources
			class im_capability_file_transfers
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#im-capability-file-transfers"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef IMCapability ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:im-capability-media-calls
			 * \anchor nco_im_capability_media_calls
			 */
			/// \ingroup onto_nco_resources
			class im_capability_media_calls
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#im-capability-media-calls"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef IMCapability ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:im-capability-stream-tubes
			 * \anchor nco_im_capability_stream_tubes
			 */
			/// \ingroup onto_nco_resources
			class im_capability_stream_tubes
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#im-capability-stream-tubes"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef IMCapability ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:im-capability-text-chat
			 * \anchor nco_im_capability_text_chat
			 */
			/// \ingroup onto_nco_resources
			class im_capability_text_chat
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#im-capability-text-chat"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef IMCapability ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:im-capability-upgrading-calls
			 * \anchor nco_im_capability_upgrading_calls
			 */
			/// \ingroup onto_nco_resources
			class im_capability_upgrading_calls
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#im-capability-upgrading-calls"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef IMCapability ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:im-capability-video-calls
			 * \anchor nco_im_capability_video_calls
			 */
			/// \ingroup onto_nco_resources
			class im_capability_video_calls
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#im-capability-video-calls"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef IMCapability ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:predefined-auth-status-no
			 * \anchor nco_predefined_auth_status_no
			 */
			/// \ingroup onto_nco_resources
			class predefined_auth_status_no
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#predefined-auth-status-no"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AuthorizationStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:predefined-auth-status-requested
			 * \anchor nco_predefined_auth_status_requested
			 */
			/// \ingroup onto_nco_resources
			class predefined_auth_status_requested
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#predefined-auth-status-requested"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AuthorizationStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:predefined-auth-status-yes
			 * \anchor nco_predefined_auth_status_yes
			 */
			/// \ingroup onto_nco_resources
			class predefined_auth_status_yes
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#predefined-auth-status-yes"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AuthorizationStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:presence-status-available
			 * \anchor nco_presence_status_available
			 */
			/// \ingroup onto_nco_resources
			class presence_status_available
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#presence-status-available"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PresenceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:presence-status-away
			 * \anchor nco_presence_status_away
			 */
			/// \ingroup onto_nco_resources
			class presence_status_away
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#presence-status-away"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PresenceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:presence-status-busy
			 * \anchor nco_presence_status_busy
			 */
			/// \ingroup onto_nco_resources
			class presence_status_busy
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#presence-status-busy"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PresenceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:presence-status-error
			 * \anchor nco_presence_status_error
			 */
			/// \ingroup onto_nco_resources
			class presence_status_error
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#presence-status-error"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PresenceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:presence-status-extended-away
			 * \anchor nco_presence_status_extended_away
			 */
			/// \ingroup onto_nco_resources
			class presence_status_extended_away
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#presence-status-extended-away"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PresenceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:presence-status-hidden
			 * \anchor nco_presence_status_hidden
			 */
			/// \ingroup onto_nco_resources
			class presence_status_hidden
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#presence-status-hidden"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PresenceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:presence-status-offline
			 * \anchor nco_presence_status_offline
			 */
			/// \ingroup onto_nco_resources
			class presence_status_offline
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#presence-status-offline"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PresenceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:presence-status-unknown
			 * \anchor nco_presence_status_unknown
			 */
			/// \ingroup onto_nco_resources
			class presence_status_unknown
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#presence-status-unknown"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PresenceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nco:presence-status-unset
			 * \anchor nco_presence_status_unset
			 */
			/// \ingroup onto_nco_resources
			class presence_status_unset
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#presence-status-unset"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef PresenceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_nco Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NCO_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NCO_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NCO_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/scal.h>
#include <QtTracker/ontologies/ncal.h>
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nie.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/scal.h>
#include <QtTracker/ontologies/ncal.h>
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nie.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nco
		{

			using namespace scal;
			using namespace ncal;
			using namespace rdfs;
			using namespace nfo;
			using namespace nie;
			using namespace rdf;
			using namespace xsd;

			/*! Class generated from nco:Role
			 * \ingroup onto_nco_classes
			 * A role played by a contact. Contacts that denote people, can have many roles (e.g. see the hasAffiliation property and Affiliation class). Contacts that denote Organizations or other Agents usually have one role.  Each role can introduce additional contact media.
			 * 
			 * rdfs:label = Role
			 * 
			 * tracker:modified = 1840
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Role
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Role"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Role> Live;
				Role() { this->attachInterfaceHelper< Role >(); }
				~Role() { this->detachInterfaceHelper< Role >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:foafUrl
				 * \n The URL of the FOAF file.
				 * \n rdfs:label=foafUrl
				 * \n rdfs:subPropertyOf=nco:url
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=nco:Role
				 * \n tracker:modified=1636
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveFoafUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_foafUrl "nco:foafUrl" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFoafUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::foafUrl >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFoafUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_foafUrl "nco:foafUrl" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFoafUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::foafUrl >(object_info, strategy, parent); }
				/*!
					\fn void setFoafUrls(LiveNodes const &foafUrl_)
					
					
					Sets the property \ref nco_foafUrl "nco:foafUrl" set to the given \a foafUrl_ set.
					\sa LiveResource::setObjects
				 */
				void setFoafUrls(LiveNodes const &foafUrl_) { baseSetObjects(nco::foafUrl::iri(), foafUrl_); }
				/*!
					\fn void removeFoafUrls(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_foafUrl "nco:foafUrl" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFoafUrls(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::foafUrl::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstFoafUrl()
					
					
					Returns the first property \ref nco_foafUrl "nco:foafUrl". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstFoafUrl() { return baseFirstObject< nco::foafUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addFoafUrl()
					
					
					Adds a new uniquely named resource to the property \ref nco_foafUrl "nco:foafUrl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addFoafUrl() { return baseAddObject< nco::foafUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addFoafUrl(::SopranoLive::Live< rdfs::Resource > const &foafUrl_)
					
					
					Adds the given \a foafUrl_ to the property \ref nco_foafUrl "nco:foafUrl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addFoafUrl(::SopranoLive::Live< rdfs::Resource > const &foafUrl_) { return baseAddObject< nco::foafUrl >( foafUrl_ ); }
				/*!
					\fn void removeFoafUrl(::SopranoLive::Live< rdfs::Resource > const &foafUrl_)
					
					
					Removes the given \a foafUrl_ from the property \ref nco_foafUrl "nco:foafUrl" set.
					\sa LiveResource::removeObject
				 */
				void removeFoafUrl(::SopranoLive::Live< rdfs::Resource > const &foafUrl_) { baseRemoveObject< nco::foafUrl >(foafUrl_); }

				/* Property generated from nco:hasEmailAddress
				 * \n An address for electronic mail communication with the object specified by this contact. An equivalent of the 'EMAIL' property as defined in RFC 2426 Sec. 3.3.1.
				 * \n rdfs:label=hasEmailAddress
				 * \n rdfs:subPropertyOf=nco:hasContactMedium
				 * \n rdfs:range=nco:EmailAddress
				 * \n rdfs:domain=nco:Role
				 * \n tracker:indexed=true
				 * \n tracker:modified=1838
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasEmailAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_hasEmailAddress "nco:hasEmailAddress" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasEmailAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::hasEmailAddress >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasEmailAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_hasEmailAddress "nco:hasEmailAddress" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasEmailAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::hasEmailAddress >(object_info, strategy, parent); }
				/*!
					\fn void setHasEmailAddresss(LiveNodes const &hasEmailAddress_)
					
					
					Sets the property \ref nco_hasEmailAddress "nco:hasEmailAddress" set to the given \a hasEmailAddress_ set.
					\sa LiveResource::setObjects
				 */
				void setHasEmailAddresss(LiveNodes const &hasEmailAddress_) { baseSetObjects(nco::hasEmailAddress::iri(), hasEmailAddress_); }
				/*!
					\fn void removeHasEmailAddresss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_hasEmailAddress "nco:hasEmailAddress" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasEmailAddresss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::hasEmailAddress::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< EmailAddress > firstHasEmailAddress()
					
					
					Returns the first property \ref nco_hasEmailAddress "nco:hasEmailAddress". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< EmailAddress > firstHasEmailAddress() { return baseFirstObject< nco::hasEmailAddress >(); }
				/*!
					\fn ::SopranoLive::Live< EmailAddress > addHasEmailAddress()
					
					
					Adds a new uniquely named resource to the property \ref nco_hasEmailAddress "nco:hasEmailAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< EmailAddress > addHasEmailAddress() { return baseAddObject< nco::hasEmailAddress >(); }
				/*!
					\fn ::SopranoLive::Live< EmailAddress > addHasEmailAddress(::SopranoLive::Live< EmailAddress > const &hasEmailAddress_)
					
					
					Adds the given \a hasEmailAddress_ to the property \ref nco_hasEmailAddress "nco:hasEmailAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< EmailAddress > addHasEmailAddress(::SopranoLive::Live< EmailAddress > const &hasEmailAddress_) { return baseAddObject< nco::hasEmailAddress >( hasEmailAddress_ ); }
				/*!
					\fn void removeHasEmailAddress(::SopranoLive::Live< EmailAddress > const &hasEmailAddress_)
					
					
					Removes the given \a hasEmailAddress_ from the property \ref nco_hasEmailAddress "nco:hasEmailAddress" set.
					\sa LiveResource::removeObject
				 */
				void removeHasEmailAddress(::SopranoLive::Live< EmailAddress > const &hasEmailAddress_) { baseRemoveObject< nco::hasEmailAddress >(hasEmailAddress_); }

				/* Property generated from nco:url
				 * \n A uniform resource locator associated with the given role of a Contact. Inspired by the 'URL' property defined in RFC 2426 Sec. 3.6.8.
				 * \n rdfs:label=url
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=nco:Role
				 * \n tracker:weight=4
				 * \n tracker:modified=1881
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_url "nco:url" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::url >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_url "nco:url" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::url >(object_info, strategy, parent); }
				/*!
					\fn void setUrls(LiveNodes const &url_)
					
					
					Sets the property \ref nco_url "nco:url" set to the given \a url_ set.
					\sa LiveResource::setObjects
				 */
				void setUrls(LiveNodes const &url_) { baseSetObjects(nco::url::iri(), url_); }
				/*!
					\fn void removeUrls(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_url "nco:url" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeUrls(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::url::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstUrl()
					
					
					Returns the first property \ref nco_url "nco:url". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstUrl() { return baseFirstObject< nco::url >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addUrl()
					
					
					Adds a new uniquely named resource to the property \ref nco_url "nco:url" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addUrl() { return baseAddObject< nco::url >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addUrl(::SopranoLive::Live< rdfs::Resource > const &url_)
					
					
					Adds the given \a url_ to the property \ref nco_url "nco:url" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addUrl(::SopranoLive::Live< rdfs::Resource > const &url_) { return baseAddObject< nco::url >( url_ ); }
				/*!
					\fn void removeUrl(::SopranoLive::Live< rdfs::Resource > const &url_)
					
					
					Removes the given \a url_ from the property \ref nco_url "nco:url" set.
					\sa LiveResource::removeObject
				 */
				void removeUrl(::SopranoLive::Live< rdfs::Resource > const &url_) { baseRemoveObject< nco::url >(url_); }

				/* Property generated from nco:blogUrl
				 * \n A Blog url.
				 * \n rdfs:label=blogUrl
				 * \n rdfs:subPropertyOf=nco:url
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=nco:Role
				 * \n tracker:modified=1165
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBlogUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_blogUrl "nco:blogUrl" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBlogUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::blogUrl >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBlogUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_blogUrl "nco:blogUrl" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBlogUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::blogUrl >(object_info, strategy, parent); }
				/*!
					\fn void setBlogUrls(LiveNodes const &blogUrl_)
					
					
					Sets the property \ref nco_blogUrl "nco:blogUrl" set to the given \a blogUrl_ set.
					\sa LiveResource::setObjects
				 */
				void setBlogUrls(LiveNodes const &blogUrl_) { baseSetObjects(nco::blogUrl::iri(), blogUrl_); }
				/*!
					\fn void removeBlogUrls(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_blogUrl "nco:blogUrl" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBlogUrls(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::blogUrl::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstBlogUrl()
					
					
					Returns the first property \ref nco_blogUrl "nco:blogUrl". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstBlogUrl() { return baseFirstObject< nco::blogUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addBlogUrl()
					
					
					Adds a new uniquely named resource to the property \ref nco_blogUrl "nco:blogUrl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addBlogUrl() { return baseAddObject< nco::blogUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addBlogUrl(::SopranoLive::Live< rdfs::Resource > const &blogUrl_)
					
					
					Adds the given \a blogUrl_ to the property \ref nco_blogUrl "nco:blogUrl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addBlogUrl(::SopranoLive::Live< rdfs::Resource > const &blogUrl_) { return baseAddObject< nco::blogUrl >( blogUrl_ ); }
				/*!
					\fn void removeBlogUrl(::SopranoLive::Live< rdfs::Resource > const &blogUrl_)
					
					
					Removes the given \a blogUrl_ from the property \ref nco_blogUrl "nco:blogUrl" set.
					\sa LiveResource::removeObject
				 */
				void removeBlogUrl(::SopranoLive::Live< rdfs::Resource > const &blogUrl_) { baseRemoveObject< nco::blogUrl >(blogUrl_); }

				/* Property generated from nco:hasPostalAddress
				 * \n The default Address for a Contact. An equivalent of the 'ADR' property as defined in RFC 2426 Sec. 3.2.1.
				 * \n rdfs:label=hasPostalAddress
				 * \n rdfs:subPropertyOf=nco:hasContactMedium
				 * \n rdfs:range=nco:PostalAddress
				 * \n rdfs:domain=nco:Role
				 * \n tracker:indexed=true
				 * \n tracker:modified=1475
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasPostalAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_hasPostalAddress "nco:hasPostalAddress" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasPostalAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::hasPostalAddress >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasPostalAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_hasPostalAddress "nco:hasPostalAddress" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasPostalAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::hasPostalAddress >(object_info, strategy, parent); }
				/*!
					\fn void setHasPostalAddresss(LiveNodes const &hasPostalAddress_)
					
					
					Sets the property \ref nco_hasPostalAddress "nco:hasPostalAddress" set to the given \a hasPostalAddress_ set.
					\sa LiveResource::setObjects
				 */
				void setHasPostalAddresss(LiveNodes const &hasPostalAddress_) { baseSetObjects(nco::hasPostalAddress::iri(), hasPostalAddress_); }
				/*!
					\fn void removeHasPostalAddresss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_hasPostalAddress "nco:hasPostalAddress" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasPostalAddresss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::hasPostalAddress::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< PostalAddress > firstHasPostalAddress()
					
					
					Returns the first property \ref nco_hasPostalAddress "nco:hasPostalAddress". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< PostalAddress > firstHasPostalAddress() { return baseFirstObject< nco::hasPostalAddress >(); }
				/*!
					\fn ::SopranoLive::Live< PostalAddress > addHasPostalAddress()
					
					
					Adds a new uniquely named resource to the property \ref nco_hasPostalAddress "nco:hasPostalAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< PostalAddress > addHasPostalAddress() { return baseAddObject< nco::hasPostalAddress >(); }
				/*!
					\fn ::SopranoLive::Live< PostalAddress > addHasPostalAddress(::SopranoLive::Live< PostalAddress > const &hasPostalAddress_)
					
					
					Adds the given \a hasPostalAddress_ to the property \ref nco_hasPostalAddress "nco:hasPostalAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< PostalAddress > addHasPostalAddress(::SopranoLive::Live< PostalAddress > const &hasPostalAddress_) { return baseAddObject< nco::hasPostalAddress >( hasPostalAddress_ ); }
				/*!
					\fn void removeHasPostalAddress(::SopranoLive::Live< PostalAddress > const &hasPostalAddress_)
					
					
					Removes the given \a hasPostalAddress_ from the property \ref nco_hasPostalAddress "nco:hasPostalAddress" set.
					\sa LiveResource::removeObject
				 */
				void removeHasPostalAddress(::SopranoLive::Live< PostalAddress > const &hasPostalAddress_) { baseRemoveObject< nco::hasPostalAddress >(hasPostalAddress_); }

				/* Property generated from nco:hasIMAddress
				 * \n An address for communication using instant messages with the object specified by this contact.
				 * \n rdfs:label=imAddress
				 * \n rdfs:subPropertyOf=nco:hasContactMedium
				 * \n rdfs:range=nco:IMAddress
				 * \n rdfs:domain=nco:Role
				 * \n tracker:modified=1851
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasIMAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_hasIMAddress "nco:hasIMAddress" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasIMAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::hasIMAddress >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasIMAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_hasIMAddress "nco:hasIMAddress" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasIMAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::hasIMAddress >(object_info, strategy, parent); }
				/*!
					\fn void setHasIMAddresss(LiveNodes const &hasIMAddress_)
					
					
					Sets the property \ref nco_hasIMAddress "nco:hasIMAddress" set to the given \a hasIMAddress_ set.
					\sa LiveResource::setObjects
				 */
				void setHasIMAddresss(LiveNodes const &hasIMAddress_) { baseSetObjects(nco::hasIMAddress::iri(), hasIMAddress_); }
				/*!
					\fn void removeHasIMAddresss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_hasIMAddress "nco:hasIMAddress" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasIMAddresss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::hasIMAddress::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< IMAddress > firstHasIMAddress()
					
					
					Returns the first property \ref nco_hasIMAddress "nco:hasIMAddress". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< IMAddress > firstHasIMAddress() { return baseFirstObject< nco::hasIMAddress >(); }
				/*!
					\fn ::SopranoLive::Live< IMAddress > addHasIMAddress()
					
					
					Adds a new uniquely named resource to the property \ref nco_hasIMAddress "nco:hasIMAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< IMAddress > addHasIMAddress() { return baseAddObject< nco::hasIMAddress >(); }
				/*!
					\fn ::SopranoLive::Live< IMAddress > addHasIMAddress(::SopranoLive::Live< IMAddress > const &hasIMAddress_)
					
					
					Adds the given \a hasIMAddress_ to the property \ref nco_hasIMAddress "nco:hasIMAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< IMAddress > addHasIMAddress(::SopranoLive::Live< IMAddress > const &hasIMAddress_) { return baseAddObject< nco::hasIMAddress >( hasIMAddress_ ); }
				/*!
					\fn void removeHasIMAddress(::SopranoLive::Live< IMAddress > const &hasIMAddress_)
					
					
					Removes the given \a hasIMAddress_ from the property \ref nco_hasIMAddress "nco:hasIMAddress" set.
					\sa LiveResource::removeObject
				 */
				void removeHasIMAddress(::SopranoLive::Live< IMAddress > const &hasIMAddress_) { baseRemoveObject< nco::hasIMAddress >(hasIMAddress_); }

				/* Property generated from nco:hasContactMedium
				 * \n A superProperty for all properties linking a Contact to an instance of a contact medium.
				 * \n rdfs:range=nco:ContactMedium
				 * \n rdfs:label=hasContactMedium
				 * \n tracker:modified=1231
				 * \n rdfs:domain=nco:Role
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasContactMediums(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_hasContactMedium "nco:hasContactMedium" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasContactMediums(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::hasContactMedium >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasContactMediums(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_hasContactMedium "nco:hasContactMedium" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasContactMediums(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::hasContactMedium >(object_info, strategy, parent); }
				/*!
					\fn void setHasContactMediums(LiveNodes const &hasContactMedium_)
					
					
					Sets the property \ref nco_hasContactMedium "nco:hasContactMedium" set to the given \a hasContactMedium_ set.
					\sa LiveResource::setObjects
				 */
				void setHasContactMediums(LiveNodes const &hasContactMedium_) { baseSetObjects(nco::hasContactMedium::iri(), hasContactMedium_); }
				/*!
					\fn void removeHasContactMediums(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_hasContactMedium "nco:hasContactMedium" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasContactMediums(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::hasContactMedium::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< ContactMedium > firstHasContactMedium()
					
					
					Returns the first property \ref nco_hasContactMedium "nco:hasContactMedium". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< ContactMedium > firstHasContactMedium() { return baseFirstObject< nco::hasContactMedium >(); }
				/*!
					\fn ::SopranoLive::Live< ContactMedium > addHasContactMedium()
					
					
					Adds a new uniquely named resource to the property \ref nco_hasContactMedium "nco:hasContactMedium" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ContactMedium > addHasContactMedium() { return baseAddObject< nco::hasContactMedium >(); }
				/*!
					\fn ::SopranoLive::Live< ContactMedium > addHasContactMedium(::SopranoLive::Live< ContactMedium > const &hasContactMedium_)
					
					
					Adds the given \a hasContactMedium_ to the property \ref nco_hasContactMedium "nco:hasContactMedium" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ContactMedium > addHasContactMedium(::SopranoLive::Live< ContactMedium > const &hasContactMedium_) { return baseAddObject< nco::hasContactMedium >( hasContactMedium_ ); }
				/*!
					\fn void removeHasContactMedium(::SopranoLive::Live< ContactMedium > const &hasContactMedium_)
					
					
					Removes the given \a hasContactMedium_ from the property \ref nco_hasContactMedium "nco:hasContactMedium" set.
					\sa LiveResource::removeObject
				 */
				void removeHasContactMedium(::SopranoLive::Live< ContactMedium > const &hasContactMedium_) { baseRemoveObject< nco::hasContactMedium >(hasContactMedium_); }

				/* Property generated from nco:hasPhoneNumber
				 * \n A number for telephony communication with the object represented by this Contact. An equivalent of the 'TEL' property defined in RFC 2426 Sec. 3.3.1
				 * \n rdfs:label=hasPhoneNumber
				 * \n rdfs:subPropertyOf=nco:hasContactMedium
				 * \n rdfs:range=nco:PhoneNumber
				 * \n rdfs:domain=nco:Role
				 * \n tracker:modified=1849
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasPhoneNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_hasPhoneNumber "nco:hasPhoneNumber" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasPhoneNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::hasPhoneNumber >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasPhoneNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_hasPhoneNumber "nco:hasPhoneNumber" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasPhoneNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::hasPhoneNumber >(object_info, strategy, parent); }
				/*!
					\fn void setHasPhoneNumbers(LiveNodes const &hasPhoneNumber_)
					
					
					Sets the property \ref nco_hasPhoneNumber "nco:hasPhoneNumber" set to the given \a hasPhoneNumber_ set.
					\sa LiveResource::setObjects
				 */
				void setHasPhoneNumbers(LiveNodes const &hasPhoneNumber_) { baseSetObjects(nco::hasPhoneNumber::iri(), hasPhoneNumber_); }
				/*!
					\fn void removeHasPhoneNumbers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_hasPhoneNumber "nco:hasPhoneNumber" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasPhoneNumbers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::hasPhoneNumber::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< PhoneNumber > firstHasPhoneNumber()
					
					
					Returns the first property \ref nco_hasPhoneNumber "nco:hasPhoneNumber". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< PhoneNumber > firstHasPhoneNumber() { return baseFirstObject< nco::hasPhoneNumber >(); }
				/*!
					\fn ::SopranoLive::Live< PhoneNumber > addHasPhoneNumber()
					
					
					Adds a new uniquely named resource to the property \ref nco_hasPhoneNumber "nco:hasPhoneNumber" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< PhoneNumber > addHasPhoneNumber() { return baseAddObject< nco::hasPhoneNumber >(); }
				/*!
					\fn ::SopranoLive::Live< PhoneNumber > addHasPhoneNumber(::SopranoLive::Live< PhoneNumber > const &hasPhoneNumber_)
					
					
					Adds the given \a hasPhoneNumber_ to the property \ref nco_hasPhoneNumber "nco:hasPhoneNumber" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< PhoneNumber > addHasPhoneNumber(::SopranoLive::Live< PhoneNumber > const &hasPhoneNumber_) { return baseAddObject< nco::hasPhoneNumber >( hasPhoneNumber_ ); }
				/*!
					\fn void removeHasPhoneNumber(::SopranoLive::Live< PhoneNumber > const &hasPhoneNumber_)
					
					
					Removes the given \a hasPhoneNumber_ from the property \ref nco_hasPhoneNumber "nco:hasPhoneNumber" set.
					\sa LiveResource::removeObject
				 */
				void removeHasPhoneNumber(::SopranoLive::Live< PhoneNumber > const &hasPhoneNumber_) { baseRemoveObject< nco::hasPhoneNumber >(hasPhoneNumber_); }

				/* Property generated from nco:websiteUrl
				 * \n A url of a website.
				 * \n rdfs:label=websiteUrl
				 * \n rdfs:subPropertyOf=nco:url
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=nco:Role
				 * \n tracker:weight=5
				 * \n tracker:modified=1477
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveWebsiteUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_websiteUrl "nco:websiteUrl" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveWebsiteUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::websiteUrl >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getWebsiteUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_websiteUrl "nco:websiteUrl" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getWebsiteUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::websiteUrl >(object_info, strategy, parent); }
				/*!
					\fn void setWebsiteUrls(LiveNodes const &websiteUrl_)
					
					
					Sets the property \ref nco_websiteUrl "nco:websiteUrl" set to the given \a websiteUrl_ set.
					\sa LiveResource::setObjects
				 */
				void setWebsiteUrls(LiveNodes const &websiteUrl_) { baseSetObjects(nco::websiteUrl::iri(), websiteUrl_); }
				/*!
					\fn void removeWebsiteUrls(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_websiteUrl "nco:websiteUrl" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeWebsiteUrls(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::websiteUrl::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstWebsiteUrl()
					
					
					Returns the first property \ref nco_websiteUrl "nco:websiteUrl". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstWebsiteUrl() { return baseFirstObject< nco::websiteUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addWebsiteUrl()
					
					
					Adds a new uniquely named resource to the property \ref nco_websiteUrl "nco:websiteUrl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addWebsiteUrl() { return baseAddObject< nco::websiteUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addWebsiteUrl(::SopranoLive::Live< rdfs::Resource > const &websiteUrl_)
					
					
					Adds the given \a websiteUrl_ to the property \ref nco_websiteUrl "nco:websiteUrl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addWebsiteUrl(::SopranoLive::Live< rdfs::Resource > const &websiteUrl_) { return baseAddObject< nco::websiteUrl >( websiteUrl_ ); }
				/*!
					\fn void removeWebsiteUrl(::SopranoLive::Live< rdfs::Resource > const &websiteUrl_)
					
					
					Removes the given \a websiteUrl_ from the property \ref nco_websiteUrl "nco:websiteUrl" set.
					\sa LiveResource::removeObject
				 */
				void removeWebsiteUrl(::SopranoLive::Live< rdfs::Resource > const &websiteUrl_) { baseRemoveObject< nco::websiteUrl >(websiteUrl_); }

				/* Property generated from nco:video
				 * \n Video avatar of a contact. Note that is an icon/avatar, not a generic 'present in video' property
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:label=Contact video
				 * \n tracker:modified=1024
				 * \n rdfs:domain=nco:Role
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nie::DataObject DataObject;
				/*!
					\fn LiveNodes liveVideos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_video "nco:video" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveVideos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::video >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getVideos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_video "nco:video" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getVideos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::video >(object_info, strategy, parent); }
				/*!
					\fn void setVideos(LiveNodes const &video_)
					
					
					Sets the property \ref nco_video "nco:video" set to the given \a video_ set.
					\sa LiveResource::setObjects
				 */
				void setVideos(LiveNodes const &video_) { baseSetObjects(nco::video::iri(), video_); }
				/*!
					\fn void removeVideos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_video "nco:video" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeVideos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::video::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > firstVideo()
					
					
					Returns the first property \ref nco_video "nco:video". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nie::DataObject > firstVideo() { return baseFirstObject< nco::video >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addVideo()
					
					
					Adds a new uniquely named resource to the property \ref nco_video "nco:video" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addVideo() { return baseAddObject< nco::video >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addVideo(::SopranoLive::Live< nie::DataObject > const &video_)
					
					
					Adds the given \a video_ to the property \ref nco_video "nco:video" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addVideo(::SopranoLive::Live< nie::DataObject > const &video_) { return baseAddObject< nco::video >( video_ ); }
				/*!
					\fn void removeVideo(::SopranoLive::Live< nie::DataObject > const &video_)
					
					
					Removes the given \a video_ from the property \ref nco_video "nco:video" set.
					\sa LiveResource::removeObject
				 */
				void removeVideo(::SopranoLive::Live< nie::DataObject > const &video_) { baseRemoveObject< nco::video >(video_); }
				 //@}
			};

			/*! Class generated from nco:Affiliation
			 * \ingroup onto_nco_classes
			 * Aggregates three properties defined in RFC2426. Originally all three were attached directly to a person. One person could have only one title and one role within one organization. This class is intended to lift this limitation.
			 * 
			 * rdfs:label = Affiliation
			 * 
			 * tracker:modified = 1059
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_hasAffiliation "nco:hasAffiliation"
			 */
			class Affiliation
				: public virtual Role

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Affiliation"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Role, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Affiliation> Live;
				Affiliation() { this->attachInterfaceHelper< Affiliation >(); }
				~Affiliation() { this->detachInterfaceHelper< Affiliation >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:title
				 * \n rdfs:label=title
				 * \n tracker:fulltextNoLimit=true
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:Affiliation
				 * \n tracker:weight=10
				 * \n tracker:modified=1815
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_title "nco:title" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::title >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_title "nco:title" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::title >(object_info, strategy, parent); }
				/*!
					\fn void setTitles(LiveNodes const &title_)
					
					
					Sets the property \ref nco_title "nco:title" set to the given \a title_ set.
					\sa LiveResource::setObjects
				 */
				void setTitles(LiveNodes const &title_) { baseSetObjects(nco::title::iri(), title_); }
				/*!
					\fn void removeTitles(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_title "nco:title" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTitles(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::title::iri(), object_info); }
				/*!
					\fn QString firstTitle()
					
					
					Returns the first property \ref nco_title "nco:title". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTitle() { return baseFirstObject< nco::title >(); }
				/*!
					\fn void addTitle(QString const &title_)
					
					
					Adds the given \a title_ to the property \ref nco_title "nco:title" set.
					\sa LiveResource::addObject
				 */
				void addTitle(QString const &title_) { baseAddObject< nco::title >( title_ ); }
				/*!
					\fn void removeTitle(QString const &title_)
					
					
					Removes the given \a title_ from the property \ref nco_title "nco:title" set.
					\sa LiveResource::removeObject
				 */
				void removeTitle(QString const &title_) { baseRemoveObject< nco::title >(title_); }

				/* Property generated from nco:department
				 * \n Department. The organizational unit within the organization.
				 * \n rdfs:label=department
				 * \n tracker:fulltextNoLimit=true
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:Affiliation
				 * \n tracker:weight=4
				 * \n tracker:modified=1819
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDepartments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_department "nco:department" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDepartments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::department >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDepartments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_department "nco:department" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDepartments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::department >(object_info, strategy, parent); }
				/*!
					\fn void setDepartments(LiveNodes const &department_)
					
					
					Sets the property \ref nco_department "nco:department" set to the given \a department_ set.
					\sa LiveResource::setObjects
				 */
				void setDepartments(LiveNodes const &department_) { baseSetObjects(nco::department::iri(), department_); }
				/*!
					\fn void removeDepartments(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_department "nco:department" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDepartments(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::department::iri(), object_info); }
				/*!
					\fn QString getDepartment()
					
					
					Returns the property \ref nco_department "nco:department". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDepartment() { return baseGetObject< nco::department >(); }
				/*!
					\fn void setDepartment(QString const &department_)
					
					
					Sets the property \ref nco_department "nco:department" to the given \a department.
					\sa LiveResource::setObject
				 */
				void setDepartment(QString const &department_) { baseSetObject< nco::department >( department_ ); }
				/*!
					\fn QString firstDepartment()
					
					
					Returns the first property \ref nco_department "nco:department". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDepartment() { return baseFirstObject< nco::department >(); }
				/*!
					\fn void addDepartment(QString const &department_)
					
					
					Adds the given \a department_ to the property \ref nco_department "nco:department" set.
					\sa LiveResource::addObject
				 */
				void addDepartment(QString const &department_) { baseAddObject< nco::department >( department_ ); }
				/*!
					\fn void removeDepartment(QString const &department_)
					
					
					Removes the given \a department_ from the property \ref nco_department "nco:department" set.
					\sa LiveResource::removeObject
				 */
				void removeDepartment(QString const &department_) { baseRemoveObject< nco::department >(department_); }

				/* Property generated from nco:org
				 * \n Name of an organization or a unit within an organization the object represented by a Contact is associated with. An equivalent of the 'ORG' property defined in RFC 2426 Sec. 3.5.5
				 * \n rdfs:label=org
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:OrganizationContact
				 * \n rdfs:domain=nco:Affiliation
				 * \n tracker:weight=4
				 * \n tracker:modified=1043
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveOrgs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_org "nco:org" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveOrgs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::org >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getOrgs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_org "nco:org" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getOrgs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::org >(object_info, strategy, parent); }
				/*!
					\fn void setOrgs(LiveNodes const &org_)
					
					
					Sets the property \ref nco_org "nco:org" set to the given \a org_ set.
					\sa LiveResource::setObjects
				 */
				void setOrgs(LiveNodes const &org_) { baseSetObjects(nco::org::iri(), org_); }
				/*!
					\fn void removeOrgs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_org "nco:org" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeOrgs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::org::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< OrganizationContact > getOrg()
					
					
					Returns the property \ref nco_org "nco:org". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< OrganizationContact > getOrg() { return baseGetObject< nco::org >(); }
				/*!
					\fn ::SopranoLive::Live< OrganizationContact > setOrg(::SopranoLive::Live< OrganizationContact > const &org_)
					
					
					Sets the property \ref nco_org "nco:org" to the given \a org.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< OrganizationContact > setOrg(::SopranoLive::Live< OrganizationContact > const &org_) { return baseSetObject< nco::org >( org_ ); }
				/*!
					\fn ::SopranoLive::Live< OrganizationContact > firstOrg()
					
					
					Returns the first property \ref nco_org "nco:org". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< OrganizationContact > firstOrg() { return baseFirstObject< nco::org >(); }
				/*!
					\fn ::SopranoLive::Live< OrganizationContact > addOrg()
					
					
					Adds a new uniquely named resource to the property \ref nco_org "nco:org" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< OrganizationContact > addOrg() { return baseAddObject< nco::org >(); }
				/*!
					\fn ::SopranoLive::Live< OrganizationContact > addOrg(::SopranoLive::Live< OrganizationContact > const &org_)
					
					
					Adds the given \a org_ to the property \ref nco_org "nco:org" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< OrganizationContact > addOrg(::SopranoLive::Live< OrganizationContact > const &org_) { return baseAddObject< nco::org >( org_ ); }
				/*!
					\fn void removeOrg(::SopranoLive::Live< OrganizationContact > const &org_)
					
					
					Removes the given \a org_ from the property \ref nco_org "nco:org" set.
					\sa LiveResource::removeObject
				 */
				void removeOrg(::SopranoLive::Live< OrganizationContact > const &org_) { baseRemoveObject< nco::org >(org_); }

				/* Property generated from nco:role
				 * \n rdfs:label=role
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:Affiliation
				 * \n tracker:weight=2
				 * \n tracker:modified=1413
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRoles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_role "nco:role" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRoles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::role >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRoles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_role "nco:role" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRoles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::role >(object_info, strategy, parent); }
				/*!
					\fn void setRoles(LiveNodes const &role_)
					
					
					Sets the property \ref nco_role "nco:role" set to the given \a role_ set.
					\sa LiveResource::setObjects
				 */
				void setRoles(LiveNodes const &role_) { baseSetObjects(nco::role::iri(), role_); }
				/*!
					\fn void removeRoles(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_role "nco:role" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRoles(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::role::iri(), object_info); }
				/*!
					\fn QString getRole()
					
					
					Returns the property \ref nco_role "nco:role". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getRole() { return baseGetObject< nco::role >(); }
				/*!
					\fn void setRole(QString const &role_)
					
					
					Sets the property \ref nco_role "nco:role" to the given \a role.
					\sa LiveResource::setObject
				 */
				void setRole(QString const &role_) { baseSetObject< nco::role >( role_ ); }
				/*!
					\fn QString firstRole()
					
					
					Returns the first property \ref nco_role "nco:role". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstRole() { return baseFirstObject< nco::role >(); }
				/*!
					\fn void addRole(QString const &role_)
					
					
					Adds the given \a role_ to the property \ref nco_role "nco:role" set.
					\sa LiveResource::addObject
				 */
				void addRole(QString const &role_) { baseAddObject< nco::role >( role_ ); }
				/*!
					\fn void removeRole(QString const &role_)
					
					
					Removes the given \a role_ from the property \ref nco_role "nco:role" set.
					\sa LiveResource::removeObject
				 */
				void removeRole(QString const &role_) { baseRemoveObject< nco::role >(role_); }
				 //@}
			};

			/*! Class generated from nco:AuthorizationStatus
			 * \ingroup onto_nco_classes
			 * Predefined instances to indicate the auth status: yes, no, requested
			 * 
			 * rdfs:label = IM Address approval status
			 * 
			 * tracker:modified = 1650
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nco_predefined_auth_status_requested "nco:predefined-auth-status-requested"
			 * 		\ref nco_predefined_auth_status_yes "nco:predefined-auth-status-yes"
			 * 		\ref nco_predefined_auth_status_no "nco:predefined-auth-status-no"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_imAddressAuthStatusTo "nco:imAddressAuthStatusTo"
			 * 		\ref nco_imAddressAuthStatusFrom "nco:imAddressAuthStatusFrom"
			 */
			class AuthorizationStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#AuthorizationStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<AuthorizationStatus> Live;
				AuthorizationStatus() { this->attachInterfaceHelper< AuthorizationStatus >(); }
				~AuthorizationStatus() { this->detachInterfaceHelper< AuthorizationStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:ContactMedium
			 * \ingroup onto_nco_classes
			 * A superclass for all contact media - ways to contact an entity represented by a Contact instance. Some of the subclasses of this class (the various kinds of telephone numbers and postal addresses) have been inspired by the values of the TYPE parameter of ADR and TEL properties defined in RFC 2426 sec. 3.2.1. and 3.3.1 respectively. Each value is represented by an appropriate subclass with two major exceptions TYPE=home and TYPE=work. They are to be expressed by the roles these contact media are attached to i.e. contact media with TYPE=home parameter are to be attached to the default role (nco:Contact or nco:PersonContact), whereas media with TYPE=work parameter should be attached to nco:Affiliation or nco:OrganizationContact.
			 * 
			 * rdfs:label = ContactMedium
			 * 
			 * tracker:modified = 1527
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_hasContactMedium "nco:hasContactMedium"
			 */
			class ContactMedium
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#ContactMedium"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<ContactMedium> Live;
				ContactMedium() { this->attachInterfaceHelper< ContactMedium >(); }
				~ContactMedium() { this->detachInterfaceHelper< ContactMedium >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:contactMediumComment
				 * \n A comment about the contact medium.
				 * \n rdfs:label=contactMediumComment
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:ContactMedium
				 * \n tracker:modified=1952
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContactMediumComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_contactMediumComment "nco:contactMediumComment" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContactMediumComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::contactMediumComment >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContactMediumComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_contactMediumComment "nco:contactMediumComment" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContactMediumComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::contactMediumComment >(object_info, strategy, parent); }
				/*!
					\fn void setContactMediumComments(LiveNodes const &contactMediumComment_)
					
					
					Sets the property \ref nco_contactMediumComment "nco:contactMediumComment" set to the given \a contactMediumComment_ set.
					\sa LiveResource::setObjects
				 */
				void setContactMediumComments(LiveNodes const &contactMediumComment_) { baseSetObjects(nco::contactMediumComment::iri(), contactMediumComment_); }
				/*!
					\fn void removeContactMediumComments(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_contactMediumComment "nco:contactMediumComment" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContactMediumComments(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::contactMediumComment::iri(), object_info); }
				/*!
					\fn QString getContactMediumComment()
					
					
					Returns the property \ref nco_contactMediumComment "nco:contactMediumComment". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getContactMediumComment() { return baseGetObject< nco::contactMediumComment >(); }
				/*!
					\fn void setContactMediumComment(QString const &contactMediumComment_)
					
					
					Sets the property \ref nco_contactMediumComment "nco:contactMediumComment" to the given \a contactMediumComment.
					\sa LiveResource::setObject
				 */
				void setContactMediumComment(QString const &contactMediumComment_) { baseSetObject< nco::contactMediumComment >( contactMediumComment_ ); }
				/*!
					\fn QString firstContactMediumComment()
					
					
					Returns the first property \ref nco_contactMediumComment "nco:contactMediumComment". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstContactMediumComment() { return baseFirstObject< nco::contactMediumComment >(); }
				/*!
					\fn void addContactMediumComment(QString const &contactMediumComment_)
					
					
					Adds the given \a contactMediumComment_ to the property \ref nco_contactMediumComment "nco:contactMediumComment" set.
					\sa LiveResource::addObject
				 */
				void addContactMediumComment(QString const &contactMediumComment_) { baseAddObject< nco::contactMediumComment >( contactMediumComment_ ); }
				/*!
					\fn void removeContactMediumComment(QString const &contactMediumComment_)
					
					
					Removes the given \a contactMediumComment_ from the property \ref nco_contactMediumComment "nco:contactMediumComment" set.
					\sa LiveResource::removeObject
				 */
				void removeContactMediumComment(QString const &contactMediumComment_) { baseRemoveObject< nco::contactMediumComment >(contactMediumComment_); }
				 //@}
			};

			/*! Class generated from nco:PhoneNumber
			 * \ingroup onto_nco_classes
			 * A telephone number.
			 * 
			 * rdfs:label = PhoneNumber
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1124
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_hasPhoneNumber "nco:hasPhoneNumber"
			 */
			class PhoneNumber
				: public virtual ContactMedium

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PhoneNumber"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<ContactMedium, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<PhoneNumber> Live;
				PhoneNumber() { this->attachInterfaceHelper< PhoneNumber >(); }
				~PhoneNumber() { this->detachInterfaceHelper< PhoneNumber >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:phoneNumber
				 * \n rdfs:label=phoneNumber
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PhoneNumber
				 * \n tracker:weight=5
				 * \n tracker:modified=1181
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePhoneNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_phoneNumber "nco:phoneNumber" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePhoneNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::phoneNumber >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPhoneNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_phoneNumber "nco:phoneNumber" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPhoneNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::phoneNumber >(object_info, strategy, parent); }
				/*!
					\fn void setPhoneNumbers(LiveNodes const &phoneNumber_)
					
					
					Sets the property \ref nco_phoneNumber "nco:phoneNumber" set to the given \a phoneNumber_ set.
					\sa LiveResource::setObjects
				 */
				void setPhoneNumbers(LiveNodes const &phoneNumber_) { baseSetObjects(nco::phoneNumber::iri(), phoneNumber_); }
				/*!
					\fn void removePhoneNumbers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_phoneNumber "nco:phoneNumber" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePhoneNumbers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::phoneNumber::iri(), object_info); }
				/*!
					\fn QString getPhoneNumber()
					
					
					Returns the property \ref nco_phoneNumber "nco:phoneNumber". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getPhoneNumber() { return baseGetObject< nco::phoneNumber >(); }
				/*!
					\fn void setPhoneNumber(QString const &phoneNumber_)
					
					
					Sets the property \ref nco_phoneNumber "nco:phoneNumber" to the given \a phoneNumber.
					\sa LiveResource::setObject
				 */
				void setPhoneNumber(QString const &phoneNumber_) { baseSetObject< nco::phoneNumber >( phoneNumber_ ); }
				/*!
					\fn QString firstPhoneNumber()
					
					
					Returns the first property \ref nco_phoneNumber "nco:phoneNumber". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstPhoneNumber() { return baseFirstObject< nco::phoneNumber >(); }
				/*!
					\fn void addPhoneNumber(QString const &phoneNumber_)
					
					
					Adds the given \a phoneNumber_ to the property \ref nco_phoneNumber "nco:phoneNumber" set.
					\sa LiveResource::addObject
				 */
				void addPhoneNumber(QString const &phoneNumber_) { baseAddObject< nco::phoneNumber >( phoneNumber_ ); }
				/*!
					\fn void removePhoneNumber(QString const &phoneNumber_)
					
					
					Removes the given \a phoneNumber_ from the property \ref nco_phoneNumber "nco:phoneNumber" set.
					\sa LiveResource::removeObject
				 */
				void removePhoneNumber(QString const &phoneNumber_) { baseRemoveObject< nco::phoneNumber >(phoneNumber_); }

				/* Property generated from maemo:localPhoneNumber
				 * \n rdfs:label=local phone number (last N digits)
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PhoneNumber
				 * \n tracker:indexed=true
				 * \n tracker:modified=1863
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMaemoLocalPhoneNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref maemo_localPhoneNumber "maemo:localPhoneNumber" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMaemoLocalPhoneNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< maemo::localPhoneNumber >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMaemoLocalPhoneNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref maemo_localPhoneNumber "maemo:localPhoneNumber" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMaemoLocalPhoneNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< maemo::localPhoneNumber >(object_info, strategy, parent); }
				/*!
					\fn void setMaemoLocalPhoneNumbers(LiveNodes const &maemoLocalPhoneNumber_)
					
					
					Sets the property \ref maemo_localPhoneNumber "maemo:localPhoneNumber" set to the given \a maemoLocalPhoneNumber_ set.
					\sa LiveResource::setObjects
				 */
				void setMaemoLocalPhoneNumbers(LiveNodes const &maemoLocalPhoneNumber_) { baseSetObjects(maemo::localPhoneNumber::iri(), maemoLocalPhoneNumber_); }
				/*!
					\fn void removeMaemoLocalPhoneNumbers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref maemo_localPhoneNumber "maemo:localPhoneNumber" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMaemoLocalPhoneNumbers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(maemo::localPhoneNumber::iri(), object_info); }
				/*!
					\fn QString getMaemoLocalPhoneNumber()
					
					
					Returns the property \ref maemo_localPhoneNumber "maemo:localPhoneNumber". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getMaemoLocalPhoneNumber() { return baseGetObject< maemo::localPhoneNumber >(); }
				/*!
					\fn void setMaemoLocalPhoneNumber(QString const &maemoLocalPhoneNumber_)
					
					
					Sets the property \ref maemo_localPhoneNumber "maemo:localPhoneNumber" to the given \a maemoLocalPhoneNumber.
					\sa LiveResource::setObject
				 */
				void setMaemoLocalPhoneNumber(QString const &maemoLocalPhoneNumber_) { baseSetObject< maemo::localPhoneNumber >( maemoLocalPhoneNumber_ ); }
				/*!
					\fn QString firstMaemoLocalPhoneNumber()
					
					
					Returns the first property \ref maemo_localPhoneNumber "maemo:localPhoneNumber". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMaemoLocalPhoneNumber() { return baseFirstObject< maemo::localPhoneNumber >(); }
				/*!
					\fn void addMaemoLocalPhoneNumber(QString const &maemoLocalPhoneNumber_)
					
					
					Adds the given \a maemoLocalPhoneNumber_ to the property \ref maemo_localPhoneNumber "maemo:localPhoneNumber" set.
					\sa LiveResource::addObject
				 */
				void addMaemoLocalPhoneNumber(QString const &maemoLocalPhoneNumber_) { baseAddObject< maemo::localPhoneNumber >( maemoLocalPhoneNumber_ ); }
				/*!
					\fn void removeMaemoLocalPhoneNumber(QString const &maemoLocalPhoneNumber_)
					
					
					Removes the given \a maemoLocalPhoneNumber_ from the property \ref maemo_localPhoneNumber "maemo:localPhoneNumber" set.
					\sa LiveResource::removeObject
				 */
				void removeMaemoLocalPhoneNumber(QString const &maemoLocalPhoneNumber_) { baseRemoveObject< maemo::localPhoneNumber >(maemoLocalPhoneNumber_); }
				 //@}
			};

			/*! Class generated from nco:ModemNumber
			 * \ingroup onto_nco_classes
			 * A modem phone number. Inspired by the (TYPE=modem) parameter of the TEL property as defined in RFC 2426 sec  3.3.1.
			 * 
			 * rdfs:label = ModemNumber
			 * 
			 * tracker:modified = 1200
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class ModemNumber
				: public virtual PhoneNumber

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#ModemNumber"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PhoneNumber, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<ModemNumber> Live;
				ModemNumber() { this->attachInterfaceHelper< ModemNumber >(); }
				~ModemNumber() { this->detachInterfaceHelper< ModemNumber >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:BbsNumber
			 * \ingroup onto_nco_classes
			 * A Bulletin Board System (BBS) phone number. Inspired by the (TYPE=bbsl) parameter of the TEL property as defined in RFC 2426 sec  3.3.1.
			 * 
			 * rdfs:label = BbsNumber
			 * 
			 * tracker:modified = 1931
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class BbsNumber
				: public virtual ModemNumber

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#BbsNumber"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<ModemNumber, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<BbsNumber> Live;
				BbsNumber() { this->attachInterfaceHelper< BbsNumber >(); }
				~BbsNumber() { this->detachInterfaceHelper< BbsNumber >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:VoicePhoneNumber
			 * \ingroup onto_nco_classes
			 * A telephone number with voice communication capabilities. Class inspired by the TYPE=voice parameter of the TEL property defined in RFC 2426 sec. 3.3.1
			 * 
			 * rdfs:label = VoicePhoneNumber
			 * 
			 * tracker:modified = 1868
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class VoicePhoneNumber
				: public virtual PhoneNumber

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#VoicePhoneNumber"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PhoneNumber, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<VoicePhoneNumber> Live;
				VoicePhoneNumber() { this->attachInterfaceHelper< VoicePhoneNumber >(); }
				~VoicePhoneNumber() { this->detachInterfaceHelper< VoicePhoneNumber >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:voiceMail
				 * \n Indicates if the given number accepts voice mail. (e.g. there is an answering machine). Inspired by TYPE=msg parameter of the TEL property defined in RFC 2426 sec. 3.3.1
				 * \n rdfs:label=voiceMail
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nco:VoicePhoneNumber
				 * \n tracker:modified=1462
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveVoiceMails(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_voiceMail "nco:voiceMail" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveVoiceMails(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::voiceMail >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getVoiceMails(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_voiceMail "nco:voiceMail" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getVoiceMails(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::voiceMail >(object_info, strategy, parent); }
				/*!
					\fn void setVoiceMails(LiveNodes const &voiceMail_)
					
					
					Sets the property \ref nco_voiceMail "nco:voiceMail" set to the given \a voiceMail_ set.
					\sa LiveResource::setObjects
				 */
				void setVoiceMails(LiveNodes const &voiceMail_) { baseSetObjects(nco::voiceMail::iri(), voiceMail_); }
				/*!
					\fn void removeVoiceMails(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_voiceMail "nco:voiceMail" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeVoiceMails(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::voiceMail::iri(), object_info); }
				/*!
					\fn bool getVoiceMail()
					
					
					Returns the property \ref nco_voiceMail "nco:voiceMail". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getVoiceMail() { return baseGetObject< nco::voiceMail >(); }
				/*!
					\fn void setVoiceMail(bool const &voiceMail_)
					
					
					Sets the property \ref nco_voiceMail "nco:voiceMail" to the given \a voiceMail.
					\sa LiveResource::setObject
				 */
				void setVoiceMail(bool const &voiceMail_) { baseSetObject< nco::voiceMail >( voiceMail_ ); }
				/*!
					\fn bool firstVoiceMail()
					
					
					Returns the first property \ref nco_voiceMail "nco:voiceMail". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstVoiceMail() { return baseFirstObject< nco::voiceMail >(); }
				/*!
					\fn void addVoiceMail(bool const &voiceMail_)
					
					
					Adds the given \a voiceMail_ to the property \ref nco_voiceMail "nco:voiceMail" set.
					\sa LiveResource::addObject
				 */
				void addVoiceMail(bool const &voiceMail_) { baseAddObject< nco::voiceMail >( voiceMail_ ); }
				/*!
					\fn void removeVoiceMail(bool const &voiceMail_)
					
					
					Removes the given \a voiceMail_ from the property \ref nco_voiceMail "nco:voiceMail" set.
					\sa LiveResource::removeObject
				 */
				void removeVoiceMail(bool const &voiceMail_) { baseRemoveObject< nco::voiceMail >(voiceMail_); }
				 //@}
			};

			/*! Class generated from nco:CarPhoneNumber
			 * \ingroup onto_nco_classes
			 * A car phone number. Inspired by the (TYPE=car) parameter of the TEL property as defined in RFC 2426 sec  3.3.1.
			 * 
			 * rdfs:label = CarPhoneNumber
			 * 
			 * tracker:modified = 1937
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class CarPhoneNumber
				: public virtual VoicePhoneNumber

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#CarPhoneNumber"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<VoicePhoneNumber, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<CarPhoneNumber> Live;
				CarPhoneNumber() { this->attachInterfaceHelper< CarPhoneNumber >(); }
				~CarPhoneNumber() { this->detachInterfaceHelper< CarPhoneNumber >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:MessagingNumber
			 * \ingroup onto_nco_classes
			 * A number that can accept textual messages.
			 * 
			 * rdfs:label = MessagingNumber
			 * 
			 * tracker:modified = 1428
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class MessagingNumber
				: public virtual PhoneNumber

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#MessagingNumber"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PhoneNumber, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MessagingNumber> Live;
				MessagingNumber() { this->attachInterfaceHelper< MessagingNumber >(); }
				~MessagingNumber() { this->detachInterfaceHelper< MessagingNumber >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:CellPhoneNumber
			 * \ingroup onto_nco_classes
			 * A cellular phone number. Inspired by the (TYPE=cell) parameter of the TEL property as defined in RFC 2426 sec  3.3.1. Usually a cellular phone can accept voice calls as well as textual messages (SMS), therefore this class has two superclasses.
			 * 
			 * rdfs:label = CellPhoneNumber
			 * 
			 * tracker:modified = 1488
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class CellPhoneNumber
				: public virtual MessagingNumber, public virtual VoicePhoneNumber

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#CellPhoneNumber"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<MessagingNumber, QPair<VoicePhoneNumber, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<CellPhoneNumber> Live;
				CellPhoneNumber() { this->attachInterfaceHelper< CellPhoneNumber >(); }
				~CellPhoneNumber() { this->detachInterfaceHelper< CellPhoneNumber >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:Contact
			 * \ingroup onto_nco_classes
			 * A Contact. A piece of data that can provide means to identify or communicate with an entity.
			 * 
			 * rdfs:label = Contact
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1836
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_representative "nco:representative"
			 * 		\ref nco_publisher "nco:publisher"
			 * 		\ref nco_contributor "nco:contributor"
			 * 		\ref nco_creator "nco:creator"
			 */
			class Contact
				: public virtual nie::InformationElement, public virtual Role

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, QPair<Role, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Contact> Live;
				Contact() { this->attachInterfaceHelper< Contact >(); }
				~Contact() { this->detachInterfaceHelper< Contact >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:photo
				 * \n Photograph attached to a Contact. The DataObject refered to by this property is usually interpreted as an nfo:Image. Inspired by the PHOTO property defined in RFC 2426 sec. 3.1.4
				 * \n rdfs:label=photo
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:modified=1287
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nie::DataObject DataObject;
				/*!
					\fn LiveNodes livePhotos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_photo "nco:photo" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePhotos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::photo >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPhotos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_photo "nco:photo" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPhotos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::photo >(object_info, strategy, parent); }
				/*!
					\fn void setPhotos(LiveNodes const &photo_)
					
					
					Sets the property \ref nco_photo "nco:photo" set to the given \a photo_ set.
					\sa LiveResource::setObjects
				 */
				void setPhotos(LiveNodes const &photo_) { baseSetObjects(nco::photo::iri(), photo_); }
				/*!
					\fn void removePhotos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_photo "nco:photo" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePhotos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::photo::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > getPhoto()
					
					
					Returns the property \ref nco_photo "nco:photo". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nie::DataObject > getPhoto() { return baseGetObject< nco::photo >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > setPhoto(::SopranoLive::Live< nie::DataObject > const &photo_)
					
					
					Sets the property \ref nco_photo "nco:photo" to the given \a photo.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nie::DataObject > setPhoto(::SopranoLive::Live< nie::DataObject > const &photo_) { return baseSetObject< nco::photo >( photo_ ); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > firstPhoto()
					
					
					Returns the first property \ref nco_photo "nco:photo". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nie::DataObject > firstPhoto() { return baseFirstObject< nco::photo >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addPhoto()
					
					
					Adds a new uniquely named resource to the property \ref nco_photo "nco:photo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addPhoto() { return baseAddObject< nco::photo >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addPhoto(::SopranoLive::Live< nie::DataObject > const &photo_)
					
					
					Adds the given \a photo_ to the property \ref nco_photo "nco:photo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addPhoto(::SopranoLive::Live< nie::DataObject > const &photo_) { return baseAddObject< nco::photo >( photo_ ); }
				/*!
					\fn void removePhoto(::SopranoLive::Live< nie::DataObject > const &photo_)
					
					
					Removes the given \a photo_ from the property \ref nco_photo "nco:photo" set.
					\sa LiveResource::removeObject
				 */
				void removePhoto(::SopranoLive::Live< nie::DataObject > const &photo_) { baseRemoveObject< nco::photo >(photo_); }

				/* Property generated from nco:fullname
				 * \n To specify the formatted text corresponding to the name of the object the Contact represents. An equivalent of the FN property as defined in RFC 2426 Sec. 3.1.1.
				 * \n rdfs:label=fullname
				 * \n rdfs:subPropertyOf=dc:title
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:weight=6
				 * \n tracker:modified=1909
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n tracker:fulltextNoLimit=true
				 */
				/*!
					\fn LiveNodes liveFullnames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_fullname "nco:fullname" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFullnames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::fullname >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFullnames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_fullname "nco:fullname" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFullnames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::fullname >(object_info, strategy, parent); }
				/*!
					\fn void setFullnames(LiveNodes const &fullname_)
					
					
					Sets the property \ref nco_fullname "nco:fullname" set to the given \a fullname_ set.
					\sa LiveResource::setObjects
				 */
				void setFullnames(LiveNodes const &fullname_) { baseSetObjects(nco::fullname::iri(), fullname_); }
				/*!
					\fn void removeFullnames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_fullname "nco:fullname" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFullnames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::fullname::iri(), object_info); }
				/*!
					\fn QString getFullname()
					
					
					Returns the property \ref nco_fullname "nco:fullname". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getFullname() { return baseGetObject< nco::fullname >(); }
				/*!
					\fn void setFullname(QString const &fullname_)
					
					
					Sets the property \ref nco_fullname "nco:fullname" to the given \a fullname.
					\sa LiveResource::setObject
				 */
				void setFullname(QString const &fullname_) { baseSetObject< nco::fullname >( fullname_ ); }
				/*!
					\fn QString firstFullname()
					
					
					Returns the first property \ref nco_fullname "nco:fullname". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstFullname() { return baseFirstObject< nco::fullname >(); }
				/*!
					\fn void addFullname(QString const &fullname_)
					
					
					Adds the given \a fullname_ to the property \ref nco_fullname "nco:fullname" set.
					\sa LiveResource::addObject
				 */
				void addFullname(QString const &fullname_) { baseAddObject< nco::fullname >( fullname_ ); }
				/*!
					\fn void removeFullname(QString const &fullname_)
					
					
					Removes the given \a fullname_ from the property \ref nco_fullname "nco:fullname" set.
					\sa LiveResource::removeObject
				 */
				void removeFullname(QString const &fullname_) { baseRemoveObject< nco::fullname >(fullname_); }

				/* Property generated from nco:nickname
				 * \n A nickname of the Object represented by this Contact. This is an equivalen of the 'NICKNAME' property as defined in RFC 2426 Sec. 3.1.3.
				 * \n rdfs:label=nickname
				 * \n tracker:fulltextNoLimit=true
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:weight=5
				 * \n tracker:modified=1290
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNicknames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_nickname "nco:nickname" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNicknames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::nickname >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNicknames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_nickname "nco:nickname" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNicknames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::nickname >(object_info, strategy, parent); }
				/*!
					\fn void setNicknames(LiveNodes const &nickname_)
					
					
					Sets the property \ref nco_nickname "nco:nickname" set to the given \a nickname_ set.
					\sa LiveResource::setObjects
				 */
				void setNicknames(LiveNodes const &nickname_) { baseSetObjects(nco::nickname::iri(), nickname_); }
				/*!
					\fn void removeNicknames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_nickname "nco:nickname" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNicknames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::nickname::iri(), object_info); }
				/*!
					\fn QString getNickname()
					
					
					Returns the property \ref nco_nickname "nco:nickname". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getNickname() { return baseGetObject< nco::nickname >(); }
				/*!
					\fn void setNickname(QString const &nickname_)
					
					
					Sets the property \ref nco_nickname "nco:nickname" to the given \a nickname.
					\sa LiveResource::setObject
				 */
				void setNickname(QString const &nickname_) { baseSetObject< nco::nickname >( nickname_ ); }
				/*!
					\fn QString firstNickname()
					
					
					Returns the first property \ref nco_nickname "nco:nickname". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstNickname() { return baseFirstObject< nco::nickname >(); }
				/*!
					\fn void addNickname(QString const &nickname_)
					
					
					Adds the given \a nickname_ to the property \ref nco_nickname "nco:nickname" set.
					\sa LiveResource::addObject
				 */
				void addNickname(QString const &nickname_) { baseAddObject< nco::nickname >( nickname_ ); }
				/*!
					\fn void removeNickname(QString const &nickname_)
					
					
					Removes the given \a nickname_ from the property \ref nco_nickname "nco:nickname" set.
					\sa LiveResource::removeObject
				 */
				void removeNickname(QString const &nickname_) { baseRemoveObject< nco::nickname >(nickname_); }

				/* Property generated from nco:note
				 * \n A note about the object represented by this Contact. An equivalent for the 'NOTE' property defined in RFC 2426 Sec. 3.6.2
				 * \n rdfs:label=note
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:weight=4
				 * \n tracker:modified=1052
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNotes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_note "nco:note" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNotes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::note >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNotes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_note "nco:note" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNotes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::note >(object_info, strategy, parent); }
				/*!
					\fn void setNotes(LiveNodes const &note_)
					
					
					Sets the property \ref nco_note "nco:note" set to the given \a note_ set.
					\sa LiveResource::setObjects
				 */
				void setNotes(LiveNodes const &note_) { baseSetObjects(nco::note::iri(), note_); }
				/*!
					\fn void removeNotes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_note "nco:note" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNotes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::note::iri(), object_info); }
				/*!
					\fn QString firstNote()
					
					
					Returns the first property \ref nco_note "nco:note". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstNote() { return baseFirstObject< nco::note >(); }
				/*!
					\fn void addNote(QString const &note_)
					
					
					Adds the given \a note_ to the property \ref nco_note "nco:note" set.
					\sa LiveResource::addObject
				 */
				void addNote(QString const &note_) { baseAddObject< nco::note >( note_ ); }
				/*!
					\fn void removeNote(QString const &note_)
					
					
					Removes the given \a note_ from the property \ref nco_note "nco:note" set.
					\sa LiveResource::removeObject
				 */
				void removeNote(QString const &note_) { baseRemoveObject< nco::note >(note_); }

				/* Property generated from scal:anniversary
				 * \n links a contact with the calendar event of an anniversary. (SCAL version)
				 * \n rdfs:range=scal:Event
				 * \n rdfs:label=anniversary event
				 * \n tracker:modified=1361
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef scal::Event Event;
				/*!
					\fn LiveNodes liveScalAnniversarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_anniversary "scal:anniversary" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveScalAnniversarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::anniversary >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getScalAnniversarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_anniversary "scal:anniversary" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getScalAnniversarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::anniversary >(object_info, strategy, parent); }
				/*!
					\fn void setScalAnniversarys(LiveNodes const &scalAnniversary_)
					
					
					Sets the property \ref scal_anniversary "scal:anniversary" set to the given \a scalAnniversary_ set.
					\sa LiveResource::setObjects
				 */
				void setScalAnniversarys(LiveNodes const &scalAnniversary_) { baseSetObjects(scal::anniversary::iri(), scalAnniversary_); }
				/*!
					\fn void removeScalAnniversarys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_anniversary "scal:anniversary" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeScalAnniversarys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::anniversary::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< scal::Event > firstScalAnniversary()
					
					
					Returns the first property \ref scal_anniversary "scal:anniversary". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< scal::Event > firstScalAnniversary() { return baseFirstObject< scal::anniversary >(); }
				/*!
					\fn ::SopranoLive::Live< scal::Event > addScalAnniversary()
					
					
					Adds a new uniquely named resource to the property \ref scal_anniversary "scal:anniversary" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< scal::Event > addScalAnniversary() { return baseAddObject< scal::anniversary >(); }
				/*!
					\fn ::SopranoLive::Live< scal::Event > addScalAnniversary(::SopranoLive::Live< scal::Event > const &scalAnniversary_)
					
					
					Adds the given \a scalAnniversary_ to the property \ref scal_anniversary "scal:anniversary" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< scal::Event > addScalAnniversary(::SopranoLive::Live< scal::Event > const &scalAnniversary_) { return baseAddObject< scal::anniversary >( scalAnniversary_ ); }
				/*!
					\fn void removeScalAnniversary(::SopranoLive::Live< scal::Event > const &scalAnniversary_)
					
					
					Removes the given \a scalAnniversary_ from the property \ref scal_anniversary "scal:anniversary" set.
					\sa LiveResource::removeObject
				 */
				void removeScalAnniversary(::SopranoLive::Live< scal::Event > const &scalAnniversary_) { baseRemoveObject< scal::anniversary >(scalAnniversary_); }

				/* Property generated from scal:birthday
				 * \n links a contact with the calendar event of his birthday. (SCAL version)
				 * \n rdfs:range=scal:Event
				 * \n rdfs:label=birthday event
				 * \n tracker:modified=1510
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveScalBirthdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_birthday "scal:birthday" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveScalBirthdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::birthday >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getScalBirthdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_birthday "scal:birthday" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getScalBirthdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::birthday >(object_info, strategy, parent); }
				/*!
					\fn void setScalBirthdays(LiveNodes const &scalBirthday_)
					
					
					Sets the property \ref scal_birthday "scal:birthday" set to the given \a scalBirthday_ set.
					\sa LiveResource::setObjects
				 */
				void setScalBirthdays(LiveNodes const &scalBirthday_) { baseSetObjects(scal::birthday::iri(), scalBirthday_); }
				/*!
					\fn void removeScalBirthdays(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_birthday "scal:birthday" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeScalBirthdays(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::birthday::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< scal::Event > firstScalBirthday()
					
					
					Returns the first property \ref scal_birthday "scal:birthday". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< scal::Event > firstScalBirthday() { return baseFirstObject< scal::birthday >(); }
				/*!
					\fn ::SopranoLive::Live< scal::Event > addScalBirthday()
					
					
					Adds a new uniquely named resource to the property \ref scal_birthday "scal:birthday" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< scal::Event > addScalBirthday() { return baseAddObject< scal::birthday >(); }
				/*!
					\fn ::SopranoLive::Live< scal::Event > addScalBirthday(::SopranoLive::Live< scal::Event > const &scalBirthday_)
					
					
					Adds the given \a scalBirthday_ to the property \ref scal_birthday "scal:birthday" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< scal::Event > addScalBirthday(::SopranoLive::Live< scal::Event > const &scalBirthday_) { return baseAddObject< scal::birthday >( scalBirthday_ ); }
				/*!
					\fn void removeScalBirthday(::SopranoLive::Live< scal::Event > const &scalBirthday_)
					
					
					Removes the given \a scalBirthday_ from the property \ref scal_birthday "scal:birthday" set.
					\sa LiveResource::removeObject
				 */
				void removeScalBirthday(::SopranoLive::Live< scal::Event > const &scalBirthday_) { baseRemoveObject< scal::birthday >(scalBirthday_); }

				/* Property generated from ncal:birthday
				 * \n links a contact with the calendar event of his birthday. (NCAL version)
				 * \n rdfs:range=ncal:Event
				 * \n rdfs:label=birthday event
				 * \n tracker:modified=1464
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNcalBirthdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_birthday "ncal:birthday" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNcalBirthdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::birthday >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNcalBirthdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_birthday "ncal:birthday" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNcalBirthdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::birthday >(object_info, strategy, parent); }
				/*!
					\fn void setNcalBirthdays(LiveNodes const &ncalBirthday_)
					
					
					Sets the property \ref ncal_birthday "ncal:birthday" set to the given \a ncalBirthday_ set.
					\sa LiveResource::setObjects
				 */
				void setNcalBirthdays(LiveNodes const &ncalBirthday_) { baseSetObjects(ncal::birthday::iri(), ncalBirthday_); }
				/*!
					\fn void removeNcalBirthdays(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_birthday "ncal:birthday" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNcalBirthdays(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::birthday::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< ncal::Event > firstNcalBirthday()
					
					
					Returns the first property \ref ncal_birthday "ncal:birthday". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< ncal::Event > firstNcalBirthday() { return baseFirstObject< ncal::birthday >(); }
				/*!
					\fn ::SopranoLive::Live< ncal::Event > addNcalBirthday()
					
					
					Adds a new uniquely named resource to the property \ref ncal_birthday "ncal:birthday" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ncal::Event > addNcalBirthday() { return baseAddObject< ncal::birthday >(); }
				/*!
					\fn ::SopranoLive::Live< ncal::Event > addNcalBirthday(::SopranoLive::Live< ncal::Event > const &ncalBirthday_)
					
					
					Adds the given \a ncalBirthday_ to the property \ref ncal_birthday "ncal:birthday" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ncal::Event > addNcalBirthday(::SopranoLive::Live< ncal::Event > const &ncalBirthday_) { return baseAddObject< ncal::birthday >( ncalBirthday_ ); }
				/*!
					\fn void removeNcalBirthday(::SopranoLive::Live< ncal::Event > const &ncalBirthday_)
					
					
					Removes the given \a ncalBirthday_ from the property \ref ncal_birthday "ncal:birthday" set.
					\sa LiveResource::removeObject
				 */
				void removeNcalBirthday(::SopranoLive::Live< ncal::Event > const &ncalBirthday_) { baseRemoveObject< ncal::birthday >(ncalBirthday_); }

				/* Property generated from nco:belongsToGroup
				 * \n Links a Contact with a ContactGroup it belongs to.
				 * \n rdfs:range=nco:ContactGroup
				 * \n rdfs:label=addressLocation
				 * \n tracker:modified=1240
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBelongsToGroups(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_belongsToGroup "nco:belongsToGroup" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBelongsToGroups(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::belongsToGroup >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBelongsToGroups(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_belongsToGroup "nco:belongsToGroup" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBelongsToGroups(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::belongsToGroup >(object_info, strategy, parent); }
				/*!
					\fn void setBelongsToGroups(LiveNodes const &belongsToGroup_)
					
					
					Sets the property \ref nco_belongsToGroup "nco:belongsToGroup" set to the given \a belongsToGroup_ set.
					\sa LiveResource::setObjects
				 */
				void setBelongsToGroups(LiveNodes const &belongsToGroup_) { baseSetObjects(nco::belongsToGroup::iri(), belongsToGroup_); }
				/*!
					\fn void removeBelongsToGroups(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_belongsToGroup "nco:belongsToGroup" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBelongsToGroups(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::belongsToGroup::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< ContactGroup > firstBelongsToGroup()
					
					
					Returns the first property \ref nco_belongsToGroup "nco:belongsToGroup". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< ContactGroup > firstBelongsToGroup() { return baseFirstObject< nco::belongsToGroup >(); }
				/*!
					\fn ::SopranoLive::Live< ContactGroup > addBelongsToGroup()
					
					
					Adds a new uniquely named resource to the property \ref nco_belongsToGroup "nco:belongsToGroup" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ContactGroup > addBelongsToGroup() { return baseAddObject< nco::belongsToGroup >(); }
				/*!
					\fn ::SopranoLive::Live< ContactGroup > addBelongsToGroup(::SopranoLive::Live< ContactGroup > const &belongsToGroup_)
					
					
					Adds the given \a belongsToGroup_ to the property \ref nco_belongsToGroup "nco:belongsToGroup" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ContactGroup > addBelongsToGroup(::SopranoLive::Live< ContactGroup > const &belongsToGroup_) { return baseAddObject< nco::belongsToGroup >( belongsToGroup_ ); }
				/*!
					\fn void removeBelongsToGroup(::SopranoLive::Live< ContactGroup > const &belongsToGroup_)
					
					
					Removes the given \a belongsToGroup_ from the property \ref nco_belongsToGroup "nco:belongsToGroup" set.
					\sa LiveResource::removeObject
				 */
				void removeBelongsToGroup(::SopranoLive::Live< ContactGroup > const &belongsToGroup_) { baseRemoveObject< nco::belongsToGroup >(belongsToGroup_); }

				/* Property generated from nco:representative
				 * \n An object that represent an object represented by this Contact. Usually this property is used to link a Contact to an organization, to a contact to the representative of this organization the user directly interacts with. An equivalent for the 'AGENT' property defined in RFC 2426 Sec. 3.5.4
				 * \n rdfs:label=representative
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:modified=1778
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRepresentatives(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_representative "nco:representative" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRepresentatives(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::representative >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRepresentatives(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_representative "nco:representative" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRepresentatives(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::representative >(object_info, strategy, parent); }
				/*!
					\fn void setRepresentatives(LiveNodes const &representative_)
					
					
					Sets the property \ref nco_representative "nco:representative" set to the given \a representative_ set.
					\sa LiveResource::setObjects
				 */
				void setRepresentatives(LiveNodes const &representative_) { baseSetObjects(nco::representative::iri(), representative_); }
				/*!
					\fn void removeRepresentatives(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_representative "nco:representative" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRepresentatives(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::representative::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Contact > getRepresentative()
					
					
					Returns the property \ref nco_representative "nco:representative". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Contact > getRepresentative() { return baseGetObject< nco::representative >(); }
				/*!
					\fn ::SopranoLive::Live< Contact > setRepresentative(::SopranoLive::Live< Contact > const &representative_)
					
					
					Sets the property \ref nco_representative "nco:representative" to the given \a representative.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Contact > setRepresentative(::SopranoLive::Live< Contact > const &representative_) { return baseSetObject< nco::representative >( representative_ ); }
				/*!
					\fn ::SopranoLive::Live< Contact > firstRepresentative()
					
					
					Returns the first property \ref nco_representative "nco:representative". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Contact > firstRepresentative() { return baseFirstObject< nco::representative >(); }
				/*!
					\fn ::SopranoLive::Live< Contact > addRepresentative()
					
					
					Adds a new uniquely named resource to the property \ref nco_representative "nco:representative" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Contact > addRepresentative() { return baseAddObject< nco::representative >(); }
				/*!
					\fn ::SopranoLive::Live< Contact > addRepresentative(::SopranoLive::Live< Contact > const &representative_)
					
					
					Adds the given \a representative_ to the property \ref nco_representative "nco:representative" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Contact > addRepresentative(::SopranoLive::Live< Contact > const &representative_) { return baseAddObject< nco::representative >( representative_ ); }
				/*!
					\fn void removeRepresentative(::SopranoLive::Live< Contact > const &representative_)
					
					
					Removes the given \a representative_ from the property \ref nco_representative "nco:representative" set.
					\sa LiveResource::removeObject
				 */
				void removeRepresentative(::SopranoLive::Live< Contact > const &representative_) { baseRemoveObject< nco::representative >(representative_); }

				/* Property generated from nco:contactUID
				 * \n A value that represents a globally unique  identifier corresponding to the individual or resource associated with the Contact. An equivalent of the 'UID' property defined in RFC 2426 Sec. 3.6.7
				 * \n rdfs:label=contactUID
				 * \n rdfs:subPropertyOf=nie:identifier
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:weight=5
				 * \n tracker:modified=1501
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContactUIDs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_contactUID "nco:contactUID" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContactUIDs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::contactUID >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContactUIDs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_contactUID "nco:contactUID" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContactUIDs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::contactUID >(object_info, strategy, parent); }
				/*!
					\fn void setContactUIDs(LiveNodes const &contactUID_)
					
					
					Sets the property \ref nco_contactUID "nco:contactUID" set to the given \a contactUID_ set.
					\sa LiveResource::setObjects
				 */
				void setContactUIDs(LiveNodes const &contactUID_) { baseSetObjects(nco::contactUID::iri(), contactUID_); }
				/*!
					\fn void removeContactUIDs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_contactUID "nco:contactUID" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContactUIDs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::contactUID::iri(), object_info); }
				/*!
					\fn QString getContactUID()
					
					
					Returns the property \ref nco_contactUID "nco:contactUID". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getContactUID() { return baseGetObject< nco::contactUID >(); }
				/*!
					\fn void setContactUID(QString const &contactUID_)
					
					
					Sets the property \ref nco_contactUID "nco:contactUID" to the given \a contactUID.
					\sa LiveResource::setObject
				 */
				void setContactUID(QString const &contactUID_) { baseSetObject< nco::contactUID >( contactUID_ ); }
				/*!
					\fn QString firstContactUID()
					
					
					Returns the first property \ref nco_contactUID "nco:contactUID". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstContactUID() { return baseFirstObject< nco::contactUID >(); }
				/*!
					\fn void addContactUID(QString const &contactUID_)
					
					
					Adds the given \a contactUID_ to the property \ref nco_contactUID "nco:contactUID" set.
					\sa LiveResource::addObject
				 */
				void addContactUID(QString const &contactUID_) { baseAddObject< nco::contactUID >( contactUID_ ); }
				/*!
					\fn void removeContactUID(QString const &contactUID_)
					
					
					Removes the given \a contactUID_ from the property \ref nco_contactUID "nco:contactUID" set.
					\sa LiveResource::removeObject
				 */
				void removeContactUID(QString const &contactUID_) { baseRemoveObject< nco::contactUID >(contactUID_); }

				/* Property generated from nco:sound
				 * \n Sound clip attached to a Contact. The DataObject refered to by this property is usually interpreted as an nfo:Audio. Inspired by the SOUND property defined in RFC 2425 sec. 3.6.6.
				 * \n rdfs:label=sound
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:modified=1047
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSounds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_sound "nco:sound" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSounds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::sound >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSounds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_sound "nco:sound" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSounds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::sound >(object_info, strategy, parent); }
				/*!
					\fn void setSounds(LiveNodes const &sound_)
					
					
					Sets the property \ref nco_sound "nco:sound" set to the given \a sound_ set.
					\sa LiveResource::setObjects
				 */
				void setSounds(LiveNodes const &sound_) { baseSetObjects(nco::sound::iri(), sound_); }
				/*!
					\fn void removeSounds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_sound "nco:sound" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSounds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::sound::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > getSound()
					
					
					Returns the property \ref nco_sound "nco:sound". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nie::DataObject > getSound() { return baseGetObject< nco::sound >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > setSound(::SopranoLive::Live< nie::DataObject > const &sound_)
					
					
					Sets the property \ref nco_sound "nco:sound" to the given \a sound.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nie::DataObject > setSound(::SopranoLive::Live< nie::DataObject > const &sound_) { return baseSetObject< nco::sound >( sound_ ); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > firstSound()
					
					
					Returns the first property \ref nco_sound "nco:sound". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nie::DataObject > firstSound() { return baseFirstObject< nco::sound >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addSound()
					
					
					Adds a new uniquely named resource to the property \ref nco_sound "nco:sound" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addSound() { return baseAddObject< nco::sound >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addSound(::SopranoLive::Live< nie::DataObject > const &sound_)
					
					
					Adds the given \a sound_ to the property \ref nco_sound "nco:sound" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addSound(::SopranoLive::Live< nie::DataObject > const &sound_) { return baseAddObject< nco::sound >( sound_ ); }
				/*!
					\fn void removeSound(::SopranoLive::Live< nie::DataObject > const &sound_)
					
					
					Removes the given \a sound_ from the property \ref nco_sound "nco:sound" set.
					\sa LiveResource::removeObject
				 */
				void removeSound(::SopranoLive::Live< nie::DataObject > const &sound_) { baseRemoveObject< nco::sound >(sound_); }

				/* Property generated from nco:key
				 * \n An encryption key attached to a contact. Inspired by the KEY property defined in RFC 2426 sec. 3.7.2
				 * \n rdfs:label=key
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:modified=1970
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveKeys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_key "nco:key" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveKeys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::key >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getKeys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_key "nco:key" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getKeys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::key >(object_info, strategy, parent); }
				/*!
					\fn void setKeys(LiveNodes const &key_)
					
					
					Sets the property \ref nco_key "nco:key" set to the given \a key_ set.
					\sa LiveResource::setObjects
				 */
				void setKeys(LiveNodes const &key_) { baseSetObjects(nco::key::iri(), key_); }
				/*!
					\fn void removeKeys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_key "nco:key" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeKeys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::key::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > getKey()
					
					
					Returns the property \ref nco_key "nco:key". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nie::DataObject > getKey() { return baseGetObject< nco::key >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > setKey(::SopranoLive::Live< nie::DataObject > const &key_)
					
					
					Sets the property \ref nco_key "nco:key" to the given \a key.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nie::DataObject > setKey(::SopranoLive::Live< nie::DataObject > const &key_) { return baseSetObject< nco::key >( key_ ); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > firstKey()
					
					
					Returns the first property \ref nco_key "nco:key". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nie::DataObject > firstKey() { return baseFirstObject< nco::key >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addKey()
					
					
					Adds a new uniquely named resource to the property \ref nco_key "nco:key" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addKey() { return baseAddObject< nco::key >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addKey(::SopranoLive::Live< nie::DataObject > const &key_)
					
					
					Adds the given \a key_ to the property \ref nco_key "nco:key" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addKey(::SopranoLive::Live< nie::DataObject > const &key_) { return baseAddObject< nco::key >( key_ ); }
				/*!
					\fn void removeKey(::SopranoLive::Live< nie::DataObject > const &key_)
					
					
					Removes the given \a key_ from the property \ref nco_key "nco:key" set.
					\sa LiveResource::removeObject
				 */
				void removeKey(::SopranoLive::Live< nie::DataObject > const &key_) { baseRemoveObject< nco::key >(key_); }

				/* Property generated from nco:contactLocalUID
				 * \n Unique ID for the contact in the local storage
				 * \n rdfs:label=local contact UID
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:modified=1316
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContactLocalUIDs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_contactLocalUID "nco:contactLocalUID" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContactLocalUIDs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::contactLocalUID >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContactLocalUIDs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_contactLocalUID "nco:contactLocalUID" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContactLocalUIDs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::contactLocalUID >(object_info, strategy, parent); }
				/*!
					\fn void setContactLocalUIDs(LiveNodes const &contactLocalUID_)
					
					
					Sets the property \ref nco_contactLocalUID "nco:contactLocalUID" set to the given \a contactLocalUID_ set.
					\sa LiveResource::setObjects
				 */
				void setContactLocalUIDs(LiveNodes const &contactLocalUID_) { baseSetObjects(nco::contactLocalUID::iri(), contactLocalUID_); }
				/*!
					\fn void removeContactLocalUIDs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_contactLocalUID "nco:contactLocalUID" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContactLocalUIDs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::contactLocalUID::iri(), object_info); }
				/*!
					\fn QString getContactLocalUID()
					
					
					Returns the property \ref nco_contactLocalUID "nco:contactLocalUID". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getContactLocalUID() { return baseGetObject< nco::contactLocalUID >(); }
				/*!
					\fn void setContactLocalUID(QString const &contactLocalUID_)
					
					
					Sets the property \ref nco_contactLocalUID "nco:contactLocalUID" to the given \a contactLocalUID.
					\sa LiveResource::setObject
				 */
				void setContactLocalUID(QString const &contactLocalUID_) { baseSetObject< nco::contactLocalUID >( contactLocalUID_ ); }
				/*!
					\fn QString firstContactLocalUID()
					
					
					Returns the first property \ref nco_contactLocalUID "nco:contactLocalUID". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstContactLocalUID() { return baseFirstObject< nco::contactLocalUID >(); }
				/*!
					\fn void addContactLocalUID(QString const &contactLocalUID_)
					
					
					Adds the given \a contactLocalUID_ to the property \ref nco_contactLocalUID "nco:contactLocalUID" set.
					\sa LiveResource::addObject
				 */
				void addContactLocalUID(QString const &contactLocalUID_) { baseAddObject< nco::contactLocalUID >( contactLocalUID_ ); }
				/*!
					\fn void removeContactLocalUID(QString const &contactLocalUID_)
					
					
					Removes the given \a contactLocalUID_ from the property \ref nco_contactLocalUID "nco:contactLocalUID" set.
					\sa LiveResource::removeObject
				 */
				void removeContactLocalUID(QString const &contactLocalUID_) { baseRemoveObject< nco::contactLocalUID >(contactLocalUID_); }

				/* Property generated from nco:birthDate
				 * \n Birth date of the object represented by this Contact. An equivalent of the 'BDAY' property as defined in RFC 2426 Sec. 3.1.5.
				 * \n rdfs:label=birthDate
				 * \n rdfs:subPropertyOf=dc:date
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:weight=5
				 * \n tracker:modified=1134
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBirthDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_birthDate "nco:birthDate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBirthDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::birthDate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBirthDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_birthDate "nco:birthDate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBirthDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::birthDate >(object_info, strategy, parent); }
				/*!
					\fn void setBirthDates(LiveNodes const &birthDate_)
					
					
					Sets the property \ref nco_birthDate "nco:birthDate" set to the given \a birthDate_ set.
					\sa LiveResource::setObjects
				 */
				void setBirthDates(LiveNodes const &birthDate_) { baseSetObjects(nco::birthDate::iri(), birthDate_); }
				/*!
					\fn void removeBirthDates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_birthDate "nco:birthDate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBirthDates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::birthDate::iri(), object_info); }
				/*!
					\fn QDateTime getBirthDate()
					
					
					Returns the property \ref nco_birthDate "nco:birthDate". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getBirthDate() { return baseGetObject< nco::birthDate >(); }
				/*!
					\fn void setBirthDate(QDateTime const &birthDate_)
					
					
					Sets the property \ref nco_birthDate "nco:birthDate" to the given \a birthDate.
					\sa LiveResource::setObject
				 */
				void setBirthDate(QDateTime const &birthDate_) { baseSetObject< nco::birthDate >( birthDate_ ); }
				/*!
					\fn QDateTime firstBirthDate()
					
					
					Returns the first property \ref nco_birthDate "nco:birthDate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstBirthDate() { return baseFirstObject< nco::birthDate >(); }
				/*!
					\fn void addBirthDate(QDateTime const &birthDate_)
					
					
					Adds the given \a birthDate_ to the property \ref nco_birthDate "nco:birthDate" set.
					\sa LiveResource::addObject
				 */
				void addBirthDate(QDateTime const &birthDate_) { baseAddObject< nco::birthDate >( birthDate_ ); }
				/*!
					\fn void removeBirthDate(QDateTime const &birthDate_)
					
					
					Removes the given \a birthDate_ from the property \ref nco_birthDate "nco:birthDate" set.
					\sa LiveResource::removeObject
				 */
				void removeBirthDate(QDateTime const &birthDate_) { baseRemoveObject< nco::birthDate >(birthDate_); }

				/* Property generated from nco:hasLocation
				 * \n Geographical location of the contact. Inspired by the 'GEO' property specified in RFC 2426 Sec. 3.4.2
				 * \n rdfs:label=hasLocation
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:modified=1554
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveHasLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_hasLocation "nco:hasLocation" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::hasLocation >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_hasLocation "nco:hasLocation" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::hasLocation >(object_info, strategy, parent); }
				/*!
					\fn void setHasLocations(LiveNodes const &hasLocation_)
					
					
					Sets the property \ref nco_hasLocation "nco:hasLocation" set to the given \a hasLocation_ set.
					\sa LiveResource::setObjects
				 */
				void setHasLocations(LiveNodes const &hasLocation_) { baseSetObjects(nco::hasLocation::iri(), hasLocation_); }
				/*!
					\fn void removeHasLocations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_hasLocation "nco:hasLocation" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasLocations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::hasLocation::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getHasLocation()
					
					
					Returns the property \ref nco_hasLocation "nco:hasLocation". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getHasLocation() { return baseGetObject< nco::hasLocation >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setHasLocation(::SopranoLive::Live< rdfs::Resource > const &hasLocation_)
					
					
					Sets the property \ref nco_hasLocation "nco:hasLocation" to the given \a hasLocation.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setHasLocation(::SopranoLive::Live< rdfs::Resource > const &hasLocation_) { return baseSetObject< nco::hasLocation >( hasLocation_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstHasLocation()
					
					
					Returns the first property \ref nco_hasLocation "nco:hasLocation". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstHasLocation() { return baseFirstObject< nco::hasLocation >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addHasLocation()
					
					
					Adds a new uniquely named resource to the property \ref nco_hasLocation "nco:hasLocation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addHasLocation() { return baseAddObject< nco::hasLocation >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addHasLocation(::SopranoLive::Live< rdfs::Resource > const &hasLocation_)
					
					
					Adds the given \a hasLocation_ to the property \ref nco_hasLocation "nco:hasLocation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addHasLocation(::SopranoLive::Live< rdfs::Resource > const &hasLocation_) { return baseAddObject< nco::hasLocation >( hasLocation_ ); }
				/*!
					\fn void removeHasLocation(::SopranoLive::Live< rdfs::Resource > const &hasLocation_)
					
					
					Removes the given \a hasLocation_ from the property \ref nco_hasLocation "nco:hasLocation" set.
					\sa LiveResource::removeObject
				 */
				void removeHasLocation(::SopranoLive::Live< rdfs::Resource > const &hasLocation_) { baseRemoveObject< nco::hasLocation >(hasLocation_); }

				/* Property generated from ncal:anniversary
				 * \n links a contact with the calendar event of an anniversary. (NCAL version)
				 * \n rdfs:range=ncal:Event
				 * \n rdfs:label=anniversary event
				 * \n tracker:modified=1448
				 * \n rdfs:domain=nco:Contact
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNcalAnniversarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_anniversary "ncal:anniversary" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNcalAnniversarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::anniversary >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNcalAnniversarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_anniversary "ncal:anniversary" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNcalAnniversarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::anniversary >(object_info, strategy, parent); }
				/*!
					\fn void setNcalAnniversarys(LiveNodes const &ncalAnniversary_)
					
					
					Sets the property \ref ncal_anniversary "ncal:anniversary" set to the given \a ncalAnniversary_ set.
					\sa LiveResource::setObjects
				 */
				void setNcalAnniversarys(LiveNodes const &ncalAnniversary_) { baseSetObjects(ncal::anniversary::iri(), ncalAnniversary_); }
				/*!
					\fn void removeNcalAnniversarys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_anniversary "ncal:anniversary" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNcalAnniversarys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::anniversary::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< ncal::Event > firstNcalAnniversary()
					
					
					Returns the first property \ref ncal_anniversary "ncal:anniversary". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< ncal::Event > firstNcalAnniversary() { return baseFirstObject< ncal::anniversary >(); }
				/*!
					\fn ::SopranoLive::Live< ncal::Event > addNcalAnniversary()
					
					
					Adds a new uniquely named resource to the property \ref ncal_anniversary "ncal:anniversary" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ncal::Event > addNcalAnniversary() { return baseAddObject< ncal::anniversary >(); }
				/*!
					\fn ::SopranoLive::Live< ncal::Event > addNcalAnniversary(::SopranoLive::Live< ncal::Event > const &ncalAnniversary_)
					
					
					Adds the given \a ncalAnniversary_ to the property \ref ncal_anniversary "ncal:anniversary" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ncal::Event > addNcalAnniversary(::SopranoLive::Live< ncal::Event > const &ncalAnniversary_) { return baseAddObject< ncal::anniversary >( ncalAnniversary_ ); }
				/*!
					\fn void removeNcalAnniversary(::SopranoLive::Live< ncal::Event > const &ncalAnniversary_)
					
					
					Removes the given \a ncalAnniversary_ from the property \ref ncal_anniversary "ncal:anniversary" set.
					\sa LiveResource::removeObject
				 */
				void removeNcalAnniversary(::SopranoLive::Live< ncal::Event > const &ncalAnniversary_) { baseRemoveObject< ncal::anniversary >(ncalAnniversary_); }
				 //@}
			};

			/*! Class generated from nco:ContactGroup
			 * \ingroup onto_nco_classes
			 * A group of Contacts. Could be used to express a group in an addressbook or on a contact list of an IM application. One contact can belong to many groups.
			 * 
			 * rdfs:label = ContactGroup
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1688
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_belongsToGroup "nco:belongsToGroup"
			 */
			class ContactGroup
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#ContactGroup"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<ContactGroup> Live;
				ContactGroup() { this->attachInterfaceHelper< ContactGroup >(); }
				~ContactGroup() { this->detachInterfaceHelper< ContactGroup >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from maemo:contactGroupVibrationRingtone
				 * \n File linked with a contact group to vibrate on a pleasant frequency
				 * \n rdfs:label=Vibration ringtone
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:FileDataObject
				 * \n rdfs:domain=nco:ContactGroup
				 * \n tracker:modified=2066
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nfo::FileDataObject FileDataObject;
				/*!
					\fn LiveNodes liveMaemoContactGroupVibrationRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref maemo_contactGroupVibrationRingtone "maemo:contactGroupVibrationRingtone" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMaemoContactGroupVibrationRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< maemo::contactGroupVibrationRingtone >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMaemoContactGroupVibrationRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref maemo_contactGroupVibrationRingtone "maemo:contactGroupVibrationRingtone" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMaemoContactGroupVibrationRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< maemo::contactGroupVibrationRingtone >(object_info, strategy, parent); }
				/*!
					\fn void setMaemoContactGroupVibrationRingtones(LiveNodes const &maemoContactGroupVibrationRingtone_)
					
					
					Sets the property \ref maemo_contactGroupVibrationRingtone "maemo:contactGroupVibrationRingtone" set to the given \a maemoContactGroupVibrationRingtone_ set.
					\sa LiveResource::setObjects
				 */
				void setMaemoContactGroupVibrationRingtones(LiveNodes const &maemoContactGroupVibrationRingtone_) { baseSetObjects(maemo::contactGroupVibrationRingtone::iri(), maemoContactGroupVibrationRingtone_); }
				/*!
					\fn void removeMaemoContactGroupVibrationRingtones(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref maemo_contactGroupVibrationRingtone "maemo:contactGroupVibrationRingtone" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMaemoContactGroupVibrationRingtones(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(maemo::contactGroupVibrationRingtone::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > getMaemoContactGroupVibrationRingtone()
					
					
					Returns the property \ref maemo_contactGroupVibrationRingtone "maemo:contactGroupVibrationRingtone". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > getMaemoContactGroupVibrationRingtone() { return baseGetObject< maemo::contactGroupVibrationRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > setMaemoContactGroupVibrationRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupVibrationRingtone_)
					
					
					Sets the property \ref maemo_contactGroupVibrationRingtone "maemo:contactGroupVibrationRingtone" to the given \a maemoContactGroupVibrationRingtone.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > setMaemoContactGroupVibrationRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupVibrationRingtone_) { return baseSetObject< maemo::contactGroupVibrationRingtone >( maemoContactGroupVibrationRingtone_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > firstMaemoContactGroupVibrationRingtone()
					
					
					Returns the first property \ref maemo_contactGroupVibrationRingtone "maemo:contactGroupVibrationRingtone". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > firstMaemoContactGroupVibrationRingtone() { return baseFirstObject< maemo::contactGroupVibrationRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addMaemoContactGroupVibrationRingtone()
					
					
					Adds a new uniquely named resource to the property \ref maemo_contactGroupVibrationRingtone "maemo:contactGroupVibrationRingtone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addMaemoContactGroupVibrationRingtone() { return baseAddObject< maemo::contactGroupVibrationRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addMaemoContactGroupVibrationRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupVibrationRingtone_)
					
					
					Adds the given \a maemoContactGroupVibrationRingtone_ to the property \ref maemo_contactGroupVibrationRingtone "maemo:contactGroupVibrationRingtone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addMaemoContactGroupVibrationRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupVibrationRingtone_) { return baseAddObject< maemo::contactGroupVibrationRingtone >( maemoContactGroupVibrationRingtone_ ); }
				/*!
					\fn void removeMaemoContactGroupVibrationRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupVibrationRingtone_)
					
					
					Removes the given \a maemoContactGroupVibrationRingtone_ from the property \ref maemo_contactGroupVibrationRingtone "maemo:contactGroupVibrationRingtone" set.
					\sa LiveResource::removeObject
				 */
				void removeMaemoContactGroupVibrationRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupVibrationRingtone_) { baseRemoveObject< maemo::contactGroupVibrationRingtone >(maemoContactGroupVibrationRingtone_); }

				/* Property generated from nco:contactGroupName
				 * \n The name of the contact group. This property was NOT defined in the VCARD standard. See documentation of the 'ContactGroup' class for details
				 * \n rdfs:label=contactGroupName
				 * \n rdfs:subPropertyOf=dc:title
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:ContactGroup
				 * \n tracker:weight=4
				 * \n tracker:modified=1268
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n tracker:fulltextNoLimit=true
				 */
				/*!
					\fn LiveNodes liveContactGroupNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_contactGroupName "nco:contactGroupName" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContactGroupNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::contactGroupName >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContactGroupNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_contactGroupName "nco:contactGroupName" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContactGroupNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::contactGroupName >(object_info, strategy, parent); }
				/*!
					\fn void setContactGroupNames(LiveNodes const &contactGroupName_)
					
					
					Sets the property \ref nco_contactGroupName "nco:contactGroupName" set to the given \a contactGroupName_ set.
					\sa LiveResource::setObjects
				 */
				void setContactGroupNames(LiveNodes const &contactGroupName_) { baseSetObjects(nco::contactGroupName::iri(), contactGroupName_); }
				/*!
					\fn void removeContactGroupNames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_contactGroupName "nco:contactGroupName" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContactGroupNames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::contactGroupName::iri(), object_info); }
				/*!
					\fn QString getContactGroupName()
					
					
					Returns the property \ref nco_contactGroupName "nco:contactGroupName". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getContactGroupName() { return baseGetObject< nco::contactGroupName >(); }
				/*!
					\fn void setContactGroupName(QString const &contactGroupName_)
					
					
					Sets the property \ref nco_contactGroupName "nco:contactGroupName" to the given \a contactGroupName.
					\sa LiveResource::setObject
				 */
				void setContactGroupName(QString const &contactGroupName_) { baseSetObject< nco::contactGroupName >( contactGroupName_ ); }
				/*!
					\fn QString firstContactGroupName()
					
					
					Returns the first property \ref nco_contactGroupName "nco:contactGroupName". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstContactGroupName() { return baseFirstObject< nco::contactGroupName >(); }
				/*!
					\fn void addContactGroupName(QString const &contactGroupName_)
					
					
					Adds the given \a contactGroupName_ to the property \ref nco_contactGroupName "nco:contactGroupName" set.
					\sa LiveResource::addObject
				 */
				void addContactGroupName(QString const &contactGroupName_) { baseAddObject< nco::contactGroupName >( contactGroupName_ ); }
				/*!
					\fn void removeContactGroupName(QString const &contactGroupName_)
					
					
					Removes the given \a contactGroupName_ from the property \ref nco_contactGroupName "nco:contactGroupName" set.
					\sa LiveResource::removeObject
				 */
				void removeContactGroupName(QString const &contactGroupName_) { baseRemoveObject< nco::contactGroupName >(contactGroupName_); }

				/* Property generated from maemo:contactGroupVideoRingtone
				 * \n Video file linked with a contact group
				 * \n rdfs:label=Video ringtone
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:FileDataObject
				 * \n rdfs:domain=nco:ContactGroup
				 * \n tracker:modified=2053
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMaemoContactGroupVideoRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref maemo_contactGroupVideoRingtone "maemo:contactGroupVideoRingtone" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMaemoContactGroupVideoRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< maemo::contactGroupVideoRingtone >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMaemoContactGroupVideoRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref maemo_contactGroupVideoRingtone "maemo:contactGroupVideoRingtone" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMaemoContactGroupVideoRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< maemo::contactGroupVideoRingtone >(object_info, strategy, parent); }
				/*!
					\fn void setMaemoContactGroupVideoRingtones(LiveNodes const &maemoContactGroupVideoRingtone_)
					
					
					Sets the property \ref maemo_contactGroupVideoRingtone "maemo:contactGroupVideoRingtone" set to the given \a maemoContactGroupVideoRingtone_ set.
					\sa LiveResource::setObjects
				 */
				void setMaemoContactGroupVideoRingtones(LiveNodes const &maemoContactGroupVideoRingtone_) { baseSetObjects(maemo::contactGroupVideoRingtone::iri(), maemoContactGroupVideoRingtone_); }
				/*!
					\fn void removeMaemoContactGroupVideoRingtones(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref maemo_contactGroupVideoRingtone "maemo:contactGroupVideoRingtone" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMaemoContactGroupVideoRingtones(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(maemo::contactGroupVideoRingtone::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > getMaemoContactGroupVideoRingtone()
					
					
					Returns the property \ref maemo_contactGroupVideoRingtone "maemo:contactGroupVideoRingtone". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > getMaemoContactGroupVideoRingtone() { return baseGetObject< maemo::contactGroupVideoRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > setMaemoContactGroupVideoRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupVideoRingtone_)
					
					
					Sets the property \ref maemo_contactGroupVideoRingtone "maemo:contactGroupVideoRingtone" to the given \a maemoContactGroupVideoRingtone.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > setMaemoContactGroupVideoRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupVideoRingtone_) { return baseSetObject< maemo::contactGroupVideoRingtone >( maemoContactGroupVideoRingtone_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > firstMaemoContactGroupVideoRingtone()
					
					
					Returns the first property \ref maemo_contactGroupVideoRingtone "maemo:contactGroupVideoRingtone". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > firstMaemoContactGroupVideoRingtone() { return baseFirstObject< maemo::contactGroupVideoRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addMaemoContactGroupVideoRingtone()
					
					
					Adds a new uniquely named resource to the property \ref maemo_contactGroupVideoRingtone "maemo:contactGroupVideoRingtone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addMaemoContactGroupVideoRingtone() { return baseAddObject< maemo::contactGroupVideoRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addMaemoContactGroupVideoRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupVideoRingtone_)
					
					
					Adds the given \a maemoContactGroupVideoRingtone_ to the property \ref maemo_contactGroupVideoRingtone "maemo:contactGroupVideoRingtone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addMaemoContactGroupVideoRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupVideoRingtone_) { return baseAddObject< maemo::contactGroupVideoRingtone >( maemoContactGroupVideoRingtone_ ); }
				/*!
					\fn void removeMaemoContactGroupVideoRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupVideoRingtone_)
					
					
					Removes the given \a maemoContactGroupVideoRingtone_ from the property \ref maemo_contactGroupVideoRingtone "maemo:contactGroupVideoRingtone" set.
					\sa LiveResource::removeObject
				 */
				void removeMaemoContactGroupVideoRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupVideoRingtone_) { baseRemoveObject< maemo::contactGroupVideoRingtone >(maemoContactGroupVideoRingtone_); }

				/* Property generated from maemo:contactGroupAudioRingtone
				 * \n Audio file linked with a contact group
				 * \n rdfs:label=Audio ringtone
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:FileDataObject
				 * \n rdfs:domain=nco:ContactGroup
				 * \n tracker:modified=1226
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMaemoContactGroupAudioRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref maemo_contactGroupAudioRingtone "maemo:contactGroupAudioRingtone" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMaemoContactGroupAudioRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< maemo::contactGroupAudioRingtone >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMaemoContactGroupAudioRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref maemo_contactGroupAudioRingtone "maemo:contactGroupAudioRingtone" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMaemoContactGroupAudioRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< maemo::contactGroupAudioRingtone >(object_info, strategy, parent); }
				/*!
					\fn void setMaemoContactGroupAudioRingtones(LiveNodes const &maemoContactGroupAudioRingtone_)
					
					
					Sets the property \ref maemo_contactGroupAudioRingtone "maemo:contactGroupAudioRingtone" set to the given \a maemoContactGroupAudioRingtone_ set.
					\sa LiveResource::setObjects
				 */
				void setMaemoContactGroupAudioRingtones(LiveNodes const &maemoContactGroupAudioRingtone_) { baseSetObjects(maemo::contactGroupAudioRingtone::iri(), maemoContactGroupAudioRingtone_); }
				/*!
					\fn void removeMaemoContactGroupAudioRingtones(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref maemo_contactGroupAudioRingtone "maemo:contactGroupAudioRingtone" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMaemoContactGroupAudioRingtones(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(maemo::contactGroupAudioRingtone::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > getMaemoContactGroupAudioRingtone()
					
					
					Returns the property \ref maemo_contactGroupAudioRingtone "maemo:contactGroupAudioRingtone". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > getMaemoContactGroupAudioRingtone() { return baseGetObject< maemo::contactGroupAudioRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > setMaemoContactGroupAudioRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupAudioRingtone_)
					
					
					Sets the property \ref maemo_contactGroupAudioRingtone "maemo:contactGroupAudioRingtone" to the given \a maemoContactGroupAudioRingtone.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > setMaemoContactGroupAudioRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupAudioRingtone_) { return baseSetObject< maemo::contactGroupAudioRingtone >( maemoContactGroupAudioRingtone_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > firstMaemoContactGroupAudioRingtone()
					
					
					Returns the first property \ref maemo_contactGroupAudioRingtone "maemo:contactGroupAudioRingtone". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > firstMaemoContactGroupAudioRingtone() { return baseFirstObject< maemo::contactGroupAudioRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addMaemoContactGroupAudioRingtone()
					
					
					Adds a new uniquely named resource to the property \ref maemo_contactGroupAudioRingtone "maemo:contactGroupAudioRingtone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addMaemoContactGroupAudioRingtone() { return baseAddObject< maemo::contactGroupAudioRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addMaemoContactGroupAudioRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupAudioRingtone_)
					
					
					Adds the given \a maemoContactGroupAudioRingtone_ to the property \ref maemo_contactGroupAudioRingtone "maemo:contactGroupAudioRingtone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addMaemoContactGroupAudioRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupAudioRingtone_) { return baseAddObject< maemo::contactGroupAudioRingtone >( maemoContactGroupAudioRingtone_ ); }
				/*!
					\fn void removeMaemoContactGroupAudioRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupAudioRingtone_)
					
					
					Removes the given \a maemoContactGroupAudioRingtone_ from the property \ref maemo_contactGroupAudioRingtone "maemo:contactGroupAudioRingtone" set.
					\sa LiveResource::removeObject
				 */
				void removeMaemoContactGroupAudioRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactGroupAudioRingtone_) { baseRemoveObject< maemo::contactGroupAudioRingtone >(maemoContactGroupAudioRingtone_); }
				 //@}
			};

			/*! Class generated from nco:ContactList
			 * \ingroup onto_nco_classes
			 * A contact list, this class represents an addressbook or a contact list of an IM application. Contacts inside a contact list can belong to contact groups.
			 * 
			 * rdfs:label = ContactList
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1683
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class ContactList
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#ContactList"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<ContactList> Live;
				ContactList() { this->attachInterfaceHelper< ContactList >(); }
				~ContactList() { this->detachInterfaceHelper< ContactList >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:containsContact
				 * \n A property used to group contacts into contact groups. This property was NOT defined in the VCARD standard. See documentation for the 'ContactList' class for details
				 * \n rdfs:label=containsContact
				 * \n rdfs:subPropertyOf=nie:hasPart
				 * \n rdfs:range=nco:ContactListDataObject
				 * \n rdfs:domain=nco:ContactList
				 * \n tracker:modified=1063
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContainsContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_containsContact "nco:containsContact" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContainsContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::containsContact >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContainsContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_containsContact "nco:containsContact" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContainsContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::containsContact >(object_info, strategy, parent); }
				/*!
					\fn void setContainsContacts(LiveNodes const &containsContact_)
					
					
					Sets the property \ref nco_containsContact "nco:containsContact" set to the given \a containsContact_ set.
					\sa LiveResource::setObjects
				 */
				void setContainsContacts(LiveNodes const &containsContact_) { baseSetObjects(nco::containsContact::iri(), containsContact_); }
				/*!
					\fn void removeContainsContacts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_containsContact "nco:containsContact" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContainsContacts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::containsContact::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< ContactListDataObject > firstContainsContact()
					
					
					Returns the first property \ref nco_containsContact "nco:containsContact". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< ContactListDataObject > firstContainsContact() { return baseFirstObject< nco::containsContact >(); }
				/*!
					\fn ::SopranoLive::Live< ContactListDataObject > addContainsContact()
					
					
					Adds a new uniquely named resource to the property \ref nco_containsContact "nco:containsContact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ContactListDataObject > addContainsContact() { return baseAddObject< nco::containsContact >(); }
				/*!
					\fn ::SopranoLive::Live< ContactListDataObject > addContainsContact(::SopranoLive::Live< ContactListDataObject > const &containsContact_)
					
					
					Adds the given \a containsContact_ to the property \ref nco_containsContact "nco:containsContact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ContactListDataObject > addContainsContact(::SopranoLive::Live< ContactListDataObject > const &containsContact_) { return baseAddObject< nco::containsContact >( containsContact_ ); }
				/*!
					\fn void removeContainsContact(::SopranoLive::Live< ContactListDataObject > const &containsContact_)
					
					
					Removes the given \a containsContact_ from the property \ref nco_containsContact "nco:containsContact" set.
					\sa LiveResource::removeObject
				 */
				void removeContainsContact(::SopranoLive::Live< ContactListDataObject > const &containsContact_) { baseRemoveObject< nco::containsContact >(containsContact_); }
				 //@}
			};

			/*! Class generated from nco:ContactListDataObject
			 * \ingroup onto_nco_classes
			 * An entity occuring on a contact list (usually interpreted as an nco:Contact)
			 * 
			 * rdfs:label = ContactListDataObject
			 * 
			 * tracker:modified = 1087
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_containsContact "nco:containsContact"
			 */
			class ContactListDataObject
				: public virtual nie::DataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#ContactListDataObject"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::DataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<ContactListDataObject> Live;
				ContactListDataObject() { this->attachInterfaceHelper< ContactListDataObject >(); }
				~ContactListDataObject() { this->detachInterfaceHelper< ContactListDataObject >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:PostalAddress
			 * \ingroup onto_nco_classes
			 * A postal address. A class aggregating the various parts of a value for the 'ADR' property as defined in RFC 2426 Sec. 3.2.1.
			 * 
			 * rdfs:label = PostalAddress
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1767
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_hasPostalAddress "nco:hasPostalAddress"
			 */
			class PostalAddress
				: public virtual ContactMedium

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PostalAddress"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<ContactMedium, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<PostalAddress> Live;
				PostalAddress() { this->attachInterfaceHelper< PostalAddress >(); }
				~PostalAddress() { this->detachInterfaceHelper< PostalAddress >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:streetAddress
				 * \n The streed address. Inspired by the third part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
				 * \n rdfs:label=streetAddress
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PostalAddress
				 * \n tracker:weight=6
				 * \n tracker:modified=1438
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveStreetAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_streetAddress "nco:streetAddress" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStreetAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::streetAddress >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStreetAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_streetAddress "nco:streetAddress" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStreetAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::streetAddress >(object_info, strategy, parent); }
				/*!
					\fn void setStreetAddresss(LiveNodes const &streetAddress_)
					
					
					Sets the property \ref nco_streetAddress "nco:streetAddress" set to the given \a streetAddress_ set.
					\sa LiveResource::setObjects
				 */
				void setStreetAddresss(LiveNodes const &streetAddress_) { baseSetObjects(nco::streetAddress::iri(), streetAddress_); }
				/*!
					\fn void removeStreetAddresss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_streetAddress "nco:streetAddress" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStreetAddresss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::streetAddress::iri(), object_info); }
				/*!
					\fn QString getStreetAddress()
					
					
					Returns the property \ref nco_streetAddress "nco:streetAddress". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getStreetAddress() { return baseGetObject< nco::streetAddress >(); }
				/*!
					\fn void setStreetAddress(QString const &streetAddress_)
					
					
					Sets the property \ref nco_streetAddress "nco:streetAddress" to the given \a streetAddress.
					\sa LiveResource::setObject
				 */
				void setStreetAddress(QString const &streetAddress_) { baseSetObject< nco::streetAddress >( streetAddress_ ); }
				/*!
					\fn QString firstStreetAddress()
					
					
					Returns the first property \ref nco_streetAddress "nco:streetAddress". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstStreetAddress() { return baseFirstObject< nco::streetAddress >(); }
				/*!
					\fn void addStreetAddress(QString const &streetAddress_)
					
					
					Adds the given \a streetAddress_ to the property \ref nco_streetAddress "nco:streetAddress" set.
					\sa LiveResource::addObject
				 */
				void addStreetAddress(QString const &streetAddress_) { baseAddObject< nco::streetAddress >( streetAddress_ ); }
				/*!
					\fn void removeStreetAddress(QString const &streetAddress_)
					
					
					Removes the given \a streetAddress_ from the property \ref nco_streetAddress "nco:streetAddress" set.
					\sa LiveResource::removeObject
				 */
				void removeStreetAddress(QString const &streetAddress_) { baseRemoveObject< nco::streetAddress >(streetAddress_); }

				/* Property generated from nco:region
				 * \n Region. Inspired by the fifth part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
				 * \n rdfs:label=region
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PostalAddress
				 * \n tracker:weight=3
				 * \n tracker:modified=1612
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRegions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_region "nco:region" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRegions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::region >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRegions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_region "nco:region" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRegions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::region >(object_info, strategy, parent); }
				/*!
					\fn void setRegions(LiveNodes const &region_)
					
					
					Sets the property \ref nco_region "nco:region" set to the given \a region_ set.
					\sa LiveResource::setObjects
				 */
				void setRegions(LiveNodes const &region_) { baseSetObjects(nco::region::iri(), region_); }
				/*!
					\fn void removeRegions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_region "nco:region" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRegions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::region::iri(), object_info); }
				/*!
					\fn QString getRegion()
					
					
					Returns the property \ref nco_region "nco:region". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getRegion() { return baseGetObject< nco::region >(); }
				/*!
					\fn void setRegion(QString const &region_)
					
					
					Sets the property \ref nco_region "nco:region" to the given \a region.
					\sa LiveResource::setObject
				 */
				void setRegion(QString const &region_) { baseSetObject< nco::region >( region_ ); }
				/*!
					\fn QString firstRegion()
					
					
					Returns the first property \ref nco_region "nco:region". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstRegion() { return baseFirstObject< nco::region >(); }
				/*!
					\fn void addRegion(QString const &region_)
					
					
					Adds the given \a region_ to the property \ref nco_region "nco:region" set.
					\sa LiveResource::addObject
				 */
				void addRegion(QString const &region_) { baseAddObject< nco::region >( region_ ); }
				/*!
					\fn void removeRegion(QString const &region_)
					
					
					Removes the given \a region_ from the property \ref nco_region "nco:region" set.
					\sa LiveResource::removeObject
				 */
				void removeRegion(QString const &region_) { baseRemoveObject< nco::region >(region_); }

				/* Property generated from nco:extendedAddress
				 * \n An extended part of an address. This field might be used to express parts of an address that aren't include in the name of the Contact but also aren't part of the actual location. Usually the streed address and following fields are enough for a postal letter to arrive. Examples may include ('University of California Campus building 45', 'Sears Tower 34th floor' etc.) Inspired by the second part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
				 * \n rdfs:label=extendedAddress
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PostalAddress
				 * \n tracker:weight=6
				 * \n tracker:modified=1876
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveExtendedAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_extendedAddress "nco:extendedAddress" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveExtendedAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::extendedAddress >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getExtendedAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_extendedAddress "nco:extendedAddress" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getExtendedAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::extendedAddress >(object_info, strategy, parent); }
				/*!
					\fn void setExtendedAddresss(LiveNodes const &extendedAddress_)
					
					
					Sets the property \ref nco_extendedAddress "nco:extendedAddress" set to the given \a extendedAddress_ set.
					\sa LiveResource::setObjects
				 */
				void setExtendedAddresss(LiveNodes const &extendedAddress_) { baseSetObjects(nco::extendedAddress::iri(), extendedAddress_); }
				/*!
					\fn void removeExtendedAddresss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_extendedAddress "nco:extendedAddress" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeExtendedAddresss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::extendedAddress::iri(), object_info); }
				/*!
					\fn QString getExtendedAddress()
					
					
					Returns the property \ref nco_extendedAddress "nco:extendedAddress". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getExtendedAddress() { return baseGetObject< nco::extendedAddress >(); }
				/*!
					\fn void setExtendedAddress(QString const &extendedAddress_)
					
					
					Sets the property \ref nco_extendedAddress "nco:extendedAddress" to the given \a extendedAddress.
					\sa LiveResource::setObject
				 */
				void setExtendedAddress(QString const &extendedAddress_) { baseSetObject< nco::extendedAddress >( extendedAddress_ ); }
				/*!
					\fn QString firstExtendedAddress()
					
					
					Returns the first property \ref nco_extendedAddress "nco:extendedAddress". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstExtendedAddress() { return baseFirstObject< nco::extendedAddress >(); }
				/*!
					\fn void addExtendedAddress(QString const &extendedAddress_)
					
					
					Adds the given \a extendedAddress_ to the property \ref nco_extendedAddress "nco:extendedAddress" set.
					\sa LiveResource::addObject
				 */
				void addExtendedAddress(QString const &extendedAddress_) { baseAddObject< nco::extendedAddress >( extendedAddress_ ); }
				/*!
					\fn void removeExtendedAddress(QString const &extendedAddress_)
					
					
					Removes the given \a extendedAddress_ from the property \ref nco_extendedAddress "nco:extendedAddress" set.
					\sa LiveResource::removeObject
				 */
				void removeExtendedAddress(QString const &extendedAddress_) { baseRemoveObject< nco::extendedAddress >(extendedAddress_); }

				/* Property generated from nco:pobox
				 * \n Post office box. This is the first part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
				 * \n rdfs:label=pobox
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PostalAddress
				 * \n tracker:weight=5
				 * \n tracker:modified=1360
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePoboxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_pobox "nco:pobox" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePoboxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::pobox >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPoboxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_pobox "nco:pobox" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPoboxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::pobox >(object_info, strategy, parent); }
				/*!
					\fn void setPoboxs(LiveNodes const &pobox_)
					
					
					Sets the property \ref nco_pobox "nco:pobox" set to the given \a pobox_ set.
					\sa LiveResource::setObjects
				 */
				void setPoboxs(LiveNodes const &pobox_) { baseSetObjects(nco::pobox::iri(), pobox_); }
				/*!
					\fn void removePoboxs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_pobox "nco:pobox" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePoboxs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::pobox::iri(), object_info); }
				/*!
					\fn QString getPobox()
					
					
					Returns the property \ref nco_pobox "nco:pobox". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getPobox() { return baseGetObject< nco::pobox >(); }
				/*!
					\fn void setPobox(QString const &pobox_)
					
					
					Sets the property \ref nco_pobox "nco:pobox" to the given \a pobox.
					\sa LiveResource::setObject
				 */
				void setPobox(QString const &pobox_) { baseSetObject< nco::pobox >( pobox_ ); }
				/*!
					\fn QString firstPobox()
					
					
					Returns the first property \ref nco_pobox "nco:pobox". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstPobox() { return baseFirstObject< nco::pobox >(); }
				/*!
					\fn void addPobox(QString const &pobox_)
					
					
					Adds the given \a pobox_ to the property \ref nco_pobox "nco:pobox" set.
					\sa LiveResource::addObject
				 */
				void addPobox(QString const &pobox_) { baseAddObject< nco::pobox >( pobox_ ); }
				/*!
					\fn void removePobox(QString const &pobox_)
					
					
					Removes the given \a pobox_ from the property \ref nco_pobox "nco:pobox" set.
					\sa LiveResource::removeObject
				 */
				void removePobox(QString const &pobox_) { baseRemoveObject< nco::pobox >(pobox_); }

				/* Property generated from nco:addressLocation
				 * \n The geographical location of a postal address.
				 * \n rdfs:label=addressLocation
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=nco:PostalAddress
				 * \n tracker:weight=3
				 * \n tracker:modified=1355
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveAddressLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_addressLocation "nco:addressLocation" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAddressLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::addressLocation >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAddressLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_addressLocation "nco:addressLocation" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAddressLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::addressLocation >(object_info, strategy, parent); }
				/*!
					\fn void setAddressLocations(LiveNodes const &addressLocation_)
					
					
					Sets the property \ref nco_addressLocation "nco:addressLocation" set to the given \a addressLocation_ set.
					\sa LiveResource::setObjects
				 */
				void setAddressLocations(LiveNodes const &addressLocation_) { baseSetObjects(nco::addressLocation::iri(), addressLocation_); }
				/*!
					\fn void removeAddressLocations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_addressLocation "nco:addressLocation" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAddressLocations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::addressLocation::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getAddressLocation()
					
					
					Returns the property \ref nco_addressLocation "nco:addressLocation". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getAddressLocation() { return baseGetObject< nco::addressLocation >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setAddressLocation(::SopranoLive::Live< rdfs::Resource > const &addressLocation_)
					
					
					Sets the property \ref nco_addressLocation "nco:addressLocation" to the given \a addressLocation.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setAddressLocation(::SopranoLive::Live< rdfs::Resource > const &addressLocation_) { return baseSetObject< nco::addressLocation >( addressLocation_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstAddressLocation()
					
					
					Returns the first property \ref nco_addressLocation "nco:addressLocation". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstAddressLocation() { return baseFirstObject< nco::addressLocation >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addAddressLocation()
					
					
					Adds a new uniquely named resource to the property \ref nco_addressLocation "nco:addressLocation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addAddressLocation() { return baseAddObject< nco::addressLocation >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addAddressLocation(::SopranoLive::Live< rdfs::Resource > const &addressLocation_)
					
					
					Adds the given \a addressLocation_ to the property \ref nco_addressLocation "nco:addressLocation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addAddressLocation(::SopranoLive::Live< rdfs::Resource > const &addressLocation_) { return baseAddObject< nco::addressLocation >( addressLocation_ ); }
				/*!
					\fn void removeAddressLocation(::SopranoLive::Live< rdfs::Resource > const &addressLocation_)
					
					
					Removes the given \a addressLocation_ from the property \ref nco_addressLocation "nco:addressLocation" set.
					\sa LiveResource::removeObject
				 */
				void removeAddressLocation(::SopranoLive::Live< rdfs::Resource > const &addressLocation_) { baseRemoveObject< nco::addressLocation >(addressLocation_); }

				/* Property generated from nco:postalcode
				 * \n Postal Code. Inspired by the sixth part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
				 * \n rdfs:label=postalcode
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PostalAddress
				 * \n tracker:weight=6
				 * \n tracker:modified=1584
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePostalcodes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_postalcode "nco:postalcode" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePostalcodes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::postalcode >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPostalcodes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_postalcode "nco:postalcode" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPostalcodes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::postalcode >(object_info, strategy, parent); }
				/*!
					\fn void setPostalcodes(LiveNodes const &postalcode_)
					
					
					Sets the property \ref nco_postalcode "nco:postalcode" set to the given \a postalcode_ set.
					\sa LiveResource::setObjects
				 */
				void setPostalcodes(LiveNodes const &postalcode_) { baseSetObjects(nco::postalcode::iri(), postalcode_); }
				/*!
					\fn void removePostalcodes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_postalcode "nco:postalcode" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePostalcodes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::postalcode::iri(), object_info); }
				/*!
					\fn QString getPostalcode()
					
					
					Returns the property \ref nco_postalcode "nco:postalcode". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getPostalcode() { return baseGetObject< nco::postalcode >(); }
				/*!
					\fn void setPostalcode(QString const &postalcode_)
					
					
					Sets the property \ref nco_postalcode "nco:postalcode" to the given \a postalcode.
					\sa LiveResource::setObject
				 */
				void setPostalcode(QString const &postalcode_) { baseSetObject< nco::postalcode >( postalcode_ ); }
				/*!
					\fn QString firstPostalcode()
					
					
					Returns the first property \ref nco_postalcode "nco:postalcode". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstPostalcode() { return baseFirstObject< nco::postalcode >(); }
				/*!
					\fn void addPostalcode(QString const &postalcode_)
					
					
					Adds the given \a postalcode_ to the property \ref nco_postalcode "nco:postalcode" set.
					\sa LiveResource::addObject
				 */
				void addPostalcode(QString const &postalcode_) { baseAddObject< nco::postalcode >( postalcode_ ); }
				/*!
					\fn void removePostalcode(QString const &postalcode_)
					
					
					Removes the given \a postalcode_ from the property \ref nco_postalcode "nco:postalcode" set.
					\sa LiveResource::removeObject
				 */
				void removePostalcode(QString const &postalcode_) { baseRemoveObject< nco::postalcode >(postalcode_); }

				/* Property generated from nco:locality
				 * \n Locality or City. Inspired by the fourth part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
				 * \n rdfs:label=locality
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PostalAddress
				 * \n tracker:weight=4
				 * \n tracker:modified=1538
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLocalitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_locality "nco:locality" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLocalitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::locality >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLocalitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_locality "nco:locality" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLocalitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::locality >(object_info, strategy, parent); }
				/*!
					\fn void setLocalitys(LiveNodes const &locality_)
					
					
					Sets the property \ref nco_locality "nco:locality" set to the given \a locality_ set.
					\sa LiveResource::setObjects
				 */
				void setLocalitys(LiveNodes const &locality_) { baseSetObjects(nco::locality::iri(), locality_); }
				/*!
					\fn void removeLocalitys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_locality "nco:locality" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLocalitys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::locality::iri(), object_info); }
				/*!
					\fn QString getLocality()
					
					
					Returns the property \ref nco_locality "nco:locality". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getLocality() { return baseGetObject< nco::locality >(); }
				/*!
					\fn void setLocality(QString const &locality_)
					
					
					Sets the property \ref nco_locality "nco:locality" to the given \a locality.
					\sa LiveResource::setObject
				 */
				void setLocality(QString const &locality_) { baseSetObject< nco::locality >( locality_ ); }
				/*!
					\fn QString firstLocality()
					
					
					Returns the first property \ref nco_locality "nco:locality". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstLocality() { return baseFirstObject< nco::locality >(); }
				/*!
					\fn void addLocality(QString const &locality_)
					
					
					Adds the given \a locality_ to the property \ref nco_locality "nco:locality" set.
					\sa LiveResource::addObject
				 */
				void addLocality(QString const &locality_) { baseAddObject< nco::locality >( locality_ ); }
				/*!
					\fn void removeLocality(QString const &locality_)
					
					
					Removes the given \a locality_ from the property \ref nco_locality "nco:locality" set.
					\sa LiveResource::removeObject
				 */
				void removeLocality(QString const &locality_) { baseRemoveObject< nco::locality >(locality_); }

				/* Property generated from nco:country
				 * \n A part of an address specifying the country. Inspired by the seventh part of the value of the 'ADR' property as defined in RFC 2426, sec. 3.2.1
				 * \n rdfs:label=country
				 * \n tracker:fulltextNoLimit=true
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PostalAddress
				 * \n tracker:weight=3
				 * \n tracker:modified=1151
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCountrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_country "nco:country" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCountrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::country >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCountrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_country "nco:country" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCountrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::country >(object_info, strategy, parent); }
				/*!
					\fn void setCountrys(LiveNodes const &country_)
					
					
					Sets the property \ref nco_country "nco:country" set to the given \a country_ set.
					\sa LiveResource::setObjects
				 */
				void setCountrys(LiveNodes const &country_) { baseSetObjects(nco::country::iri(), country_); }
				/*!
					\fn void removeCountrys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_country "nco:country" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCountrys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::country::iri(), object_info); }
				/*!
					\fn QString getCountry()
					
					
					Returns the property \ref nco_country "nco:country". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getCountry() { return baseGetObject< nco::country >(); }
				/*!
					\fn void setCountry(QString const &country_)
					
					
					Sets the property \ref nco_country "nco:country" to the given \a country.
					\sa LiveResource::setObject
				 */
				void setCountry(QString const &country_) { baseSetObject< nco::country >( country_ ); }
				/*!
					\fn QString firstCountry()
					
					
					Returns the first property \ref nco_country "nco:country". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstCountry() { return baseFirstObject< nco::country >(); }
				/*!
					\fn void addCountry(QString const &country_)
					
					
					Adds the given \a country_ to the property \ref nco_country "nco:country" set.
					\sa LiveResource::addObject
				 */
				void addCountry(QString const &country_) { baseAddObject< nco::country >( country_ ); }
				/*!
					\fn void removeCountry(QString const &country_)
					
					
					Removes the given \a country_ from the property \ref nco_country "nco:country" set.
					\sa LiveResource::removeObject
				 */
				void removeCountry(QString const &country_) { baseRemoveObject< nco::country >(country_); }
				 //@}
			};

			/*! Class generated from nco:DomesticDeliveryAddress
			 * \ingroup onto_nco_classes
			 * Domestic Delivery Addresse. Class inspired by TYPE=dom parameter of the ADR property defined in RFC 2426 sec. 3.2.1
			 * 
			 * rdfs:label = DomesticDeliveryAddress
			 * 
			 * tracker:modified = 1597
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class DomesticDeliveryAddress
				: public virtual PostalAddress

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#DomesticDeliveryAddress"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PostalAddress, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<DomesticDeliveryAddress> Live;
				DomesticDeliveryAddress() { this->attachInterfaceHelper< DomesticDeliveryAddress >(); }
				~DomesticDeliveryAddress() { this->detachInterfaceHelper< DomesticDeliveryAddress >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:EmailAddress
			 * \ingroup onto_nco_classes
			 * An email address. The recommended best practice is to use mailto: uris for instances of this class.
			 * 
			 * rdfs:label = EmailAddress
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1561
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_hasEmailAddress "nco:hasEmailAddress"
			 */
			class EmailAddress
				: public virtual ContactMedium

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#EmailAddress"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<ContactMedium, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<EmailAddress> Live;
				EmailAddress() { this->attachInterfaceHelper< EmailAddress >(); }
				~EmailAddress() { this->detachInterfaceHelper< EmailAddress >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:emailAddress
				 * \n rdfs:label=emailAddress
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:EmailAddress
				 * \n tracker:weight=4
				 * \n tracker:modified=1892
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEmailAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_emailAddress "nco:emailAddress" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEmailAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::emailAddress >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEmailAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_emailAddress "nco:emailAddress" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEmailAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::emailAddress >(object_info, strategy, parent); }
				/*!
					\fn void setEmailAddresss(LiveNodes const &emailAddress_)
					
					
					Sets the property \ref nco_emailAddress "nco:emailAddress" set to the given \a emailAddress_ set.
					\sa LiveResource::setObjects
				 */
				void setEmailAddresss(LiveNodes const &emailAddress_) { baseSetObjects(nco::emailAddress::iri(), emailAddress_); }
				/*!
					\fn void removeEmailAddresss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_emailAddress "nco:emailAddress" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEmailAddresss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::emailAddress::iri(), object_info); }
				/*!
					\fn QString getEmailAddress()
					
					
					Returns the property \ref nco_emailAddress "nco:emailAddress". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getEmailAddress() { return baseGetObject< nco::emailAddress >(); }
				/*!
					\fn void setEmailAddress(QString const &emailAddress_)
					
					
					Sets the property \ref nco_emailAddress "nco:emailAddress" to the given \a emailAddress.
					\sa LiveResource::setObject
				 */
				void setEmailAddress(QString const &emailAddress_) { baseSetObject< nco::emailAddress >( emailAddress_ ); }
				/*!
					\fn QString firstEmailAddress()
					
					
					Returns the first property \ref nco_emailAddress "nco:emailAddress". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstEmailAddress() { return baseFirstObject< nco::emailAddress >(); }
				/*!
					\fn void addEmailAddress(QString const &emailAddress_)
					
					
					Adds the given \a emailAddress_ to the property \ref nco_emailAddress "nco:emailAddress" set.
					\sa LiveResource::addObject
				 */
				void addEmailAddress(QString const &emailAddress_) { baseAddObject< nco::emailAddress >( emailAddress_ ); }
				/*!
					\fn void removeEmailAddress(QString const &emailAddress_)
					
					
					Removes the given \a emailAddress_ from the property \ref nco_emailAddress "nco:emailAddress" set.
					\sa LiveResource::removeObject
				 */
				void removeEmailAddress(QString const &emailAddress_) { baseRemoveObject< nco::emailAddress >(emailAddress_); }
				 //@}
			};

			/*! Class generated from nco:FaxNumber
			 * \ingroup onto_nco_classes
			 * A fax number. Inspired by the (TYPE=fax) parameter of the TEL property as defined in RFC 2426 sec  3.3.1.
			 * 
			 * rdfs:label = FaxNumber
			 * 
			 * tracker:modified = 1325
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class FaxNumber
				: public virtual PhoneNumber

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#FaxNumber"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PhoneNumber, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<FaxNumber> Live;
				FaxNumber() { this->attachInterfaceHelper< FaxNumber >(); }
				~FaxNumber() { this->detachInterfaceHelper< FaxNumber >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:Gender
			 * \ingroup onto_nco_classes
			 * Gender. Instances of this class may include male and female.
			 * 
			 * rdfs:label = Gender
			 * 
			 * tracker:modified = 1830
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nco_gender_male "nco:gender-male"
			 * 		\ref nco_gender_female "nco:gender-female"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_gender "nco:gender"
			 */
			class Gender
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Gender"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Gender> Live;
				Gender() { this->attachInterfaceHelper< Gender >(); }
				~Gender() { this->detachInterfaceHelper< Gender >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:IMAddress
			 * \ingroup onto_nco_classes
			 * An instant messaging address such as xmpp:foo@bar.com.
			 * 
			 * rdfs:label = IM Address
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1755
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_hasIMAddress "nco:hasIMAddress"
			 * 		\ref nco_imAccountAddress "nco:imAccountAddress"
			 * 		\ref nco_hasIMContact "nco:hasIMContact"
			 */
			class IMAddress
				: public virtual ContactMedium

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IMAddress"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<ContactMedium, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<IMAddress> Live;
				IMAddress() { this->attachInterfaceHelper< IMAddress >(); }
				~IMAddress() { this->detachInterfaceHelper< IMAddress >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:imNickname
				 * \n A nickname attached to a particular IM address.
				 * \n rdfs:label=imNickname
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:IMAddress
				 * \n tracker:weight=5
				 * \n tracker:modified=1387
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImNicknames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imNickname "nco:imNickname" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImNicknames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imNickname >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImNicknames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imNickname "nco:imNickname" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImNicknames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imNickname >(object_info, strategy, parent); }
				/*!
					\fn void setImNicknames(LiveNodes const &imNickname_)
					
					
					Sets the property \ref nco_imNickname "nco:imNickname" set to the given \a imNickname_ set.
					\sa LiveResource::setObjects
				 */
				void setImNicknames(LiveNodes const &imNickname_) { baseSetObjects(nco::imNickname::iri(), imNickname_); }
				/*!
					\fn void removeImNicknames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imNickname "nco:imNickname" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImNicknames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imNickname::iri(), object_info); }
				/*!
					\fn QString getImNickname()
					
					
					Returns the property \ref nco_imNickname "nco:imNickname". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getImNickname() { return baseGetObject< nco::imNickname >(); }
				/*!
					\fn void setImNickname(QString const &imNickname_)
					
					
					Sets the property \ref nco_imNickname "nco:imNickname" to the given \a imNickname.
					\sa LiveResource::setObject
				 */
				void setImNickname(QString const &imNickname_) { baseSetObject< nco::imNickname >( imNickname_ ); }
				/*!
					\fn QString firstImNickname()
					
					
					Returns the first property \ref nco_imNickname "nco:imNickname". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstImNickname() { return baseFirstObject< nco::imNickname >(); }
				/*!
					\fn void addImNickname(QString const &imNickname_)
					
					
					Adds the given \a imNickname_ to the property \ref nco_imNickname "nco:imNickname" set.
					\sa LiveResource::addObject
				 */
				void addImNickname(QString const &imNickname_) { baseAddObject< nco::imNickname >( imNickname_ ); }
				/*!
					\fn void removeImNickname(QString const &imNickname_)
					
					
					Removes the given \a imNickname_ from the property \ref nco_imNickname "nco:imNickname" set.
					\sa LiveResource::removeObject
				 */
				void removeImNickname(QString const &imNickname_) { baseRemoveObject< nco::imNickname >(imNickname_); }

				/* Property generated from nco:imStatusMessage
				 * \n A feature common in most IM systems. A message left by the user for all his/her contacts to see.
				 * \n rdfs:label=imStatusMessage
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:IMAddress
				 * \n tracker:modified=1451
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImStatusMessages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imStatusMessage "nco:imStatusMessage" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImStatusMessages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imStatusMessage >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImStatusMessages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imStatusMessage "nco:imStatusMessage" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImStatusMessages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imStatusMessage >(object_info, strategy, parent); }
				/*!
					\fn void setImStatusMessages(LiveNodes const &imStatusMessage_)
					
					
					Sets the property \ref nco_imStatusMessage "nco:imStatusMessage" set to the given \a imStatusMessage_ set.
					\sa LiveResource::setObjects
				 */
				void setImStatusMessages(LiveNodes const &imStatusMessage_) { baseSetObjects(nco::imStatusMessage::iri(), imStatusMessage_); }
				/*!
					\fn void removeImStatusMessages(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imStatusMessage "nco:imStatusMessage" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImStatusMessages(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imStatusMessage::iri(), object_info); }
				/*!
					\fn QString getImStatusMessage()
					
					
					Returns the property \ref nco_imStatusMessage "nco:imStatusMessage". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getImStatusMessage() { return baseGetObject< nco::imStatusMessage >(); }
				/*!
					\fn void setImStatusMessage(QString const &imStatusMessage_)
					
					
					Sets the property \ref nco_imStatusMessage "nco:imStatusMessage" to the given \a imStatusMessage.
					\sa LiveResource::setObject
				 */
				void setImStatusMessage(QString const &imStatusMessage_) { baseSetObject< nco::imStatusMessage >( imStatusMessage_ ); }
				/*!
					\fn QString firstImStatusMessage()
					
					
					Returns the first property \ref nco_imStatusMessage "nco:imStatusMessage". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstImStatusMessage() { return baseFirstObject< nco::imStatusMessage >(); }
				/*!
					\fn void addImStatusMessage(QString const &imStatusMessage_)
					
					
					Adds the given \a imStatusMessage_ to the property \ref nco_imStatusMessage "nco:imStatusMessage" set.
					\sa LiveResource::addObject
				 */
				void addImStatusMessage(QString const &imStatusMessage_) { baseAddObject< nco::imStatusMessage >( imStatusMessage_ ); }
				/*!
					\fn void removeImStatusMessage(QString const &imStatusMessage_)
					
					
					Removes the given \a imStatusMessage_ from the property \ref nco_imStatusMessage "nco:imStatusMessage" set.
					\sa LiveResource::removeObject
				 */
				void removeImStatusMessage(QString const &imStatusMessage_) { baseRemoveObject< nco::imStatusMessage >(imStatusMessage_); }

				/* Property generated from nco:imAddressAuthStatusTo
				 * \n Do i authorize this im Account to receive my information
				 * \n rdfs:label=IM Address authorization status in the local end
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:AuthorizationStatus
				 * \n rdfs:domain=nco:IMAddress
				 * \n tracker:modified=1211
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImAddressAuthStatusTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imAddressAuthStatusTo "nco:imAddressAuthStatusTo" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImAddressAuthStatusTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imAddressAuthStatusTo >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImAddressAuthStatusTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imAddressAuthStatusTo "nco:imAddressAuthStatusTo" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImAddressAuthStatusTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imAddressAuthStatusTo >(object_info, strategy, parent); }
				/*!
					\fn void setImAddressAuthStatusTos(LiveNodes const &imAddressAuthStatusTo_)
					
					
					Sets the property \ref nco_imAddressAuthStatusTo "nco:imAddressAuthStatusTo" set to the given \a imAddressAuthStatusTo_ set.
					\sa LiveResource::setObjects
				 */
				void setImAddressAuthStatusTos(LiveNodes const &imAddressAuthStatusTo_) { baseSetObjects(nco::imAddressAuthStatusTo::iri(), imAddressAuthStatusTo_); }
				/*!
					\fn void removeImAddressAuthStatusTos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imAddressAuthStatusTo "nco:imAddressAuthStatusTo" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImAddressAuthStatusTos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imAddressAuthStatusTo::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< AuthorizationStatus > getImAddressAuthStatusTo()
					
					
					Returns the property \ref nco_imAddressAuthStatusTo "nco:imAddressAuthStatusTo". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< AuthorizationStatus > getImAddressAuthStatusTo() { return baseGetObject< nco::imAddressAuthStatusTo >(); }
				/*!
					\fn ::SopranoLive::Live< AuthorizationStatus > setImAddressAuthStatusTo(::SopranoLive::Live< AuthorizationStatus > const &imAddressAuthStatusTo_)
					
					
					Sets the property \ref nco_imAddressAuthStatusTo "nco:imAddressAuthStatusTo" to the given \a imAddressAuthStatusTo.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< AuthorizationStatus > setImAddressAuthStatusTo(::SopranoLive::Live< AuthorizationStatus > const &imAddressAuthStatusTo_) { return baseSetObject< nco::imAddressAuthStatusTo >( imAddressAuthStatusTo_ ); }
				/*!
					\fn ::SopranoLive::Live< AuthorizationStatus > firstImAddressAuthStatusTo()
					
					
					Returns the first property \ref nco_imAddressAuthStatusTo "nco:imAddressAuthStatusTo". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< AuthorizationStatus > firstImAddressAuthStatusTo() { return baseFirstObject< nco::imAddressAuthStatusTo >(); }
				/*!
					\fn ::SopranoLive::Live< AuthorizationStatus > addImAddressAuthStatusTo()
					
					
					Adds a new uniquely named resource to the property \ref nco_imAddressAuthStatusTo "nco:imAddressAuthStatusTo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AuthorizationStatus > addImAddressAuthStatusTo() { return baseAddObject< nco::imAddressAuthStatusTo >(); }
				/*!
					\fn ::SopranoLive::Live< AuthorizationStatus > addImAddressAuthStatusTo(::SopranoLive::Live< AuthorizationStatus > const &imAddressAuthStatusTo_)
					
					
					Adds the given \a imAddressAuthStatusTo_ to the property \ref nco_imAddressAuthStatusTo "nco:imAddressAuthStatusTo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AuthorizationStatus > addImAddressAuthStatusTo(::SopranoLive::Live< AuthorizationStatus > const &imAddressAuthStatusTo_) { return baseAddObject< nco::imAddressAuthStatusTo >( imAddressAuthStatusTo_ ); }
				/*!
					\fn void removeImAddressAuthStatusTo(::SopranoLive::Live< AuthorizationStatus > const &imAddressAuthStatusTo_)
					
					
					Removes the given \a imAddressAuthStatusTo_ from the property \ref nco_imAddressAuthStatusTo "nco:imAddressAuthStatusTo" set.
					\sa LiveResource::removeObject
				 */
				void removeImAddressAuthStatusTo(::SopranoLive::Live< AuthorizationStatus > const &imAddressAuthStatusTo_) { baseRemoveObject< nco::imAddressAuthStatusTo >(imAddressAuthStatusTo_); }

				/* Property generated from nco:imID
				 * \n Identifier of the IM account. Examples of such identifier might include ICQ UINs, Jabber IDs, Skype names etc.
				 * \n rdfs:label=imID
				 * \n rdfs:subPropertyOf=nao:identifier
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:IMAddress
				 * \n tracker:weight=5
				 * \n tracker:modified=1425
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImIDs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imID "nco:imID" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImIDs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imID >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImIDs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imID "nco:imID" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImIDs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imID >(object_info, strategy, parent); }
				/*!
					\fn void setImIDs(LiveNodes const &imID_)
					
					
					Sets the property \ref nco_imID "nco:imID" set to the given \a imID_ set.
					\sa LiveResource::setObjects
				 */
				void setImIDs(LiveNodes const &imID_) { baseSetObjects(nco::imID::iri(), imID_); }
				/*!
					\fn void removeImIDs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imID "nco:imID" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImIDs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imID::iri(), object_info); }
				/*!
					\fn QString getImID()
					
					
					Returns the property \ref nco_imID "nco:imID". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getImID() { return baseGetObject< nco::imID >(); }
				/*!
					\fn void setImID(QString const &imID_)
					
					
					Sets the property \ref nco_imID "nco:imID" to the given \a imID.
					\sa LiveResource::setObject
				 */
				void setImID(QString const &imID_) { baseSetObject< nco::imID >( imID_ ); }
				/*!
					\fn QString firstImID()
					
					
					Returns the first property \ref nco_imID "nco:imID". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstImID() { return baseFirstObject< nco::imID >(); }
				/*!
					\fn void addImID(QString const &imID_)
					
					
					Adds the given \a imID_ to the property \ref nco_imID "nco:imID" set.
					\sa LiveResource::addObject
				 */
				void addImID(QString const &imID_) { baseAddObject< nco::imID >( imID_ ); }
				/*!
					\fn void removeImID(QString const &imID_)
					
					
					Removes the given \a imID_ from the property \ref nco_imID "nco:imID" set.
					\sa LiveResource::removeObject
				 */
				void removeImID(QString const &imID_) { baseRemoveObject< nco::imID >(imID_); }

				/* Property generated from nco:presenceLastModified
				 * \n Timestamp of the last change in the presence status
				 * \n rdfs:label=Presence last modified
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=nco:IMAddress
				 * \n tracker:modified=1718
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePresenceLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_presenceLastModified "nco:presenceLastModified" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePresenceLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::presenceLastModified >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPresenceLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_presenceLastModified "nco:presenceLastModified" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPresenceLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::presenceLastModified >(object_info, strategy, parent); }
				/*!
					\fn void setPresenceLastModifieds(LiveNodes const &presenceLastModified_)
					
					
					Sets the property \ref nco_presenceLastModified "nco:presenceLastModified" set to the given \a presenceLastModified_ set.
					\sa LiveResource::setObjects
				 */
				void setPresenceLastModifieds(LiveNodes const &presenceLastModified_) { baseSetObjects(nco::presenceLastModified::iri(), presenceLastModified_); }
				/*!
					\fn void removePresenceLastModifieds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_presenceLastModified "nco:presenceLastModified" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePresenceLastModifieds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::presenceLastModified::iri(), object_info); }
				/*!
					\fn QDateTime getPresenceLastModified()
					
					
					Returns the property \ref nco_presenceLastModified "nco:presenceLastModified". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getPresenceLastModified() { return baseGetObject< nco::presenceLastModified >(); }
				/*!
					\fn void setPresenceLastModified(QDateTime const &presenceLastModified_)
					
					
					Sets the property \ref nco_presenceLastModified "nco:presenceLastModified" to the given \a presenceLastModified.
					\sa LiveResource::setObject
				 */
				void setPresenceLastModified(QDateTime const &presenceLastModified_) { baseSetObject< nco::presenceLastModified >( presenceLastModified_ ); }
				/*!
					\fn QDateTime firstPresenceLastModified()
					
					
					Returns the first property \ref nco_presenceLastModified "nco:presenceLastModified". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstPresenceLastModified() { return baseFirstObject< nco::presenceLastModified >(); }
				/*!
					\fn void addPresenceLastModified(QDateTime const &presenceLastModified_)
					
					
					Adds the given \a presenceLastModified_ to the property \ref nco_presenceLastModified "nco:presenceLastModified" set.
					\sa LiveResource::addObject
				 */
				void addPresenceLastModified(QDateTime const &presenceLastModified_) { baseAddObject< nco::presenceLastModified >( presenceLastModified_ ); }
				/*!
					\fn void removePresenceLastModified(QDateTime const &presenceLastModified_)
					
					
					Removes the given \a presenceLastModified_ from the property \ref nco_presenceLastModified "nco:presenceLastModified" set.
					\sa LiveResource::removeObject
				 */
				void removePresenceLastModified(QDateTime const &presenceLastModified_) { baseRemoveObject< nco::presenceLastModified >(presenceLastModified_); }

				/* Property generated from nco:imProtocol
				 * \n Protocol of the account ('skype', 'gtalk', 'icq', ...)
				 * \n rdfs:label=imProtocol
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:IMAddress
				 * \n tracker:modified=1893
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImProtocols(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imProtocol "nco:imProtocol" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImProtocols(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imProtocol >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImProtocols(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imProtocol "nco:imProtocol" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImProtocols(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imProtocol >(object_info, strategy, parent); }
				/*!
					\fn void setImProtocols(LiveNodes const &imProtocol_)
					
					
					Sets the property \ref nco_imProtocol "nco:imProtocol" set to the given \a imProtocol_ set.
					\sa LiveResource::setObjects
				 */
				void setImProtocols(LiveNodes const &imProtocol_) { baseSetObjects(nco::imProtocol::iri(), imProtocol_); }
				/*!
					\fn void removeImProtocols(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imProtocol "nco:imProtocol" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImProtocols(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imProtocol::iri(), object_info); }
				/*!
					\fn QString getImProtocol()
					
					
					Returns the property \ref nco_imProtocol "nco:imProtocol". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getImProtocol() { return baseGetObject< nco::imProtocol >(); }
				/*!
					\fn void setImProtocol(QString const &imProtocol_)
					
					
					Sets the property \ref nco_imProtocol "nco:imProtocol" to the given \a imProtocol.
					\sa LiveResource::setObject
				 */
				void setImProtocol(QString const &imProtocol_) { baseSetObject< nco::imProtocol >( imProtocol_ ); }
				/*!
					\fn QString firstImProtocol()
					
					
					Returns the first property \ref nco_imProtocol "nco:imProtocol". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstImProtocol() { return baseFirstObject< nco::imProtocol >(); }
				/*!
					\fn void addImProtocol(QString const &imProtocol_)
					
					
					Adds the given \a imProtocol_ to the property \ref nco_imProtocol "nco:imProtocol" set.
					\sa LiveResource::addObject
				 */
				void addImProtocol(QString const &imProtocol_) { baseAddObject< nco::imProtocol >( imProtocol_ ); }
				/*!
					\fn void removeImProtocol(QString const &imProtocol_)
					
					
					Removes the given \a imProtocol_ from the property \ref nco_imProtocol "nco:imProtocol" set.
					\sa LiveResource::removeObject
				 */
				void removeImProtocol(QString const &imProtocol_) { baseRemoveObject< nco::imProtocol >(imProtocol_); }

				/* Property generated from nco:imPresence
				 * \n rdfs:label=imPresence
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:PresenceStatus
				 * \n rdfs:domain=nco:IMAddress
				 * \n tracker:modified=1731
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImPresences(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imPresence "nco:imPresence" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImPresences(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imPresence >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImPresences(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imPresence "nco:imPresence" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImPresences(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imPresence >(object_info, strategy, parent); }
				/*!
					\fn void setImPresences(LiveNodes const &imPresence_)
					
					
					Sets the property \ref nco_imPresence "nco:imPresence" set to the given \a imPresence_ set.
					\sa LiveResource::setObjects
				 */
				void setImPresences(LiveNodes const &imPresence_) { baseSetObjects(nco::imPresence::iri(), imPresence_); }
				/*!
					\fn void removeImPresences(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imPresence "nco:imPresence" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImPresences(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imPresence::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< PresenceStatus > getImPresence()
					
					
					Returns the property \ref nco_imPresence "nco:imPresence". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< PresenceStatus > getImPresence() { return baseGetObject< nco::imPresence >(); }
				/*!
					\fn ::SopranoLive::Live< PresenceStatus > setImPresence(::SopranoLive::Live< PresenceStatus > const &imPresence_)
					
					
					Sets the property \ref nco_imPresence "nco:imPresence" to the given \a imPresence.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< PresenceStatus > setImPresence(::SopranoLive::Live< PresenceStatus > const &imPresence_) { return baseSetObject< nco::imPresence >( imPresence_ ); }
				/*!
					\fn ::SopranoLive::Live< PresenceStatus > firstImPresence()
					
					
					Returns the first property \ref nco_imPresence "nco:imPresence". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< PresenceStatus > firstImPresence() { return baseFirstObject< nco::imPresence >(); }
				/*!
					\fn ::SopranoLive::Live< PresenceStatus > addImPresence()
					
					
					Adds a new uniquely named resource to the property \ref nco_imPresence "nco:imPresence" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< PresenceStatus > addImPresence() { return baseAddObject< nco::imPresence >(); }
				/*!
					\fn ::SopranoLive::Live< PresenceStatus > addImPresence(::SopranoLive::Live< PresenceStatus > const &imPresence_)
					
					
					Adds the given \a imPresence_ to the property \ref nco_imPresence "nco:imPresence" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< PresenceStatus > addImPresence(::SopranoLive::Live< PresenceStatus > const &imPresence_) { return baseAddObject< nco::imPresence >( imPresence_ ); }
				/*!
					\fn void removeImPresence(::SopranoLive::Live< PresenceStatus > const &imPresence_)
					
					
					Removes the given \a imPresence_ from the property \ref nco_imPresence "nco:imPresence" set.
					\sa LiveResource::removeObject
				 */
				void removeImPresence(::SopranoLive::Live< PresenceStatus > const &imPresence_) { baseRemoveObject< nco::imPresence >(imPresence_); }

				/* Property generated from nco:imCapability
				 * \n Capabilities of an IM Contact, what can we interact with him
				 * \n rdfs:range=nco:IMCapability
				 * \n rdfs:label=imContact Capability
				 * \n tracker:modified=1814
				 * \n rdfs:domain=nco:IMAddress
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImCapabilitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imCapability "nco:imCapability" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImCapabilitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imCapability >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImCapabilitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imCapability "nco:imCapability" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImCapabilitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imCapability >(object_info, strategy, parent); }
				/*!
					\fn void setImCapabilitys(LiveNodes const &imCapability_)
					
					
					Sets the property \ref nco_imCapability "nco:imCapability" set to the given \a imCapability_ set.
					\sa LiveResource::setObjects
				 */
				void setImCapabilitys(LiveNodes const &imCapability_) { baseSetObjects(nco::imCapability::iri(), imCapability_); }
				/*!
					\fn void removeImCapabilitys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imCapability "nco:imCapability" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImCapabilitys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imCapability::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< IMCapability > firstImCapability()
					
					
					Returns the first property \ref nco_imCapability "nco:imCapability". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< IMCapability > firstImCapability() { return baseFirstObject< nco::imCapability >(); }
				/*!
					\fn ::SopranoLive::Live< IMCapability > addImCapability()
					
					
					Adds a new uniquely named resource to the property \ref nco_imCapability "nco:imCapability" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< IMCapability > addImCapability() { return baseAddObject< nco::imCapability >(); }
				/*!
					\fn ::SopranoLive::Live< IMCapability > addImCapability(::SopranoLive::Live< IMCapability > const &imCapability_)
					
					
					Adds the given \a imCapability_ to the property \ref nco_imCapability "nco:imCapability" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< IMCapability > addImCapability(::SopranoLive::Live< IMCapability > const &imCapability_) { return baseAddObject< nco::imCapability >( imCapability_ ); }
				/*!
					\fn void removeImCapability(::SopranoLive::Live< IMCapability > const &imCapability_)
					
					
					Removes the given \a imCapability_ from the property \ref nco_imCapability "nco:imCapability" set.
					\sa LiveResource::removeObject
				 */
				void removeImCapability(::SopranoLive::Live< IMCapability > const &imCapability_) { baseRemoveObject< nco::imCapability >(imCapability_); }

				/* Property generated from nco:imAddressAuthStatusFrom
				 * \n Has the other end authorize to receive information about his changes
				 * \n rdfs:label=IM Address authorization status in the remote end
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:AuthorizationStatus
				 * \n rdfs:domain=nco:IMAddress
				 * \n tracker:modified=1694
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImAddressAuthStatusFroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imAddressAuthStatusFrom "nco:imAddressAuthStatusFrom" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImAddressAuthStatusFroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imAddressAuthStatusFrom >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImAddressAuthStatusFroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imAddressAuthStatusFrom "nco:imAddressAuthStatusFrom" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImAddressAuthStatusFroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imAddressAuthStatusFrom >(object_info, strategy, parent); }
				/*!
					\fn void setImAddressAuthStatusFroms(LiveNodes const &imAddressAuthStatusFrom_)
					
					
					Sets the property \ref nco_imAddressAuthStatusFrom "nco:imAddressAuthStatusFrom" set to the given \a imAddressAuthStatusFrom_ set.
					\sa LiveResource::setObjects
				 */
				void setImAddressAuthStatusFroms(LiveNodes const &imAddressAuthStatusFrom_) { baseSetObjects(nco::imAddressAuthStatusFrom::iri(), imAddressAuthStatusFrom_); }
				/*!
					\fn void removeImAddressAuthStatusFroms(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imAddressAuthStatusFrom "nco:imAddressAuthStatusFrom" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImAddressAuthStatusFroms(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imAddressAuthStatusFrom::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< AuthorizationStatus > getImAddressAuthStatusFrom()
					
					
					Returns the property \ref nco_imAddressAuthStatusFrom "nco:imAddressAuthStatusFrom". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< AuthorizationStatus > getImAddressAuthStatusFrom() { return baseGetObject< nco::imAddressAuthStatusFrom >(); }
				/*!
					\fn ::SopranoLive::Live< AuthorizationStatus > setImAddressAuthStatusFrom(::SopranoLive::Live< AuthorizationStatus > const &imAddressAuthStatusFrom_)
					
					
					Sets the property \ref nco_imAddressAuthStatusFrom "nco:imAddressAuthStatusFrom" to the given \a imAddressAuthStatusFrom.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< AuthorizationStatus > setImAddressAuthStatusFrom(::SopranoLive::Live< AuthorizationStatus > const &imAddressAuthStatusFrom_) { return baseSetObject< nco::imAddressAuthStatusFrom >( imAddressAuthStatusFrom_ ); }
				/*!
					\fn ::SopranoLive::Live< AuthorizationStatus > firstImAddressAuthStatusFrom()
					
					
					Returns the first property \ref nco_imAddressAuthStatusFrom "nco:imAddressAuthStatusFrom". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< AuthorizationStatus > firstImAddressAuthStatusFrom() { return baseFirstObject< nco::imAddressAuthStatusFrom >(); }
				/*!
					\fn ::SopranoLive::Live< AuthorizationStatus > addImAddressAuthStatusFrom()
					
					
					Adds a new uniquely named resource to the property \ref nco_imAddressAuthStatusFrom "nco:imAddressAuthStatusFrom" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AuthorizationStatus > addImAddressAuthStatusFrom() { return baseAddObject< nco::imAddressAuthStatusFrom >(); }
				/*!
					\fn ::SopranoLive::Live< AuthorizationStatus > addImAddressAuthStatusFrom(::SopranoLive::Live< AuthorizationStatus > const &imAddressAuthStatusFrom_)
					
					
					Adds the given \a imAddressAuthStatusFrom_ to the property \ref nco_imAddressAuthStatusFrom "nco:imAddressAuthStatusFrom" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AuthorizationStatus > addImAddressAuthStatusFrom(::SopranoLive::Live< AuthorizationStatus > const &imAddressAuthStatusFrom_) { return baseAddObject< nco::imAddressAuthStatusFrom >( imAddressAuthStatusFrom_ ); }
				/*!
					\fn void removeImAddressAuthStatusFrom(::SopranoLive::Live< AuthorizationStatus > const &imAddressAuthStatusFrom_)
					
					
					Removes the given \a imAddressAuthStatusFrom_ from the property \ref nco_imAddressAuthStatusFrom "nco:imAddressAuthStatusFrom" set.
					\sa LiveResource::removeObject
				 */
				void removeImAddressAuthStatusFrom(::SopranoLive::Live< AuthorizationStatus > const &imAddressAuthStatusFrom_) { baseRemoveObject< nco::imAddressAuthStatusFrom >(imAddressAuthStatusFrom_); }

				/* Property generated from nco:imAvatar
				 * \n A picture attached to a particular IM address.
				 * \n rdfs:label=imAvatar
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:domain=nco:IMAddress
				 * \n tracker:modified=1345
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nie::DataObject DataObject;
				/*!
					\fn LiveNodes liveImAvatars(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imAvatar "nco:imAvatar" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImAvatars(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imAvatar >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImAvatars(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imAvatar "nco:imAvatar" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImAvatars(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imAvatar >(object_info, strategy, parent); }
				/*!
					\fn void setImAvatars(LiveNodes const &imAvatar_)
					
					
					Sets the property \ref nco_imAvatar "nco:imAvatar" set to the given \a imAvatar_ set.
					\sa LiveResource::setObjects
				 */
				void setImAvatars(LiveNodes const &imAvatar_) { baseSetObjects(nco::imAvatar::iri(), imAvatar_); }
				/*!
					\fn void removeImAvatars(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imAvatar "nco:imAvatar" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImAvatars(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imAvatar::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > getImAvatar()
					
					
					Returns the property \ref nco_imAvatar "nco:imAvatar". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nie::DataObject > getImAvatar() { return baseGetObject< nco::imAvatar >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > setImAvatar(::SopranoLive::Live< nie::DataObject > const &imAvatar_)
					
					
					Sets the property \ref nco_imAvatar "nco:imAvatar" to the given \a imAvatar.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nie::DataObject > setImAvatar(::SopranoLive::Live< nie::DataObject > const &imAvatar_) { return baseSetObject< nco::imAvatar >( imAvatar_ ); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > firstImAvatar()
					
					
					Returns the first property \ref nco_imAvatar "nco:imAvatar". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nie::DataObject > firstImAvatar() { return baseFirstObject< nco::imAvatar >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addImAvatar()
					
					
					Adds a new uniquely named resource to the property \ref nco_imAvatar "nco:imAvatar" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addImAvatar() { return baseAddObject< nco::imAvatar >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addImAvatar(::SopranoLive::Live< nie::DataObject > const &imAvatar_)
					
					
					Adds the given \a imAvatar_ to the property \ref nco_imAvatar "nco:imAvatar" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addImAvatar(::SopranoLive::Live< nie::DataObject > const &imAvatar_) { return baseAddObject< nco::imAvatar >( imAvatar_ ); }
				/*!
					\fn void removeImAvatar(::SopranoLive::Live< nie::DataObject > const &imAvatar_)
					
					
					Removes the given \a imAvatar_ from the property \ref nco_imAvatar "nco:imAvatar" set.
					\sa LiveResource::removeObject
				 */
				void removeImAvatar(::SopranoLive::Live< nie::DataObject > const &imAvatar_) { baseRemoveObject< nco::imAvatar >(imAvatar_); }
				 //@}
			};

			/*! Class generated from nco:IMAccount
			 * \ingroup onto_nco_classes
			 * An account in an Instant Messaging system. This refers to IM accounts of the user 'me'.
			 * 
			 * rdfs:label = IMAccount
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1681
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_fromIMAccount "nco:fromIMAccount"
			 * 		\ref nco_hasIMAccount "nco:hasIMAccount"
			 */
			class IMAccount
				: public virtual IMAddress

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IMAccount"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<IMAddress, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<IMAccount> Live;
				IMAccount() { this->attachInterfaceHelper< IMAccount >(); }
				~IMAccount() { this->detachInterfaceHelper< IMAccount >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:imEnabled
				 * \n Unknown text
				 * \n rdfs:label=enabled
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nco:IMAccount
				 * \n tracker:modified=1985
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImEnableds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imEnabled "nco:imEnabled" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImEnableds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imEnabled >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImEnableds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imEnabled "nco:imEnabled" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImEnableds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imEnabled >(object_info, strategy, parent); }
				/*!
					\fn void setImEnableds(LiveNodes const &imEnabled_)
					
					
					Sets the property \ref nco_imEnabled "nco:imEnabled" set to the given \a imEnabled_ set.
					\sa LiveResource::setObjects
				 */
				void setImEnableds(LiveNodes const &imEnabled_) { baseSetObjects(nco::imEnabled::iri(), imEnabled_); }
				/*!
					\fn void removeImEnableds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imEnabled "nco:imEnabled" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImEnableds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imEnabled::iri(), object_info); }
				/*!
					\fn bool getImEnabled()
					
					
					Returns the property \ref nco_imEnabled "nco:imEnabled". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getImEnabled() { return baseGetObject< nco::imEnabled >(); }
				/*!
					\fn void setImEnabled(bool const &imEnabled_)
					
					
					Sets the property \ref nco_imEnabled "nco:imEnabled" to the given \a imEnabled.
					\sa LiveResource::setObject
				 */
				void setImEnabled(bool const &imEnabled_) { baseSetObject< nco::imEnabled >( imEnabled_ ); }
				/*!
					\fn bool firstImEnabled()
					
					
					Returns the first property \ref nco_imEnabled "nco:imEnabled". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstImEnabled() { return baseFirstObject< nco::imEnabled >(); }
				/*!
					\fn void addImEnabled(bool const &imEnabled_)
					
					
					Adds the given \a imEnabled_ to the property \ref nco_imEnabled "nco:imEnabled" set.
					\sa LiveResource::addObject
				 */
				void addImEnabled(bool const &imEnabled_) { baseAddObject< nco::imEnabled >( imEnabled_ ); }
				/*!
					\fn void removeImEnabled(bool const &imEnabled_)
					
					
					Removes the given \a imEnabled_ from the property \ref nco_imEnabled "nco:imEnabled" set.
					\sa LiveResource::removeObject
				 */
				void removeImEnabled(bool const &imEnabled_) { baseRemoveObject< nco::imEnabled >(imEnabled_); }

				/* Property generated from nco:imAccountAddress
				 * \n Instant Messaging address of this IM account. The user 'me' can send and receive messages from this IM address.
				 * \n rdfs:label=imAccountAddress
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:IMAddress
				 * \n rdfs:domain=nco:IMAccount
				 * \n tracker:modified=1358
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImAccountAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imAccountAddress "nco:imAccountAddress" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImAccountAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imAccountAddress >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImAccountAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imAccountAddress "nco:imAccountAddress" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImAccountAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imAccountAddress >(object_info, strategy, parent); }
				/*!
					\fn void setImAccountAddresss(LiveNodes const &imAccountAddress_)
					
					
					Sets the property \ref nco_imAccountAddress "nco:imAccountAddress" set to the given \a imAccountAddress_ set.
					\sa LiveResource::setObjects
				 */
				void setImAccountAddresss(LiveNodes const &imAccountAddress_) { baseSetObjects(nco::imAccountAddress::iri(), imAccountAddress_); }
				/*!
					\fn void removeImAccountAddresss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imAccountAddress "nco:imAccountAddress" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImAccountAddresss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imAccountAddress::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< IMAddress > getImAccountAddress()
					
					
					Returns the property \ref nco_imAccountAddress "nco:imAccountAddress". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< IMAddress > getImAccountAddress() { return baseGetObject< nco::imAccountAddress >(); }
				/*!
					\fn ::SopranoLive::Live< IMAddress > setImAccountAddress(::SopranoLive::Live< IMAddress > const &imAccountAddress_)
					
					
					Sets the property \ref nco_imAccountAddress "nco:imAccountAddress" to the given \a imAccountAddress.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< IMAddress > setImAccountAddress(::SopranoLive::Live< IMAddress > const &imAccountAddress_) { return baseSetObject< nco::imAccountAddress >( imAccountAddress_ ); }
				/*!
					\fn ::SopranoLive::Live< IMAddress > firstImAccountAddress()
					
					
					Returns the first property \ref nco_imAccountAddress "nco:imAccountAddress". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< IMAddress > firstImAccountAddress() { return baseFirstObject< nco::imAccountAddress >(); }
				/*!
					\fn ::SopranoLive::Live< IMAddress > addImAccountAddress()
					
					
					Adds a new uniquely named resource to the property \ref nco_imAccountAddress "nco:imAccountAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< IMAddress > addImAccountAddress() { return baseAddObject< nco::imAccountAddress >(); }
				/*!
					\fn ::SopranoLive::Live< IMAddress > addImAccountAddress(::SopranoLive::Live< IMAddress > const &imAccountAddress_)
					
					
					Adds the given \a imAccountAddress_ to the property \ref nco_imAccountAddress "nco:imAccountAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< IMAddress > addImAccountAddress(::SopranoLive::Live< IMAddress > const &imAccountAddress_) { return baseAddObject< nco::imAccountAddress >( imAccountAddress_ ); }
				/*!
					\fn void removeImAccountAddress(::SopranoLive::Live< IMAddress > const &imAccountAddress_)
					
					
					Removes the given \a imAccountAddress_ from the property \ref nco_imAccountAddress "nco:imAccountAddress" set.
					\sa LiveResource::removeObject
				 */
				void removeImAccountAddress(::SopranoLive::Live< IMAddress > const &imAccountAddress_) { baseRemoveObject< nco::imAccountAddress >(imAccountAddress_); }

				/* Property generated from nco:imDisplayName
				 * \n The user-visible name of this account. This SHOULD be chosen by the user at account creation time. The account creation user interface is responsible for setting a reasonable default value in the user's locale; something like	'Jabber (bob@example.com)' would be sensible.
				 * \n rdfs:label=displayname
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:IMAccount
				 * \n tracker:modified=1026
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImDisplayNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imDisplayName "nco:imDisplayName" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImDisplayNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imDisplayName >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImDisplayNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imDisplayName "nco:imDisplayName" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImDisplayNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imDisplayName >(object_info, strategy, parent); }
				/*!
					\fn void setImDisplayNames(LiveNodes const &imDisplayName_)
					
					
					Sets the property \ref nco_imDisplayName "nco:imDisplayName" set to the given \a imDisplayName_ set.
					\sa LiveResource::setObjects
				 */
				void setImDisplayNames(LiveNodes const &imDisplayName_) { baseSetObjects(nco::imDisplayName::iri(), imDisplayName_); }
				/*!
					\fn void removeImDisplayNames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imDisplayName "nco:imDisplayName" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImDisplayNames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imDisplayName::iri(), object_info); }
				/*!
					\fn QString getImDisplayName()
					
					
					Returns the property \ref nco_imDisplayName "nco:imDisplayName". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getImDisplayName() { return baseGetObject< nco::imDisplayName >(); }
				/*!
					\fn void setImDisplayName(QString const &imDisplayName_)
					
					
					Sets the property \ref nco_imDisplayName "nco:imDisplayName" to the given \a imDisplayName.
					\sa LiveResource::setObject
				 */
				void setImDisplayName(QString const &imDisplayName_) { baseSetObject< nco::imDisplayName >( imDisplayName_ ); }
				/*!
					\fn QString firstImDisplayName()
					
					
					Returns the first property \ref nco_imDisplayName "nco:imDisplayName". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstImDisplayName() { return baseFirstObject< nco::imDisplayName >(); }
				/*!
					\fn void addImDisplayName(QString const &imDisplayName_)
					
					
					Adds the given \a imDisplayName_ to the property \ref nco_imDisplayName "nco:imDisplayName" set.
					\sa LiveResource::addObject
				 */
				void addImDisplayName(QString const &imDisplayName_) { baseAddObject< nco::imDisplayName >( imDisplayName_ ); }
				/*!
					\fn void removeImDisplayName(QString const &imDisplayName_)
					
					
					Removes the given \a imDisplayName_ from the property \ref nco_imDisplayName "nco:imDisplayName" set.
					\sa LiveResource::removeObject
				 */
				void removeImDisplayName(QString const &imDisplayName_) { baseRemoveObject< nco::imDisplayName >(imDisplayName_); }

				/* Property generated from nco:imAccountAvatar
				 * \n The picture the user wants to show to others in this account. This has been replaced by nco:imAvatar.
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=account avatar
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:domain=nco:IMAccount
				 * \n tracker:modified=1172
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nie::DataObject DataObject;
				/*!
					\fn LiveNodes liveImAccountAvatars(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::imAccountAvatar for replacement
					Returns a live model of property \ref nco_imAccountAvatar "nco:imAccountAvatar" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveImAccountAvatars(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imAccountAvatar >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImAccountAvatars(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::imAccountAvatar for replacement
					Returns all current values of property \ref nco_imAccountAvatar "nco:imAccountAvatar" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getImAccountAvatars(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imAccountAvatar >(object_info, strategy, parent); }
				/*!
					\fn void setImAccountAvatars(LiveNodes const &imAccountAvatar_)
					
					\deprecated See \ref nco::imAccountAvatar for replacement
					Sets the property \ref nco_imAccountAvatar "nco:imAccountAvatar" set to the given \a imAccountAvatar_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setImAccountAvatars(LiveNodes const &imAccountAvatar_) { baseSetObjects(nco::imAccountAvatar::iri(), imAccountAvatar_); }
				/*!
					\fn void removeImAccountAvatars(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nco::imAccountAvatar for replacement
					Removes the properties from property \ref nco_imAccountAvatar "nco:imAccountAvatar" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeImAccountAvatars(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imAccountAvatar::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > getImAccountAvatar()
					
					\deprecated See \ref nco::imAccountAvatar for replacement
					Returns the property \ref nco_imAccountAvatar "nco:imAccountAvatar". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< nie::DataObject > getImAccountAvatar() { return baseGetObject< nco::imAccountAvatar >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > setImAccountAvatar(::SopranoLive::Live< nie::DataObject > const &imAccountAvatar_)
					
					\deprecated See \ref nco::imAccountAvatar for replacement
					Sets the property \ref nco_imAccountAvatar "nco:imAccountAvatar" to the given \a imAccountAvatar.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< nie::DataObject > setImAccountAvatar(::SopranoLive::Live< nie::DataObject > const &imAccountAvatar_) { return baseSetObject< nco::imAccountAvatar >( imAccountAvatar_ ); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > firstImAccountAvatar()
					
					\deprecated See \ref nco::imAccountAvatar for replacement
					Returns the first property \ref nco_imAccountAvatar "nco:imAccountAvatar". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< nie::DataObject > firstImAccountAvatar() { return baseFirstObject< nco::imAccountAvatar >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addImAccountAvatar()
					
					\deprecated See \ref nco::imAccountAvatar for replacement
					Adds a new uniquely named resource to the property \ref nco_imAccountAvatar "nco:imAccountAvatar" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< nie::DataObject > addImAccountAvatar() { return baseAddObject< nco::imAccountAvatar >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addImAccountAvatar(::SopranoLive::Live< nie::DataObject > const &imAccountAvatar_)
					
					\deprecated See \ref nco::imAccountAvatar for replacement
					Adds the given \a imAccountAvatar_ to the property \ref nco_imAccountAvatar "nco:imAccountAvatar" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< nie::DataObject > addImAccountAvatar(::SopranoLive::Live< nie::DataObject > const &imAccountAvatar_) { return baseAddObject< nco::imAccountAvatar >( imAccountAvatar_ ); }
				/*!
					\fn void removeImAccountAvatar(::SopranoLive::Live< nie::DataObject > const &imAccountAvatar_)
					
					\deprecated See \ref nco::imAccountAvatar for replacement
					Removes the given \a imAccountAvatar_ from the property \ref nco_imAccountAvatar "nco:imAccountAvatar" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeImAccountAvatar(::SopranoLive::Live< nie::DataObject > const &imAccountAvatar_) { baseRemoveObject< nco::imAccountAvatar >(imAccountAvatar_); }

				/* Property generated from nco:imAccountType
				 * \n Type of the IM account. This may be the name of the service that provides the IM functionality. Examples might include Jabber, ICQ, MSN etc
				 * \n rdfs:label=imAccountType
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:IMAccount
				 * \n tracker:modified=1508
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImAccountTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_imAccountType "nco:imAccountType" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImAccountTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imAccountType >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImAccountTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_imAccountType "nco:imAccountType" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImAccountTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imAccountType >(object_info, strategy, parent); }
				/*!
					\fn void setImAccountTypes(LiveNodes const &imAccountType_)
					
					
					Sets the property \ref nco_imAccountType "nco:imAccountType" set to the given \a imAccountType_ set.
					\sa LiveResource::setObjects
				 */
				void setImAccountTypes(LiveNodes const &imAccountType_) { baseSetObjects(nco::imAccountType::iri(), imAccountType_); }
				/*!
					\fn void removeImAccountTypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_imAccountType "nco:imAccountType" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImAccountTypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imAccountType::iri(), object_info); }
				/*!
					\fn QString getImAccountType()
					
					
					Returns the property \ref nco_imAccountType "nco:imAccountType". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getImAccountType() { return baseGetObject< nco::imAccountType >(); }
				/*!
					\fn void setImAccountType(QString const &imAccountType_)
					
					
					Sets the property \ref nco_imAccountType "nco:imAccountType" to the given \a imAccountType.
					\sa LiveResource::setObject
				 */
				void setImAccountType(QString const &imAccountType_) { baseSetObject< nco::imAccountType >( imAccountType_ ); }
				/*!
					\fn QString firstImAccountType()
					
					
					Returns the first property \ref nco_imAccountType "nco:imAccountType". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstImAccountType() { return baseFirstObject< nco::imAccountType >(); }
				/*!
					\fn void addImAccountType(QString const &imAccountType_)
					
					
					Adds the given \a imAccountType_ to the property \ref nco_imAccountType "nco:imAccountType" set.
					\sa LiveResource::addObject
				 */
				void addImAccountType(QString const &imAccountType_) { baseAddObject< nco::imAccountType >( imAccountType_ ); }
				/*!
					\fn void removeImAccountType(QString const &imAccountType_)
					
					
					Removes the given \a imAccountType_ from the property \ref nco_imAccountType "nco:imAccountType" set.
					\sa LiveResource::removeObject
				 */
				void removeImAccountType(QString const &imAccountType_) { baseRemoveObject< nco::imAccountType >(imAccountType_); }

				/* Property generated from nco:hasIMContact
				 * \n Indicates that this Instant Messaging account has the specified Instant Messaging address in the contact list.
				 * \n rdfs:range=nco:IMAddress
				 * \n rdfs:label=hasIMAccount
				 * \n tracker:modified=1203
				 * \n rdfs:domain=nco:IMAccount
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasIMContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_hasIMContact "nco:hasIMContact" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasIMContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::hasIMContact >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasIMContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_hasIMContact "nco:hasIMContact" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasIMContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::hasIMContact >(object_info, strategy, parent); }
				/*!
					\fn void setHasIMContacts(LiveNodes const &hasIMContact_)
					
					
					Sets the property \ref nco_hasIMContact "nco:hasIMContact" set to the given \a hasIMContact_ set.
					\sa LiveResource::setObjects
				 */
				void setHasIMContacts(LiveNodes const &hasIMContact_) { baseSetObjects(nco::hasIMContact::iri(), hasIMContact_); }
				/*!
					\fn void removeHasIMContacts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_hasIMContact "nco:hasIMContact" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasIMContacts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::hasIMContact::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< IMAddress > firstHasIMContact()
					
					
					Returns the first property \ref nco_hasIMContact "nco:hasIMContact". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< IMAddress > firstHasIMContact() { return baseFirstObject< nco::hasIMContact >(); }
				/*!
					\fn ::SopranoLive::Live< IMAddress > addHasIMContact()
					
					
					Adds a new uniquely named resource to the property \ref nco_hasIMContact "nco:hasIMContact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< IMAddress > addHasIMContact() { return baseAddObject< nco::hasIMContact >(); }
				/*!
					\fn ::SopranoLive::Live< IMAddress > addHasIMContact(::SopranoLive::Live< IMAddress > const &hasIMContact_)
					
					
					Adds the given \a hasIMContact_ to the property \ref nco_hasIMContact "nco:hasIMContact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< IMAddress > addHasIMContact(::SopranoLive::Live< IMAddress > const &hasIMContact_) { return baseAddObject< nco::hasIMContact >( hasIMContact_ ); }
				/*!
					\fn void removeHasIMContact(::SopranoLive::Live< IMAddress > const &hasIMContact_)
					
					
					Removes the given \a hasIMContact_ from the property \ref nco_hasIMContact "nco:hasIMContact" set.
					\sa LiveResource::removeObject
				 */
				void removeHasIMContact(::SopranoLive::Live< IMAddress > const &hasIMContact_) { baseRemoveObject< nco::hasIMContact >(hasIMContact_); }
				 //@}
			};

			/*! Class generated from nco:IMCapability
			 * \ingroup onto_nco_classes
			 * Features of a certain IM connection (depends on the IMAccount implementation used by the Contact)
			 * 
			 * rdfs:label = IM Capabilities
			 * 
			 * tracker:modified = 1108
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nco_im_capability_audio_calls "nco:im-capability-audio-calls"
			 * 		\ref nco_im_capability_media_calls "nco:im-capability-media-calls"
			 * 		\ref nco_im_capability_dbus_tubes "nco:im-capability-dbus-tubes"
			 * 		\ref nco_im_capability_upgrading_calls "nco:im-capability-upgrading-calls"
			 * 		\ref nco_im_capability_file_transfers "nco:im-capability-file-transfers"
			 * 		\ref nco_im_capability_stream_tubes "nco:im-capability-stream-tubes"
			 * 		\ref nco_im_capability_video_calls "nco:im-capability-video-calls"
			 * 		\ref nco_im_capability_text_chat "nco:im-capability-text-chat"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_imCapability "nco:imCapability"
			 * 		\ref nco_imContactCapability "nco:imContactCapability"
			 */
			class IMCapability
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IMCapability"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<IMCapability> Live;
				IMCapability() { this->attachInterfaceHelper< IMCapability >(); }
				~IMCapability() { this->detachInterfaceHelper< IMCapability >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:PersonContact
			 * \ingroup onto_nco_classes
			 * A Contact that denotes a Person. A person can have multiple Affiliations.
			 * 
			 * rdfs:label = PersonContact
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1535
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nco_default_contact_emergency "nco:default-contact-emergency"
			 * 		\ref nco_default_contact_me "nco:default-contact-me"
			 */
			class PersonContact
				: public virtual Contact

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Contact, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<PersonContact> Live;
				PersonContact() { this->attachInterfaceHelper< PersonContact >(); }
				~PersonContact() { this->detachInterfaceHelper< PersonContact >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:hasIMAccount
				 * \n Indicates that an Instant Messaging account owned by an entity represented by this contact.
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=hasIMAccount
				 * \n rdfs:range=nco:IMAccount
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:indexed=true
				 * \n tracker:modified=1775
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasIMAccounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::hasIMAccount for replacement
					Returns a live model of property \ref nco_hasIMAccount "nco:hasIMAccount" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveHasIMAccounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::hasIMAccount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasIMAccounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::hasIMAccount for replacement
					Returns all current values of property \ref nco_hasIMAccount "nco:hasIMAccount" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getHasIMAccounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::hasIMAccount >(object_info, strategy, parent); }
				/*!
					\fn void setHasIMAccounts(LiveNodes const &hasIMAccount_)
					
					\deprecated See \ref nco::hasIMAccount for replacement
					Sets the property \ref nco_hasIMAccount "nco:hasIMAccount" set to the given \a hasIMAccount_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setHasIMAccounts(LiveNodes const &hasIMAccount_) { baseSetObjects(nco::hasIMAccount::iri(), hasIMAccount_); }
				/*!
					\fn void removeHasIMAccounts(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nco::hasIMAccount for replacement
					Removes the properties from property \ref nco_hasIMAccount "nco:hasIMAccount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeHasIMAccounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::hasIMAccount::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< IMAccount > firstHasIMAccount()
					
					\deprecated See \ref nco::hasIMAccount for replacement
					Returns the first property \ref nco_hasIMAccount "nco:hasIMAccount". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< IMAccount > firstHasIMAccount() { return baseFirstObject< nco::hasIMAccount >(); }
				/*!
					\fn ::SopranoLive::Live< IMAccount > addHasIMAccount()
					
					\deprecated See \ref nco::hasIMAccount for replacement
					Adds a new uniquely named resource to the property \ref nco_hasIMAccount "nco:hasIMAccount" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< IMAccount > addHasIMAccount() { return baseAddObject< nco::hasIMAccount >(); }
				/*!
					\fn ::SopranoLive::Live< IMAccount > addHasIMAccount(::SopranoLive::Live< IMAccount > const &hasIMAccount_)
					
					\deprecated See \ref nco::hasIMAccount for replacement
					Adds the given \a hasIMAccount_ to the property \ref nco_hasIMAccount "nco:hasIMAccount" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< IMAccount > addHasIMAccount(::SopranoLive::Live< IMAccount > const &hasIMAccount_) { return baseAddObject< nco::hasIMAccount >( hasIMAccount_ ); }
				/*!
					\fn void removeHasIMAccount(::SopranoLive::Live< IMAccount > const &hasIMAccount_)
					
					\deprecated See \ref nco::hasIMAccount for replacement
					Removes the given \a hasIMAccount_ from the property \ref nco_hasIMAccount "nco:hasIMAccount" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeHasIMAccount(::SopranoLive::Live< IMAccount > const &hasIMAccount_) { baseRemoveObject< nco::hasIMAccount >(hasIMAccount_); }

				/* Property generated from nco:nameHonorificPrefix
				 * \n A prefix for the name of the object represented by this Contact. See documentation for the 'nameFamily' property for details.
				 * \n rdfs:label=nameHonorificPrefix
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:weight=3
				 * \n tracker:modified=1812
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNameHonorificPrefixs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_nameHonorificPrefix "nco:nameHonorificPrefix" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNameHonorificPrefixs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::nameHonorificPrefix >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNameHonorificPrefixs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_nameHonorificPrefix "nco:nameHonorificPrefix" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNameHonorificPrefixs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::nameHonorificPrefix >(object_info, strategy, parent); }
				/*!
					\fn void setNameHonorificPrefixs(LiveNodes const &nameHonorificPrefix_)
					
					
					Sets the property \ref nco_nameHonorificPrefix "nco:nameHonorificPrefix" set to the given \a nameHonorificPrefix_ set.
					\sa LiveResource::setObjects
				 */
				void setNameHonorificPrefixs(LiveNodes const &nameHonorificPrefix_) { baseSetObjects(nco::nameHonorificPrefix::iri(), nameHonorificPrefix_); }
				/*!
					\fn void removeNameHonorificPrefixs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_nameHonorificPrefix "nco:nameHonorificPrefix" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNameHonorificPrefixs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::nameHonorificPrefix::iri(), object_info); }
				/*!
					\fn QString getNameHonorificPrefix()
					
					
					Returns the property \ref nco_nameHonorificPrefix "nco:nameHonorificPrefix". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getNameHonorificPrefix() { return baseGetObject< nco::nameHonorificPrefix >(); }
				/*!
					\fn void setNameHonorificPrefix(QString const &nameHonorificPrefix_)
					
					
					Sets the property \ref nco_nameHonorificPrefix "nco:nameHonorificPrefix" to the given \a nameHonorificPrefix.
					\sa LiveResource::setObject
				 */
				void setNameHonorificPrefix(QString const &nameHonorificPrefix_) { baseSetObject< nco::nameHonorificPrefix >( nameHonorificPrefix_ ); }
				/*!
					\fn QString firstNameHonorificPrefix()
					
					
					Returns the first property \ref nco_nameHonorificPrefix "nco:nameHonorificPrefix". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstNameHonorificPrefix() { return baseFirstObject< nco::nameHonorificPrefix >(); }
				/*!
					\fn void addNameHonorificPrefix(QString const &nameHonorificPrefix_)
					
					
					Adds the given \a nameHonorificPrefix_ to the property \ref nco_nameHonorificPrefix "nco:nameHonorificPrefix" set.
					\sa LiveResource::addObject
				 */
				void addNameHonorificPrefix(QString const &nameHonorificPrefix_) { baseAddObject< nco::nameHonorificPrefix >( nameHonorificPrefix_ ); }
				/*!
					\fn void removeNameHonorificPrefix(QString const &nameHonorificPrefix_)
					
					
					Removes the given \a nameHonorificPrefix_ from the property \ref nco_nameHonorificPrefix "nco:nameHonorificPrefix" set.
					\sa LiveResource::removeObject
				 */
				void removeNameHonorificPrefix(QString const &nameHonorificPrefix_) { baseRemoveObject< nco::nameHonorificPrefix >(nameHonorificPrefix_); }

				/* Property generated from nco:nameAdditional
				 * \n Additional given name of an object represented by this contact. See documentation for 'nameFamily' property for details.
				 * \n rdfs:label=nameAdditional
				 * \n tracker:fulltextNoLimit=true
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:weight=5
				 * \n tracker:modified=1910
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNameAdditionals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_nameAdditional "nco:nameAdditional" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNameAdditionals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::nameAdditional >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNameAdditionals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_nameAdditional "nco:nameAdditional" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNameAdditionals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::nameAdditional >(object_info, strategy, parent); }
				/*!
					\fn void setNameAdditionals(LiveNodes const &nameAdditional_)
					
					
					Sets the property \ref nco_nameAdditional "nco:nameAdditional" set to the given \a nameAdditional_ set.
					\sa LiveResource::setObjects
				 */
				void setNameAdditionals(LiveNodes const &nameAdditional_) { baseSetObjects(nco::nameAdditional::iri(), nameAdditional_); }
				/*!
					\fn void removeNameAdditionals(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_nameAdditional "nco:nameAdditional" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNameAdditionals(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::nameAdditional::iri(), object_info); }
				/*!
					\fn QString getNameAdditional()
					
					
					Returns the property \ref nco_nameAdditional "nco:nameAdditional". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getNameAdditional() { return baseGetObject< nco::nameAdditional >(); }
				/*!
					\fn void setNameAdditional(QString const &nameAdditional_)
					
					
					Sets the property \ref nco_nameAdditional "nco:nameAdditional" to the given \a nameAdditional.
					\sa LiveResource::setObject
				 */
				void setNameAdditional(QString const &nameAdditional_) { baseSetObject< nco::nameAdditional >( nameAdditional_ ); }
				/*!
					\fn QString firstNameAdditional()
					
					
					Returns the first property \ref nco_nameAdditional "nco:nameAdditional". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstNameAdditional() { return baseFirstObject< nco::nameAdditional >(); }
				/*!
					\fn void addNameAdditional(QString const &nameAdditional_)
					
					
					Adds the given \a nameAdditional_ to the property \ref nco_nameAdditional "nco:nameAdditional" set.
					\sa LiveResource::addObject
				 */
				void addNameAdditional(QString const &nameAdditional_) { baseAddObject< nco::nameAdditional >( nameAdditional_ ); }
				/*!
					\fn void removeNameAdditional(QString const &nameAdditional_)
					
					
					Removes the given \a nameAdditional_ from the property \ref nco_nameAdditional "nco:nameAdditional" set.
					\sa LiveResource::removeObject
				 */
				void removeNameAdditional(QString const &nameAdditional_) { baseRemoveObject< nco::nameAdditional >(nameAdditional_); }

				/* Property generated from maemo:contactAudioRingtone
				 * \n Audio file linked with a contact
				 * \n rdfs:label=Audio ringtone
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:FileDataObject
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:modified=1818
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nfo::FileDataObject FileDataObject;
				/*!
					\fn LiveNodes liveMaemoContactAudioRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref maemo_contactAudioRingtone "maemo:contactAudioRingtone" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMaemoContactAudioRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< maemo::contactAudioRingtone >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMaemoContactAudioRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref maemo_contactAudioRingtone "maemo:contactAudioRingtone" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMaemoContactAudioRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< maemo::contactAudioRingtone >(object_info, strategy, parent); }
				/*!
					\fn void setMaemoContactAudioRingtones(LiveNodes const &maemoContactAudioRingtone_)
					
					
					Sets the property \ref maemo_contactAudioRingtone "maemo:contactAudioRingtone" set to the given \a maemoContactAudioRingtone_ set.
					\sa LiveResource::setObjects
				 */
				void setMaemoContactAudioRingtones(LiveNodes const &maemoContactAudioRingtone_) { baseSetObjects(maemo::contactAudioRingtone::iri(), maemoContactAudioRingtone_); }
				/*!
					\fn void removeMaemoContactAudioRingtones(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref maemo_contactAudioRingtone "maemo:contactAudioRingtone" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMaemoContactAudioRingtones(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(maemo::contactAudioRingtone::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > getMaemoContactAudioRingtone()
					
					
					Returns the property \ref maemo_contactAudioRingtone "maemo:contactAudioRingtone". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > getMaemoContactAudioRingtone() { return baseGetObject< maemo::contactAudioRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > setMaemoContactAudioRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactAudioRingtone_)
					
					
					Sets the property \ref maemo_contactAudioRingtone "maemo:contactAudioRingtone" to the given \a maemoContactAudioRingtone.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > setMaemoContactAudioRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactAudioRingtone_) { return baseSetObject< maemo::contactAudioRingtone >( maemoContactAudioRingtone_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > firstMaemoContactAudioRingtone()
					
					
					Returns the first property \ref maemo_contactAudioRingtone "maemo:contactAudioRingtone". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > firstMaemoContactAudioRingtone() { return baseFirstObject< maemo::contactAudioRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addMaemoContactAudioRingtone()
					
					
					Adds a new uniquely named resource to the property \ref maemo_contactAudioRingtone "maemo:contactAudioRingtone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addMaemoContactAudioRingtone() { return baseAddObject< maemo::contactAudioRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addMaemoContactAudioRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactAudioRingtone_)
					
					
					Adds the given \a maemoContactAudioRingtone_ to the property \ref maemo_contactAudioRingtone "maemo:contactAudioRingtone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addMaemoContactAudioRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactAudioRingtone_) { return baseAddObject< maemo::contactAudioRingtone >( maemoContactAudioRingtone_ ); }
				/*!
					\fn void removeMaemoContactAudioRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactAudioRingtone_)
					
					
					Removes the given \a maemoContactAudioRingtone_ from the property \ref maemo_contactAudioRingtone "maemo:contactAudioRingtone" set.
					\sa LiveResource::removeObject
				 */
				void removeMaemoContactAudioRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactAudioRingtone_) { baseRemoveObject< maemo::contactAudioRingtone >(maemoContactAudioRingtone_); }

				/* Property generated from nco:hasAffiliation
				 * \n Links a PersonContact with an Affiliation.
				 * \n rdfs:range=nco:Affiliation
				 * \n rdfs:label=hasAffiliation
				 * \n tracker:modified=1784
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasAffiliations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_hasAffiliation "nco:hasAffiliation" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasAffiliations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::hasAffiliation >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasAffiliations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_hasAffiliation "nco:hasAffiliation" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasAffiliations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::hasAffiliation >(object_info, strategy, parent); }
				/*!
					\fn void setHasAffiliations(LiveNodes const &hasAffiliation_)
					
					
					Sets the property \ref nco_hasAffiliation "nco:hasAffiliation" set to the given \a hasAffiliation_ set.
					\sa LiveResource::setObjects
				 */
				void setHasAffiliations(LiveNodes const &hasAffiliation_) { baseSetObjects(nco::hasAffiliation::iri(), hasAffiliation_); }
				/*!
					\fn void removeHasAffiliations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_hasAffiliation "nco:hasAffiliation" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasAffiliations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::hasAffiliation::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Affiliation > firstHasAffiliation()
					
					
					Returns the first property \ref nco_hasAffiliation "nco:hasAffiliation". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Affiliation > firstHasAffiliation() { return baseFirstObject< nco::hasAffiliation >(); }
				/*!
					\fn ::SopranoLive::Live< Affiliation > addHasAffiliation()
					
					
					Adds a new uniquely named resource to the property \ref nco_hasAffiliation "nco:hasAffiliation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Affiliation > addHasAffiliation() { return baseAddObject< nco::hasAffiliation >(); }
				/*!
					\fn ::SopranoLive::Live< Affiliation > addHasAffiliation(::SopranoLive::Live< Affiliation > const &hasAffiliation_)
					
					
					Adds the given \a hasAffiliation_ to the property \ref nco_hasAffiliation "nco:hasAffiliation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Affiliation > addHasAffiliation(::SopranoLive::Live< Affiliation > const &hasAffiliation_) { return baseAddObject< nco::hasAffiliation >( hasAffiliation_ ); }
				/*!
					\fn void removeHasAffiliation(::SopranoLive::Live< Affiliation > const &hasAffiliation_)
					
					
					Removes the given \a hasAffiliation_ from the property \ref nco_hasAffiliation "nco:hasAffiliation" set.
					\sa LiveResource::removeObject
				 */
				void removeHasAffiliation(::SopranoLive::Live< Affiliation > const &hasAffiliation_) { baseRemoveObject< nco::hasAffiliation >(hasAffiliation_); }

				/* Property generated from nco:nameGiven
				 * \n The given name for the object represented by this Contact. See documentation for 'nameFamily' property for details.
				 * \n rdfs:label=nameGiven
				 * \n tracker:fulltextNoLimit=true
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:weight=5
				 * \n tracker:modified=1544
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNameGivens(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_nameGiven "nco:nameGiven" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNameGivens(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::nameGiven >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNameGivens(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_nameGiven "nco:nameGiven" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNameGivens(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::nameGiven >(object_info, strategy, parent); }
				/*!
					\fn void setNameGivens(LiveNodes const &nameGiven_)
					
					
					Sets the property \ref nco_nameGiven "nco:nameGiven" set to the given \a nameGiven_ set.
					\sa LiveResource::setObjects
				 */
				void setNameGivens(LiveNodes const &nameGiven_) { baseSetObjects(nco::nameGiven::iri(), nameGiven_); }
				/*!
					\fn void removeNameGivens(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_nameGiven "nco:nameGiven" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNameGivens(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::nameGiven::iri(), object_info); }
				/*!
					\fn QString getNameGiven()
					
					
					Returns the property \ref nco_nameGiven "nco:nameGiven". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getNameGiven() { return baseGetObject< nco::nameGiven >(); }
				/*!
					\fn void setNameGiven(QString const &nameGiven_)
					
					
					Sets the property \ref nco_nameGiven "nco:nameGiven" to the given \a nameGiven.
					\sa LiveResource::setObject
				 */
				void setNameGiven(QString const &nameGiven_) { baseSetObject< nco::nameGiven >( nameGiven_ ); }
				/*!
					\fn QString firstNameGiven()
					
					
					Returns the first property \ref nco_nameGiven "nco:nameGiven". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstNameGiven() { return baseFirstObject< nco::nameGiven >(); }
				/*!
					\fn void addNameGiven(QString const &nameGiven_)
					
					
					Adds the given \a nameGiven_ to the property \ref nco_nameGiven "nco:nameGiven" set.
					\sa LiveResource::addObject
				 */
				void addNameGiven(QString const &nameGiven_) { baseAddObject< nco::nameGiven >( nameGiven_ ); }
				/*!
					\fn void removeNameGiven(QString const &nameGiven_)
					
					
					Removes the given \a nameGiven_ from the property \ref nco_nameGiven "nco:nameGiven" set.
					\sa LiveResource::removeObject
				 */
				void removeNameGiven(QString const &nameGiven_) { baseRemoveObject< nco::nameGiven >(nameGiven_); }

				/* Property generated from nco:gender
				 * \n Gender of the given contact.
				 * \n rdfs:label=gender
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Gender
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:modified=1799
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveGenders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_gender "nco:gender" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveGenders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::gender >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getGenders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_gender "nco:gender" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getGenders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::gender >(object_info, strategy, parent); }
				/*!
					\fn void setGenders(LiveNodes const &gender_)
					
					
					Sets the property \ref nco_gender "nco:gender" set to the given \a gender_ set.
					\sa LiveResource::setObjects
				 */
				void setGenders(LiveNodes const &gender_) { baseSetObjects(nco::gender::iri(), gender_); }
				/*!
					\fn void removeGenders(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_gender "nco:gender" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeGenders(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::gender::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Gender > getGender()
					
					
					Returns the property \ref nco_gender "nco:gender". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Gender > getGender() { return baseGetObject< nco::gender >(); }
				/*!
					\fn ::SopranoLive::Live< Gender > setGender(::SopranoLive::Live< Gender > const &gender_)
					
					
					Sets the property \ref nco_gender "nco:gender" to the given \a gender.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Gender > setGender(::SopranoLive::Live< Gender > const &gender_) { return baseSetObject< nco::gender >( gender_ ); }
				/*!
					\fn ::SopranoLive::Live< Gender > firstGender()
					
					
					Returns the first property \ref nco_gender "nco:gender". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Gender > firstGender() { return baseFirstObject< nco::gender >(); }
				/*!
					\fn ::SopranoLive::Live< Gender > addGender()
					
					
					Adds a new uniquely named resource to the property \ref nco_gender "nco:gender" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Gender > addGender() { return baseAddObject< nco::gender >(); }
				/*!
					\fn ::SopranoLive::Live< Gender > addGender(::SopranoLive::Live< Gender > const &gender_)
					
					
					Adds the given \a gender_ to the property \ref nco_gender "nco:gender" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Gender > addGender(::SopranoLive::Live< Gender > const &gender_) { return baseAddObject< nco::gender >( gender_ ); }
				/*!
					\fn void removeGender(::SopranoLive::Live< Gender > const &gender_)
					
					
					Removes the given \a gender_ from the property \ref nco_gender "nco:gender" set.
					\sa LiveResource::removeObject
				 */
				void removeGender(::SopranoLive::Live< Gender > const &gender_) { baseRemoveObject< nco::gender >(gender_); }

				/* Property generated from nco:metacontact
				 * \n Link a single contact with a metacontact
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=metacontact
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:MetaContact
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:modified=1389
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMetacontacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::metacontact for replacement
					Returns a live model of property \ref nco_metacontact "nco:metacontact" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveMetacontacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::metacontact >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMetacontacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::metacontact for replacement
					Returns all current values of property \ref nco_metacontact "nco:metacontact" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getMetacontacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::metacontact >(object_info, strategy, parent); }
				/*!
					\fn void setMetacontacts(LiveNodes const &metacontact_)
					
					\deprecated See \ref nco::metacontact for replacement
					Sets the property \ref nco_metacontact "nco:metacontact" set to the given \a metacontact_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setMetacontacts(LiveNodes const &metacontact_) { baseSetObjects(nco::metacontact::iri(), metacontact_); }
				/*!
					\fn void removeMetacontacts(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nco::metacontact for replacement
					Removes the properties from property \ref nco_metacontact "nco:metacontact" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeMetacontacts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::metacontact::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< MetaContact > getMetacontact()
					
					\deprecated See \ref nco::metacontact for replacement
					Returns the property \ref nco_metacontact "nco:metacontact". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< MetaContact > getMetacontact() { return baseGetObject< nco::metacontact >(); }
				/*!
					\fn ::SopranoLive::Live< MetaContact > setMetacontact(::SopranoLive::Live< MetaContact > const &metacontact_)
					
					\deprecated See \ref nco::metacontact for replacement
					Sets the property \ref nco_metacontact "nco:metacontact" to the given \a metacontact.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< MetaContact > setMetacontact(::SopranoLive::Live< MetaContact > const &metacontact_) { return baseSetObject< nco::metacontact >( metacontact_ ); }
				/*!
					\fn ::SopranoLive::Live< MetaContact > firstMetacontact()
					
					\deprecated See \ref nco::metacontact for replacement
					Returns the first property \ref nco_metacontact "nco:metacontact". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< MetaContact > firstMetacontact() { return baseFirstObject< nco::metacontact >(); }
				/*!
					\fn ::SopranoLive::Live< MetaContact > addMetacontact()
					
					\deprecated See \ref nco::metacontact for replacement
					Adds a new uniquely named resource to the property \ref nco_metacontact "nco:metacontact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< MetaContact > addMetacontact() { return baseAddObject< nco::metacontact >(); }
				/*!
					\fn ::SopranoLive::Live< MetaContact > addMetacontact(::SopranoLive::Live< MetaContact > const &metacontact_)
					
					\deprecated See \ref nco::metacontact for replacement
					Adds the given \a metacontact_ to the property \ref nco_metacontact "nco:metacontact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< MetaContact > addMetacontact(::SopranoLive::Live< MetaContact > const &metacontact_) { return baseAddObject< nco::metacontact >( metacontact_ ); }
				/*!
					\fn void removeMetacontact(::SopranoLive::Live< MetaContact > const &metacontact_)
					
					\deprecated See \ref nco::metacontact for replacement
					Removes the given \a metacontact_ from the property \ref nco_metacontact "nco:metacontact" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeMetacontact(::SopranoLive::Live< MetaContact > const &metacontact_) { baseRemoveObject< nco::metacontact >(metacontact_); }

				/* Property generated from nco:nameFamily
				 * \n The family name of an Object represented by this Contact. These applies to people that have more than one given name. The 'first' one is considered 'the' given name (see nameGiven) property. All additional ones are considered 'additional' names. The name inherited from parents is the 'family name'. e.g. For Dr. John Phil Paul Stevenson Jr. M.D. A.C.P. we have contact with: honorificPrefix: 'Dr.', nameGiven: 'John', nameAdditional: 'Phil', nameAdditional: 'Paul', nameFamily: 'Stevenson', honorificSuffix: 'Jr.', honorificSuffix: 'M.D.', honorificSuffix: 'A.C.P.'. These properties form an equivalent of the compound 'N' property as defined in RFC 2426 Sec. 3.1.2
				 * \n rdfs:label=nameFamily
				 * \n tracker:fulltextNoLimit=true
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:weight=4
				 * \n tracker:indexed=true
				 * \n tracker:modified=1661
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNameFamilys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_nameFamily "nco:nameFamily" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNameFamilys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::nameFamily >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNameFamilys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_nameFamily "nco:nameFamily" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNameFamilys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::nameFamily >(object_info, strategy, parent); }
				/*!
					\fn void setNameFamilys(LiveNodes const &nameFamily_)
					
					
					Sets the property \ref nco_nameFamily "nco:nameFamily" set to the given \a nameFamily_ set.
					\sa LiveResource::setObjects
				 */
				void setNameFamilys(LiveNodes const &nameFamily_) { baseSetObjects(nco::nameFamily::iri(), nameFamily_); }
				/*!
					\fn void removeNameFamilys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_nameFamily "nco:nameFamily" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNameFamilys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::nameFamily::iri(), object_info); }
				/*!
					\fn QString getNameFamily()
					
					
					Returns the property \ref nco_nameFamily "nco:nameFamily". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getNameFamily() { return baseGetObject< nco::nameFamily >(); }
				/*!
					\fn void setNameFamily(QString const &nameFamily_)
					
					
					Sets the property \ref nco_nameFamily "nco:nameFamily" to the given \a nameFamily.
					\sa LiveResource::setObject
				 */
				void setNameFamily(QString const &nameFamily_) { baseSetObject< nco::nameFamily >( nameFamily_ ); }
				/*!
					\fn QString firstNameFamily()
					
					
					Returns the first property \ref nco_nameFamily "nco:nameFamily". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstNameFamily() { return baseFirstObject< nco::nameFamily >(); }
				/*!
					\fn void addNameFamily(QString const &nameFamily_)
					
					
					Adds the given \a nameFamily_ to the property \ref nco_nameFamily "nco:nameFamily" set.
					\sa LiveResource::addObject
				 */
				void addNameFamily(QString const &nameFamily_) { baseAddObject< nco::nameFamily >( nameFamily_ ); }
				/*!
					\fn void removeNameFamily(QString const &nameFamily_)
					
					
					Removes the given \a nameFamily_ from the property \ref nco_nameFamily "nco:nameFamily" set.
					\sa LiveResource::removeObject
				 */
				void removeNameFamily(QString const &nameFamily_) { baseRemoveObject< nco::nameFamily >(nameFamily_); }

				/* Property generated from nco:hobby
				 * \n A hobby associated with a PersonContact. This property can be used to express hobbies and interests.
				 * \n rdfs:label=hobby
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:weight=2
				 * \n tracker:modified=1710
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHobbys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_hobby "nco:hobby" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHobbys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::hobby >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHobbys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_hobby "nco:hobby" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHobbys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::hobby >(object_info, strategy, parent); }
				/*!
					\fn void setHobbys(LiveNodes const &hobby_)
					
					
					Sets the property \ref nco_hobby "nco:hobby" set to the given \a hobby_ set.
					\sa LiveResource::setObjects
				 */
				void setHobbys(LiveNodes const &hobby_) { baseSetObjects(nco::hobby::iri(), hobby_); }
				/*!
					\fn void removeHobbys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_hobby "nco:hobby" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHobbys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::hobby::iri(), object_info); }
				/*!
					\fn QString getHobby()
					
					
					Returns the property \ref nco_hobby "nco:hobby". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getHobby() { return baseGetObject< nco::hobby >(); }
				/*!
					\fn void setHobby(QString const &hobby_)
					
					
					Sets the property \ref nco_hobby "nco:hobby" to the given \a hobby.
					\sa LiveResource::setObject
				 */
				void setHobby(QString const &hobby_) { baseSetObject< nco::hobby >( hobby_ ); }
				/*!
					\fn QString firstHobby()
					
					
					Returns the first property \ref nco_hobby "nco:hobby". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstHobby() { return baseFirstObject< nco::hobby >(); }
				/*!
					\fn void addHobby(QString const &hobby_)
					
					
					Adds the given \a hobby_ to the property \ref nco_hobby "nco:hobby" set.
					\sa LiveResource::addObject
				 */
				void addHobby(QString const &hobby_) { baseAddObject< nco::hobby >( hobby_ ); }
				/*!
					\fn void removeHobby(QString const &hobby_)
					
					
					Removes the given \a hobby_ from the property \ref nco_hobby "nco:hobby" set.
					\sa LiveResource::removeObject
				 */
				void removeHobby(QString const &hobby_) { baseRemoveObject< nco::hobby >(hobby_); }

				/* Property generated from maemo:contactVideoRingtone
				 * \n Video file linked with a contact
				 * \n rdfs:label=Video ringtone
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:FileDataObject
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:modified=1236
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMaemoContactVideoRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref maemo_contactVideoRingtone "maemo:contactVideoRingtone" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMaemoContactVideoRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< maemo::contactVideoRingtone >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMaemoContactVideoRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref maemo_contactVideoRingtone "maemo:contactVideoRingtone" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMaemoContactVideoRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< maemo::contactVideoRingtone >(object_info, strategy, parent); }
				/*!
					\fn void setMaemoContactVideoRingtones(LiveNodes const &maemoContactVideoRingtone_)
					
					
					Sets the property \ref maemo_contactVideoRingtone "maemo:contactVideoRingtone" set to the given \a maemoContactVideoRingtone_ set.
					\sa LiveResource::setObjects
				 */
				void setMaemoContactVideoRingtones(LiveNodes const &maemoContactVideoRingtone_) { baseSetObjects(maemo::contactVideoRingtone::iri(), maemoContactVideoRingtone_); }
				/*!
					\fn void removeMaemoContactVideoRingtones(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref maemo_contactVideoRingtone "maemo:contactVideoRingtone" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMaemoContactVideoRingtones(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(maemo::contactVideoRingtone::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > getMaemoContactVideoRingtone()
					
					
					Returns the property \ref maemo_contactVideoRingtone "maemo:contactVideoRingtone". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > getMaemoContactVideoRingtone() { return baseGetObject< maemo::contactVideoRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > setMaemoContactVideoRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactVideoRingtone_)
					
					
					Sets the property \ref maemo_contactVideoRingtone "maemo:contactVideoRingtone" to the given \a maemoContactVideoRingtone.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > setMaemoContactVideoRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactVideoRingtone_) { return baseSetObject< maemo::contactVideoRingtone >( maemoContactVideoRingtone_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > firstMaemoContactVideoRingtone()
					
					
					Returns the first property \ref maemo_contactVideoRingtone "maemo:contactVideoRingtone". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > firstMaemoContactVideoRingtone() { return baseFirstObject< maemo::contactVideoRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addMaemoContactVideoRingtone()
					
					
					Adds a new uniquely named resource to the property \ref maemo_contactVideoRingtone "maemo:contactVideoRingtone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addMaemoContactVideoRingtone() { return baseAddObject< maemo::contactVideoRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addMaemoContactVideoRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactVideoRingtone_)
					
					
					Adds the given \a maemoContactVideoRingtone_ to the property \ref maemo_contactVideoRingtone "maemo:contactVideoRingtone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addMaemoContactVideoRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactVideoRingtone_) { return baseAddObject< maemo::contactVideoRingtone >( maemoContactVideoRingtone_ ); }
				/*!
					\fn void removeMaemoContactVideoRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactVideoRingtone_)
					
					
					Removes the given \a maemoContactVideoRingtone_ from the property \ref maemo_contactVideoRingtone "maemo:contactVideoRingtone" set.
					\sa LiveResource::removeObject
				 */
				void removeMaemoContactVideoRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactVideoRingtone_) { baseRemoveObject< maemo::contactVideoRingtone >(maemoContactVideoRingtone_); }

				/* Property generated from maemo:contactVibrationRingtone
				 * \n File linked with a contact to vibrate on a pleasant frequency
				 * \n rdfs:label=Vibration ringtone
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:FileDataObject
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:modified=1628
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMaemoContactVibrationRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref maemo_contactVibrationRingtone "maemo:contactVibrationRingtone" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMaemoContactVibrationRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< maemo::contactVibrationRingtone >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMaemoContactVibrationRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref maemo_contactVibrationRingtone "maemo:contactVibrationRingtone" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMaemoContactVibrationRingtones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< maemo::contactVibrationRingtone >(object_info, strategy, parent); }
				/*!
					\fn void setMaemoContactVibrationRingtones(LiveNodes const &maemoContactVibrationRingtone_)
					
					
					Sets the property \ref maemo_contactVibrationRingtone "maemo:contactVibrationRingtone" set to the given \a maemoContactVibrationRingtone_ set.
					\sa LiveResource::setObjects
				 */
				void setMaemoContactVibrationRingtones(LiveNodes const &maemoContactVibrationRingtone_) { baseSetObjects(maemo::contactVibrationRingtone::iri(), maemoContactVibrationRingtone_); }
				/*!
					\fn void removeMaemoContactVibrationRingtones(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref maemo_contactVibrationRingtone "maemo:contactVibrationRingtone" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMaemoContactVibrationRingtones(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(maemo::contactVibrationRingtone::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > getMaemoContactVibrationRingtone()
					
					
					Returns the property \ref maemo_contactVibrationRingtone "maemo:contactVibrationRingtone". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > getMaemoContactVibrationRingtone() { return baseGetObject< maemo::contactVibrationRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > setMaemoContactVibrationRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactVibrationRingtone_)
					
					
					Sets the property \ref maemo_contactVibrationRingtone "maemo:contactVibrationRingtone" to the given \a maemoContactVibrationRingtone.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > setMaemoContactVibrationRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactVibrationRingtone_) { return baseSetObject< maemo::contactVibrationRingtone >( maemoContactVibrationRingtone_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > firstMaemoContactVibrationRingtone()
					
					
					Returns the first property \ref maemo_contactVibrationRingtone "maemo:contactVibrationRingtone". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > firstMaemoContactVibrationRingtone() { return baseFirstObject< maemo::contactVibrationRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addMaemoContactVibrationRingtone()
					
					
					Adds a new uniquely named resource to the property \ref maemo_contactVibrationRingtone "maemo:contactVibrationRingtone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addMaemoContactVibrationRingtone() { return baseAddObject< maemo::contactVibrationRingtone >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addMaemoContactVibrationRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactVibrationRingtone_)
					
					
					Adds the given \a maemoContactVibrationRingtone_ to the property \ref maemo_contactVibrationRingtone "maemo:contactVibrationRingtone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addMaemoContactVibrationRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactVibrationRingtone_) { return baseAddObject< maemo::contactVibrationRingtone >( maemoContactVibrationRingtone_ ); }
				/*!
					\fn void removeMaemoContactVibrationRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactVibrationRingtone_)
					
					
					Removes the given \a maemoContactVibrationRingtone_ from the property \ref maemo_contactVibrationRingtone "maemo:contactVibrationRingtone" set.
					\sa LiveResource::removeObject
				 */
				void removeMaemoContactVibrationRingtone(::SopranoLive::Live< nfo::FileDataObject > const &maemoContactVibrationRingtone_) { baseRemoveObject< maemo::contactVibrationRingtone >(maemoContactVibrationRingtone_); }

				/* Property generated from nco:nameHonorificSuffix
				 * \n A suffix for the name of the Object represented by the given object. See documentation for the 'nameFamily' for details.
				 * \n rdfs:label=nameHonorificSuffix
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:PersonContact
				 * \n tracker:weight=3
				 * \n tracker:modified=1546
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNameHonorificSuffixs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_nameHonorificSuffix "nco:nameHonorificSuffix" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNameHonorificSuffixs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::nameHonorificSuffix >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNameHonorificSuffixs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_nameHonorificSuffix "nco:nameHonorificSuffix" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNameHonorificSuffixs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::nameHonorificSuffix >(object_info, strategy, parent); }
				/*!
					\fn void setNameHonorificSuffixs(LiveNodes const &nameHonorificSuffix_)
					
					
					Sets the property \ref nco_nameHonorificSuffix "nco:nameHonorificSuffix" set to the given \a nameHonorificSuffix_ set.
					\sa LiveResource::setObjects
				 */
				void setNameHonorificSuffixs(LiveNodes const &nameHonorificSuffix_) { baseSetObjects(nco::nameHonorificSuffix::iri(), nameHonorificSuffix_); }
				/*!
					\fn void removeNameHonorificSuffixs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_nameHonorificSuffix "nco:nameHonorificSuffix" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNameHonorificSuffixs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::nameHonorificSuffix::iri(), object_info); }
				/*!
					\fn QString getNameHonorificSuffix()
					
					
					Returns the property \ref nco_nameHonorificSuffix "nco:nameHonorificSuffix". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getNameHonorificSuffix() { return baseGetObject< nco::nameHonorificSuffix >(); }
				/*!
					\fn void setNameHonorificSuffix(QString const &nameHonorificSuffix_)
					
					
					Sets the property \ref nco_nameHonorificSuffix "nco:nameHonorificSuffix" to the given \a nameHonorificSuffix.
					\sa LiveResource::setObject
				 */
				void setNameHonorificSuffix(QString const &nameHonorificSuffix_) { baseSetObject< nco::nameHonorificSuffix >( nameHonorificSuffix_ ); }
				/*!
					\fn QString firstNameHonorificSuffix()
					
					
					Returns the first property \ref nco_nameHonorificSuffix "nco:nameHonorificSuffix". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstNameHonorificSuffix() { return baseFirstObject< nco::nameHonorificSuffix >(); }
				/*!
					\fn void addNameHonorificSuffix(QString const &nameHonorificSuffix_)
					
					
					Adds the given \a nameHonorificSuffix_ to the property \ref nco_nameHonorificSuffix "nco:nameHonorificSuffix" set.
					\sa LiveResource::addObject
				 */
				void addNameHonorificSuffix(QString const &nameHonorificSuffix_) { baseAddObject< nco::nameHonorificSuffix >( nameHonorificSuffix_ ); }
				/*!
					\fn void removeNameHonorificSuffix(QString const &nameHonorificSuffix_)
					
					
					Removes the given \a nameHonorificSuffix_ from the property \ref nco_nameHonorificSuffix "nco:nameHonorificSuffix" set.
					\sa LiveResource::removeObject
				 */
				void removeNameHonorificSuffix(QString const &nameHonorificSuffix_) { baseRemoveObject< nco::nameHonorificSuffix >(nameHonorificSuffix_); }
				 //@}
			};

			/*! Class generated from nco:IMContact
			 * \ingroup onto_nco_classes
			 * Contact coming from an IM Account. This has been deprecated in favor of using nco:PersonContact with nco:hasIMAddress.
			 * This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * 
			 * rdfs:label = IM Contact
			 * 
			 * tracker:modified = 1446
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class IMContact
				: public virtual PersonContact

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IMContact"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PersonContact, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<IMContact> Live;
				IMContact() { this->attachInterfaceHelper< IMContact >(); }
				~IMContact() { this->detachInterfaceHelper< IMContact >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:fromIMAccount
				 * \n Indicates that an Instant Messaging account owned by an entity represented by this contact. This has been replaced by nco:fromIMAccount.
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:range=nco:IMAccount
				 * \n rdfs:label=hasIMAccount
				 * \n tracker:modified=1301
				 * \n rdfs:domain=nco:IMContact
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFromIMAccounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::fromIMAccount for replacement
					Returns a live model of property \ref nco_fromIMAccount "nco:fromIMAccount" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveFromIMAccounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::fromIMAccount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFromIMAccounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::fromIMAccount for replacement
					Returns all current values of property \ref nco_fromIMAccount "nco:fromIMAccount" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getFromIMAccounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::fromIMAccount >(object_info, strategy, parent); }
				/*!
					\fn void setFromIMAccounts(LiveNodes const &fromIMAccount_)
					
					\deprecated See \ref nco::fromIMAccount for replacement
					Sets the property \ref nco_fromIMAccount "nco:fromIMAccount" set to the given \a fromIMAccount_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setFromIMAccounts(LiveNodes const &fromIMAccount_) { baseSetObjects(nco::fromIMAccount::iri(), fromIMAccount_); }
				/*!
					\fn void removeFromIMAccounts(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nco::fromIMAccount for replacement
					Removes the properties from property \ref nco_fromIMAccount "nco:fromIMAccount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeFromIMAccounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::fromIMAccount::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< IMAccount > firstFromIMAccount()
					
					\deprecated See \ref nco::fromIMAccount for replacement
					Returns the first property \ref nco_fromIMAccount "nco:fromIMAccount". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< IMAccount > firstFromIMAccount() { return baseFirstObject< nco::fromIMAccount >(); }
				/*!
					\fn ::SopranoLive::Live< IMAccount > addFromIMAccount()
					
					\deprecated See \ref nco::fromIMAccount for replacement
					Adds a new uniquely named resource to the property \ref nco_fromIMAccount "nco:fromIMAccount" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< IMAccount > addFromIMAccount() { return baseAddObject< nco::fromIMAccount >(); }
				/*!
					\fn ::SopranoLive::Live< IMAccount > addFromIMAccount(::SopranoLive::Live< IMAccount > const &fromIMAccount_)
					
					\deprecated See \ref nco::fromIMAccount for replacement
					Adds the given \a fromIMAccount_ to the property \ref nco_fromIMAccount "nco:fromIMAccount" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< IMAccount > addFromIMAccount(::SopranoLive::Live< IMAccount > const &fromIMAccount_) { return baseAddObject< nco::fromIMAccount >( fromIMAccount_ ); }
				/*!
					\fn void removeFromIMAccount(::SopranoLive::Live< IMAccount > const &fromIMAccount_)
					
					\deprecated See \ref nco::fromIMAccount for replacement
					Removes the given \a fromIMAccount_ from the property \ref nco_fromIMAccount "nco:fromIMAccount" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeFromIMAccount(::SopranoLive::Live< IMAccount > const &fromIMAccount_) { baseRemoveObject< nco::fromIMAccount >(fromIMAccount_); }

				/* Property generated from nco:imContactStatusMessage
				 * \n Status message of the user in a service. This has been replaced by nco:imStatusMessage.
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=imContactStatusMessage
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:IMContact
				 * \n tracker:modified=1645
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImContactStatusMessages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::imContactStatusMessage for replacement
					Returns a live model of property \ref nco_imContactStatusMessage "nco:imContactStatusMessage" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveImContactStatusMessages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imContactStatusMessage >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImContactStatusMessages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::imContactStatusMessage for replacement
					Returns all current values of property \ref nco_imContactStatusMessage "nco:imContactStatusMessage" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getImContactStatusMessages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imContactStatusMessage >(object_info, strategy, parent); }
				/*!
					\fn void setImContactStatusMessages(LiveNodes const &imContactStatusMessage_)
					
					\deprecated See \ref nco::imContactStatusMessage for replacement
					Sets the property \ref nco_imContactStatusMessage "nco:imContactStatusMessage" set to the given \a imContactStatusMessage_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setImContactStatusMessages(LiveNodes const &imContactStatusMessage_) { baseSetObjects(nco::imContactStatusMessage::iri(), imContactStatusMessage_); }
				/*!
					\fn void removeImContactStatusMessages(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nco::imContactStatusMessage for replacement
					Removes the properties from property \ref nco_imContactStatusMessage "nco:imContactStatusMessage" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeImContactStatusMessages(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imContactStatusMessage::iri(), object_info); }
				/*!
					\fn QString getImContactStatusMessage()
					
					\deprecated See \ref nco::imContactStatusMessage for replacement
					Returns the property \ref nco_imContactStatusMessage "nco:imContactStatusMessage". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED QString getImContactStatusMessage() { return baseGetObject< nco::imContactStatusMessage >(); }
				/*!
					\fn void setImContactStatusMessage(QString const &imContactStatusMessage_)
					
					\deprecated See \ref nco::imContactStatusMessage for replacement
					Sets the property \ref nco_imContactStatusMessage "nco:imContactStatusMessage" to the given \a imContactStatusMessage.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED void setImContactStatusMessage(QString const &imContactStatusMessage_) { baseSetObject< nco::imContactStatusMessage >( imContactStatusMessage_ ); }
				/*!
					\fn QString firstImContactStatusMessage()
					
					\deprecated See \ref nco::imContactStatusMessage for replacement
					Returns the first property \ref nco_imContactStatusMessage "nco:imContactStatusMessage". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED QString firstImContactStatusMessage() { return baseFirstObject< nco::imContactStatusMessage >(); }
				/*!
					\fn void addImContactStatusMessage(QString const &imContactStatusMessage_)
					
					\deprecated See \ref nco::imContactStatusMessage for replacement
					Adds the given \a imContactStatusMessage_ to the property \ref nco_imContactStatusMessage "nco:imContactStatusMessage" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addImContactStatusMessage(QString const &imContactStatusMessage_) { baseAddObject< nco::imContactStatusMessage >( imContactStatusMessage_ ); }
				/*!
					\fn void removeImContactStatusMessage(QString const &imContactStatusMessage_)
					
					\deprecated See \ref nco::imContactStatusMessage for replacement
					Removes the given \a imContactStatusMessage_ from the property \ref nco_imContactStatusMessage "nco:imContactStatusMessage" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeImContactStatusMessage(QString const &imContactStatusMessage_) { baseRemoveObject< nco::imContactStatusMessage >(imContactStatusMessage_); }

				/* Property generated from nco:imContactId
				 * \n ID of the contact in the service like my.friend@xmail.com. This has been replaced by nco:imId.
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=imContactId
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:IMContact
				 * \n tracker:modified=1324
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImContactIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::imContactId for replacement
					Returns a live model of property \ref nco_imContactId "nco:imContactId" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveImContactIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imContactId >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImContactIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::imContactId for replacement
					Returns all current values of property \ref nco_imContactId "nco:imContactId" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getImContactIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imContactId >(object_info, strategy, parent); }
				/*!
					\fn void setImContactIds(LiveNodes const &imContactId_)
					
					\deprecated See \ref nco::imContactId for replacement
					Sets the property \ref nco_imContactId "nco:imContactId" set to the given \a imContactId_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setImContactIds(LiveNodes const &imContactId_) { baseSetObjects(nco::imContactId::iri(), imContactId_); }
				/*!
					\fn void removeImContactIds(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nco::imContactId for replacement
					Removes the properties from property \ref nco_imContactId "nco:imContactId" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeImContactIds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imContactId::iri(), object_info); }
				/*!
					\fn QString getImContactId()
					
					\deprecated See \ref nco::imContactId for replacement
					Returns the property \ref nco_imContactId "nco:imContactId". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED QString getImContactId() { return baseGetObject< nco::imContactId >(); }
				/*!
					\fn void setImContactId(QString const &imContactId_)
					
					\deprecated See \ref nco::imContactId for replacement
					Sets the property \ref nco_imContactId "nco:imContactId" to the given \a imContactId.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED void setImContactId(QString const &imContactId_) { baseSetObject< nco::imContactId >( imContactId_ ); }
				/*!
					\fn QString firstImContactId()
					
					\deprecated See \ref nco::imContactId for replacement
					Returns the first property \ref nco_imContactId "nco:imContactId". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED QString firstImContactId() { return baseFirstObject< nco::imContactId >(); }
				/*!
					\fn void addImContactId(QString const &imContactId_)
					
					\deprecated See \ref nco::imContactId for replacement
					Adds the given \a imContactId_ to the property \ref nco_imContactId "nco:imContactId" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addImContactId(QString const &imContactId_) { baseAddObject< nco::imContactId >( imContactId_ ); }
				/*!
					\fn void removeImContactId(QString const &imContactId_)
					
					\deprecated See \ref nco::imContactId for replacement
					Removes the given \a imContactId_ from the property \ref nco_imContactId "nco:imContactId" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeImContactId(QString const &imContactId_) { baseRemoveObject< nco::imContactId >(imContactId_); }

				/* Property generated from nco:imContactNickname
				 * \n Visible nickname of the user in a service. This has been replaced by nco:imNickname.
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=imContactNickname
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nco:IMContact
				 * \n tracker:modified=1308
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImContactNicknames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::imContactNickname for replacement
					Returns a live model of property \ref nco_imContactNickname "nco:imContactNickname" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveImContactNicknames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imContactNickname >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImContactNicknames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::imContactNickname for replacement
					Returns all current values of property \ref nco_imContactNickname "nco:imContactNickname" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getImContactNicknames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imContactNickname >(object_info, strategy, parent); }
				/*!
					\fn void setImContactNicknames(LiveNodes const &imContactNickname_)
					
					\deprecated See \ref nco::imContactNickname for replacement
					Sets the property \ref nco_imContactNickname "nco:imContactNickname" set to the given \a imContactNickname_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setImContactNicknames(LiveNodes const &imContactNickname_) { baseSetObjects(nco::imContactNickname::iri(), imContactNickname_); }
				/*!
					\fn void removeImContactNicknames(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nco::imContactNickname for replacement
					Removes the properties from property \ref nco_imContactNickname "nco:imContactNickname" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeImContactNicknames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imContactNickname::iri(), object_info); }
				/*!
					\fn QString getImContactNickname()
					
					\deprecated See \ref nco::imContactNickname for replacement
					Returns the property \ref nco_imContactNickname "nco:imContactNickname". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED QString getImContactNickname() { return baseGetObject< nco::imContactNickname >(); }
				/*!
					\fn void setImContactNickname(QString const &imContactNickname_)
					
					\deprecated See \ref nco::imContactNickname for replacement
					Sets the property \ref nco_imContactNickname "nco:imContactNickname" to the given \a imContactNickname.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED void setImContactNickname(QString const &imContactNickname_) { baseSetObject< nco::imContactNickname >( imContactNickname_ ); }
				/*!
					\fn QString firstImContactNickname()
					
					\deprecated See \ref nco::imContactNickname for replacement
					Returns the first property \ref nco_imContactNickname "nco:imContactNickname". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED QString firstImContactNickname() { return baseFirstObject< nco::imContactNickname >(); }
				/*!
					\fn void addImContactNickname(QString const &imContactNickname_)
					
					\deprecated See \ref nco::imContactNickname for replacement
					Adds the given \a imContactNickname_ to the property \ref nco_imContactNickname "nco:imContactNickname" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addImContactNickname(QString const &imContactNickname_) { baseAddObject< nco::imContactNickname >( imContactNickname_ ); }
				/*!
					\fn void removeImContactNickname(QString const &imContactNickname_)
					
					\deprecated See \ref nco::imContactNickname for replacement
					Removes the given \a imContactNickname_ from the property \ref nco_imContactNickname "nco:imContactNickname" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeImContactNickname(QString const &imContactNickname_) { baseRemoveObject< nco::imContactNickname >(imContactNickname_); }

				/* Property generated from nco:imContactPresence
				 * \n Online availability of the user in a service. This has been replaced by nco:imPresence.
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=imContactPresence
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:PresenceStatus
				 * \n rdfs:domain=nco:IMContact
				 * \n tracker:modified=1640
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImContactPresences(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::imContactPresence for replacement
					Returns a live model of property \ref nco_imContactPresence "nco:imContactPresence" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveImContactPresences(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imContactPresence >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImContactPresences(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::imContactPresence for replacement
					Returns all current values of property \ref nco_imContactPresence "nco:imContactPresence" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getImContactPresences(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imContactPresence >(object_info, strategy, parent); }
				/*!
					\fn void setImContactPresences(LiveNodes const &imContactPresence_)
					
					\deprecated See \ref nco::imContactPresence for replacement
					Sets the property \ref nco_imContactPresence "nco:imContactPresence" set to the given \a imContactPresence_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setImContactPresences(LiveNodes const &imContactPresence_) { baseSetObjects(nco::imContactPresence::iri(), imContactPresence_); }
				/*!
					\fn void removeImContactPresences(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nco::imContactPresence for replacement
					Removes the properties from property \ref nco_imContactPresence "nco:imContactPresence" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeImContactPresences(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imContactPresence::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< PresenceStatus > getImContactPresence()
					
					\deprecated See \ref nco::imContactPresence for replacement
					Returns the property \ref nco_imContactPresence "nco:imContactPresence". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< PresenceStatus > getImContactPresence() { return baseGetObject< nco::imContactPresence >(); }
				/*!
					\fn ::SopranoLive::Live< PresenceStatus > setImContactPresence(::SopranoLive::Live< PresenceStatus > const &imContactPresence_)
					
					\deprecated See \ref nco::imContactPresence for replacement
					Sets the property \ref nco_imContactPresence "nco:imContactPresence" to the given \a imContactPresence.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< PresenceStatus > setImContactPresence(::SopranoLive::Live< PresenceStatus > const &imContactPresence_) { return baseSetObject< nco::imContactPresence >( imContactPresence_ ); }
				/*!
					\fn ::SopranoLive::Live< PresenceStatus > firstImContactPresence()
					
					\deprecated See \ref nco::imContactPresence for replacement
					Returns the first property \ref nco_imContactPresence "nco:imContactPresence". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< PresenceStatus > firstImContactPresence() { return baseFirstObject< nco::imContactPresence >(); }
				/*!
					\fn ::SopranoLive::Live< PresenceStatus > addImContactPresence()
					
					\deprecated See \ref nco::imContactPresence for replacement
					Adds a new uniquely named resource to the property \ref nco_imContactPresence "nco:imContactPresence" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< PresenceStatus > addImContactPresence() { return baseAddObject< nco::imContactPresence >(); }
				/*!
					\fn ::SopranoLive::Live< PresenceStatus > addImContactPresence(::SopranoLive::Live< PresenceStatus > const &imContactPresence_)
					
					\deprecated See \ref nco::imContactPresence for replacement
					Adds the given \a imContactPresence_ to the property \ref nco_imContactPresence "nco:imContactPresence" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< PresenceStatus > addImContactPresence(::SopranoLive::Live< PresenceStatus > const &imContactPresence_) { return baseAddObject< nco::imContactPresence >( imContactPresence_ ); }
				/*!
					\fn void removeImContactPresence(::SopranoLive::Live< PresenceStatus > const &imContactPresence_)
					
					\deprecated See \ref nco::imContactPresence for replacement
					Removes the given \a imContactPresence_ from the property \ref nco_imContactPresence "nco:imContactPresence" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeImContactPresence(::SopranoLive::Live< PresenceStatus > const &imContactPresence_) { baseRemoveObject< nco::imContactPresence >(imContactPresence_); }

				/* Property generated from nco:imContactCapability
				 * \n Capabilities of an IM Contact, what can we interact with him. This has been replaced by nco:imCapability.
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:range=nco:IMCapability
				 * \n rdfs:label=imContact Capability
				 * \n tracker:modified=1854
				 * \n rdfs:domain=nco:IMContact
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveImContactCapabilitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::imContactCapability for replacement
					Returns a live model of property \ref nco_imContactCapability "nco:imContactCapability" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveImContactCapabilitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::imContactCapability >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImContactCapabilitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nco::imContactCapability for replacement
					Returns all current values of property \ref nco_imContactCapability "nco:imContactCapability" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getImContactCapabilitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::imContactCapability >(object_info, strategy, parent); }
				/*!
					\fn void setImContactCapabilitys(LiveNodes const &imContactCapability_)
					
					\deprecated See \ref nco::imContactCapability for replacement
					Sets the property \ref nco_imContactCapability "nco:imContactCapability" set to the given \a imContactCapability_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setImContactCapabilitys(LiveNodes const &imContactCapability_) { baseSetObjects(nco::imContactCapability::iri(), imContactCapability_); }
				/*!
					\fn void removeImContactCapabilitys(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nco::imContactCapability for replacement
					Removes the properties from property \ref nco_imContactCapability "nco:imContactCapability" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeImContactCapabilitys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::imContactCapability::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< IMCapability > firstImContactCapability()
					
					\deprecated See \ref nco::imContactCapability for replacement
					Returns the first property \ref nco_imContactCapability "nco:imContactCapability". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< IMCapability > firstImContactCapability() { return baseFirstObject< nco::imContactCapability >(); }
				/*!
					\fn ::SopranoLive::Live< IMCapability > addImContactCapability()
					
					\deprecated See \ref nco::imContactCapability for replacement
					Adds a new uniquely named resource to the property \ref nco_imContactCapability "nco:imContactCapability" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< IMCapability > addImContactCapability() { return baseAddObject< nco::imContactCapability >(); }
				/*!
					\fn ::SopranoLive::Live< IMCapability > addImContactCapability(::SopranoLive::Live< IMCapability > const &imContactCapability_)
					
					\deprecated See \ref nco::imContactCapability for replacement
					Adds the given \a imContactCapability_ to the property \ref nco_imContactCapability "nco:imContactCapability" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< IMCapability > addImContactCapability(::SopranoLive::Live< IMCapability > const &imContactCapability_) { return baseAddObject< nco::imContactCapability >( imContactCapability_ ); }
				/*!
					\fn void removeImContactCapability(::SopranoLive::Live< IMCapability > const &imContactCapability_)
					
					\deprecated See \ref nco::imContactCapability for replacement
					Removes the given \a imContactCapability_ from the property \ref nco_imContactCapability "nco:imContactCapability" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeImContactCapability(::SopranoLive::Live< IMCapability > const &imContactCapability_) { baseRemoveObject< nco::imContactCapability >(imContactCapability_); }
				 //@}
			};

			/*! Class generated from nco:InternationalDeliveryAddress
			 * \ingroup onto_nco_classes
			 * International Delivery Addresse. Class inspired by TYPE=intl parameter of the ADR property defined in RFC 2426 sec. 3.2.1
			 * 
			 * rdfs:label = InternationalDeliveryAddress
			 * 
			 * tracker:modified = 1044
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class InternationalDeliveryAddress
				: public virtual PostalAddress

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#InternationalDeliveryAddress"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PostalAddress, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<InternationalDeliveryAddress> Live;
				InternationalDeliveryAddress() { this->attachInterfaceHelper< InternationalDeliveryAddress >(); }
				~InternationalDeliveryAddress() { this->detachInterfaceHelper< InternationalDeliveryAddress >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:IsdnNumber
			 * \ingroup onto_nco_classes
			 * An ISDN phone number. Inspired by the (TYPE=isdn) parameter of the TEL property as defined in RFC 2426 sec  3.3.1.
			 * 
			 * rdfs:label = IsdnNumber
			 * 
			 * tracker:modified = 1884
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class IsdnNumber
				: public virtual VoicePhoneNumber

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IsdnNumber"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<VoicePhoneNumber, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<IsdnNumber> Live;
				IsdnNumber() { this->attachInterfaceHelper< IsdnNumber >(); }
				~IsdnNumber() { this->detachInterfaceHelper< IsdnNumber >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:MetaContact
			 * \ingroup onto_nco_classes
			 * A metacontact groups PersonContacts and IMContacts coming from different sources, indicating that are the same entity in the real world. This has been deprecated in favor of merged contacts. Linking multiple contacts to a single person without merging is the task of pimo:Person and pimo:groundingOccurrence.
			 * This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * 
			 * rdfs:label = MetaContact
			 * 
			 * tracker:modified = 1028
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_metacontact "nco:metacontact"
			 */
			class MetaContact
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#MetaContact"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MetaContact> Live;
				MetaContact() { this->attachInterfaceHelper< MetaContact >(); }
				~MetaContact() { this->detachInterfaceHelper< MetaContact >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:OrganizationContact
			 * \ingroup onto_nco_classes
			 * A Contact that denotes on Organization.
			 * 
			 * rdfs:label = OrganizationContact
			 * 
			 * tracker:modified = 1009
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_org "nco:org"
			 */
			class OrganizationContact
				: public virtual Contact

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#OrganizationContact"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Contact, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<OrganizationContact> Live;
				OrganizationContact() { this->attachInterfaceHelper< OrganizationContact >(); }
				~OrganizationContact() { this->detachInterfaceHelper< OrganizationContact >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nco:logo
				 * \n Logo of a company. Inspired by the LOGO property defined in RFC 2426 sec. 3.5.3
				 * \n rdfs:label=logo
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:domain=nco:OrganizationContact
				 * \n tracker:modified=1635
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nie::DataObject DataObject;
				/*!
					\fn LiveNodes liveLogos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_logo "nco:logo" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLogos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::logo >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLogos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_logo "nco:logo" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLogos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::logo >(object_info, strategy, parent); }
				/*!
					\fn void setLogos(LiveNodes const &logo_)
					
					
					Sets the property \ref nco_logo "nco:logo" set to the given \a logo_ set.
					\sa LiveResource::setObjects
				 */
				void setLogos(LiveNodes const &logo_) { baseSetObjects(nco::logo::iri(), logo_); }
				/*!
					\fn void removeLogos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_logo "nco:logo" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLogos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::logo::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > getLogo()
					
					
					Returns the property \ref nco_logo "nco:logo". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nie::DataObject > getLogo() { return baseGetObject< nco::logo >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > setLogo(::SopranoLive::Live< nie::DataObject > const &logo_)
					
					
					Sets the property \ref nco_logo "nco:logo" to the given \a logo.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nie::DataObject > setLogo(::SopranoLive::Live< nie::DataObject > const &logo_) { return baseSetObject< nco::logo >( logo_ ); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > firstLogo()
					
					
					Returns the first property \ref nco_logo "nco:logo". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nie::DataObject > firstLogo() { return baseFirstObject< nco::logo >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addLogo()
					
					
					Adds a new uniquely named resource to the property \ref nco_logo "nco:logo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addLogo() { return baseAddObject< nco::logo >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addLogo(::SopranoLive::Live< nie::DataObject > const &logo_)
					
					
					Adds the given \a logo_ to the property \ref nco_logo "nco:logo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addLogo(::SopranoLive::Live< nie::DataObject > const &logo_) { return baseAddObject< nco::logo >( logo_ ); }
				/*!
					\fn void removeLogo(::SopranoLive::Live< nie::DataObject > const &logo_)
					
					
					Removes the given \a logo_ from the property \ref nco_logo "nco:logo" set.
					\sa LiveResource::removeObject
				 */
				void removeLogo(::SopranoLive::Live< nie::DataObject > const &logo_) { baseRemoveObject< nco::logo >(logo_); }
				 //@}
			};

			/*! Class generated from nco:PagerNumber
			 * \ingroup onto_nco_classes
			 * A pager phone number. Inspired by the (TYPE=pager) parameter of the TEL property as defined in RFC 2426 sec  3.3.1.
			 * 
			 * rdfs:label = PagerNumber
			 * 
			 * tracker:modified = 1258
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class PagerNumber
				: public virtual MessagingNumber

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PagerNumber"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<MessagingNumber, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<PagerNumber> Live;
				PagerNumber() { this->attachInterfaceHelper< PagerNumber >(); }
				~PagerNumber() { this->detachInterfaceHelper< PagerNumber >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:ParcelDeliveryAddress
			 * \ingroup onto_nco_classes
			 * Parcel Delivery Addresse. Class inspired by TYPE=parcel parameter of the ADR property defined in RFC 2426 sec. 3.2.1
			 * 
			 * rdfs:label = ParcelDeliveryAddress
			 * 
			 * tracker:modified = 1795
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class ParcelDeliveryAddress
				: public virtual PostalAddress

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#ParcelDeliveryAddress"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PostalAddress, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<ParcelDeliveryAddress> Live;
				ParcelDeliveryAddress() { this->attachInterfaceHelper< ParcelDeliveryAddress >(); }
				~ParcelDeliveryAddress() { this->detachInterfaceHelper< ParcelDeliveryAddress >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:PcsNumber
			 * \ingroup onto_nco_classes
			 * Personal Communication Services Number. A class inspired by the TYPE=pcs parameter of the TEL property defined in RFC 2426 sec. 3.3.1
			 * 
			 * rdfs:label = PcsNumber
			 * 
			 * tracker:modified = 1102
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class PcsNumber
				: public virtual VoicePhoneNumber

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PcsNumber"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<VoicePhoneNumber, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<PcsNumber> Live;
				PcsNumber() { this->attachInterfaceHelper< PcsNumber >(); }
				~PcsNumber() { this->detachInterfaceHelper< PcsNumber >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:PresenceStatus
			 * \ingroup onto_nco_classes
			 * Predefined set of status level instances
			 * 
			 * rdfs:label = Presence statuses
			 * 
			 * tracker:modified = 1039
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nco_presence_status_hidden "nco:presence-status-hidden"
			 * 		\ref nco_presence_status_error "nco:presence-status-error"
			 * 		\ref nco_presence_status_extended_away "nco:presence-status-extended-away"
			 * 		\ref nco_presence_status_offline "nco:presence-status-offline"
			 * 		\ref nco_presence_status_away "nco:presence-status-away"
			 * 		\ref nco_presence_status_available "nco:presence-status-available"
			 * 		\ref nco_presence_status_busy "nco:presence-status-busy"
			 * 		\ref nco_presence_status_unset "nco:presence-status-unset"
			 * 		\ref nco_presence_status_unknown "nco:presence-status-unknown"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nco_imPresence "nco:imPresence"
			 * 		\ref nco_imContactPresence "nco:imContactPresence"
			 */
			class PresenceStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PresenceStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<PresenceStatus> Live;
				PresenceStatus() { this->attachInterfaceHelper< PresenceStatus >(); }
				~PresenceStatus() { this->detachInterfaceHelper< PresenceStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nco:VideoTelephoneNumber
			 * \ingroup onto_nco_classes
			 * A Video telephone number. A class inspired by the TYPE=video parameter of the TEL property defined in RFC 2426 sec. 3.3.1
			 * 
			 * rdfs:label = VideoTelephoneNumber
			 * 
			 * tracker:modified = 1824
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class VideoTelephoneNumber
				: public virtual VoicePhoneNumber

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#VideoTelephoneNumber"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<VoicePhoneNumber, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nco Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<VideoTelephoneNumber> Live;
				VideoTelephoneNumber() { this->attachInterfaceHelper< VideoTelephoneNumber >(); }
				~VideoTelephoneNumber() { this->detachInterfaceHelper< VideoTelephoneNumber >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::Affiliation::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::AuthorizationStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::BbsNumber::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::CarPhoneNumber::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::CellPhoneNumber::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::Contact::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::ContactGroup::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::ContactList::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::ContactListDataObject::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::ContactMedium::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::DomesticDeliveryAddress::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::EmailAddress::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::FaxNumber::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::Gender::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::IMAccount::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::IMAddress::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::IMCapability::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::IMContact::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::InternationalDeliveryAddress::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::IsdnNumber::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::MessagingNumber::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::MetaContact::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::ModemNumber::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::OrganizationContact::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::PagerNumber::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::ParcelDeliveryAddress::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::PcsNumber::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::PersonContact::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::PhoneNumber::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::PostalAddress::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::PresenceStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::Role::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::VideoTelephoneNumber::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nco::VoicePhoneNumber::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_NCO_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_NCO_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_NCO_H_POST_INCLUDES
#include <QtTracker/ontologies/scal.h>
#include <QtTracker/ontologies/ncal.h>
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#endif
