/*
 * ncal.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:24.874676
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/ncal.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_NCAL_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_NCAL_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_ncal_classes namespace ncal class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_ncal_properties namespace ncal property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_ncal_resources namespace ncal resource definitions
		 *  @{
		 *  @}
		 */
		static const char ncal_namespace_prefix[] = "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#";
		struct Ontology_ncal
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(ncal_namespace_prefix) + suffix;
			}
		};
		namespace ncal
		{
			inline QUrl iri(QString suffix) { return Ontology_ncal::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class AccessClassification;
			class Alarm;
			class AlarmAction;
			class Attachment;
			class AttachmentEncoding;
			class Attendee;
			class AttendeeOrOrganizer;
			class AttendeeRole;
			class BydayRulePart;
			class Calendar;
			class CalendarDataObject;
			class CalendarScale;
			class CalendarUserType;
			class Event;
			class EventStatus;
			class Freebusy;
			class FreebusyPeriod;
			class FreebusyType;
			class Journal;
			class JournalStatus;
			class NcalDateTime;
			class NcalPeriod;
			class NcalTimeEntity;
			class Organizer;
			class ParticipationStatus;
			class RecurrenceFrequency;
			class RecurrenceIdentifier;
			class RecurrenceIdentifierRange;
			class RecurrenceRule;
			class RequestStatus;
			class TimeTransparency;
			class Timezone;
			class TimezoneObservance;
			class Todo;
			class TodoStatus;
			class Trigger;
			class TriggerRelation;
			class UnionParentClass;
			class Weekday;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NCAL_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NCAL_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NCAL_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace ncal
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from ncal:action
			 * \anchor ncal_action
			 * \n This property defines the action to be invoked when an alarm is triggered. Inspired by RFC 2445 sec 4.8.6.1. Originally this property had a limited set of values. They are expressed as instances of the AlarmAction class.
			 * \n rdfs:range=ncal:AlarmAction
			 * \n rdfs:label=action
			 * \n tracker:modified=1807
			 * \n rdfs:domain=ncal:Alarm
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class action
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#action"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Alarm Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Alarm RDFDomain;
				/// The localized c++ range type of this property
				typedef AlarmAction Range;
				/// The full, non-localized rdf range type of this property
				typedef AlarmAction RDFRange;
			};
			/*! Property generated from ncal:repeat
			 * \anchor ncal_repeat
			 * \n This property defines the number of time the alarm should be repeated, after the initial trigger. Inspired by RFC 2445 sec. 4.8.6.2
			 * \n rdfs:label=repeat
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=ncal:Alarm
			 * \n tracker:modified=1419
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class repeat
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#repeat"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Alarm Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Alarm RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:attachmentUri
			 * \anchor ncal_attachmentUri
			 * \n The uri of the attachment. Created to express the actual value of the ATTACH property defined in RFC 2445 sec. 4.8.1.1. This property expresses the default URI datatype of that property. see ncal:attachmentContents for the BINARY datatype.
			 * \n rdfs:label=attachmentUri
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=ncal:Attachment
			 * \n tracker:modified=1512
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class attachmentUri
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#attachmentUri"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attachment Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attachment RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from ncal:fmttype
			 * \anchor ncal_fmttype
			 * \n To specify the content type of a referenced object. Inspired by RFC 2445 sec. 4.2.8. The value of this property should be an IANA-registered content type (e.g. application/binary)
			 * \n rdfs:label=fmttype
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:Attachment
			 * \n tracker:modified=1592
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class fmttype
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#fmttype"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Attachment Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attachment RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:encoding
			 * \anchor ncal_encoding
			 * \n To specify an alternate inline encoding for the property value. Inspired by RFC 2445 sec. 4.2.7. Originally this property had a limited vocabulary. ('8BIT' and 'BASE64'). The terms of this vocabulary have been expressed as instances of the AttachmentEncoding class
			 * \n rdfs:label=encoding
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:AttachmentEncoding
			 * \n rdfs:domain=ncal:Attachment
			 * \n tracker:modified=1470
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class encoding
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#encoding"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attachment Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attachment RDFDomain;
				/// The localized c++ range type of this property
				typedef AttachmentEncoding Range;
				/// The full, non-localized rdf range type of this property
				typedef AttachmentEncoding RDFRange;
			};
			/*! Property generated from ncal:attachmentContent
			 * \anchor ncal_attachmentContent
			 * \n The uri of the attachment. Created to express the actual value of the ATTACH property defined in RFC 2445 sec. 4.8.1.1. This property expresses the BINARY datatype of that property. see ncal:attachmentUri for the URI datatype.
			 * \n rdfs:label=attachmentContent
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:Attachment
			 * \n tracker:modified=1130
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class attachmentContent
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#attachmentContent"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Attachment Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attachment RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:delegatedTo
			 * \anchor ncal_delegatedTo
			 * \n To specify the calendar users to whom the calendar user specified by the property has delegated participation. Inspired by RFC 2445 sec. 4.2.5. Originally the value type for this parameter was CAL-ADDRESS. This has been expressed as nco:Contact to promote integration between NCAL and NCO.
			 * \n rdfs:label=delegatedTo
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=ncal:Attendee
			 * \n tracker:modified=1255
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class delegatedTo
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#delegatedTo"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from ncal:delegatedFrom
			 * \anchor ncal_delegatedFrom
			 * \n To specify the calendar users that have delegated their participation to the calendar user specified by the property. Inspired by RFC 2445 sec. 4.2.4. Originally the value type for this property was CAL-ADDRESS. This has been expressed as nco:Contact to promote integration between NCAL and NCO.
			 * \n rdfs:label=delegatedFrom
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=ncal:Attendee
			 * \n tracker:modified=1926
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class delegatedFrom
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#delegatedFrom"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from ncal:cutype
			 * \anchor ncal_cutype
			 * \n To specify the type of calendar user specified by the property. Inspired by RFC 2445 sec. 4.2.3. This parameter has a limited vocabulary. The terms that may serve as values for this property have been expressed as instances of CalendarUserType class. The user may use instances provided with this ontology or create his own.
			 * \n rdfs:label=cutype
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:CalendarUserType
			 * \n rdfs:domain=ncal:Attendee
			 * \n tracker:modified=1620
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class cutype
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#cutype"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef CalendarUserType Range;
				/// The full, non-localized rdf range type of this property
				typedef CalendarUserType RDFRange;
			};
			/*! Property generated from ncal:member
			 * \anchor ncal_member
			 * \n To specify the group or list membership of the calendar user specified by the property. Inspired by RFC 2445 sec. 4.2.11. Originally this parameter had a value type of CAL-ADDRESS. This has been expressed as nco:Contact to promote integration between NCAL and NCO
			 * \n rdfs:label=member
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=ncal:Attendee
			 * \n tracker:modified=1326
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class member
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#member"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from ncal:role
			 * \anchor ncal_role
			 * \n To specify the participation role for the calendar user specified by the property. Inspired by the RFC 2445 sec. 4.2.16. Originally this property had a limited vocabulary for values. The terms of that vocabulary have been expressed as instances of the AttendeeRole class.
			 * \n rdfs:label=role
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:AttendeeRole
			 * \n rdfs:domain=ncal:Attendee
			 * \n tracker:modified=1951
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class role
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#role"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef AttendeeRole Range;
				/// The full, non-localized rdf range type of this property
				typedef AttendeeRole RDFRange;
			};
			/*! Property generated from ncal:rsvp
			 * \anchor ncal_rsvp
			 * \n To specify whether there is an expectation of a favor of a reply from the calendar user specified by the property value. Inspired by RFC 2445 sec. 4.2.17
			 * \n rdfs:label=rsvp
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=ncal:Attendee
			 * \n tracker:modified=1001
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class rsvp
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#rsvp"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from ncal:partstat
			 * \anchor ncal_partstat
			 * \n To specify the participation status for the calendar user specified by the property. Inspired by RFC 2445 sec. 4.2.12. Originally this parameter had three sets of allowed values. Which set applied to a particular case - depended on the type of calendar entity this parameter occured in. (event, todo, journal entry). This would be awkward to model in RDF so a single ParticipationStatus class has been introduced. Terms of the values vocabulary are expressed as instances of this class. Users are advised to pay attention which instances they use.
			 * \n rdfs:label=partstat
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:ParticipationStatus
			 * \n rdfs:domain=ncal:Attendee
			 * \n tracker:modified=1431
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class partstat
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#partstat"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef ParticipationStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef ParticipationStatus RDFRange;
			};
			/*! Property generated from ncal:dir
			 * \anchor ncal_dir
			 * \n Specifies a reference to a directory entry associated with the calendar user specified by the property. Inspired by RFC 2445 sec. 4.2.6. Originally the data type of the value of this parameter was URI (Usually an LDAP URI). This has been expressed as rdfs:resource.
			 * \n rdfs:label=dir
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=ncal:AttendeeOrOrganizer
			 * \n tracker:modified=1288
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class dir
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#dir"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef AttendeeOrOrganizer Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef AttendeeOrOrganizer RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from ncal:involvedContact
			 * \anchor ncal_involvedContact
			 * \n A contact of the Attendee or the organizer involved in an event or other calendar entity. This property has been introduced to express the actual value of the ATTENDEE and ORGANIZER properties. The contact will also represent the CN parameter of those properties. See documentation of ncal:attendee or ncal:organizer for more details.
			 * \n rdfs:label=involvedContact
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=ncal:AttendeeOrOrganizer
			 * \n tracker:modified=1366
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class involvedContact
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#involvedContact"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef AttendeeOrOrganizer Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef AttendeeOrOrganizer RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from ncal:sentBy
			 * \anchor ncal_sentBy
			 * \n To specify the calendar user that is acting on behalf of the calendar user specified by the property. Inspired by RFC 2445 sec. 4.2.18. The original data type of this property was a mailto: URI. This has been changed to nco:Contact to promote integration between NCO and NCAL.
			 * \n rdfs:label=sentBy
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=ncal:AttendeeOrOrganizer
			 * \n tracker:modified=1549
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class sentBy
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#sentBy"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef AttendeeOrOrganizer Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef AttendeeOrOrganizer RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from ncal:bydayModifier
			 * \anchor ncal_bydayModifier
			 * \n A n integer modifier for the BYDAY rule part. Each BYDAY value can also be preceded by a positive (+n) or negative  (-n) integer. If present, this indicates the nth occurrence of the specific day within the MONTHLY or YEARLY RRULE. For example, within a MONTHLY rule, +1MO (or simply 1MO) represents the first Monday within the month, whereas -1MO represents the last Monday of the month. If an integer modifier is not present, it means all days of this type within the specified frequency. For example, within a MONTHLY rule, MO represents all Mondays within the month. Inspired by RFC 2445 sec. 4.3.10
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:label=bydayModifier
			 * \n tracker:modified=1352
			 * \n rdfs:domain=ncal:BydayRulePart
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class bydayModifier
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bydayModifier"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef BydayRulePart Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef BydayRulePart RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:bydayWeekday
			 * \anchor ncal_bydayWeekday
			 * \n Connects a BydayRulePath with a weekday.
			 * \n rdfs:range=ncal:Weekday
			 * \n rdfs:label=bydayWeekday
			 * \n tracker:modified=1624
			 * \n rdfs:domain=ncal:BydayRulePart
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class bydayWeekday
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bydayWeekday"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef BydayRulePart Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef BydayRulePart RDFDomain;
				/// The localized c++ range type of this property
				typedef Weekday Range;
				/// The full, non-localized rdf range type of this property
				typedef Weekday RDFRange;
			};
			/*! Property generated from ncal:component
			 * \anchor ncal_component
			 * \n Links the Vcalendar instance with the calendar components. This property has no direct equivalent in the RFC specification. It has been introduced to express the containmnent relations.
			 * \n rdfs:label=component
			 * \n rdfs:subPropertyOf=nie:hasPart
			 * \n rdfs:range=ncal:CalendarDataObject
			 * \n rdfs:domain=ncal:Calendar
			 * \n tracker:modified=1616
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class component
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#component"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Calendar Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Calendar RDFDomain;
				/// The localized c++ range type of this property
				typedef CalendarDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef CalendarDataObject RDFRange;
			};
			/*! Property generated from ncal:method
			 * \anchor ncal_method
			 * \n This property defines the iCalendar object method associated with the calendar object. Defined in RFC 2445 sec. 4.7.2
			 * \n rdfs:label=method
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:Calendar
			 * \n tracker:modified=1552
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class method
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#method"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Calendar Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Calendar RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:calscale
			 * \anchor ncal_calscale
			 * \n This property defines the calendar scale used for the calendar information specified in the iCalendar object. Defined in RFC 2445 sec. 4.7.1
			 * \n rdfs:label=calscale
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:CalendarScale
			 * \n rdfs:domain=ncal:Calendar
			 * \n tracker:modified=1483
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class calscale
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#calscale"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Calendar Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Calendar RDFDomain;
				/// The localized c++ range type of this property
				typedef CalendarScale Range;
				/// The full, non-localized rdf range type of this property
				typedef CalendarScale RDFRange;
			};
			/*! Property generated from ncal:prodid
			 * \anchor ncal_prodid
			 * \n This property specifies the identifier for the product that created the iCalendar object. Defined in RFC 2445 sec. 4.7.2
			 * \n rdfs:label=prodid
			 * \n rdfs:subPropertyOf=nie:generator
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:Calendar
			 * \n tracker:modified=1921
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class prodid
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#prodid"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Calendar Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Calendar RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:version
			 * \anchor ncal_version
			 * \n This property specifies the identifier corresponding to the highest version number or the minimum and maximum range of the iCalendar specification that is required in order to interpret the iCalendar object. Defined in RFC 2445 sec. 4.7.4
			 * \n rdfs:label=version
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:Calendar
			 * \n tracker:modified=1351
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class version
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#version"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Calendar Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Calendar RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:eventStatus
			 * \anchor ncal_eventStatus
			 * \n Defines the overall status or confirmation for an Event. Based on the STATUS property defined in RFC 2445 sec. 4.8.1.11.
			 * \n rdfs:label=status
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:EventStatus
			 * \n rdfs:domain=ncal:Event
			 * \n tracker:modified=1089
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class eventStatus
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#eventStatus"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Event Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Event RDFDomain;
				/// The localized c++ range type of this property
				typedef EventStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef EventStatus RDFRange;
			};
			/*! Property generated from ncal:transp
			 * \anchor ncal_transp
			 * \n Defines whether an event is transparent or not  to busy time searches. Inspired by RFC 2445 sec.4.8.2.7. Values for this property can be chosen from a limited vocabulary. To express this a TimeTransparency class has been introduced.
			 * \n rdfs:label=transp
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:TimeTransparency
			 * \n rdfs:domain=ncal:Event
			 * \n tracker:modified=1399
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class transp
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#transp"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Event Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Event RDFDomain;
				/// The localized c++ range type of this property
				typedef TimeTransparency Range;
				/// The full, non-localized rdf range type of this property
				typedef TimeTransparency RDFRange;
			};
			/*! Property generated from ncal:freebusy
			 * \anchor ncal_freebusy
			 * \n The property defines one or more free or busy time intervals. Inspired by RFC 2445 sec. 4.8.2.6. Note that the periods specified by this property can only be expressed with UTC times. Originally this property could have many comma-separated values. Please use a separate triple for each value.
			 * \n rdfs:range=ncal:FreebusyPeriod
			 * \n rdfs:label=freebusy
			 * \n tracker:modified=1088
			 * \n rdfs:domain=ncal:Freebusy
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class freebusy
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#freebusy"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Freebusy Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Freebusy RDFDomain;
				/// The localized c++ range type of this property
				typedef FreebusyPeriod Range;
				/// The full, non-localized rdf range type of this property
				typedef FreebusyPeriod RDFRange;
			};
			/*! Property generated from ncal:fbtype
			 * \anchor ncal_fbtype
			 * \n To specify the free or busy time type. Inspired by RFC 2445 sec. 4.2.9. The RFC specified a limited vocabulary for the values of this property. The terms of this vocabulary have been expressed as instances of the FreebusyType class. The user can use instances provided with this ontology or create his own.
			 * \n rdfs:label=fbtype
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:FreebusyType
			 * \n rdfs:domain=ncal:FreebusyPeriod
			 * \n tracker:modified=1354
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class fbtype
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#fbtype"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef FreebusyPeriod Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FreebusyPeriod RDFDomain;
				/// The localized c++ range type of this property
				typedef FreebusyType Range;
				/// The full, non-localized rdf range type of this property
				typedef FreebusyType RDFRange;
			};
			/*! Property generated from ncal:journalStatus
			 * \anchor ncal_journalStatus
			 * \n Defines the overall status or confirmation for a journal entry. Based on the STATUS property defined in RFC 2445 sec. 4.8.1.11.
			 * \n rdfs:label=status
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:JournalStatus
			 * \n rdfs:domain=ncal:Journal
			 * \n tracker:modified=1960
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class journalStatus
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#journalStatus"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Journal Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Journal RDFDomain;
				/// The localized c++ range type of this property
				typedef JournalStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef JournalStatus RDFRange;
			};
			/*! Property generated from ncal:ncalTimezone
			 * \anchor ncal_ncalTimezone
			 * \n The timezone instance that should be used to interpret an NcalDateTime. The purpose of this property is similar to the TZID parameter specified in RFC 2445 sec. 4.2.19
			 * \n rdfs:label=ncalTimezone
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:Timezone
			 * \n rdfs:domain=ncal:NcalDateTime
			 * \n tracker:modified=1184
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class ncalTimezone
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#ncalTimezone"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef NcalDateTime Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef NcalDateTime RDFDomain;
				/// The localized c++ range type of this property
				typedef Timezone Range;
				/// The full, non-localized rdf range type of this property
				typedef Timezone RDFRange;
			};
			/*! Property generated from ncal:date
			 * \anchor ncal_date
			 * \n Date an instance of NcalDateTime refers to. It was conceived to express values in DATE datatype specified in RFC 2445 4.3.4
			 * \n rdfs:label=date
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=ncal:NcalDateTime
			 * \n tracker:modified=1928
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class date
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#date"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef NcalDateTime Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef NcalDateTime RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from ncal:dateTime
			 * \anchor ncal_dateTime
			 * \n Representation of a date an instance of NcalDateTime actually refers to. It's purpose is to express values in DATE-TIME datatype, as defined in RFC 2445 sec. 4.3.5
			 * \n rdfs:label=dateTime
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=ncal:NcalDateTime
			 * \n tracker:modified=1466
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class dateTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#dateTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef NcalDateTime Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef NcalDateTime RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from ncal:periodBegin
			 * \anchor ncal_periodBegin
			 * \n Beginng of a period. Inspired by the first part of a structured value of the PERIOD datatype specified in RFC 2445 sec. 4.3.9
			 * \n rdfs:label=periodBegin
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=ncal:NcalPeriod
			 * \n tracker:modified=1367
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class periodBegin
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#periodBegin"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef NcalPeriod Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef NcalPeriod RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from ncal:periodDuration
			 * \anchor ncal_periodDuration
			 * \n Duration of a period of time. Inspired by the second part of a structured value of the PERIOD datatype specified in RFC 2445 sec. 4.3.9. Note that a single NcalPeriod instance shouldn't have the periodEnd and periodDuration properties specified simultaneously.
			 * \n rdfs:label=periodDuration
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=ncal:NcalPeriod
			 * \n tracker:modified=1806
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class periodDuration
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#periodDuration"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef NcalPeriod Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef NcalPeriod RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:periodEnd
			 * \anchor ncal_periodEnd
			 * \n End of a period of time. Inspired by the second part of a structured value of a PERIOD datatype specified in RFC 2445 sec. 4.3.9. Note that a single NcalPeriod instance shouldn't have the periodEnd and periodDuration properties specified simultaneously.
			 * \n rdfs:label=periodEnd
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=ncal:NcalPeriod
			 * \n tracker:modified=1157
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class periodEnd
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#periodEnd"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef NcalPeriod Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef NcalPeriod RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from ncal:range
			 * \anchor ncal_range
			 * \n To specify the effective range of recurrence instances from the instance specified by the recurrence identifier specified by the property. It is intended to express the RANGE parameter specified in RFC 2445 sec. 4.2.13. The set of possible values for this property is limited. See also the documentation for ncal:recurrenceId for more details.
			 * \n rdfs:label=range
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:RecurrenceIdentifierRange
			 * \n rdfs:domain=ncal:RecurrenceIdentifier
			 * \n tracker:modified=1848
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class range
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#range"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef RecurrenceIdentifier Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceIdentifier RDFDomain;
				/// The localized c++ range type of this property
				typedef RecurrenceIdentifierRange Range;
				/// The full, non-localized rdf range type of this property
				typedef RecurrenceIdentifierRange RDFRange;
			};
			/*! Property generated from ncal:recurrenceIdDateTime
			 * \anchor ncal_recurrenceIdDateTime
			 * \n The date and time of a recurrence identifier. Provided to express the actual value of the ncal:recurrenceId property. See documentation for ncal:recurrenceId for details.
			 * \n rdfs:label=recurrenceIdDateTime
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:NcalDateTime
			 * \n rdfs:domain=ncal:RecurrenceIdentifier
			 * \n tracker:modified=1902
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class recurrenceIdDateTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#recurrenceIdDateTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef RecurrenceIdentifier Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceIdentifier RDFDomain;
				/// The localized c++ range type of this property
				typedef NcalDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef NcalDateTime RDFRange;
			};
			/*! Property generated from ncal:until
			 * \anchor ncal_until
			 * \n The UNTIL rule part defines a date-time value which bounds the recurrence rule in an inclusive manner. If the value specified by UNTIL is synchronized with the specified recurrence, this date or date-time becomes the last instance of the recurrence. If specified as a date-time value, then it MUST be specified in an UTC time format. If not present, and the COUNT rule part is also not present, the RRULE is considered to repeat forever.
			 * \n rdfs:label=until
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:modified=1458
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class until
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#until"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from ncal:bysecond
			 * \anchor ncal_bysecond
			 * \n Second of a recurrence. Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:label=bysecond
			 * \n tracker:modified=1912
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class bysecond
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bysecond"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:wkst
			 * \anchor ncal_wkst
			 * \n The day that's counted as the start of the week. It is used to disambiguate the byweekno rule. Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:label=wkst
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:Weekday
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:modified=1265
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class wkst
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#wkst"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef Weekday Range;
				/// The full, non-localized rdf range type of this property
				typedef Weekday RDFRange;
			};
			/*! Property generated from ncal:interval
			 * \anchor ncal_interval
			 * \n The INTERVAL rule part contains a positive integer representing how often the recurrence rule repeats. The default value is '1', meaning every second for a SECONDLY rule, or every minute for a MINUTELY rule, every hour for an HOURLY rule, every day for a DAILY rule, every week for a WEEKLY rule, every month for a MONTHLY rule andevery year for a YEARLY rule. Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:label=interval
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:modified=1380
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class interval
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#interval"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:byday
			 * \anchor ncal_byday
			 * \n Weekdays the recurrence should occur. Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:range=ncal:BydayRulePart
			 * \n rdfs:label=byday
			 * \n tracker:modified=1861
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class byday
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byday"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef BydayRulePart Range;
				/// The full, non-localized rdf range type of this property
				typedef BydayRulePart RDFRange;
			};
			/*! Property generated from ncal:byweekno
			 * \anchor ncal_byweekno
			 * \n The number of the week an event should recur. Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:label=byweekno
			 * \n tracker:modified=1409
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class byweekno
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byweekno"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:bymonthday
			 * \anchor ncal_bymonthday
			 * \n Day of the month when the event should recur. Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:label=bymonthday
			 * \n tracker:modified=1356
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class bymonthday
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bymonthday"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:bysetpos
			 * \anchor ncal_bysetpos
			 * \n The BYSETPOS rule part specify values which correspond to the nth occurrence within the set of events specified by the rule. Valid values are 1 to 366 or -366 to -1. It MUST only be used in conjunction with another BYxxx rule part. For example 'the last work day of the month' could be represented as: RRULE: FREQ=MONTHLY; BYDAY=MO', 'TU', 'WE', 'TH', 'FR; BYSETPOS=-1. Each BYSETPOS value can include a positive (+n) or negative (-n)  integer. If present, this indicates the nth occurrence of the  specific occurrence within the set of events specified by the rule. Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:label=bysetpos
			 * \n tracker:modified=1790
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class bysetpos
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bysetpos"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:byhour
			 * \anchor ncal_byhour
			 * \n Hour of recurrence. Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:label=byhour
			 * \n tracker:modified=1596
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class byhour
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byhour"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:byminute
			 * \anchor ncal_byminute
			 * \n Minute of recurrence. Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:label=byminute
			 * \n tracker:modified=1586
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class byminute
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byminute"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:byyearday
			 * \anchor ncal_byyearday
			 * \n Day of the year the event should occur. Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:label=byyearday
			 * \n tracker:modified=1762
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class byyearday
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byyearday"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:count
			 * \anchor ncal_count
			 * \n How many times should an event be repeated. Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:label=count
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:modified=1885
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class count
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#count"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:bymonth
			 * \anchor ncal_bymonth
			 * \n Number of the month of the recurrence. Valid values are integers from 1 (January) to 12 (December). Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:label=bymonth
			 * \n tracker:modified=1234
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class bymonth
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bymonth"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:freq
			 * \anchor ncal_freq
			 * \n Frequency of a recurrence rule. Defined in RFC 2445 sec. 4.3.10
			 * \n rdfs:label=freq
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:RecurrenceFrequency
			 * \n rdfs:domain=ncal:RecurrenceRule
			 * \n tracker:modified=1942
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class freq
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#freq"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef RecurrenceFrequency Range;
				/// The full, non-localized rdf range type of this property
				typedef RecurrenceFrequency RDFRange;
			};
			/*! Property generated from ncal:statusDescription
			 * \anchor ncal_statusDescription
			 * \n Longer return status description. Inspired by the second part of the structured value of the REQUEST-STATUS property defined in RFC 2445 sec. 4.8.8.2
			 * \n rdfs:label=statusDescription
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:RequestStatus
			 * \n tracker:modified=1642
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class statusDescription
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#statusDescription"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RequestStatus Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RequestStatus RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:returnStatus
			 * \anchor ncal_returnStatus
			 * \n Short return status. Inspired by the first element of the structured value of the REQUEST-STATUS property described in RFC 2445 sec. 4.8.8.2.
			 * \n rdfs:label=returnStatus
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:RequestStatus
			 * \n tracker:modified=1048
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class returnStatus
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#returnStatus"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RequestStatus Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RequestStatus RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:requestStatusData
			 * \anchor ncal_requestStatusData
			 * \n Additional data associated with a request status. Inspired by the third part of the structured value for the REQUEST-STATUS property defined in RFC 2445 sec. 4.8.8.2 ('Textual exception data. For example, the offending property name and value or complete property line')
			 * \n rdfs:label=requestStatusData
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:RequestStatus
			 * \n tracker:modified=1104
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class requestStatusData
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#requestStatusData"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RequestStatus Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RequestStatus RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:tzurl
			 * \anchor ncal_tzurl
			 * \n The TZURL provides a means for a VTIMEZONE component to point to a network location that can be used to retrieve an up-to- date version of itself. Inspired by RFC 2445 sec. 4.8.3.5. Originally the range of this property had been specified as URI.
			 * \n rdfs:label=tzurl
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=ncal:Timezone
			 * \n tracker:modified=1465
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class tzurl
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#tzurl"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Timezone Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Timezone RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from ncal:standard
			 * \anchor ncal_standard
			 * \n Links the timezone with the standard timezone observance. This property has no direct equivalent in the RFC 2445. It has been inspired by the structure of the Vtimezone component defined in sec.4.6.5
			 * \n rdfs:label=standard
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:TimezoneObservance
			 * \n rdfs:domain=ncal:Timezone
			 * \n tracker:modified=1261
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class standard
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#standard"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Timezone Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Timezone RDFDomain;
				/// The localized c++ range type of this property
				typedef TimezoneObservance Range;
				/// The full, non-localized rdf range type of this property
				typedef TimezoneObservance RDFRange;
			};
			/*! Property generated from ncal:daylight
			 * \anchor ncal_daylight
			 * \n Links a timezone with it's daylight observance. This property has no direct equivalent in the RFC 2445. It has been inspired by the structure of the Vtimezone component defined in sec.4.6.5
			 * \n rdfs:label=daylight
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:TimezoneObservance
			 * \n rdfs:domain=ncal:Timezone
			 * \n tracker:modified=1646
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class daylight
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#daylight"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Timezone Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Timezone RDFDomain;
				/// The localized c++ range type of this property
				typedef TimezoneObservance Range;
				/// The full, non-localized rdf range type of this property
				typedef TimezoneObservance RDFRange;
			};
			/*! Property generated from ncal:tzid
			 * \anchor ncal_tzid
			 * \n This property specifies the text value that uniquely identifies the 'VTIMEZONE' calendar component. Inspired by RFC 2445 sec 4.8.3.1
			 * \n rdfs:label=tzid
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:Timezone
			 * \n tracker:modified=1347
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class tzid
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#tzid"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Timezone Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Timezone RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:tzoffsetfrom
			 * \anchor ncal_tzoffsetfrom
			 * \n This property specifies the offset which is in use prior to this time zone observance. Inspired by RFC 2445 sec. 4.8.3.3. The original domain was underspecified. It said that this property must appear within a Timezone component. In this ontology a TimezoneObservance class has been introduced to clarify this specification. The original range was UTC-OFFSET. There is no equivalent among the XSD datatypes so plain string was chosen.
			 * \n rdfs:label=tzoffsetfrom
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:TimezoneObservance
			 * \n tracker:modified=1966
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class tzoffsetfrom
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#tzoffsetfrom"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef TimezoneObservance Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TimezoneObservance RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:tzoffsetto
			 * \anchor ncal_tzoffsetto
			 * \n This property specifies the offset which is in use in this time zone observance. nspired by RFC 2445 sec. 4.8.3.4. The original domain was underspecified. It said that this property must appear within a Timezone component. In this ontology a TimezoneObservance class has been introduced to clarify this specification. The original range was UTC-OFFSET. There is no equivalent among the XSD datatypes so plain string was chosen.
			 * \n rdfs:label=tzoffsetto
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:TimezoneObservance
			 * \n tracker:modified=1670
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class tzoffsetto
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#tzoffsetto"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef TimezoneObservance Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TimezoneObservance RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:tzname
			 * \anchor ncal_tzname
			 * \n Specifies the customary designation for a timezone description. Inspired by RFC 2445 sec. 4.8.3.2 The LANGUAGE parameter has been discarded. Please xml:lang literals to express languages. Original specification for the domain of this property stated that it must appear within the timezone component. In this ontology the TimezoneObservance class has been itroduced to clarify this specification.
			 * \n rdfs:label=tzname
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:TimezoneObservance
			 * \n tracker:modified=1515
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class tzname
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#tzname"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef TimezoneObservance Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TimezoneObservance RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:percentComplete
			 * \anchor ncal_percentComplete
			 * \n This property is used by an assignee or delegatee of a to-do to convey the percent completion of a to-do to the Organizer. Inspired by RFC 2445 sec. 4.8.1.8
			 * \n rdfs:label=percentComplete
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=ncal:Todo
			 * \n tracker:modified=1732
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class percentComplete
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#percentComplete"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Todo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Todo RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:completed
			 * \anchor ncal_completed
			 * \n This property defines the date and time that a to-do was actually completed. Inspired by RFC 2445 sec. 4.8.2.1. Note that the RFC allows ONLY UTC time values for this property.
			 * \n rdfs:label=completed
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=ncal:Todo
			 * \n tracker:modified=1294
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class completed
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#completed"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Todo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Todo RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from ncal:todoStatus
			 * \anchor ncal_todoStatus
			 * \n Defines the overall status or confirmation for a todo. Based on the STATUS property defined in RFC 2445 sec. 4.8.1.11.
			 * \n rdfs:label=status
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:TodoStatus
			 * \n rdfs:domain=ncal:Todo
			 * \n tracker:modified=1915
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class todoStatus
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#todoStatus"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Todo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Todo RDFDomain;
				/// The localized c++ range type of this property
				typedef TodoStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef TodoStatus RDFRange;
			};
			/*! Property generated from ncal:due
			 * \anchor ncal_due
			 * \n This property defines the date and time that a to-do is expected to be completed. Inspired by RFC 2445 sec. 4.8.2.3
			 * \n rdfs:label=due
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:NcalDateTime
			 * \n rdfs:domain=ncal:Todo
			 * \n tracker:modified=1457
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class due
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#due"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Todo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Todo RDFDomain;
				/// The localized c++ range type of this property
				typedef NcalDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef NcalDateTime RDFRange;
			};
			/*! Property generated from ncal:related
			 * \anchor ncal_related
			 * \n To specify the relationship of the alarm trigger with respect to the start or end of the calendar component. Inspired by RFC 2445 4.2.14. The RFC has specified two possible values for this property ('START' and 'END') they have been expressed as instances of the TriggerRelation class.
			 * \n rdfs:label=related
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:TriggerRelation
			 * \n rdfs:domain=ncal:Trigger
			 * \n tracker:modified=1712
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class related
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#related"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Trigger Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Trigger RDFDomain;
				/// The localized c++ range type of this property
				typedef TriggerRelation Range;
				/// The full, non-localized rdf range type of this property
				typedef TriggerRelation RDFRange;
			};
			/*! Property generated from ncal:triggerDateTime
			 * \anchor ncal_triggerDateTime
			 * \n The exact date and time of the trigger. This property has been created to express the VALUE=DATE, and VALUE=DATE-TIME parameters of the TRIGGER property. See the documentation for ncal:trigger for more details
			 * \n rdfs:label=triggerDateTime
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=ncal:Trigger
			 * \n tracker:modified=1243
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class triggerDateTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#triggerDateTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Trigger Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Trigger RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from ncal:triggerDuration
			 * \anchor ncal_triggerDuration
			 * \n The duration of a trigger. This property has been created to express the VALUE=DURATION parameter of the TRIGGER property. See documentation for ncal:trigger for more details.
			 * \n rdfs:label=triggerDuration
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=ncal:Trigger
			 * \n tracker:modified=1582
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class triggerDuration
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#triggerDuration"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Trigger Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Trigger RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:attach
			 * \anchor ncal_attach
			 * \n The property provides the capability to associate a document object with a calendar component. Defined in the RFC 2445 sec. 4.8.1.1
			 * \n rdfs:label=attach
			 * \n rdfs:subPropertyOf=nie:hasPart
			 * \n rdfs:range=ncal:Attachment
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1623
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class attach
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#attach"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef Attachment Range;
				/// The full, non-localized rdf range type of this property
				typedef Attachment RDFRange;
			};
			/*! Property generated from ncal:lastModified
			 * \anchor ncal_lastModified
			 * \n The property specifies the date and time that the information associated with the calendar component was last revised in the calendar store. Note: This is analogous to the modification date and time for a file in the file system. Inspired by RFC 2445 sec. 4.8.7.3. Note that the RFC allows ONLY UTC time values for this property.
			 * \n rdfs:label=lastModified
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1984
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class lastModified
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#lastModified"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from ncal:trigger
			 * \anchor ncal_trigger
			 * \n This property specifies when an alarm will trigger. Inspired by RFC 2445 sec. 4.8.6.3 Originally the value of this property could accept two types : duration and date-time. To express this fact a Trigger class has been introduced. It also has a related property to account for the RELATED parameter.
			 * \n rdfs:label=trigger
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:Trigger
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1343
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class trigger
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#trigger"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef Trigger Range;
				/// The full, non-localized rdf range type of this property
				typedef Trigger RDFRange;
			};
			/*! Property generated from ncal:created
			 * \anchor ncal_created
			 * \n This property specifies the date and time that the calendar information was created by the calendar user agent in the calendar store. Note: This is analogous to the creation date and time for a file in the file system. Inspired by RFC 2445 sec. 4.8.7.1. Note that this property is a subproperty of nie:created. The domain of nie:created is nie:DataObject. It is not a superclass of UnionOf_Vevent_Vjournal_Vtodo, but since that union is conceived as an 'abstract' class, and in real-life all resources referenced by this property will also be DataObjects, than this shouldn't cause too much of a problem. Note that RFC allows ONLY UTC time values for this property.
			 * \n rdfs:label=created
			 * \n rdfs:subPropertyOf=nie:created
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1564
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class created
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#created"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from ncal:url
			 * \anchor ncal_url
			 * \n This property defines a Uniform Resource Locator (URL) associated with the iCalendar object. Inspired by the RFC 2445 sec. 4.8.4.6. Original range had been specified as URI.
			 * \n rdfs:label=url
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1434
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class url
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#url"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from ncal:comment
			 * \anchor ncal_comment
			 * \n Non-processing information intended to provide a comment to the calendar user. Inspired by RFC 2445 sec. 4.8.1.4 with the following reservations:  the LANGUAGE parameter has been discarded. Please use xml:lang literals to express language. For the ALTREP parameter use the commentAltRep property.
			 * \n rdfs:label=comment
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:weight=3
			 * \n tracker:modified=1045
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class comment
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#comment"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:summaryAltRep
			 * \anchor ncal_summaryAltRep
			 * \n Alternate representation of the comment. Introduced to cover the ALTREP parameter of the SUMMARY property. See documentation of ncal:summary for details.
			 * \n rdfs:label=summaryAltRep
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1204
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class summaryAltRep
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#summaryAltRep"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from ncal:priority
			 * \anchor ncal_priority
			 * \n The property defines the relative priority for a calendar component. Inspired by RFC 2445 sec. 4.8.1.9
			 * \n rdfs:label=priority
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1725
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class priority
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#priority"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:resources
			 * \anchor ncal_resources
			 * \n Defines the equipment or resources anticipated for an activity specified by a calendar entity. Inspired by RFC 2445 sec. 4.8.1.10 with the following reservations:  the LANGUAGE parameter has been discarded. Please use xml:lang literals to express language. For the ALTREP parameter use the resourcesAltRep property. This property specifies multiple resources. The order is not important. it is recommended to introduce a separate triple for each resource.
			 * \n rdfs:range=xsd:string
			 * \n rdfs:label=resources
			 * \n tracker:modified=1908
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class resources
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#resources"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:location
			 * \anchor ncal_location
			 * \n Defines the intended venue for the activity defined by a calendar component. Inspired by RFC 2445 sec 4.8.1.7 with the following reservations:  the LANGUAGE parameter has been discarded. Please use xml:lang literals to express language.  For the ALTREP parameter use the locationAltRep property.
			 * \n rdfs:label=location
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:weight=3
			 * \n tracker:modified=1858
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class location
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#location"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:uid
			 * \anchor ncal_uid
			 * \n This property defines the persistent, globally unique identifier for the calendar component. Inspired by the RFC 2445 sec 4.8.4.7
			 * \n rdfs:label=uid
			 * \n rdfs:subPropertyOf=nie:identifier
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1289
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class uid
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#uid"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:requestStatus
			 * \anchor ncal_requestStatus
			 * \n This property defines the status code returned for a scheduling request. Inspired by RFC 2445 sec. 4.8.8.2. Original value of this property was a four-element structure. The RequestStatus class has been introduced to express it. In RFC 2445 this property could have the LANGUAGE parameter. This has been discarded in this ontology. Use xml:lang literals to express it if necessary.
			 * \n rdfs:label=requestStatus
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:RequestStatus
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1439
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class requestStatus
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#requestStatus"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef RequestStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef RequestStatus RDFRange;
			};
			/*! Property generated from ncal:recurrenceId
			 * \anchor ncal_recurrenceId
			 * \n rdfs:label=recurrenceId
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:RecurrenceIdentifier
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1076
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class recurrenceId
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#recurrenceId"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef RecurrenceIdentifier Range;
				/// The full, non-localized rdf range type of this property
				typedef RecurrenceIdentifier RDFRange;
			};
			/*! Property generated from ncal:dtstamp
			 * \anchor ncal_dtstamp
			 * \n The property indicates the date/time that the instance of the iCalendar object was created. Inspired by RFC 2445 sec. 4.8.7.1. Note that the RFC allows ONLY UTC values for this property.
			 * \n rdfs:label=dtstamp
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1070
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class dtstamp
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#dtstamp"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from ncal:class
			 * \anchor ncal_class_
			 * \n Defines the access classification for a calendar component. Inspired by RFC 2445 sec. 4.8.1.3 with the following reservations:  this property has limited vocabulary. Possible values are:  PUBLIC, PRIVATE and CONFIDENTIAL. The default is PUBLIC. Those values are expressed as instances of the AccessClassification class. The user may create his/her own if necessary.
			 * \n rdfs:label=class
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:AccessClassification
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1697
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class class_
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#class"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef AccessClassification Range;
				/// The full, non-localized rdf range type of this property
				typedef AccessClassification RDFRange;
			};
			/*! Property generated from ncal:organizer
			 * \anchor ncal_organizer
			 * \n The property defines the organizer for a calendar component. Inspired by RFC 2445 sec. 4.8.4.3. Originally this property accepted many parameters. The Organizer class has been introduced to express them all. Note that NCAL is aligned with NCO. The actual value (of the CAL-ADDRESS type) is expressed as an instance of nco:Contact. Remember that the CN parameter has been removed from NCAL. Instead that value should be expressed using nco:fullname property of the above mentioned nco:Contact instance.
			 * \n rdfs:label=organizer
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:Organizer
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1866
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class organizer
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#organizer"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef Organizer Range;
				/// The full, non-localized rdf range type of this property
				typedef Organizer RDFRange;
			};
			/*! Property generated from ncal:attendee
			 * \anchor ncal_attendee
			 * \n The property defines an 'Attendee' within a calendar component. Inspired by RFC 2445 sec. 4.8.4.1. Originally this property accepted many parameters. The Attendee class has been introduced to express them all. Note that NCAL is aligned with NCO. The actual value (of the CAL-ADDRESS type) is expressed as an instance of nco:Contact. Remember that the CN parameter has been removed from NCAL. Instead that value should be expressed using nco:fullname property of the above mentioned nco:Contact instance. The RFC stated that whenever this property is attached to a Valarm instance', 'the Attendee cannot have any parameters apart from involvedContact.']
			 * \n rdfs:range=ncal:Attendee
			 * \n rdfs:label=attendee
			 * \n tracker:modified=1726
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class attendee
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#attendee"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef Attendee Range;
				/// The full, non-localized rdf range type of this property
				typedef Attendee RDFRange;
			};
			/*! Property generated from ncal:rrule
			 * \anchor ncal_rrule
			 * \n This property defines a rule or repeating pattern for recurring events, to-dos, or time zone definitions. sec. 4.8.5.4
			 * \n rdfs:range=ncal:RecurrenceRule
			 * \n rdfs:label=rrule
			 * \n tracker:modified=1601
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class rrule
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#rrule"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef RecurrenceRule Range;
				/// The full, non-localized rdf range type of this property
				typedef RecurrenceRule RDFRange;
			};
			/*! Property generated from ncal:dtend
			 * \anchor ncal_dtend
			 * \n This property specifies the date and time that a calendar component ends. Inspired by RFC 2445 sec. 4.8.2.2
			 * \n rdfs:label=dtend
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:NcalDateTime
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1346
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class dtend
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#dtend"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef NcalDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef NcalDateTime RDFRange;
			};
			/*! Property generated from ncal:ncalRelation
			 * \anchor ncal_ncalRelation
			 * \n A common superproperty for all types of ncal relations. It is not to be used directly.
			 * \n rdfs:label=ncalRelation
			 * \n rdfs:subPropertyOf=dc:relation
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1273
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class ncalRelation
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#ncalRelation"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:exdate
			 * \anchor ncal_exdate
			 * \n This property defines the list of date/time exceptions for a recurring calendar component. Inspired by RFC 2445 sec. 4.8.5.1
			 * \n rdfs:range=ncal:NcalDateTime
			 * \n rdfs:label=exdate
			 * \n tracker:modified=1949
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class exdate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#exdate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef NcalDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef NcalDateTime RDFRange;
			};
			/*! Property generated from ncal:summary
			 * \anchor ncal_summary
			 * \n Defines a short summary or subject for the calendar component. Inspired by RFC 2445 sec 4.8.1.12 with the following reservations: the LANGUAGE parameter has been discarded. Please use xml:lang literals to express language. For the ALTREP parameter use the summaryAltRep property.
			 * \n rdfs:label=summary
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:weight=5
			 * \n tracker:modified=1896
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class summary
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#summary"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:descriptionAltRep
			 * \anchor ncal_descriptionAltRep
			 * \n Alternate representation of the calendar entity description. Introduced to cover the ALTREP parameter of the DESCRIPTION property. See documentation of ncal:description for details.
			 * \n rdfs:label=descriptionAltRep
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1499
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class descriptionAltRep
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#descriptionAltRep"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from ncal:commentAltRep
			 * \anchor ncal_commentAltRep
			 * \n Alternate representation of the comment. Introduced to cover the ALTREP parameter of the COMMENT property. See documentation of ncal:comment for details.
			 * \n rdfs:label=commentAltRep
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1750
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class commentAltRep
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#commentAltRep"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from ncal:sequence
			 * \anchor ncal_sequence
			 * \n This property defines the revision sequence number of the calendar component within a sequence of revisions. Inspired by RFC 2445 sec. 4.8.7.4
			 * \n rdfs:label=sequence
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1280
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class sequence
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#sequence"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:contact
			 * \anchor ncal_contact
			 * \n The property is used to represent contact information or alternately a reference to contact information associated with the calendar component. Inspired by RFC 2445 sec. 4.8.4.2 with the following reservations: the LANGUAGE parameter has been discarded. Please use xml:lang literals to express language. For the ALTREP parameter use the contactAltRep property.RFC doesn't define any format for the string.
			 * \n rdfs:label=contact
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:weight=4
			 * \n tracker:modified=1218
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class contact
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#contact"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:contactAltRep
			 * \anchor ncal_contactAltRep
			 * \n Alternate representation of the contact property. Introduced to cover the ALTREP parameter of the CONTACT property. See documentation of ncal:contact for details.
			 * \n rdfs:label=contactAltRep
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1442
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class contactAltRep
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#contactAltRep"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from ncal:rdate
			 * \anchor ncal_rdate
			 * \n This property defines the list of date/times for a recurrence set. Inspired by RFC 2445 sec. 4.8.5.3. Note that RFC allows both DATE, DATE-TIME and PERIOD values for this property. That's why the range has been set to NcalTimeEntity.
			 * \n rdfs:range=ncal:NcalTimeEntity
			 * \n rdfs:label=rdate
			 * \n tracker:modified=1751
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class rdate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#rdate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef NcalTimeEntity Range;
				/// The full, non-localized rdf range type of this property
				typedef NcalTimeEntity RDFRange;
			};
			/*! Property generated from ncal:locationAltRep
			 * \anchor ncal_locationAltRep
			 * \n Alternate representation of the event or todo location. Introduced to cover the ALTREP parameter of the LOCATION property. See documentation of ncal:location for details.
			 * \n rdfs:label=locationAltRep
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1315
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class locationAltRep
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#locationAltRep"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from ncal:hasAlarm
			 * \anchor ncal_hasAlarm
			 * \n Links an event or a todo with a DataObject that can be interpreted as an alarm. This property has no direct equivalent in the RFC 2445. It has been provided to express this relation.
			 * \n rdfs:label=hasAlarm
			 * \n rdfs:subPropertyOf=nie:hasPart
			 * \n rdfs:range=ncal:CalendarDataObject
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1638
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class hasAlarm
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#hasAlarm"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef CalendarDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef CalendarDataObject RDFRange;
			};
			/*! Property generated from ncal:exrule
			 * \anchor ncal_exrule
			 * \n This property defines a rule or repeating pattern for an exception to a recurrence set. Inspired by RFC 2445 sec. 4.8.5.2.
			 * \n rdfs:range=ncal:RecurrenceRule
			 * \n rdfs:label=exrule
			 * \n tracker:modified=1808
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class exrule
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#exrule"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef RecurrenceRule Range;
				/// The full, non-localized rdf range type of this property
				typedef RecurrenceRule RDFRange;
			};
			/*! Property generated from ncal:geo
			 * \anchor ncal_geo
			 * \n This property specifies information related to the global position for the activity specified by a calendar component. Inspired by RFC 2445 sec. 4.8.1.6
			 * \n rdfs:label=geo
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1603
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class geo
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#geo"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from ncal:resourcesAltRep
			 * \anchor ncal_resourcesAltRep
			 * \n Alternate representation of the resources needed for an event or todo. Introduced to cover the ALTREP parameter of the resources property. See documentation for ncal:resources for details.
			 * \n rdfs:label=resourcesAltRep
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1034
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class resourcesAltRep
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#resourcesAltRep"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from ncal:dtstart
			 * \anchor ncal_dtstart
			 * \n This property specifies when the calendar component begins. Inspired by RFC 2445 sec. 4.8.2.4
			 * \n rdfs:label=dtstart
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=ncal:NcalDateTime
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1170
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class dtstart
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#dtstart"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef NcalDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef NcalDateTime RDFRange;
			};
			/*! Property generated from ncal:description
			 * \anchor ncal_description
			 * \n A more complete description of the calendar component, than that provided by the ncal:summary property.Inspired by RFC 2445 sec. 4.8.1.5 with following reservations:  the LANGUAGE parameter has been discarded. Please use xml:lang literals to express language. For the ALTREP parameter use the descriptionAltRep property.
			 * \n rdfs:label=description
			 * \n rdfs:subPropertyOf=nie:description
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:weight=3
			 * \n tracker:modified=1541
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class description
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#description"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:relatedToSibling
			 * \anchor ncal_relatedToSibling
			 * \n The property is used to represent a relationship or reference between one calendar component and another. Inspired by RFC 2445 sec. 4.8.4.5. Originally this property had a RELTYPE parameter. It has been decided that it is more natural to introduce three different properties to express the values of that parameter. This property expresses the RELATED-TO property with RELTYPE=SIBLING parameter.
			 * \n rdfs:label=relatedToSibling
			 * \n rdfs:subPropertyOf=ncal:ncalRelation
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1080
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class relatedToSibling
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#relatedToSibling"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:duration
			 * \anchor ncal_duration
			 * \n The property specifies a positive duration of time. Inspired by RFC 2445 sec. 4.8.2.5
			 * \n rdfs:label=duration
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1803
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class duration
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#duration"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from ncal:categories
			 * \anchor ncal_categories
			 * \n Categories for a calendar component. Inspired by RFC 2445 sec 4.8.1.2 with the following reservations: The LANGUAGE parameter has been discarded. Please use xml:lang literals to express multiple languages. This property can specify multiple comma-separated categories. The order of categories doesn't matter. Please use a separate triple for each category.
			 * \n rdfs:range=xsd:string
			 * \n rdfs:label=categories
			 * \n tracker:modified=1365
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class categories
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#categories"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:relatedToChild
			 * \anchor ncal_relatedToChild
			 * \n The property is used to represent a relationship or reference between one calendar component and another. Inspired by RFC 2445 sec. 4.8.4.5. Originally this property had a RELTYPE parameter. It has been decided to introduce three different properties to express the values of that parameter. This property expresses the RELATED-TO property with RELTYPE=CHILD parameter.
			 * \n rdfs:label=relatedToChild
			 * \n rdfs:subPropertyOf=ncal:ncalRelation
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1033
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class relatedToChild
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#relatedToChild"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:relatedToParent
			 * \anchor ncal_relatedToParent
			 * \n The property is used to represent a relationship or reference between one calendar component and another. Inspired by RFC 2445 sec. 4.8.4.5. Originally this property had a RELTYPE parameter. It has been decided that it is more natural to introduce three different properties to express the values of that parameter. This property expresses the RELATED-TO property with no RELTYPE parameter (the default value is PARENT), or with explicit RELTYPE=PARENT parameter.
			 * \n rdfs:label=relatedToParent
			 * \n rdfs:subPropertyOf=ncal:ncalRelation
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=ncal:UnionParentClass
			 * \n tracker:modified=1662
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class relatedToParent
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#relatedToParent"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UnionParentClass Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UnionParentClass RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from ncal:anniversary
			 * \anchor ncal_anniversary
			 * \n links a contact with the calendar event of an anniversary. (NCAL version)
			 * \n rdfs:range=ncal:Event
			 * \n rdfs:label=anniversary event
			 * \n tracker:modified=1448
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class anniversary
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#anniversary"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef nco::Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nco::Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef Event Range;
				/// The full, non-localized rdf range type of this property
				typedef Event RDFRange;
			};
			/*! Property generated from ncal:birthday
			 * \anchor ncal_birthday
			 * \n links a contact with the calendar event of his birthday. (NCAL version)
			 * \n rdfs:range=ncal:Event
			 * \n rdfs:label=birthday event
			 * \n tracker:modified=1464
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_ncal_properties
			class birthday
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#birthday"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_ncal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef nco::Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nco::Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef Event Range;
				/// The full, non-localized rdf range type of this property
				typedef Event RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NCAL_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NCAL_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NCAL_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdfs.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace ncal
		{

			using namespace rdfs;
			using namespace nfo;
			using namespace nie;
			using namespace rdf;
			using namespace xsd;
			using namespace nco;

			/*! Class generated from ncal:AccessClassification
			 * \ingroup onto_ncal_classes
			 * Access classification of a calendar component. Introduced to express the set of values for the ncal:class property. The user may use instances provided with this ontology or create his/her own with desired semantics. See the documentation of ncal:class for details.
			 * 
			 * rdfs:label = AccessClassification
			 * 
			 * tracker:modified = 1497
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_class_ "ncal:class"
			 */
			class AccessClassification
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#AccessClassification"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<AccessClassification> Live;
				AccessClassification() { this->attachInterfaceHelper< AccessClassification >(); }
				~AccessClassification() { this->detachInterfaceHelper< AccessClassification >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:UnionParentClass
			 * \ingroup onto_ncal_classes
			 * 
			 * rdfs:label = UnionParentClass
			 * 
			 * tracker:modified = 1030
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class UnionParentClass
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#UnionParentClass"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<UnionParentClass> Live;
				UnionParentClass() { this->attachInterfaceHelper< UnionParentClass >(); }
				~UnionParentClass() { this->detachInterfaceHelper< UnionParentClass >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:attendee
				 * \n The property defines an 'Attendee' within a calendar component. Inspired by RFC 2445 sec. 4.8.4.1. Originally this property accepted many parameters. The Attendee class has been introduced to express them all. Note that NCAL is aligned with NCO. The actual value (of the CAL-ADDRESS type) is expressed as an instance of nco:Contact. Remember that the CN parameter has been removed from NCAL. Instead that value should be expressed using nco:fullname property of the above mentioned nco:Contact instance. The RFC stated that whenever this property is attached to a Valarm instance', 'the Attendee cannot have any parameters apart from involvedContact.']
				 * \n rdfs:range=ncal:Attendee
				 * \n rdfs:label=attendee
				 * \n tracker:modified=1726
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAttendees(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_attendee "ncal:attendee" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAttendees(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::attendee >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAttendees(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_attendee "ncal:attendee" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAttendees(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::attendee >(object_info, strategy, parent); }
				/*!
					\fn void setAttendees(LiveNodes const &attendee_)
					
					
					Sets the property \ref ncal_attendee "ncal:attendee" set to the given \a attendee_ set.
					\sa LiveResource::setObjects
				 */
				void setAttendees(LiveNodes const &attendee_) { baseSetObjects(ncal::attendee::iri(), attendee_); }
				/*!
					\fn void removeAttendees(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_attendee "ncal:attendee" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAttendees(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::attendee::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Attendee > firstAttendee()
					
					
					Returns the first property \ref ncal_attendee "ncal:attendee". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Attendee > firstAttendee() { return baseFirstObject< ncal::attendee >(); }
				/*!
					\fn ::SopranoLive::Live< Attendee > addAttendee()
					
					
					Adds a new uniquely named resource to the property \ref ncal_attendee "ncal:attendee" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Attendee > addAttendee() { return baseAddObject< ncal::attendee >(); }
				/*!
					\fn ::SopranoLive::Live< Attendee > addAttendee(::SopranoLive::Live< Attendee > const &attendee_)
					
					
					Adds the given \a attendee_ to the property \ref ncal_attendee "ncal:attendee" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Attendee > addAttendee(::SopranoLive::Live< Attendee > const &attendee_) { return baseAddObject< ncal::attendee >( attendee_ ); }
				/*!
					\fn void removeAttendee(::SopranoLive::Live< Attendee > const &attendee_)
					
					
					Removes the given \a attendee_ from the property \ref ncal_attendee "ncal:attendee" set.
					\sa LiveResource::removeObject
				 */
				void removeAttendee(::SopranoLive::Live< Attendee > const &attendee_) { baseRemoveObject< ncal::attendee >(attendee_); }

				/* Property generated from ncal:dtstart
				 * \n This property specifies when the calendar component begins. Inspired by RFC 2445 sec. 4.8.2.4
				 * \n rdfs:label=dtstart
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:NcalDateTime
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1170
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDtstarts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_dtstart "ncal:dtstart" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDtstarts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::dtstart >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDtstarts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_dtstart "ncal:dtstart" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDtstarts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::dtstart >(object_info, strategy, parent); }
				/*!
					\fn void setDtstarts(LiveNodes const &dtstart_)
					
					
					Sets the property \ref ncal_dtstart "ncal:dtstart" set to the given \a dtstart_ set.
					\sa LiveResource::setObjects
				 */
				void setDtstarts(LiveNodes const &dtstart_) { baseSetObjects(ncal::dtstart::iri(), dtstart_); }
				/*!
					\fn void removeDtstarts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_dtstart "ncal:dtstart" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDtstarts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::dtstart::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > getDtstart()
					
					
					Returns the property \ref ncal_dtstart "ncal:dtstart". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< NcalDateTime > getDtstart() { return baseGetObject< ncal::dtstart >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > setDtstart(::SopranoLive::Live< NcalDateTime > const &dtstart_)
					
					
					Sets the property \ref ncal_dtstart "ncal:dtstart" to the given \a dtstart.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< NcalDateTime > setDtstart(::SopranoLive::Live< NcalDateTime > const &dtstart_) { return baseSetObject< ncal::dtstart >( dtstart_ ); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > firstDtstart()
					
					
					Returns the first property \ref ncal_dtstart "ncal:dtstart". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< NcalDateTime > firstDtstart() { return baseFirstObject< ncal::dtstart >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > addDtstart()
					
					
					Adds a new uniquely named resource to the property \ref ncal_dtstart "ncal:dtstart" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< NcalDateTime > addDtstart() { return baseAddObject< ncal::dtstart >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > addDtstart(::SopranoLive::Live< NcalDateTime > const &dtstart_)
					
					
					Adds the given \a dtstart_ to the property \ref ncal_dtstart "ncal:dtstart" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< NcalDateTime > addDtstart(::SopranoLive::Live< NcalDateTime > const &dtstart_) { return baseAddObject< ncal::dtstart >( dtstart_ ); }
				/*!
					\fn void removeDtstart(::SopranoLive::Live< NcalDateTime > const &dtstart_)
					
					
					Removes the given \a dtstart_ from the property \ref ncal_dtstart "ncal:dtstart" set.
					\sa LiveResource::removeObject
				 */
				void removeDtstart(::SopranoLive::Live< NcalDateTime > const &dtstart_) { baseRemoveObject< ncal::dtstart >(dtstart_); }

				/* Property generated from ncal:relatedToSibling
				 * \n The property is used to represent a relationship or reference between one calendar component and another. Inspired by RFC 2445 sec. 4.8.4.5. Originally this property had a RELTYPE parameter. It has been decided that it is more natural to introduce three different properties to express the values of that parameter. This property expresses the RELATED-TO property with RELTYPE=SIBLING parameter.
				 * \n rdfs:label=relatedToSibling
				 * \n rdfs:subPropertyOf=ncal:ncalRelation
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1080
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRelatedToSiblings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_relatedToSibling "ncal:relatedToSibling" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRelatedToSiblings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::relatedToSibling >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRelatedToSiblings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_relatedToSibling "ncal:relatedToSibling" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRelatedToSiblings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::relatedToSibling >(object_info, strategy, parent); }
				/*!
					\fn void setRelatedToSiblings(LiveNodes const &relatedToSibling_)
					
					
					Sets the property \ref ncal_relatedToSibling "ncal:relatedToSibling" set to the given \a relatedToSibling_ set.
					\sa LiveResource::setObjects
				 */
				void setRelatedToSiblings(LiveNodes const &relatedToSibling_) { baseSetObjects(ncal::relatedToSibling::iri(), relatedToSibling_); }
				/*!
					\fn void removeRelatedToSiblings(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_relatedToSibling "ncal:relatedToSibling" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRelatedToSiblings(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::relatedToSibling::iri(), object_info); }
				/*!
					\fn QString getRelatedToSibling()
					
					
					Returns the property \ref ncal_relatedToSibling "ncal:relatedToSibling". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getRelatedToSibling() { return baseGetObject< ncal::relatedToSibling >(); }
				/*!
					\fn void setRelatedToSibling(QString const &relatedToSibling_)
					
					
					Sets the property \ref ncal_relatedToSibling "ncal:relatedToSibling" to the given \a relatedToSibling.
					\sa LiveResource::setObject
				 */
				void setRelatedToSibling(QString const &relatedToSibling_) { baseSetObject< ncal::relatedToSibling >( relatedToSibling_ ); }
				/*!
					\fn QString firstRelatedToSibling()
					
					
					Returns the first property \ref ncal_relatedToSibling "ncal:relatedToSibling". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstRelatedToSibling() { return baseFirstObject< ncal::relatedToSibling >(); }
				/*!
					\fn void addRelatedToSibling(QString const &relatedToSibling_)
					
					
					Adds the given \a relatedToSibling_ to the property \ref ncal_relatedToSibling "ncal:relatedToSibling" set.
					\sa LiveResource::addObject
				 */
				void addRelatedToSibling(QString const &relatedToSibling_) { baseAddObject< ncal::relatedToSibling >( relatedToSibling_ ); }
				/*!
					\fn void removeRelatedToSibling(QString const &relatedToSibling_)
					
					
					Removes the given \a relatedToSibling_ from the property \ref ncal_relatedToSibling "ncal:relatedToSibling" set.
					\sa LiveResource::removeObject
				 */
				void removeRelatedToSibling(QString const &relatedToSibling_) { baseRemoveObject< ncal::relatedToSibling >(relatedToSibling_); }

				/* Property generated from ncal:dtstamp
				 * \n The property indicates the date/time that the instance of the iCalendar object was created. Inspired by RFC 2445 sec. 4.8.7.1. Note that the RFC allows ONLY UTC values for this property.
				 * \n rdfs:label=dtstamp
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1070
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDtstamps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_dtstamp "ncal:dtstamp" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDtstamps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::dtstamp >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDtstamps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_dtstamp "ncal:dtstamp" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDtstamps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::dtstamp >(object_info, strategy, parent); }
				/*!
					\fn void setDtstamps(LiveNodes const &dtstamp_)
					
					
					Sets the property \ref ncal_dtstamp "ncal:dtstamp" set to the given \a dtstamp_ set.
					\sa LiveResource::setObjects
				 */
				void setDtstamps(LiveNodes const &dtstamp_) { baseSetObjects(ncal::dtstamp::iri(), dtstamp_); }
				/*!
					\fn void removeDtstamps(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_dtstamp "ncal:dtstamp" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDtstamps(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::dtstamp::iri(), object_info); }
				/*!
					\fn QDateTime getDtstamp()
					
					
					Returns the property \ref ncal_dtstamp "ncal:dtstamp". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getDtstamp() { return baseGetObject< ncal::dtstamp >(); }
				/*!
					\fn void setDtstamp(QDateTime const &dtstamp_)
					
					
					Sets the property \ref ncal_dtstamp "ncal:dtstamp" to the given \a dtstamp.
					\sa LiveResource::setObject
				 */
				void setDtstamp(QDateTime const &dtstamp_) { baseSetObject< ncal::dtstamp >( dtstamp_ ); }
				/*!
					\fn QDateTime firstDtstamp()
					
					
					Returns the first property \ref ncal_dtstamp "ncal:dtstamp". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstDtstamp() { return baseFirstObject< ncal::dtstamp >(); }
				/*!
					\fn void addDtstamp(QDateTime const &dtstamp_)
					
					
					Adds the given \a dtstamp_ to the property \ref ncal_dtstamp "ncal:dtstamp" set.
					\sa LiveResource::addObject
				 */
				void addDtstamp(QDateTime const &dtstamp_) { baseAddObject< ncal::dtstamp >( dtstamp_ ); }
				/*!
					\fn void removeDtstamp(QDateTime const &dtstamp_)
					
					
					Removes the given \a dtstamp_ from the property \ref ncal_dtstamp "ncal:dtstamp" set.
					\sa LiveResource::removeObject
				 */
				void removeDtstamp(QDateTime const &dtstamp_) { baseRemoveObject< ncal::dtstamp >(dtstamp_); }

				/* Property generated from ncal:summary
				 * \n Defines a short summary or subject for the calendar component. Inspired by RFC 2445 sec 4.8.1.12 with the following reservations: the LANGUAGE parameter has been discarded. Please use xml:lang literals to express language. For the ALTREP parameter use the summaryAltRep property.
				 * \n rdfs:label=summary
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:weight=5
				 * \n tracker:modified=1896
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSummarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_summary "ncal:summary" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSummarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::summary >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSummarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_summary "ncal:summary" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSummarys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::summary >(object_info, strategy, parent); }
				/*!
					\fn void setSummarys(LiveNodes const &summary_)
					
					
					Sets the property \ref ncal_summary "ncal:summary" set to the given \a summary_ set.
					\sa LiveResource::setObjects
				 */
				void setSummarys(LiveNodes const &summary_) { baseSetObjects(ncal::summary::iri(), summary_); }
				/*!
					\fn void removeSummarys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_summary "ncal:summary" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSummarys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::summary::iri(), object_info); }
				/*!
					\fn QString getSummary()
					
					
					Returns the property \ref ncal_summary "ncal:summary". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getSummary() { return baseGetObject< ncal::summary >(); }
				/*!
					\fn void setSummary(QString const &summary_)
					
					
					Sets the property \ref ncal_summary "ncal:summary" to the given \a summary.
					\sa LiveResource::setObject
				 */
				void setSummary(QString const &summary_) { baseSetObject< ncal::summary >( summary_ ); }
				/*!
					\fn QString firstSummary()
					
					
					Returns the first property \ref ncal_summary "ncal:summary". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstSummary() { return baseFirstObject< ncal::summary >(); }
				/*!
					\fn void addSummary(QString const &summary_)
					
					
					Adds the given \a summary_ to the property \ref ncal_summary "ncal:summary" set.
					\sa LiveResource::addObject
				 */
				void addSummary(QString const &summary_) { baseAddObject< ncal::summary >( summary_ ); }
				/*!
					\fn void removeSummary(QString const &summary_)
					
					
					Removes the given \a summary_ from the property \ref ncal_summary "ncal:summary" set.
					\sa LiveResource::removeObject
				 */
				void removeSummary(QString const &summary_) { baseRemoveObject< ncal::summary >(summary_); }

				/* Property generated from ncal:rdate
				 * \n This property defines the list of date/times for a recurrence set. Inspired by RFC 2445 sec. 4.8.5.3. Note that RFC allows both DATE, DATE-TIME and PERIOD values for this property. That's why the range has been set to NcalTimeEntity.
				 * \n rdfs:range=ncal:NcalTimeEntity
				 * \n rdfs:label=rdate
				 * \n tracker:modified=1751
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRdates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_rdate "ncal:rdate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRdates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::rdate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRdates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_rdate "ncal:rdate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRdates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::rdate >(object_info, strategy, parent); }
				/*!
					\fn void setRdates(LiveNodes const &rdate_)
					
					
					Sets the property \ref ncal_rdate "ncal:rdate" set to the given \a rdate_ set.
					\sa LiveResource::setObjects
				 */
				void setRdates(LiveNodes const &rdate_) { baseSetObjects(ncal::rdate::iri(), rdate_); }
				/*!
					\fn void removeRdates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_rdate "ncal:rdate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRdates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::rdate::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< NcalTimeEntity > firstRdate()
					
					
					Returns the first property \ref ncal_rdate "ncal:rdate". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< NcalTimeEntity > firstRdate() { return baseFirstObject< ncal::rdate >(); }
				/*!
					\fn ::SopranoLive::Live< NcalTimeEntity > addRdate()
					
					
					Adds a new uniquely named resource to the property \ref ncal_rdate "ncal:rdate" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< NcalTimeEntity > addRdate() { return baseAddObject< ncal::rdate >(); }
				/*!
					\fn ::SopranoLive::Live< NcalTimeEntity > addRdate(::SopranoLive::Live< NcalTimeEntity > const &rdate_)
					
					
					Adds the given \a rdate_ to the property \ref ncal_rdate "ncal:rdate" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< NcalTimeEntity > addRdate(::SopranoLive::Live< NcalTimeEntity > const &rdate_) { return baseAddObject< ncal::rdate >( rdate_ ); }
				/*!
					\fn void removeRdate(::SopranoLive::Live< NcalTimeEntity > const &rdate_)
					
					
					Removes the given \a rdate_ from the property \ref ncal_rdate "ncal:rdate" set.
					\sa LiveResource::removeObject
				 */
				void removeRdate(::SopranoLive::Live< NcalTimeEntity > const &rdate_) { baseRemoveObject< ncal::rdate >(rdate_); }

				/* Property generated from ncal:summaryAltRep
				 * \n Alternate representation of the comment. Introduced to cover the ALTREP parameter of the SUMMARY property. See documentation of ncal:summary for details.
				 * \n rdfs:label=summaryAltRep
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1204
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveSummaryAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_summaryAltRep "ncal:summaryAltRep" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSummaryAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::summaryAltRep >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSummaryAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_summaryAltRep "ncal:summaryAltRep" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSummaryAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::summaryAltRep >(object_info, strategy, parent); }
				/*!
					\fn void setSummaryAltReps(LiveNodes const &summaryAltRep_)
					
					
					Sets the property \ref ncal_summaryAltRep "ncal:summaryAltRep" set to the given \a summaryAltRep_ set.
					\sa LiveResource::setObjects
				 */
				void setSummaryAltReps(LiveNodes const &summaryAltRep_) { baseSetObjects(ncal::summaryAltRep::iri(), summaryAltRep_); }
				/*!
					\fn void removeSummaryAltReps(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_summaryAltRep "ncal:summaryAltRep" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSummaryAltReps(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::summaryAltRep::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getSummaryAltRep()
					
					
					Returns the property \ref ncal_summaryAltRep "ncal:summaryAltRep". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getSummaryAltRep() { return baseGetObject< ncal::summaryAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setSummaryAltRep(::SopranoLive::Live< rdfs::Resource > const &summaryAltRep_)
					
					
					Sets the property \ref ncal_summaryAltRep "ncal:summaryAltRep" to the given \a summaryAltRep.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setSummaryAltRep(::SopranoLive::Live< rdfs::Resource > const &summaryAltRep_) { return baseSetObject< ncal::summaryAltRep >( summaryAltRep_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstSummaryAltRep()
					
					
					Returns the first property \ref ncal_summaryAltRep "ncal:summaryAltRep". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstSummaryAltRep() { return baseFirstObject< ncal::summaryAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addSummaryAltRep()
					
					
					Adds a new uniquely named resource to the property \ref ncal_summaryAltRep "ncal:summaryAltRep" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addSummaryAltRep() { return baseAddObject< ncal::summaryAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addSummaryAltRep(::SopranoLive::Live< rdfs::Resource > const &summaryAltRep_)
					
					
					Adds the given \a summaryAltRep_ to the property \ref ncal_summaryAltRep "ncal:summaryAltRep" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addSummaryAltRep(::SopranoLive::Live< rdfs::Resource > const &summaryAltRep_) { return baseAddObject< ncal::summaryAltRep >( summaryAltRep_ ); }
				/*!
					\fn void removeSummaryAltRep(::SopranoLive::Live< rdfs::Resource > const &summaryAltRep_)
					
					
					Removes the given \a summaryAltRep_ from the property \ref ncal_summaryAltRep "ncal:summaryAltRep" set.
					\sa LiveResource::removeObject
				 */
				void removeSummaryAltRep(::SopranoLive::Live< rdfs::Resource > const &summaryAltRep_) { baseRemoveObject< ncal::summaryAltRep >(summaryAltRep_); }

				/* Property generated from ncal:dtend
				 * \n This property specifies the date and time that a calendar component ends. Inspired by RFC 2445 sec. 4.8.2.2
				 * \n rdfs:label=dtend
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:NcalDateTime
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1346
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDtends(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_dtend "ncal:dtend" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDtends(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::dtend >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDtends(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_dtend "ncal:dtend" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDtends(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::dtend >(object_info, strategy, parent); }
				/*!
					\fn void setDtends(LiveNodes const &dtend_)
					
					
					Sets the property \ref ncal_dtend "ncal:dtend" set to the given \a dtend_ set.
					\sa LiveResource::setObjects
				 */
				void setDtends(LiveNodes const &dtend_) { baseSetObjects(ncal::dtend::iri(), dtend_); }
				/*!
					\fn void removeDtends(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_dtend "ncal:dtend" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDtends(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::dtend::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > getDtend()
					
					
					Returns the property \ref ncal_dtend "ncal:dtend". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< NcalDateTime > getDtend() { return baseGetObject< ncal::dtend >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > setDtend(::SopranoLive::Live< NcalDateTime > const &dtend_)
					
					
					Sets the property \ref ncal_dtend "ncal:dtend" to the given \a dtend.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< NcalDateTime > setDtend(::SopranoLive::Live< NcalDateTime > const &dtend_) { return baseSetObject< ncal::dtend >( dtend_ ); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > firstDtend()
					
					
					Returns the first property \ref ncal_dtend "ncal:dtend". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< NcalDateTime > firstDtend() { return baseFirstObject< ncal::dtend >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > addDtend()
					
					
					Adds a new uniquely named resource to the property \ref ncal_dtend "ncal:dtend" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< NcalDateTime > addDtend() { return baseAddObject< ncal::dtend >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > addDtend(::SopranoLive::Live< NcalDateTime > const &dtend_)
					
					
					Adds the given \a dtend_ to the property \ref ncal_dtend "ncal:dtend" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< NcalDateTime > addDtend(::SopranoLive::Live< NcalDateTime > const &dtend_) { return baseAddObject< ncal::dtend >( dtend_ ); }
				/*!
					\fn void removeDtend(::SopranoLive::Live< NcalDateTime > const &dtend_)
					
					
					Removes the given \a dtend_ from the property \ref ncal_dtend "ncal:dtend" set.
					\sa LiveResource::removeObject
				 */
				void removeDtend(::SopranoLive::Live< NcalDateTime > const &dtend_) { baseRemoveObject< ncal::dtend >(dtend_); }

				/* Property generated from ncal:rrule
				 * \n This property defines a rule or repeating pattern for recurring events, to-dos, or time zone definitions. sec. 4.8.5.4
				 * \n rdfs:range=ncal:RecurrenceRule
				 * \n rdfs:label=rrule
				 * \n tracker:modified=1601
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRrules(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_rrule "ncal:rrule" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRrules(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::rrule >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRrules(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_rrule "ncal:rrule" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRrules(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::rrule >(object_info, strategy, parent); }
				/*!
					\fn void setRrules(LiveNodes const &rrule_)
					
					
					Sets the property \ref ncal_rrule "ncal:rrule" set to the given \a rrule_ set.
					\sa LiveResource::setObjects
				 */
				void setRrules(LiveNodes const &rrule_) { baseSetObjects(ncal::rrule::iri(), rrule_); }
				/*!
					\fn void removeRrules(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_rrule "ncal:rrule" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRrules(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::rrule::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceRule > firstRrule()
					
					
					Returns the first property \ref ncal_rrule "ncal:rrule". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< RecurrenceRule > firstRrule() { return baseFirstObject< ncal::rrule >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceRule > addRrule()
					
					
					Adds a new uniquely named resource to the property \ref ncal_rrule "ncal:rrule" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RecurrenceRule > addRrule() { return baseAddObject< ncal::rrule >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceRule > addRrule(::SopranoLive::Live< RecurrenceRule > const &rrule_)
					
					
					Adds the given \a rrule_ to the property \ref ncal_rrule "ncal:rrule" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RecurrenceRule > addRrule(::SopranoLive::Live< RecurrenceRule > const &rrule_) { return baseAddObject< ncal::rrule >( rrule_ ); }
				/*!
					\fn void removeRrule(::SopranoLive::Live< RecurrenceRule > const &rrule_)
					
					
					Removes the given \a rrule_ from the property \ref ncal_rrule "ncal:rrule" set.
					\sa LiveResource::removeObject
				 */
				void removeRrule(::SopranoLive::Live< RecurrenceRule > const &rrule_) { baseRemoveObject< ncal::rrule >(rrule_); }

				/* Property generated from ncal:geo
				 * \n This property specifies information related to the global position for the activity specified by a calendar component. Inspired by RFC 2445 sec. 4.8.1.6
				 * \n rdfs:label=geo
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1603
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveGeos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_geo "ncal:geo" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveGeos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::geo >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getGeos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_geo "ncal:geo" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getGeos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::geo >(object_info, strategy, parent); }
				/*!
					\fn void setGeos(LiveNodes const &geo_)
					
					
					Sets the property \ref ncal_geo "ncal:geo" set to the given \a geo_ set.
					\sa LiveResource::setObjects
				 */
				void setGeos(LiveNodes const &geo_) { baseSetObjects(ncal::geo::iri(), geo_); }
				/*!
					\fn void removeGeos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_geo "ncal:geo" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeGeos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::geo::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getGeo()
					
					
					Returns the property \ref ncal_geo "ncal:geo". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getGeo() { return baseGetObject< ncal::geo >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setGeo(::SopranoLive::Live< rdfs::Resource > const &geo_)
					
					
					Sets the property \ref ncal_geo "ncal:geo" to the given \a geo.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setGeo(::SopranoLive::Live< rdfs::Resource > const &geo_) { return baseSetObject< ncal::geo >( geo_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstGeo()
					
					
					Returns the first property \ref ncal_geo "ncal:geo". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstGeo() { return baseFirstObject< ncal::geo >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addGeo()
					
					
					Adds a new uniquely named resource to the property \ref ncal_geo "ncal:geo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addGeo() { return baseAddObject< ncal::geo >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addGeo(::SopranoLive::Live< rdfs::Resource > const &geo_)
					
					
					Adds the given \a geo_ to the property \ref ncal_geo "ncal:geo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addGeo(::SopranoLive::Live< rdfs::Resource > const &geo_) { return baseAddObject< ncal::geo >( geo_ ); }
				/*!
					\fn void removeGeo(::SopranoLive::Live< rdfs::Resource > const &geo_)
					
					
					Removes the given \a geo_ from the property \ref ncal_geo "ncal:geo" set.
					\sa LiveResource::removeObject
				 */
				void removeGeo(::SopranoLive::Live< rdfs::Resource > const &geo_) { baseRemoveObject< ncal::geo >(geo_); }

				/* Property generated from ncal:sequence
				 * \n This property defines the revision sequence number of the calendar component within a sequence of revisions. Inspired by RFC 2445 sec. 4.8.7.4
				 * \n rdfs:label=sequence
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1280
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSequences(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_sequence "ncal:sequence" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSequences(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::sequence >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSequences(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_sequence "ncal:sequence" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSequences(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::sequence >(object_info, strategy, parent); }
				/*!
					\fn void setSequences(LiveNodes const &sequence_)
					
					
					Sets the property \ref ncal_sequence "ncal:sequence" set to the given \a sequence_ set.
					\sa LiveResource::setObjects
				 */
				void setSequences(LiveNodes const &sequence_) { baseSetObjects(ncal::sequence::iri(), sequence_); }
				/*!
					\fn void removeSequences(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_sequence "ncal:sequence" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSequences(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::sequence::iri(), object_info); }
				/*!
					\fn qint64 getSequence()
					
					
					Returns the property \ref ncal_sequence "ncal:sequence". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getSequence() { return baseGetObject< ncal::sequence >(); }
				/*!
					\fn void setSequence(qint64 const &sequence_)
					
					
					Sets the property \ref ncal_sequence "ncal:sequence" to the given \a sequence.
					\sa LiveResource::setObject
				 */
				void setSequence(qint64 const &sequence_) { baseSetObject< ncal::sequence >( sequence_ ); }
				/*!
					\fn qint64 firstSequence()
					
					
					Returns the first property \ref ncal_sequence "ncal:sequence". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstSequence() { return baseFirstObject< ncal::sequence >(); }
				/*!
					\fn void addSequence(qint64 const &sequence_)
					
					
					Adds the given \a sequence_ to the property \ref ncal_sequence "ncal:sequence" set.
					\sa LiveResource::addObject
				 */
				void addSequence(qint64 const &sequence_) { baseAddObject< ncal::sequence >( sequence_ ); }
				/*!
					\fn void removeSequence(qint64 const &sequence_)
					
					
					Removes the given \a sequence_ from the property \ref ncal_sequence "ncal:sequence" set.
					\sa LiveResource::removeObject
				 */
				void removeSequence(qint64 const &sequence_) { baseRemoveObject< ncal::sequence >(sequence_); }

				/* Property generated from ncal:contactAltRep
				 * \n Alternate representation of the contact property. Introduced to cover the ALTREP parameter of the CONTACT property. See documentation of ncal:contact for details.
				 * \n rdfs:label=contactAltRep
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1442
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContactAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_contactAltRep "ncal:contactAltRep" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContactAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::contactAltRep >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContactAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_contactAltRep "ncal:contactAltRep" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContactAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::contactAltRep >(object_info, strategy, parent); }
				/*!
					\fn void setContactAltReps(LiveNodes const &contactAltRep_)
					
					
					Sets the property \ref ncal_contactAltRep "ncal:contactAltRep" set to the given \a contactAltRep_ set.
					\sa LiveResource::setObjects
				 */
				void setContactAltReps(LiveNodes const &contactAltRep_) { baseSetObjects(ncal::contactAltRep::iri(), contactAltRep_); }
				/*!
					\fn void removeContactAltReps(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_contactAltRep "ncal:contactAltRep" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContactAltReps(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::contactAltRep::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getContactAltRep()
					
					
					Returns the property \ref ncal_contactAltRep "ncal:contactAltRep". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getContactAltRep() { return baseGetObject< ncal::contactAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setContactAltRep(::SopranoLive::Live< rdfs::Resource > const &contactAltRep_)
					
					
					Sets the property \ref ncal_contactAltRep "ncal:contactAltRep" to the given \a contactAltRep.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setContactAltRep(::SopranoLive::Live< rdfs::Resource > const &contactAltRep_) { return baseSetObject< ncal::contactAltRep >( contactAltRep_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstContactAltRep()
					
					
					Returns the first property \ref ncal_contactAltRep "ncal:contactAltRep". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstContactAltRep() { return baseFirstObject< ncal::contactAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addContactAltRep()
					
					
					Adds a new uniquely named resource to the property \ref ncal_contactAltRep "ncal:contactAltRep" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addContactAltRep() { return baseAddObject< ncal::contactAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addContactAltRep(::SopranoLive::Live< rdfs::Resource > const &contactAltRep_)
					
					
					Adds the given \a contactAltRep_ to the property \ref ncal_contactAltRep "ncal:contactAltRep" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addContactAltRep(::SopranoLive::Live< rdfs::Resource > const &contactAltRep_) { return baseAddObject< ncal::contactAltRep >( contactAltRep_ ); }
				/*!
					\fn void removeContactAltRep(::SopranoLive::Live< rdfs::Resource > const &contactAltRep_)
					
					
					Removes the given \a contactAltRep_ from the property \ref ncal_contactAltRep "ncal:contactAltRep" set.
					\sa LiveResource::removeObject
				 */
				void removeContactAltRep(::SopranoLive::Live< rdfs::Resource > const &contactAltRep_) { baseRemoveObject< ncal::contactAltRep >(contactAltRep_); }

				/* Property generated from ncal:exrule
				 * \n This property defines a rule or repeating pattern for an exception to a recurrence set. Inspired by RFC 2445 sec. 4.8.5.2.
				 * \n rdfs:range=ncal:RecurrenceRule
				 * \n rdfs:label=exrule
				 * \n tracker:modified=1808
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveExrules(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_exrule "ncal:exrule" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveExrules(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::exrule >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getExrules(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_exrule "ncal:exrule" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getExrules(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::exrule >(object_info, strategy, parent); }
				/*!
					\fn void setExrules(LiveNodes const &exrule_)
					
					
					Sets the property \ref ncal_exrule "ncal:exrule" set to the given \a exrule_ set.
					\sa LiveResource::setObjects
				 */
				void setExrules(LiveNodes const &exrule_) { baseSetObjects(ncal::exrule::iri(), exrule_); }
				/*!
					\fn void removeExrules(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_exrule "ncal:exrule" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeExrules(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::exrule::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceRule > firstExrule()
					
					
					Returns the first property \ref ncal_exrule "ncal:exrule". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< RecurrenceRule > firstExrule() { return baseFirstObject< ncal::exrule >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceRule > addExrule()
					
					
					Adds a new uniquely named resource to the property \ref ncal_exrule "ncal:exrule" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RecurrenceRule > addExrule() { return baseAddObject< ncal::exrule >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceRule > addExrule(::SopranoLive::Live< RecurrenceRule > const &exrule_)
					
					
					Adds the given \a exrule_ to the property \ref ncal_exrule "ncal:exrule" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RecurrenceRule > addExrule(::SopranoLive::Live< RecurrenceRule > const &exrule_) { return baseAddObject< ncal::exrule >( exrule_ ); }
				/*!
					\fn void removeExrule(::SopranoLive::Live< RecurrenceRule > const &exrule_)
					
					
					Removes the given \a exrule_ from the property \ref ncal_exrule "ncal:exrule" set.
					\sa LiveResource::removeObject
				 */
				void removeExrule(::SopranoLive::Live< RecurrenceRule > const &exrule_) { baseRemoveObject< ncal::exrule >(exrule_); }

				/* Property generated from ncal:trigger
				 * \n This property specifies when an alarm will trigger. Inspired by RFC 2445 sec. 4.8.6.3 Originally the value of this property could accept two types : duration and date-time. To express this fact a Trigger class has been introduced. It also has a related property to account for the RELATED parameter.
				 * \n rdfs:label=trigger
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:Trigger
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1343
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTriggers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_trigger "ncal:trigger" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTriggers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::trigger >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTriggers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_trigger "ncal:trigger" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTriggers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::trigger >(object_info, strategy, parent); }
				/*!
					\fn void setTriggers(LiveNodes const &trigger_)
					
					
					Sets the property \ref ncal_trigger "ncal:trigger" set to the given \a trigger_ set.
					\sa LiveResource::setObjects
				 */
				void setTriggers(LiveNodes const &trigger_) { baseSetObjects(ncal::trigger::iri(), trigger_); }
				/*!
					\fn void removeTriggers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_trigger "ncal:trigger" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTriggers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::trigger::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Trigger > getTrigger()
					
					
					Returns the property \ref ncal_trigger "ncal:trigger". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Trigger > getTrigger() { return baseGetObject< ncal::trigger >(); }
				/*!
					\fn ::SopranoLive::Live< Trigger > setTrigger(::SopranoLive::Live< Trigger > const &trigger_)
					
					
					Sets the property \ref ncal_trigger "ncal:trigger" to the given \a trigger.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Trigger > setTrigger(::SopranoLive::Live< Trigger > const &trigger_) { return baseSetObject< ncal::trigger >( trigger_ ); }
				/*!
					\fn ::SopranoLive::Live< Trigger > firstTrigger()
					
					
					Returns the first property \ref ncal_trigger "ncal:trigger". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Trigger > firstTrigger() { return baseFirstObject< ncal::trigger >(); }
				/*!
					\fn ::SopranoLive::Live< Trigger > addTrigger()
					
					
					Adds a new uniquely named resource to the property \ref ncal_trigger "ncal:trigger" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Trigger > addTrigger() { return baseAddObject< ncal::trigger >(); }
				/*!
					\fn ::SopranoLive::Live< Trigger > addTrigger(::SopranoLive::Live< Trigger > const &trigger_)
					
					
					Adds the given \a trigger_ to the property \ref ncal_trigger "ncal:trigger" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Trigger > addTrigger(::SopranoLive::Live< Trigger > const &trigger_) { return baseAddObject< ncal::trigger >( trigger_ ); }
				/*!
					\fn void removeTrigger(::SopranoLive::Live< Trigger > const &trigger_)
					
					
					Removes the given \a trigger_ from the property \ref ncal_trigger "ncal:trigger" set.
					\sa LiveResource::removeObject
				 */
				void removeTrigger(::SopranoLive::Live< Trigger > const &trigger_) { baseRemoveObject< ncal::trigger >(trigger_); }

				/* Property generated from ncal:created
				 * \n This property specifies the date and time that the calendar information was created by the calendar user agent in the calendar store. Note: This is analogous to the creation date and time for a file in the file system. Inspired by RFC 2445 sec. 4.8.7.1. Note that this property is a subproperty of nie:created. The domain of nie:created is nie:DataObject. It is not a superclass of UnionOf_Vevent_Vjournal_Vtodo, but since that union is conceived as an 'abstract' class, and in real-life all resources referenced by this property will also be DataObjects, than this shouldn't cause too much of a problem. Note that RFC allows ONLY UTC time values for this property.
				 * \n rdfs:label=created
				 * \n rdfs:subPropertyOf=nie:created
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1564
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_created "ncal:created" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::created >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_created "ncal:created" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::created >(object_info, strategy, parent); }
				/*!
					\fn void setCreateds(LiveNodes const &created_)
					
					
					Sets the property \ref ncal_created "ncal:created" set to the given \a created_ set.
					\sa LiveResource::setObjects
				 */
				void setCreateds(LiveNodes const &created_) { baseSetObjects(ncal::created::iri(), created_); }
				/*!
					\fn void removeCreateds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_created "ncal:created" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCreateds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::created::iri(), object_info); }
				/*!
					\fn QDateTime getCreated()
					
					
					Returns the property \ref ncal_created "ncal:created". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getCreated() { return baseGetObject< ncal::created >(); }
				/*!
					\fn void setCreated(QDateTime const &created_)
					
					
					Sets the property \ref ncal_created "ncal:created" to the given \a created.
					\sa LiveResource::setObject
				 */
				void setCreated(QDateTime const &created_) { baseSetObject< ncal::created >( created_ ); }
				/*!
					\fn QDateTime firstCreated()
					
					
					Returns the first property \ref ncal_created "ncal:created". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstCreated() { return baseFirstObject< ncal::created >(); }
				/*!
					\fn void addCreated(QDateTime const &created_)
					
					
					Adds the given \a created_ to the property \ref ncal_created "ncal:created" set.
					\sa LiveResource::addObject
				 */
				void addCreated(QDateTime const &created_) { baseAddObject< ncal::created >( created_ ); }
				/*!
					\fn void removeCreated(QDateTime const &created_)
					
					
					Removes the given \a created_ from the property \ref ncal_created "ncal:created" set.
					\sa LiveResource::removeObject
				 */
				void removeCreated(QDateTime const &created_) { baseRemoveObject< ncal::created >(created_); }

				/* Property generated from ncal:ncalRelation
				 * \n A common superproperty for all types of ncal relations. It is not to be used directly.
				 * \n rdfs:label=ncalRelation
				 * \n rdfs:subPropertyOf=dc:relation
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1273
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNcalRelations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_ncalRelation "ncal:ncalRelation" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNcalRelations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::ncalRelation >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNcalRelations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_ncalRelation "ncal:ncalRelation" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNcalRelations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::ncalRelation >(object_info, strategy, parent); }
				/*!
					\fn void setNcalRelations(LiveNodes const &ncalRelation_)
					
					
					Sets the property \ref ncal_ncalRelation "ncal:ncalRelation" set to the given \a ncalRelation_ set.
					\sa LiveResource::setObjects
				 */
				void setNcalRelations(LiveNodes const &ncalRelation_) { baseSetObjects(ncal::ncalRelation::iri(), ncalRelation_); }
				/*!
					\fn void removeNcalRelations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_ncalRelation "ncal:ncalRelation" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNcalRelations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::ncalRelation::iri(), object_info); }
				/*!
					\fn QString firstNcalRelation()
					
					
					Returns the first property \ref ncal_ncalRelation "ncal:ncalRelation". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstNcalRelation() { return baseFirstObject< ncal::ncalRelation >(); }
				/*!
					\fn void addNcalRelation(QString const &ncalRelation_)
					
					
					Adds the given \a ncalRelation_ to the property \ref ncal_ncalRelation "ncal:ncalRelation" set.
					\sa LiveResource::addObject
				 */
				void addNcalRelation(QString const &ncalRelation_) { baseAddObject< ncal::ncalRelation >( ncalRelation_ ); }
				/*!
					\fn void removeNcalRelation(QString const &ncalRelation_)
					
					
					Removes the given \a ncalRelation_ from the property \ref ncal_ncalRelation "ncal:ncalRelation" set.
					\sa LiveResource::removeObject
				 */
				void removeNcalRelation(QString const &ncalRelation_) { baseRemoveObject< ncal::ncalRelation >(ncalRelation_); }

				/* Property generated from ncal:organizer
				 * \n The property defines the organizer for a calendar component. Inspired by RFC 2445 sec. 4.8.4.3. Originally this property accepted many parameters. The Organizer class has been introduced to express them all. Note that NCAL is aligned with NCO. The actual value (of the CAL-ADDRESS type) is expressed as an instance of nco:Contact. Remember that the CN parameter has been removed from NCAL. Instead that value should be expressed using nco:fullname property of the above mentioned nco:Contact instance.
				 * \n rdfs:label=organizer
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:Organizer
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1866
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveOrganizers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_organizer "ncal:organizer" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveOrganizers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::organizer >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getOrganizers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_organizer "ncal:organizer" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getOrganizers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::organizer >(object_info, strategy, parent); }
				/*!
					\fn void setOrganizers(LiveNodes const &organizer_)
					
					
					Sets the property \ref ncal_organizer "ncal:organizer" set to the given \a organizer_ set.
					\sa LiveResource::setObjects
				 */
				void setOrganizers(LiveNodes const &organizer_) { baseSetObjects(ncal::organizer::iri(), organizer_); }
				/*!
					\fn void removeOrganizers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_organizer "ncal:organizer" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeOrganizers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::organizer::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Organizer > getOrganizer()
					
					
					Returns the property \ref ncal_organizer "ncal:organizer". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Organizer > getOrganizer() { return baseGetObject< ncal::organizer >(); }
				/*!
					\fn ::SopranoLive::Live< Organizer > setOrganizer(::SopranoLive::Live< Organizer > const &organizer_)
					
					
					Sets the property \ref ncal_organizer "ncal:organizer" to the given \a organizer.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Organizer > setOrganizer(::SopranoLive::Live< Organizer > const &organizer_) { return baseSetObject< ncal::organizer >( organizer_ ); }
				/*!
					\fn ::SopranoLive::Live< Organizer > firstOrganizer()
					
					
					Returns the first property \ref ncal_organizer "ncal:organizer". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Organizer > firstOrganizer() { return baseFirstObject< ncal::organizer >(); }
				/*!
					\fn ::SopranoLive::Live< Organizer > addOrganizer()
					
					
					Adds a new uniquely named resource to the property \ref ncal_organizer "ncal:organizer" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Organizer > addOrganizer() { return baseAddObject< ncal::organizer >(); }
				/*!
					\fn ::SopranoLive::Live< Organizer > addOrganizer(::SopranoLive::Live< Organizer > const &organizer_)
					
					
					Adds the given \a organizer_ to the property \ref ncal_organizer "ncal:organizer" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Organizer > addOrganizer(::SopranoLive::Live< Organizer > const &organizer_) { return baseAddObject< ncal::organizer >( organizer_ ); }
				/*!
					\fn void removeOrganizer(::SopranoLive::Live< Organizer > const &organizer_)
					
					
					Removes the given \a organizer_ from the property \ref ncal_organizer "ncal:organizer" set.
					\sa LiveResource::removeObject
				 */
				void removeOrganizer(::SopranoLive::Live< Organizer > const &organizer_) { baseRemoveObject< ncal::organizer >(organizer_); }

				/* Property generated from ncal:contact
				 * \n The property is used to represent contact information or alternately a reference to contact information associated with the calendar component. Inspired by RFC 2445 sec. 4.8.4.2 with the following reservations: the LANGUAGE parameter has been discarded. Please use xml:lang literals to express language. For the ALTREP parameter use the contactAltRep property.RFC doesn't define any format for the string.
				 * \n rdfs:label=contact
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:weight=4
				 * \n tracker:modified=1218
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_contact "ncal:contact" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::contact >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_contact "ncal:contact" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::contact >(object_info, strategy, parent); }
				/*!
					\fn void setContacts(LiveNodes const &contact_)
					
					
					Sets the property \ref ncal_contact "ncal:contact" set to the given \a contact_ set.
					\sa LiveResource::setObjects
				 */
				void setContacts(LiveNodes const &contact_) { baseSetObjects(ncal::contact::iri(), contact_); }
				/*!
					\fn void removeContacts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_contact "ncal:contact" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContacts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::contact::iri(), object_info); }
				/*!
					\fn QString getContact()
					
					
					Returns the property \ref ncal_contact "ncal:contact". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getContact() { return baseGetObject< ncal::contact >(); }
				/*!
					\fn void setContact(QString const &contact_)
					
					
					Sets the property \ref ncal_contact "ncal:contact" to the given \a contact.
					\sa LiveResource::setObject
				 */
				void setContact(QString const &contact_) { baseSetObject< ncal::contact >( contact_ ); }
				/*!
					\fn QString firstContact()
					
					
					Returns the first property \ref ncal_contact "ncal:contact". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstContact() { return baseFirstObject< ncal::contact >(); }
				/*!
					\fn void addContact(QString const &contact_)
					
					
					Adds the given \a contact_ to the property \ref ncal_contact "ncal:contact" set.
					\sa LiveResource::addObject
				 */
				void addContact(QString const &contact_) { baseAddObject< ncal::contact >( contact_ ); }
				/*!
					\fn void removeContact(QString const &contact_)
					
					
					Removes the given \a contact_ from the property \ref ncal_contact "ncal:contact" set.
					\sa LiveResource::removeObject
				 */
				void removeContact(QString const &contact_) { baseRemoveObject< ncal::contact >(contact_); }

				/* Property generated from ncal:resources
				 * \n Defines the equipment or resources anticipated for an activity specified by a calendar entity. Inspired by RFC 2445 sec. 4.8.1.10 with the following reservations:  the LANGUAGE parameter has been discarded. Please use xml:lang literals to express language. For the ALTREP parameter use the resourcesAltRep property. This property specifies multiple resources. The order is not important. it is recommended to introduce a separate triple for each resource.
				 * \n rdfs:range=xsd:string
				 * \n rdfs:label=resources
				 * \n tracker:modified=1908
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveResourcess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_resources "ncal:resources" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveResourcess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::resources >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getResourcess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_resources "ncal:resources" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getResourcess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::resources >(object_info, strategy, parent); }
				/*!
					\fn void setResourcess(LiveNodes const &resources_)
					
					
					Sets the property \ref ncal_resources "ncal:resources" set to the given \a resources_ set.
					\sa LiveResource::setObjects
				 */
				void setResourcess(LiveNodes const &resources_) { baseSetObjects(ncal::resources::iri(), resources_); }
				/*!
					\fn void removeResourcess(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_resources "ncal:resources" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeResourcess(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::resources::iri(), object_info); }
				/*!
					\fn QString firstResources()
					
					
					Returns the first property \ref ncal_resources "ncal:resources". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstResources() { return baseFirstObject< ncal::resources >(); }
				/*!
					\fn void addResources(QString const &resources_)
					
					
					Adds the given \a resources_ to the property \ref ncal_resources "ncal:resources" set.
					\sa LiveResource::addObject
				 */
				void addResources(QString const &resources_) { baseAddObject< ncal::resources >( resources_ ); }
				/*!
					\fn void removeResources(QString const &resources_)
					
					
					Removes the given \a resources_ from the property \ref ncal_resources "ncal:resources" set.
					\sa LiveResource::removeObject
				 */
				void removeResources(QString const &resources_) { baseRemoveObject< ncal::resources >(resources_); }

				/* Property generated from ncal:hasAlarm
				 * \n Links an event or a todo with a DataObject that can be interpreted as an alarm. This property has no direct equivalent in the RFC 2445. It has been provided to express this relation.
				 * \n rdfs:label=hasAlarm
				 * \n rdfs:subPropertyOf=nie:hasPart
				 * \n rdfs:range=ncal:CalendarDataObject
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1638
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasAlarms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_hasAlarm "ncal:hasAlarm" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasAlarms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::hasAlarm >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasAlarms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_hasAlarm "ncal:hasAlarm" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasAlarms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::hasAlarm >(object_info, strategy, parent); }
				/*!
					\fn void setHasAlarms(LiveNodes const &hasAlarm_)
					
					
					Sets the property \ref ncal_hasAlarm "ncal:hasAlarm" set to the given \a hasAlarm_ set.
					\sa LiveResource::setObjects
				 */
				void setHasAlarms(LiveNodes const &hasAlarm_) { baseSetObjects(ncal::hasAlarm::iri(), hasAlarm_); }
				/*!
					\fn void removeHasAlarms(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_hasAlarm "ncal:hasAlarm" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasAlarms(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::hasAlarm::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< CalendarDataObject > firstHasAlarm()
					
					
					Returns the first property \ref ncal_hasAlarm "ncal:hasAlarm". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< CalendarDataObject > firstHasAlarm() { return baseFirstObject< ncal::hasAlarm >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarDataObject > addHasAlarm()
					
					
					Adds a new uniquely named resource to the property \ref ncal_hasAlarm "ncal:hasAlarm" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CalendarDataObject > addHasAlarm() { return baseAddObject< ncal::hasAlarm >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarDataObject > addHasAlarm(::SopranoLive::Live< CalendarDataObject > const &hasAlarm_)
					
					
					Adds the given \a hasAlarm_ to the property \ref ncal_hasAlarm "ncal:hasAlarm" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CalendarDataObject > addHasAlarm(::SopranoLive::Live< CalendarDataObject > const &hasAlarm_) { return baseAddObject< ncal::hasAlarm >( hasAlarm_ ); }
				/*!
					\fn void removeHasAlarm(::SopranoLive::Live< CalendarDataObject > const &hasAlarm_)
					
					
					Removes the given \a hasAlarm_ from the property \ref ncal_hasAlarm "ncal:hasAlarm" set.
					\sa LiveResource::removeObject
				 */
				void removeHasAlarm(::SopranoLive::Live< CalendarDataObject > const &hasAlarm_) { baseRemoveObject< ncal::hasAlarm >(hasAlarm_); }

				/* Property generated from ncal:url
				 * \n This property defines a Uniform Resource Locator (URL) associated with the iCalendar object. Inspired by the RFC 2445 sec. 4.8.4.6. Original range had been specified as URI.
				 * \n rdfs:label=url
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1434
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_url "ncal:url" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::url >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_url "ncal:url" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::url >(object_info, strategy, parent); }
				/*!
					\fn void setUrls(LiveNodes const &url_)
					
					
					Sets the property \ref ncal_url "ncal:url" set to the given \a url_ set.
					\sa LiveResource::setObjects
				 */
				void setUrls(LiveNodes const &url_) { baseSetObjects(ncal::url::iri(), url_); }
				/*!
					\fn void removeUrls(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_url "ncal:url" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeUrls(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::url::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getUrl()
					
					
					Returns the property \ref ncal_url "ncal:url". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getUrl() { return baseGetObject< ncal::url >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setUrl(::SopranoLive::Live< rdfs::Resource > const &url_)
					
					
					Sets the property \ref ncal_url "ncal:url" to the given \a url.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setUrl(::SopranoLive::Live< rdfs::Resource > const &url_) { return baseSetObject< ncal::url >( url_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstUrl()
					
					
					Returns the first property \ref ncal_url "ncal:url". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstUrl() { return baseFirstObject< ncal::url >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addUrl()
					
					
					Adds a new uniquely named resource to the property \ref ncal_url "ncal:url" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addUrl() { return baseAddObject< ncal::url >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addUrl(::SopranoLive::Live< rdfs::Resource > const &url_)
					
					
					Adds the given \a url_ to the property \ref ncal_url "ncal:url" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addUrl(::SopranoLive::Live< rdfs::Resource > const &url_) { return baseAddObject< ncal::url >( url_ ); }
				/*!
					\fn void removeUrl(::SopranoLive::Live< rdfs::Resource > const &url_)
					
					
					Removes the given \a url_ from the property \ref ncal_url "ncal:url" set.
					\sa LiveResource::removeObject
				 */
				void removeUrl(::SopranoLive::Live< rdfs::Resource > const &url_) { baseRemoveObject< ncal::url >(url_); }

				/* Property generated from ncal:relatedToParent
				 * \n The property is used to represent a relationship or reference between one calendar component and another. Inspired by RFC 2445 sec. 4.8.4.5. Originally this property had a RELTYPE parameter. It has been decided that it is more natural to introduce three different properties to express the values of that parameter. This property expresses the RELATED-TO property with no RELTYPE parameter (the default value is PARENT), or with explicit RELTYPE=PARENT parameter.
				 * \n rdfs:label=relatedToParent
				 * \n rdfs:subPropertyOf=ncal:ncalRelation
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1662
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRelatedToParents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_relatedToParent "ncal:relatedToParent" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRelatedToParents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::relatedToParent >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRelatedToParents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_relatedToParent "ncal:relatedToParent" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRelatedToParents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::relatedToParent >(object_info, strategy, parent); }
				/*!
					\fn void setRelatedToParents(LiveNodes const &relatedToParent_)
					
					
					Sets the property \ref ncal_relatedToParent "ncal:relatedToParent" set to the given \a relatedToParent_ set.
					\sa LiveResource::setObjects
				 */
				void setRelatedToParents(LiveNodes const &relatedToParent_) { baseSetObjects(ncal::relatedToParent::iri(), relatedToParent_); }
				/*!
					\fn void removeRelatedToParents(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_relatedToParent "ncal:relatedToParent" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRelatedToParents(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::relatedToParent::iri(), object_info); }
				/*!
					\fn QString firstRelatedToParent()
					
					
					Returns the first property \ref ncal_relatedToParent "ncal:relatedToParent". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstRelatedToParent() { return baseFirstObject< ncal::relatedToParent >(); }
				/*!
					\fn void addRelatedToParent(QString const &relatedToParent_)
					
					
					Adds the given \a relatedToParent_ to the property \ref ncal_relatedToParent "ncal:relatedToParent" set.
					\sa LiveResource::addObject
				 */
				void addRelatedToParent(QString const &relatedToParent_) { baseAddObject< ncal::relatedToParent >( relatedToParent_ ); }
				/*!
					\fn void removeRelatedToParent(QString const &relatedToParent_)
					
					
					Removes the given \a relatedToParent_ from the property \ref ncal_relatedToParent "ncal:relatedToParent" set.
					\sa LiveResource::removeObject
				 */
				void removeRelatedToParent(QString const &relatedToParent_) { baseRemoveObject< ncal::relatedToParent >(relatedToParent_); }

				/* Property generated from ncal:uid
				 * \n This property defines the persistent, globally unique identifier for the calendar component. Inspired by the RFC 2445 sec 4.8.4.7
				 * \n rdfs:label=uid
				 * \n rdfs:subPropertyOf=nie:identifier
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1289
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveUids(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_uid "ncal:uid" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveUids(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::uid >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getUids(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_uid "ncal:uid" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getUids(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::uid >(object_info, strategy, parent); }
				/*!
					\fn void setUids(LiveNodes const &uid_)
					
					
					Sets the property \ref ncal_uid "ncal:uid" set to the given \a uid_ set.
					\sa LiveResource::setObjects
				 */
				void setUids(LiveNodes const &uid_) { baseSetObjects(ncal::uid::iri(), uid_); }
				/*!
					\fn void removeUids(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_uid "ncal:uid" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeUids(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::uid::iri(), object_info); }
				/*!
					\fn QString getUid()
					
					
					Returns the property \ref ncal_uid "ncal:uid". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getUid() { return baseGetObject< ncal::uid >(); }
				/*!
					\fn void setUid(QString const &uid_)
					
					
					Sets the property \ref ncal_uid "ncal:uid" to the given \a uid.
					\sa LiveResource::setObject
				 */
				void setUid(QString const &uid_) { baseSetObject< ncal::uid >( uid_ ); }
				/*!
					\fn QString firstUid()
					
					
					Returns the first property \ref ncal_uid "ncal:uid". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstUid() { return baseFirstObject< ncal::uid >(); }
				/*!
					\fn void addUid(QString const &uid_)
					
					
					Adds the given \a uid_ to the property \ref ncal_uid "ncal:uid" set.
					\sa LiveResource::addObject
				 */
				void addUid(QString const &uid_) { baseAddObject< ncal::uid >( uid_ ); }
				/*!
					\fn void removeUid(QString const &uid_)
					
					
					Removes the given \a uid_ from the property \ref ncal_uid "ncal:uid" set.
					\sa LiveResource::removeObject
				 */
				void removeUid(QString const &uid_) { baseRemoveObject< ncal::uid >(uid_); }

				/* Property generated from ncal:exdate
				 * \n This property defines the list of date/time exceptions for a recurring calendar component. Inspired by RFC 2445 sec. 4.8.5.1
				 * \n rdfs:range=ncal:NcalDateTime
				 * \n rdfs:label=exdate
				 * \n tracker:modified=1949
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveExdates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_exdate "ncal:exdate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveExdates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::exdate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getExdates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_exdate "ncal:exdate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getExdates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::exdate >(object_info, strategy, parent); }
				/*!
					\fn void setExdates(LiveNodes const &exdate_)
					
					
					Sets the property \ref ncal_exdate "ncal:exdate" set to the given \a exdate_ set.
					\sa LiveResource::setObjects
				 */
				void setExdates(LiveNodes const &exdate_) { baseSetObjects(ncal::exdate::iri(), exdate_); }
				/*!
					\fn void removeExdates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_exdate "ncal:exdate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeExdates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::exdate::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > firstExdate()
					
					
					Returns the first property \ref ncal_exdate "ncal:exdate". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< NcalDateTime > firstExdate() { return baseFirstObject< ncal::exdate >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > addExdate()
					
					
					Adds a new uniquely named resource to the property \ref ncal_exdate "ncal:exdate" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< NcalDateTime > addExdate() { return baseAddObject< ncal::exdate >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > addExdate(::SopranoLive::Live< NcalDateTime > const &exdate_)
					
					
					Adds the given \a exdate_ to the property \ref ncal_exdate "ncal:exdate" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< NcalDateTime > addExdate(::SopranoLive::Live< NcalDateTime > const &exdate_) { return baseAddObject< ncal::exdate >( exdate_ ); }
				/*!
					\fn void removeExdate(::SopranoLive::Live< NcalDateTime > const &exdate_)
					
					
					Removes the given \a exdate_ from the property \ref ncal_exdate "ncal:exdate" set.
					\sa LiveResource::removeObject
				 */
				void removeExdate(::SopranoLive::Live< NcalDateTime > const &exdate_) { baseRemoveObject< ncal::exdate >(exdate_); }

				/* Property generated from ncal:description
				 * \n A more complete description of the calendar component, than that provided by the ncal:summary property.Inspired by RFC 2445 sec. 4.8.1.5 with following reservations:  the LANGUAGE parameter has been discarded. Please use xml:lang literals to express language. For the ALTREP parameter use the descriptionAltRep property.
				 * \n rdfs:label=description
				 * \n rdfs:subPropertyOf=nie:description
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:weight=3
				 * \n tracker:modified=1541
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_description "ncal:description" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::description >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_description "ncal:description" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::description >(object_info, strategy, parent); }
				/*!
					\fn void setDescriptions(LiveNodes const &description_)
					
					
					Sets the property \ref ncal_description "ncal:description" set to the given \a description_ set.
					\sa LiveResource::setObjects
				 */
				void setDescriptions(LiveNodes const &description_) { baseSetObjects(ncal::description::iri(), description_); }
				/*!
					\fn void removeDescriptions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_description "ncal:description" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDescriptions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::description::iri(), object_info); }
				/*!
					\fn QString getDescription()
					
					
					Returns the property \ref ncal_description "ncal:description". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDescription() { return baseGetObject< ncal::description >(); }
				/*!
					\fn void setDescription(QString const &description_)
					
					
					Sets the property \ref ncal_description "ncal:description" to the given \a description.
					\sa LiveResource::setObject
				 */
				void setDescription(QString const &description_) { baseSetObject< ncal::description >( description_ ); }
				/*!
					\fn QString firstDescription()
					
					
					Returns the first property \ref ncal_description "ncal:description". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDescription() { return baseFirstObject< ncal::description >(); }
				/*!
					\fn void addDescription(QString const &description_)
					
					
					Adds the given \a description_ to the property \ref ncal_description "ncal:description" set.
					\sa LiveResource::addObject
				 */
				void addDescription(QString const &description_) { baseAddObject< ncal::description >( description_ ); }
				/*!
					\fn void removeDescription(QString const &description_)
					
					
					Removes the given \a description_ from the property \ref ncal_description "ncal:description" set.
					\sa LiveResource::removeObject
				 */
				void removeDescription(QString const &description_) { baseRemoveObject< ncal::description >(description_); }

				/* Property generated from ncal:commentAltRep
				 * \n Alternate representation of the comment. Introduced to cover the ALTREP parameter of the COMMENT property. See documentation of ncal:comment for details.
				 * \n rdfs:label=commentAltRep
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1750
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCommentAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_commentAltRep "ncal:commentAltRep" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCommentAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::commentAltRep >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCommentAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_commentAltRep "ncal:commentAltRep" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCommentAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::commentAltRep >(object_info, strategy, parent); }
				/*!
					\fn void setCommentAltReps(LiveNodes const &commentAltRep_)
					
					
					Sets the property \ref ncal_commentAltRep "ncal:commentAltRep" set to the given \a commentAltRep_ set.
					\sa LiveResource::setObjects
				 */
				void setCommentAltReps(LiveNodes const &commentAltRep_) { baseSetObjects(ncal::commentAltRep::iri(), commentAltRep_); }
				/*!
					\fn void removeCommentAltReps(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_commentAltRep "ncal:commentAltRep" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCommentAltReps(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::commentAltRep::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getCommentAltRep()
					
					
					Returns the property \ref ncal_commentAltRep "ncal:commentAltRep". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getCommentAltRep() { return baseGetObject< ncal::commentAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setCommentAltRep(::SopranoLive::Live< rdfs::Resource > const &commentAltRep_)
					
					
					Sets the property \ref ncal_commentAltRep "ncal:commentAltRep" to the given \a commentAltRep.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setCommentAltRep(::SopranoLive::Live< rdfs::Resource > const &commentAltRep_) { return baseSetObject< ncal::commentAltRep >( commentAltRep_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstCommentAltRep()
					
					
					Returns the first property \ref ncal_commentAltRep "ncal:commentAltRep". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstCommentAltRep() { return baseFirstObject< ncal::commentAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addCommentAltRep()
					
					
					Adds a new uniquely named resource to the property \ref ncal_commentAltRep "ncal:commentAltRep" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addCommentAltRep() { return baseAddObject< ncal::commentAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addCommentAltRep(::SopranoLive::Live< rdfs::Resource > const &commentAltRep_)
					
					
					Adds the given \a commentAltRep_ to the property \ref ncal_commentAltRep "ncal:commentAltRep" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addCommentAltRep(::SopranoLive::Live< rdfs::Resource > const &commentAltRep_) { return baseAddObject< ncal::commentAltRep >( commentAltRep_ ); }
				/*!
					\fn void removeCommentAltRep(::SopranoLive::Live< rdfs::Resource > const &commentAltRep_)
					
					
					Removes the given \a commentAltRep_ from the property \ref ncal_commentAltRep "ncal:commentAltRep" set.
					\sa LiveResource::removeObject
				 */
				void removeCommentAltRep(::SopranoLive::Live< rdfs::Resource > const &commentAltRep_) { baseRemoveObject< ncal::commentAltRep >(commentAltRep_); }

				/* Property generated from ncal:locationAltRep
				 * \n Alternate representation of the event or todo location. Introduced to cover the ALTREP parameter of the LOCATION property. See documentation of ncal:location for details.
				 * \n rdfs:label=locationAltRep
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1315
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLocationAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_locationAltRep "ncal:locationAltRep" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLocationAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::locationAltRep >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLocationAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_locationAltRep "ncal:locationAltRep" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLocationAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::locationAltRep >(object_info, strategy, parent); }
				/*!
					\fn void setLocationAltReps(LiveNodes const &locationAltRep_)
					
					
					Sets the property \ref ncal_locationAltRep "ncal:locationAltRep" set to the given \a locationAltRep_ set.
					\sa LiveResource::setObjects
				 */
				void setLocationAltReps(LiveNodes const &locationAltRep_) { baseSetObjects(ncal::locationAltRep::iri(), locationAltRep_); }
				/*!
					\fn void removeLocationAltReps(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_locationAltRep "ncal:locationAltRep" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLocationAltReps(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::locationAltRep::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getLocationAltRep()
					
					
					Returns the property \ref ncal_locationAltRep "ncal:locationAltRep". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getLocationAltRep() { return baseGetObject< ncal::locationAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setLocationAltRep(::SopranoLive::Live< rdfs::Resource > const &locationAltRep_)
					
					
					Sets the property \ref ncal_locationAltRep "ncal:locationAltRep" to the given \a locationAltRep.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setLocationAltRep(::SopranoLive::Live< rdfs::Resource > const &locationAltRep_) { return baseSetObject< ncal::locationAltRep >( locationAltRep_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstLocationAltRep()
					
					
					Returns the first property \ref ncal_locationAltRep "ncal:locationAltRep". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstLocationAltRep() { return baseFirstObject< ncal::locationAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addLocationAltRep()
					
					
					Adds a new uniquely named resource to the property \ref ncal_locationAltRep "ncal:locationAltRep" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addLocationAltRep() { return baseAddObject< ncal::locationAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addLocationAltRep(::SopranoLive::Live< rdfs::Resource > const &locationAltRep_)
					
					
					Adds the given \a locationAltRep_ to the property \ref ncal_locationAltRep "ncal:locationAltRep" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addLocationAltRep(::SopranoLive::Live< rdfs::Resource > const &locationAltRep_) { return baseAddObject< ncal::locationAltRep >( locationAltRep_ ); }
				/*!
					\fn void removeLocationAltRep(::SopranoLive::Live< rdfs::Resource > const &locationAltRep_)
					
					
					Removes the given \a locationAltRep_ from the property \ref ncal_locationAltRep "ncal:locationAltRep" set.
					\sa LiveResource::removeObject
				 */
				void removeLocationAltRep(::SopranoLive::Live< rdfs::Resource > const &locationAltRep_) { baseRemoveObject< ncal::locationAltRep >(locationAltRep_); }

				/* Property generated from ncal:duration
				 * \n The property specifies a positive duration of time. Inspired by RFC 2445 sec. 4.8.2.5
				 * \n rdfs:label=duration
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1803
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_duration "ncal:duration" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::duration >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_duration "ncal:duration" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::duration >(object_info, strategy, parent); }
				/*!
					\fn void setDurations(LiveNodes const &duration_)
					
					
					Sets the property \ref ncal_duration "ncal:duration" set to the given \a duration_ set.
					\sa LiveResource::setObjects
				 */
				void setDurations(LiveNodes const &duration_) { baseSetObjects(ncal::duration::iri(), duration_); }
				/*!
					\fn void removeDurations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_duration "ncal:duration" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDurations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::duration::iri(), object_info); }
				/*!
					\fn qint64 getDuration()
					
					
					Returns the property \ref ncal_duration "ncal:duration". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getDuration() { return baseGetObject< ncal::duration >(); }
				/*!
					\fn void setDuration(qint64 const &duration_)
					
					
					Sets the property \ref ncal_duration "ncal:duration" to the given \a duration.
					\sa LiveResource::setObject
				 */
				void setDuration(qint64 const &duration_) { baseSetObject< ncal::duration >( duration_ ); }
				/*!
					\fn qint64 firstDuration()
					
					
					Returns the first property \ref ncal_duration "ncal:duration". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstDuration() { return baseFirstObject< ncal::duration >(); }
				/*!
					\fn void addDuration(qint64 const &duration_)
					
					
					Adds the given \a duration_ to the property \ref ncal_duration "ncal:duration" set.
					\sa LiveResource::addObject
				 */
				void addDuration(qint64 const &duration_) { baseAddObject< ncal::duration >( duration_ ); }
				/*!
					\fn void removeDuration(qint64 const &duration_)
					
					
					Removes the given \a duration_ from the property \ref ncal_duration "ncal:duration" set.
					\sa LiveResource::removeObject
				 */
				void removeDuration(qint64 const &duration_) { baseRemoveObject< ncal::duration >(duration_); }

				/* Property generated from ncal:requestStatus
				 * \n This property defines the status code returned for a scheduling request. Inspired by RFC 2445 sec. 4.8.8.2. Original value of this property was a four-element structure. The RequestStatus class has been introduced to express it. In RFC 2445 this property could have the LANGUAGE parameter. This has been discarded in this ontology. Use xml:lang literals to express it if necessary.
				 * \n rdfs:label=requestStatus
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:RequestStatus
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1439
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRequestStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_requestStatus "ncal:requestStatus" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRequestStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::requestStatus >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRequestStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_requestStatus "ncal:requestStatus" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRequestStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::requestStatus >(object_info, strategy, parent); }
				/*!
					\fn void setRequestStatuss(LiveNodes const &requestStatus_)
					
					
					Sets the property \ref ncal_requestStatus "ncal:requestStatus" set to the given \a requestStatus_ set.
					\sa LiveResource::setObjects
				 */
				void setRequestStatuss(LiveNodes const &requestStatus_) { baseSetObjects(ncal::requestStatus::iri(), requestStatus_); }
				/*!
					\fn void removeRequestStatuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_requestStatus "ncal:requestStatus" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRequestStatuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::requestStatus::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< RequestStatus > getRequestStatus()
					
					
					Returns the property \ref ncal_requestStatus "ncal:requestStatus". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< RequestStatus > getRequestStatus() { return baseGetObject< ncal::requestStatus >(); }
				/*!
					\fn ::SopranoLive::Live< RequestStatus > setRequestStatus(::SopranoLive::Live< RequestStatus > const &requestStatus_)
					
					
					Sets the property \ref ncal_requestStatus "ncal:requestStatus" to the given \a requestStatus.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< RequestStatus > setRequestStatus(::SopranoLive::Live< RequestStatus > const &requestStatus_) { return baseSetObject< ncal::requestStatus >( requestStatus_ ); }
				/*!
					\fn ::SopranoLive::Live< RequestStatus > firstRequestStatus()
					
					
					Returns the first property \ref ncal_requestStatus "ncal:requestStatus". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< RequestStatus > firstRequestStatus() { return baseFirstObject< ncal::requestStatus >(); }
				/*!
					\fn ::SopranoLive::Live< RequestStatus > addRequestStatus()
					
					
					Adds a new uniquely named resource to the property \ref ncal_requestStatus "ncal:requestStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RequestStatus > addRequestStatus() { return baseAddObject< ncal::requestStatus >(); }
				/*!
					\fn ::SopranoLive::Live< RequestStatus > addRequestStatus(::SopranoLive::Live< RequestStatus > const &requestStatus_)
					
					
					Adds the given \a requestStatus_ to the property \ref ncal_requestStatus "ncal:requestStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RequestStatus > addRequestStatus(::SopranoLive::Live< RequestStatus > const &requestStatus_) { return baseAddObject< ncal::requestStatus >( requestStatus_ ); }
				/*!
					\fn void removeRequestStatus(::SopranoLive::Live< RequestStatus > const &requestStatus_)
					
					
					Removes the given \a requestStatus_ from the property \ref ncal_requestStatus "ncal:requestStatus" set.
					\sa LiveResource::removeObject
				 */
				void removeRequestStatus(::SopranoLive::Live< RequestStatus > const &requestStatus_) { baseRemoveObject< ncal::requestStatus >(requestStatus_); }

				/* Property generated from ncal:lastModified
				 * \n The property specifies the date and time that the information associated with the calendar component was last revised in the calendar store. Note: This is analogous to the modification date and time for a file in the file system. Inspired by RFC 2445 sec. 4.8.7.3. Note that the RFC allows ONLY UTC time values for this property.
				 * \n rdfs:label=lastModified
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1984
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_lastModified "ncal:lastModified" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::lastModified >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_lastModified "ncal:lastModified" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::lastModified >(object_info, strategy, parent); }
				/*!
					\fn void setLastModifieds(LiveNodes const &lastModified_)
					
					
					Sets the property \ref ncal_lastModified "ncal:lastModified" set to the given \a lastModified_ set.
					\sa LiveResource::setObjects
				 */
				void setLastModifieds(LiveNodes const &lastModified_) { baseSetObjects(ncal::lastModified::iri(), lastModified_); }
				/*!
					\fn void removeLastModifieds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_lastModified "ncal:lastModified" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLastModifieds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::lastModified::iri(), object_info); }
				/*!
					\fn QDateTime getLastModified()
					
					
					Returns the property \ref ncal_lastModified "ncal:lastModified". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getLastModified() { return baseGetObject< ncal::lastModified >(); }
				/*!
					\fn void setLastModified(QDateTime const &lastModified_)
					
					
					Sets the property \ref ncal_lastModified "ncal:lastModified" to the given \a lastModified.
					\sa LiveResource::setObject
				 */
				void setLastModified(QDateTime const &lastModified_) { baseSetObject< ncal::lastModified >( lastModified_ ); }
				/*!
					\fn QDateTime firstLastModified()
					
					
					Returns the first property \ref ncal_lastModified "ncal:lastModified". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstLastModified() { return baseFirstObject< ncal::lastModified >(); }
				/*!
					\fn void addLastModified(QDateTime const &lastModified_)
					
					
					Adds the given \a lastModified_ to the property \ref ncal_lastModified "ncal:lastModified" set.
					\sa LiveResource::addObject
				 */
				void addLastModified(QDateTime const &lastModified_) { baseAddObject< ncal::lastModified >( lastModified_ ); }
				/*!
					\fn void removeLastModified(QDateTime const &lastModified_)
					
					
					Removes the given \a lastModified_ from the property \ref ncal_lastModified "ncal:lastModified" set.
					\sa LiveResource::removeObject
				 */
				void removeLastModified(QDateTime const &lastModified_) { baseRemoveObject< ncal::lastModified >(lastModified_); }

				/* Property generated from ncal:class
				 * \n Defines the access classification for a calendar component. Inspired by RFC 2445 sec. 4.8.1.3 with the following reservations:  this property has limited vocabulary. Possible values are:  PUBLIC, PRIVATE and CONFIDENTIAL. The default is PUBLIC. Those values are expressed as instances of the AccessClassification class. The user may create his/her own if necessary.
				 * \n rdfs:label=class
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:AccessClassification
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1697
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveClass_s(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_class_ "ncal:class" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveClass_s(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::class_ >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getClass_s(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_class_ "ncal:class" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getClass_s(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::class_ >(object_info, strategy, parent); }
				/*!
					\fn void setClass_s(LiveNodes const &class__)
					
					
					Sets the property \ref ncal_class_ "ncal:class" set to the given \a class__ set.
					\sa LiveResource::setObjects
				 */
				void setClass_s(LiveNodes const &class__) { baseSetObjects(ncal::class_::iri(), class__); }
				/*!
					\fn void removeClass_s(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_class_ "ncal:class" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeClass_s(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::class_::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< AccessClassification > getClass_()
					
					
					Returns the property \ref ncal_class_ "ncal:class". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< AccessClassification > getClass_() { return baseGetObject< ncal::class_ >(); }
				/*!
					\fn ::SopranoLive::Live< AccessClassification > setClass_(::SopranoLive::Live< AccessClassification > const &class__)
					
					
					Sets the property \ref ncal_class_ "ncal:class" to the given \a class_.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< AccessClassification > setClass_(::SopranoLive::Live< AccessClassification > const &class__) { return baseSetObject< ncal::class_ >( class__ ); }
				/*!
					\fn ::SopranoLive::Live< AccessClassification > firstClass_()
					
					
					Returns the first property \ref ncal_class_ "ncal:class". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< AccessClassification > firstClass_() { return baseFirstObject< ncal::class_ >(); }
				/*!
					\fn ::SopranoLive::Live< AccessClassification > addClass_()
					
					
					Adds a new uniquely named resource to the property \ref ncal_class_ "ncal:class" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AccessClassification > addClass_() { return baseAddObject< ncal::class_ >(); }
				/*!
					\fn ::SopranoLive::Live< AccessClassification > addClass_(::SopranoLive::Live< AccessClassification > const &class__)
					
					
					Adds the given \a class__ to the property \ref ncal_class_ "ncal:class" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AccessClassification > addClass_(::SopranoLive::Live< AccessClassification > const &class__) { return baseAddObject< ncal::class_ >( class__ ); }
				/*!
					\fn void removeClass_(::SopranoLive::Live< AccessClassification > const &class__)
					
					
					Removes the given \a class__ from the property \ref ncal_class_ "ncal:class" set.
					\sa LiveResource::removeObject
				 */
				void removeClass_(::SopranoLive::Live< AccessClassification > const &class__) { baseRemoveObject< ncal::class_ >(class__); }

				/* Property generated from ncal:descriptionAltRep
				 * \n Alternate representation of the calendar entity description. Introduced to cover the ALTREP parameter of the DESCRIPTION property. See documentation of ncal:description for details.
				 * \n rdfs:label=descriptionAltRep
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1499
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDescriptionAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_descriptionAltRep "ncal:descriptionAltRep" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDescriptionAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::descriptionAltRep >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDescriptionAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_descriptionAltRep "ncal:descriptionAltRep" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDescriptionAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::descriptionAltRep >(object_info, strategy, parent); }
				/*!
					\fn void setDescriptionAltReps(LiveNodes const &descriptionAltRep_)
					
					
					Sets the property \ref ncal_descriptionAltRep "ncal:descriptionAltRep" set to the given \a descriptionAltRep_ set.
					\sa LiveResource::setObjects
				 */
				void setDescriptionAltReps(LiveNodes const &descriptionAltRep_) { baseSetObjects(ncal::descriptionAltRep::iri(), descriptionAltRep_); }
				/*!
					\fn void removeDescriptionAltReps(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_descriptionAltRep "ncal:descriptionAltRep" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDescriptionAltReps(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::descriptionAltRep::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getDescriptionAltRep()
					
					
					Returns the property \ref ncal_descriptionAltRep "ncal:descriptionAltRep". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getDescriptionAltRep() { return baseGetObject< ncal::descriptionAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setDescriptionAltRep(::SopranoLive::Live< rdfs::Resource > const &descriptionAltRep_)
					
					
					Sets the property \ref ncal_descriptionAltRep "ncal:descriptionAltRep" to the given \a descriptionAltRep.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setDescriptionAltRep(::SopranoLive::Live< rdfs::Resource > const &descriptionAltRep_) { return baseSetObject< ncal::descriptionAltRep >( descriptionAltRep_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstDescriptionAltRep()
					
					
					Returns the first property \ref ncal_descriptionAltRep "ncal:descriptionAltRep". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstDescriptionAltRep() { return baseFirstObject< ncal::descriptionAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addDescriptionAltRep()
					
					
					Adds a new uniquely named resource to the property \ref ncal_descriptionAltRep "ncal:descriptionAltRep" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addDescriptionAltRep() { return baseAddObject< ncal::descriptionAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addDescriptionAltRep(::SopranoLive::Live< rdfs::Resource > const &descriptionAltRep_)
					
					
					Adds the given \a descriptionAltRep_ to the property \ref ncal_descriptionAltRep "ncal:descriptionAltRep" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addDescriptionAltRep(::SopranoLive::Live< rdfs::Resource > const &descriptionAltRep_) { return baseAddObject< ncal::descriptionAltRep >( descriptionAltRep_ ); }
				/*!
					\fn void removeDescriptionAltRep(::SopranoLive::Live< rdfs::Resource > const &descriptionAltRep_)
					
					
					Removes the given \a descriptionAltRep_ from the property \ref ncal_descriptionAltRep "ncal:descriptionAltRep" set.
					\sa LiveResource::removeObject
				 */
				void removeDescriptionAltRep(::SopranoLive::Live< rdfs::Resource > const &descriptionAltRep_) { baseRemoveObject< ncal::descriptionAltRep >(descriptionAltRep_); }

				/* Property generated from ncal:comment
				 * \n Non-processing information intended to provide a comment to the calendar user. Inspired by RFC 2445 sec. 4.8.1.4 with the following reservations:  the LANGUAGE parameter has been discarded. Please use xml:lang literals to express language. For the ALTREP parameter use the commentAltRep property.
				 * \n rdfs:label=comment
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:weight=3
				 * \n tracker:modified=1045
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_comment "ncal:comment" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::comment >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_comment "ncal:comment" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::comment >(object_info, strategy, parent); }
				/*!
					\fn void setComments(LiveNodes const &comment_)
					
					
					Sets the property \ref ncal_comment "ncal:comment" set to the given \a comment_ set.
					\sa LiveResource::setObjects
				 */
				void setComments(LiveNodes const &comment_) { baseSetObjects(ncal::comment::iri(), comment_); }
				/*!
					\fn void removeComments(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_comment "ncal:comment" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeComments(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::comment::iri(), object_info); }
				/*!
					\fn QString getComment()
					
					
					Returns the property \ref ncal_comment "ncal:comment". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getComment() { return baseGetObject< ncal::comment >(); }
				/*!
					\fn void setComment(QString const &comment_)
					
					
					Sets the property \ref ncal_comment "ncal:comment" to the given \a comment.
					\sa LiveResource::setObject
				 */
				void setComment(QString const &comment_) { baseSetObject< ncal::comment >( comment_ ); }
				/*!
					\fn QString firstComment()
					
					
					Returns the first property \ref ncal_comment "ncal:comment". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstComment() { return baseFirstObject< ncal::comment >(); }
				/*!
					\fn void addComment(QString const &comment_)
					
					
					Adds the given \a comment_ to the property \ref ncal_comment "ncal:comment" set.
					\sa LiveResource::addObject
				 */
				void addComment(QString const &comment_) { baseAddObject< ncal::comment >( comment_ ); }
				/*!
					\fn void removeComment(QString const &comment_)
					
					
					Removes the given \a comment_ from the property \ref ncal_comment "ncal:comment" set.
					\sa LiveResource::removeObject
				 */
				void removeComment(QString const &comment_) { baseRemoveObject< ncal::comment >(comment_); }

				/* Property generated from ncal:location
				 * \n Defines the intended venue for the activity defined by a calendar component. Inspired by RFC 2445 sec 4.8.1.7 with the following reservations:  the LANGUAGE parameter has been discarded. Please use xml:lang literals to express language.  For the ALTREP parameter use the locationAltRep property.
				 * \n rdfs:label=location
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:weight=3
				 * \n tracker:modified=1858
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_location "ncal:location" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::location >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_location "ncal:location" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::location >(object_info, strategy, parent); }
				/*!
					\fn void setLocations(LiveNodes const &location_)
					
					
					Sets the property \ref ncal_location "ncal:location" set to the given \a location_ set.
					\sa LiveResource::setObjects
				 */
				void setLocations(LiveNodes const &location_) { baseSetObjects(ncal::location::iri(), location_); }
				/*!
					\fn void removeLocations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_location "ncal:location" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLocations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::location::iri(), object_info); }
				/*!
					\fn QString getLocation()
					
					
					Returns the property \ref ncal_location "ncal:location". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getLocation() { return baseGetObject< ncal::location >(); }
				/*!
					\fn void setLocation(QString const &location_)
					
					
					Sets the property \ref ncal_location "ncal:location" to the given \a location.
					\sa LiveResource::setObject
				 */
				void setLocation(QString const &location_) { baseSetObject< ncal::location >( location_ ); }
				/*!
					\fn QString firstLocation()
					
					
					Returns the first property \ref ncal_location "ncal:location". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstLocation() { return baseFirstObject< ncal::location >(); }
				/*!
					\fn void addLocation(QString const &location_)
					
					
					Adds the given \a location_ to the property \ref ncal_location "ncal:location" set.
					\sa LiveResource::addObject
				 */
				void addLocation(QString const &location_) { baseAddObject< ncal::location >( location_ ); }
				/*!
					\fn void removeLocation(QString const &location_)
					
					
					Removes the given \a location_ from the property \ref ncal_location "ncal:location" set.
					\sa LiveResource::removeObject
				 */
				void removeLocation(QString const &location_) { baseRemoveObject< ncal::location >(location_); }

				/* Property generated from ncal:attach
				 * \n The property provides the capability to associate a document object with a calendar component. Defined in the RFC 2445 sec. 4.8.1.1
				 * \n rdfs:label=attach
				 * \n rdfs:subPropertyOf=nie:hasPart
				 * \n rdfs:range=ncal:Attachment
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1623
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAttachs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_attach "ncal:attach" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAttachs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::attach >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAttachs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_attach "ncal:attach" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAttachs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::attach >(object_info, strategy, parent); }
				/*!
					\fn void setAttachs(LiveNodes const &attach_)
					
					
					Sets the property \ref ncal_attach "ncal:attach" set to the given \a attach_ set.
					\sa LiveResource::setObjects
				 */
				void setAttachs(LiveNodes const &attach_) { baseSetObjects(ncal::attach::iri(), attach_); }
				/*!
					\fn void removeAttachs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_attach "ncal:attach" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAttachs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::attach::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Attachment > firstAttach()
					
					
					Returns the first property \ref ncal_attach "ncal:attach". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Attachment > firstAttach() { return baseFirstObject< ncal::attach >(); }
				/*!
					\fn ::SopranoLive::Live< Attachment > addAttach()
					
					
					Adds a new uniquely named resource to the property \ref ncal_attach "ncal:attach" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Attachment > addAttach() { return baseAddObject< ncal::attach >(); }
				/*!
					\fn ::SopranoLive::Live< Attachment > addAttach(::SopranoLive::Live< Attachment > const &attach_)
					
					
					Adds the given \a attach_ to the property \ref ncal_attach "ncal:attach" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Attachment > addAttach(::SopranoLive::Live< Attachment > const &attach_) { return baseAddObject< ncal::attach >( attach_ ); }
				/*!
					\fn void removeAttach(::SopranoLive::Live< Attachment > const &attach_)
					
					
					Removes the given \a attach_ from the property \ref ncal_attach "ncal:attach" set.
					\sa LiveResource::removeObject
				 */
				void removeAttach(::SopranoLive::Live< Attachment > const &attach_) { baseRemoveObject< ncal::attach >(attach_); }

				/* Property generated from ncal:priority
				 * \n The property defines the relative priority for a calendar component. Inspired by RFC 2445 sec. 4.8.1.9
				 * \n rdfs:label=priority
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1725
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePrioritys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_priority "ncal:priority" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePrioritys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::priority >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPrioritys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_priority "ncal:priority" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPrioritys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::priority >(object_info, strategy, parent); }
				/*!
					\fn void setPrioritys(LiveNodes const &priority_)
					
					
					Sets the property \ref ncal_priority "ncal:priority" set to the given \a priority_ set.
					\sa LiveResource::setObjects
				 */
				void setPrioritys(LiveNodes const &priority_) { baseSetObjects(ncal::priority::iri(), priority_); }
				/*!
					\fn void removePrioritys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_priority "ncal:priority" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePrioritys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::priority::iri(), object_info); }
				/*!
					\fn qint64 getPriority()
					
					
					Returns the property \ref ncal_priority "ncal:priority". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getPriority() { return baseGetObject< ncal::priority >(); }
				/*!
					\fn void setPriority(qint64 const &priority_)
					
					
					Sets the property \ref ncal_priority "ncal:priority" to the given \a priority.
					\sa LiveResource::setObject
				 */
				void setPriority(qint64 const &priority_) { baseSetObject< ncal::priority >( priority_ ); }
				/*!
					\fn qint64 firstPriority()
					
					
					Returns the first property \ref ncal_priority "ncal:priority". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstPriority() { return baseFirstObject< ncal::priority >(); }
				/*!
					\fn void addPriority(qint64 const &priority_)
					
					
					Adds the given \a priority_ to the property \ref ncal_priority "ncal:priority" set.
					\sa LiveResource::addObject
				 */
				void addPriority(qint64 const &priority_) { baseAddObject< ncal::priority >( priority_ ); }
				/*!
					\fn void removePriority(qint64 const &priority_)
					
					
					Removes the given \a priority_ from the property \ref ncal_priority "ncal:priority" set.
					\sa LiveResource::removeObject
				 */
				void removePriority(qint64 const &priority_) { baseRemoveObject< ncal::priority >(priority_); }

				/* Property generated from ncal:recurrenceId
				 * \n rdfs:label=recurrenceId
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:RecurrenceIdentifier
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1076
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRecurrenceIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_recurrenceId "ncal:recurrenceId" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRecurrenceIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::recurrenceId >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRecurrenceIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_recurrenceId "ncal:recurrenceId" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRecurrenceIds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::recurrenceId >(object_info, strategy, parent); }
				/*!
					\fn void setRecurrenceIds(LiveNodes const &recurrenceId_)
					
					
					Sets the property \ref ncal_recurrenceId "ncal:recurrenceId" set to the given \a recurrenceId_ set.
					\sa LiveResource::setObjects
				 */
				void setRecurrenceIds(LiveNodes const &recurrenceId_) { baseSetObjects(ncal::recurrenceId::iri(), recurrenceId_); }
				/*!
					\fn void removeRecurrenceIds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_recurrenceId "ncal:recurrenceId" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRecurrenceIds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::recurrenceId::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceIdentifier > getRecurrenceId()
					
					
					Returns the property \ref ncal_recurrenceId "ncal:recurrenceId". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< RecurrenceIdentifier > getRecurrenceId() { return baseGetObject< ncal::recurrenceId >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceIdentifier > setRecurrenceId(::SopranoLive::Live< RecurrenceIdentifier > const &recurrenceId_)
					
					
					Sets the property \ref ncal_recurrenceId "ncal:recurrenceId" to the given \a recurrenceId.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< RecurrenceIdentifier > setRecurrenceId(::SopranoLive::Live< RecurrenceIdentifier > const &recurrenceId_) { return baseSetObject< ncal::recurrenceId >( recurrenceId_ ); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceIdentifier > firstRecurrenceId()
					
					
					Returns the first property \ref ncal_recurrenceId "ncal:recurrenceId". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< RecurrenceIdentifier > firstRecurrenceId() { return baseFirstObject< ncal::recurrenceId >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceIdentifier > addRecurrenceId()
					
					
					Adds a new uniquely named resource to the property \ref ncal_recurrenceId "ncal:recurrenceId" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RecurrenceIdentifier > addRecurrenceId() { return baseAddObject< ncal::recurrenceId >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceIdentifier > addRecurrenceId(::SopranoLive::Live< RecurrenceIdentifier > const &recurrenceId_)
					
					
					Adds the given \a recurrenceId_ to the property \ref ncal_recurrenceId "ncal:recurrenceId" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RecurrenceIdentifier > addRecurrenceId(::SopranoLive::Live< RecurrenceIdentifier > const &recurrenceId_) { return baseAddObject< ncal::recurrenceId >( recurrenceId_ ); }
				/*!
					\fn void removeRecurrenceId(::SopranoLive::Live< RecurrenceIdentifier > const &recurrenceId_)
					
					
					Removes the given \a recurrenceId_ from the property \ref ncal_recurrenceId "ncal:recurrenceId" set.
					\sa LiveResource::removeObject
				 */
				void removeRecurrenceId(::SopranoLive::Live< RecurrenceIdentifier > const &recurrenceId_) { baseRemoveObject< ncal::recurrenceId >(recurrenceId_); }

				/* Property generated from ncal:categories
				 * \n Categories for a calendar component. Inspired by RFC 2445 sec 4.8.1.2 with the following reservations: The LANGUAGE parameter has been discarded. Please use xml:lang literals to express multiple languages. This property can specify multiple comma-separated categories. The order of categories doesn't matter. Please use a separate triple for each category.
				 * \n rdfs:range=xsd:string
				 * \n rdfs:label=categories
				 * \n tracker:modified=1365
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCategoriess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_categories "ncal:categories" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCategoriess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::categories >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCategoriess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_categories "ncal:categories" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCategoriess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::categories >(object_info, strategy, parent); }
				/*!
					\fn void setCategoriess(LiveNodes const &categories_)
					
					
					Sets the property \ref ncal_categories "ncal:categories" set to the given \a categories_ set.
					\sa LiveResource::setObjects
				 */
				void setCategoriess(LiveNodes const &categories_) { baseSetObjects(ncal::categories::iri(), categories_); }
				/*!
					\fn void removeCategoriess(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_categories "ncal:categories" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCategoriess(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::categories::iri(), object_info); }
				/*!
					\fn QString firstCategories()
					
					
					Returns the first property \ref ncal_categories "ncal:categories". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstCategories() { return baseFirstObject< ncal::categories >(); }
				/*!
					\fn void addCategories(QString const &categories_)
					
					
					Adds the given \a categories_ to the property \ref ncal_categories "ncal:categories" set.
					\sa LiveResource::addObject
				 */
				void addCategories(QString const &categories_) { baseAddObject< ncal::categories >( categories_ ); }
				/*!
					\fn void removeCategories(QString const &categories_)
					
					
					Removes the given \a categories_ from the property \ref ncal_categories "ncal:categories" set.
					\sa LiveResource::removeObject
				 */
				void removeCategories(QString const &categories_) { baseRemoveObject< ncal::categories >(categories_); }

				/* Property generated from ncal:resourcesAltRep
				 * \n Alternate representation of the resources needed for an event or todo. Introduced to cover the ALTREP parameter of the resources property. See documentation for ncal:resources for details.
				 * \n rdfs:label=resourcesAltRep
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1034
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveResourcesAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_resourcesAltRep "ncal:resourcesAltRep" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveResourcesAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::resourcesAltRep >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getResourcesAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_resourcesAltRep "ncal:resourcesAltRep" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getResourcesAltReps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::resourcesAltRep >(object_info, strategy, parent); }
				/*!
					\fn void setResourcesAltReps(LiveNodes const &resourcesAltRep_)
					
					
					Sets the property \ref ncal_resourcesAltRep "ncal:resourcesAltRep" set to the given \a resourcesAltRep_ set.
					\sa LiveResource::setObjects
				 */
				void setResourcesAltReps(LiveNodes const &resourcesAltRep_) { baseSetObjects(ncal::resourcesAltRep::iri(), resourcesAltRep_); }
				/*!
					\fn void removeResourcesAltReps(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_resourcesAltRep "ncal:resourcesAltRep" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeResourcesAltReps(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::resourcesAltRep::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getResourcesAltRep()
					
					
					Returns the property \ref ncal_resourcesAltRep "ncal:resourcesAltRep". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getResourcesAltRep() { return baseGetObject< ncal::resourcesAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setResourcesAltRep(::SopranoLive::Live< rdfs::Resource > const &resourcesAltRep_)
					
					
					Sets the property \ref ncal_resourcesAltRep "ncal:resourcesAltRep" to the given \a resourcesAltRep.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setResourcesAltRep(::SopranoLive::Live< rdfs::Resource > const &resourcesAltRep_) { return baseSetObject< ncal::resourcesAltRep >( resourcesAltRep_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstResourcesAltRep()
					
					
					Returns the first property \ref ncal_resourcesAltRep "ncal:resourcesAltRep". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstResourcesAltRep() { return baseFirstObject< ncal::resourcesAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addResourcesAltRep()
					
					
					Adds a new uniquely named resource to the property \ref ncal_resourcesAltRep "ncal:resourcesAltRep" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addResourcesAltRep() { return baseAddObject< ncal::resourcesAltRep >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addResourcesAltRep(::SopranoLive::Live< rdfs::Resource > const &resourcesAltRep_)
					
					
					Adds the given \a resourcesAltRep_ to the property \ref ncal_resourcesAltRep "ncal:resourcesAltRep" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addResourcesAltRep(::SopranoLive::Live< rdfs::Resource > const &resourcesAltRep_) { return baseAddObject< ncal::resourcesAltRep >( resourcesAltRep_ ); }
				/*!
					\fn void removeResourcesAltRep(::SopranoLive::Live< rdfs::Resource > const &resourcesAltRep_)
					
					
					Removes the given \a resourcesAltRep_ from the property \ref ncal_resourcesAltRep "ncal:resourcesAltRep" set.
					\sa LiveResource::removeObject
				 */
				void removeResourcesAltRep(::SopranoLive::Live< rdfs::Resource > const &resourcesAltRep_) { baseRemoveObject< ncal::resourcesAltRep >(resourcesAltRep_); }

				/* Property generated from ncal:relatedToChild
				 * \n The property is used to represent a relationship or reference between one calendar component and another. Inspired by RFC 2445 sec. 4.8.4.5. Originally this property had a RELTYPE parameter. It has been decided to introduce three different properties to express the values of that parameter. This property expresses the RELATED-TO property with RELTYPE=CHILD parameter.
				 * \n rdfs:label=relatedToChild
				 * \n rdfs:subPropertyOf=ncal:ncalRelation
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:UnionParentClass
				 * \n tracker:modified=1033
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRelatedToChilds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_relatedToChild "ncal:relatedToChild" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRelatedToChilds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::relatedToChild >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRelatedToChilds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_relatedToChild "ncal:relatedToChild" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRelatedToChilds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::relatedToChild >(object_info, strategy, parent); }
				/*!
					\fn void setRelatedToChilds(LiveNodes const &relatedToChild_)
					
					
					Sets the property \ref ncal_relatedToChild "ncal:relatedToChild" set to the given \a relatedToChild_ set.
					\sa LiveResource::setObjects
				 */
				void setRelatedToChilds(LiveNodes const &relatedToChild_) { baseSetObjects(ncal::relatedToChild::iri(), relatedToChild_); }
				/*!
					\fn void removeRelatedToChilds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_relatedToChild "ncal:relatedToChild" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRelatedToChilds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::relatedToChild::iri(), object_info); }
				/*!
					\fn QString firstRelatedToChild()
					
					
					Returns the first property \ref ncal_relatedToChild "ncal:relatedToChild". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstRelatedToChild() { return baseFirstObject< ncal::relatedToChild >(); }
				/*!
					\fn void addRelatedToChild(QString const &relatedToChild_)
					
					
					Adds the given \a relatedToChild_ to the property \ref ncal_relatedToChild "ncal:relatedToChild" set.
					\sa LiveResource::addObject
				 */
				void addRelatedToChild(QString const &relatedToChild_) { baseAddObject< ncal::relatedToChild >( relatedToChild_ ); }
				/*!
					\fn void removeRelatedToChild(QString const &relatedToChild_)
					
					
					Removes the given \a relatedToChild_ from the property \ref ncal_relatedToChild "ncal:relatedToChild" set.
					\sa LiveResource::removeObject
				 */
				void removeRelatedToChild(QString const &relatedToChild_) { baseRemoveObject< ncal::relatedToChild >(relatedToChild_); }
				 //@}
			};

			/*! Class generated from ncal:Alarm
			 * \ingroup onto_ncal_classes
			 * Provide a grouping of component properties that define an alarm.
			 * 
			 * rdfs:label = Alarm
			 * 
			 * tracker:modified = 1109
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Alarm
				: public virtual nie::InformationElement, public virtual UnionParentClass

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Alarm"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, QPair<UnionParentClass, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Alarm> Live;
				Alarm() { this->attachInterfaceHelper< Alarm >(); }
				~Alarm() { this->detachInterfaceHelper< Alarm >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:repeat
				 * \n This property defines the number of time the alarm should be repeated, after the initial trigger. Inspired by RFC 2445 sec. 4.8.6.2
				 * \n rdfs:label=repeat
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=ncal:Alarm
				 * \n tracker:modified=1419
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRepeats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_repeat "ncal:repeat" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRepeats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::repeat >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRepeats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_repeat "ncal:repeat" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRepeats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::repeat >(object_info, strategy, parent); }
				/*!
					\fn void setRepeats(LiveNodes const &repeat_)
					
					
					Sets the property \ref ncal_repeat "ncal:repeat" set to the given \a repeat_ set.
					\sa LiveResource::setObjects
				 */
				void setRepeats(LiveNodes const &repeat_) { baseSetObjects(ncal::repeat::iri(), repeat_); }
				/*!
					\fn void removeRepeats(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_repeat "ncal:repeat" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRepeats(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::repeat::iri(), object_info); }
				/*!
					\fn qint64 getRepeat()
					
					
					Returns the property \ref ncal_repeat "ncal:repeat". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getRepeat() { return baseGetObject< ncal::repeat >(); }
				/*!
					\fn void setRepeat(qint64 const &repeat_)
					
					
					Sets the property \ref ncal_repeat "ncal:repeat" to the given \a repeat.
					\sa LiveResource::setObject
				 */
				void setRepeat(qint64 const &repeat_) { baseSetObject< ncal::repeat >( repeat_ ); }
				/*!
					\fn qint64 firstRepeat()
					
					
					Returns the first property \ref ncal_repeat "ncal:repeat". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstRepeat() { return baseFirstObject< ncal::repeat >(); }
				/*!
					\fn void addRepeat(qint64 const &repeat_)
					
					
					Adds the given \a repeat_ to the property \ref ncal_repeat "ncal:repeat" set.
					\sa LiveResource::addObject
				 */
				void addRepeat(qint64 const &repeat_) { baseAddObject< ncal::repeat >( repeat_ ); }
				/*!
					\fn void removeRepeat(qint64 const &repeat_)
					
					
					Removes the given \a repeat_ from the property \ref ncal_repeat "ncal:repeat" set.
					\sa LiveResource::removeObject
				 */
				void removeRepeat(qint64 const &repeat_) { baseRemoveObject< ncal::repeat >(repeat_); }

				/* Property generated from ncal:action
				 * \n This property defines the action to be invoked when an alarm is triggered. Inspired by RFC 2445 sec 4.8.6.1. Originally this property had a limited set of values. They are expressed as instances of the AlarmAction class.
				 * \n rdfs:range=ncal:AlarmAction
				 * \n rdfs:label=action
				 * \n tracker:modified=1807
				 * \n rdfs:domain=ncal:Alarm
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveActions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_action "ncal:action" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveActions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::action >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getActions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_action "ncal:action" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getActions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::action >(object_info, strategy, parent); }
				/*!
					\fn void setActions(LiveNodes const &action_)
					
					
					Sets the property \ref ncal_action "ncal:action" set to the given \a action_ set.
					\sa LiveResource::setObjects
				 */
				void setActions(LiveNodes const &action_) { baseSetObjects(ncal::action::iri(), action_); }
				/*!
					\fn void removeActions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_action "ncal:action" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeActions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::action::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< AlarmAction > firstAction()
					
					
					Returns the first property \ref ncal_action "ncal:action". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< AlarmAction > firstAction() { return baseFirstObject< ncal::action >(); }
				/*!
					\fn ::SopranoLive::Live< AlarmAction > addAction()
					
					
					Adds a new uniquely named resource to the property \ref ncal_action "ncal:action" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AlarmAction > addAction() { return baseAddObject< ncal::action >(); }
				/*!
					\fn ::SopranoLive::Live< AlarmAction > addAction(::SopranoLive::Live< AlarmAction > const &action_)
					
					
					Adds the given \a action_ to the property \ref ncal_action "ncal:action" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AlarmAction > addAction(::SopranoLive::Live< AlarmAction > const &action_) { return baseAddObject< ncal::action >( action_ ); }
				/*!
					\fn void removeAction(::SopranoLive::Live< AlarmAction > const &action_)
					
					
					Removes the given \a action_ from the property \ref ncal_action "ncal:action" set.
					\sa LiveResource::removeObject
				 */
				void removeAction(::SopranoLive::Live< AlarmAction > const &action_) { baseRemoveObject< ncal::action >(action_); }
				 //@}
			};

			/*! Class generated from ncal:AlarmAction
			 * \ingroup onto_ncal_classes
			 * Action to be performed on alarm. This class has been introduced to express the limited set of values of the ncal:action property. Please refer to the documentation of ncal:action for details.
			 * 
			 * rdfs:label = AlarmAction
			 * 
			 * tracker:modified = 1788
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_action "ncal:action"
			 */
			class AlarmAction
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#AlarmAction"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<AlarmAction> Live;
				AlarmAction() { this->attachInterfaceHelper< AlarmAction >(); }
				~AlarmAction() { this->detachInterfaceHelper< AlarmAction >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:Attachment
			 * \ingroup onto_ncal_classes
			 * An object attached to a calendar entity. This class has been introduced to serve as a structured value of the ncal:attach property. See the documentation of ncal:attach for details.
			 * 
			 * rdfs:label = Attachment
			 * 
			 * tracker:modified = 1513
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_attach "ncal:attach"
			 */
			class Attachment
				: public virtual nfo::Attachment

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Attachment"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::Attachment, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Attachment> Live;
				Attachment() { this->attachInterfaceHelper< Attachment >(); }
				~Attachment() { this->detachInterfaceHelper< Attachment >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:encoding
				 * \n To specify an alternate inline encoding for the property value. Inspired by RFC 2445 sec. 4.2.7. Originally this property had a limited vocabulary. ('8BIT' and 'BASE64'). The terms of this vocabulary have been expressed as instances of the AttachmentEncoding class
				 * \n rdfs:label=encoding
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:AttachmentEncoding
				 * \n rdfs:domain=ncal:Attachment
				 * \n tracker:modified=1470
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_encoding "ncal:encoding" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::encoding >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_encoding "ncal:encoding" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::encoding >(object_info, strategy, parent); }
				/*!
					\fn void setEncodings(LiveNodes const &encoding_)
					
					
					Sets the property \ref ncal_encoding "ncal:encoding" set to the given \a encoding_ set.
					\sa LiveResource::setObjects
				 */
				void setEncodings(LiveNodes const &encoding_) { baseSetObjects(ncal::encoding::iri(), encoding_); }
				/*!
					\fn void removeEncodings(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_encoding "ncal:encoding" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEncodings(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::encoding::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< AttachmentEncoding > getEncoding()
					
					
					Returns the property \ref ncal_encoding "ncal:encoding". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< AttachmentEncoding > getEncoding() { return baseGetObject< ncal::encoding >(); }
				/*!
					\fn ::SopranoLive::Live< AttachmentEncoding > setEncoding(::SopranoLive::Live< AttachmentEncoding > const &encoding_)
					
					
					Sets the property \ref ncal_encoding "ncal:encoding" to the given \a encoding.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< AttachmentEncoding > setEncoding(::SopranoLive::Live< AttachmentEncoding > const &encoding_) { return baseSetObject< ncal::encoding >( encoding_ ); }
				/*!
					\fn ::SopranoLive::Live< AttachmentEncoding > firstEncoding()
					
					
					Returns the first property \ref ncal_encoding "ncal:encoding". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< AttachmentEncoding > firstEncoding() { return baseFirstObject< ncal::encoding >(); }
				/*!
					\fn ::SopranoLive::Live< AttachmentEncoding > addEncoding()
					
					
					Adds a new uniquely named resource to the property \ref ncal_encoding "ncal:encoding" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AttachmentEncoding > addEncoding() { return baseAddObject< ncal::encoding >(); }
				/*!
					\fn ::SopranoLive::Live< AttachmentEncoding > addEncoding(::SopranoLive::Live< AttachmentEncoding > const &encoding_)
					
					
					Adds the given \a encoding_ to the property \ref ncal_encoding "ncal:encoding" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AttachmentEncoding > addEncoding(::SopranoLive::Live< AttachmentEncoding > const &encoding_) { return baseAddObject< ncal::encoding >( encoding_ ); }
				/*!
					\fn void removeEncoding(::SopranoLive::Live< AttachmentEncoding > const &encoding_)
					
					
					Removes the given \a encoding_ from the property \ref ncal_encoding "ncal:encoding" set.
					\sa LiveResource::removeObject
				 */
				void removeEncoding(::SopranoLive::Live< AttachmentEncoding > const &encoding_) { baseRemoveObject< ncal::encoding >(encoding_); }

				/* Property generated from ncal:attachmentContent
				 * \n The uri of the attachment. Created to express the actual value of the ATTACH property defined in RFC 2445 sec. 4.8.1.1. This property expresses the BINARY datatype of that property. see ncal:attachmentUri for the URI datatype.
				 * \n rdfs:label=attachmentContent
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:Attachment
				 * \n tracker:modified=1130
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAttachmentContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_attachmentContent "ncal:attachmentContent" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAttachmentContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::attachmentContent >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAttachmentContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_attachmentContent "ncal:attachmentContent" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAttachmentContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::attachmentContent >(object_info, strategy, parent); }
				/*!
					\fn void setAttachmentContents(LiveNodes const &attachmentContent_)
					
					
					Sets the property \ref ncal_attachmentContent "ncal:attachmentContent" set to the given \a attachmentContent_ set.
					\sa LiveResource::setObjects
				 */
				void setAttachmentContents(LiveNodes const &attachmentContent_) { baseSetObjects(ncal::attachmentContent::iri(), attachmentContent_); }
				/*!
					\fn void removeAttachmentContents(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_attachmentContent "ncal:attachmentContent" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAttachmentContents(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::attachmentContent::iri(), object_info); }
				/*!
					\fn QString getAttachmentContent()
					
					
					Returns the property \ref ncal_attachmentContent "ncal:attachmentContent". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getAttachmentContent() { return baseGetObject< ncal::attachmentContent >(); }
				/*!
					\fn void setAttachmentContent(QString const &attachmentContent_)
					
					
					Sets the property \ref ncal_attachmentContent "ncal:attachmentContent" to the given \a attachmentContent.
					\sa LiveResource::setObject
				 */
				void setAttachmentContent(QString const &attachmentContent_) { baseSetObject< ncal::attachmentContent >( attachmentContent_ ); }
				/*!
					\fn QString firstAttachmentContent()
					
					
					Returns the first property \ref ncal_attachmentContent "ncal:attachmentContent". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstAttachmentContent() { return baseFirstObject< ncal::attachmentContent >(); }
				/*!
					\fn void addAttachmentContent(QString const &attachmentContent_)
					
					
					Adds the given \a attachmentContent_ to the property \ref ncal_attachmentContent "ncal:attachmentContent" set.
					\sa LiveResource::addObject
				 */
				void addAttachmentContent(QString const &attachmentContent_) { baseAddObject< ncal::attachmentContent >( attachmentContent_ ); }
				/*!
					\fn void removeAttachmentContent(QString const &attachmentContent_)
					
					
					Removes the given \a attachmentContent_ from the property \ref ncal_attachmentContent "ncal:attachmentContent" set.
					\sa LiveResource::removeObject
				 */
				void removeAttachmentContent(QString const &attachmentContent_) { baseRemoveObject< ncal::attachmentContent >(attachmentContent_); }

				/* Property generated from ncal:attachmentUri
				 * \n The uri of the attachment. Created to express the actual value of the ATTACH property defined in RFC 2445 sec. 4.8.1.1. This property expresses the default URI datatype of that property. see ncal:attachmentContents for the BINARY datatype.
				 * \n rdfs:label=attachmentUri
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=ncal:Attachment
				 * \n tracker:modified=1512
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveAttachmentUris(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_attachmentUri "ncal:attachmentUri" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAttachmentUris(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::attachmentUri >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAttachmentUris(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_attachmentUri "ncal:attachmentUri" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAttachmentUris(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::attachmentUri >(object_info, strategy, parent); }
				/*!
					\fn void setAttachmentUris(LiveNodes const &attachmentUri_)
					
					
					Sets the property \ref ncal_attachmentUri "ncal:attachmentUri" set to the given \a attachmentUri_ set.
					\sa LiveResource::setObjects
				 */
				void setAttachmentUris(LiveNodes const &attachmentUri_) { baseSetObjects(ncal::attachmentUri::iri(), attachmentUri_); }
				/*!
					\fn void removeAttachmentUris(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_attachmentUri "ncal:attachmentUri" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAttachmentUris(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::attachmentUri::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getAttachmentUri()
					
					
					Returns the property \ref ncal_attachmentUri "ncal:attachmentUri". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getAttachmentUri() { return baseGetObject< ncal::attachmentUri >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setAttachmentUri(::SopranoLive::Live< rdfs::Resource > const &attachmentUri_)
					
					
					Sets the property \ref ncal_attachmentUri "ncal:attachmentUri" to the given \a attachmentUri.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setAttachmentUri(::SopranoLive::Live< rdfs::Resource > const &attachmentUri_) { return baseSetObject< ncal::attachmentUri >( attachmentUri_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstAttachmentUri()
					
					
					Returns the first property \ref ncal_attachmentUri "ncal:attachmentUri". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstAttachmentUri() { return baseFirstObject< ncal::attachmentUri >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addAttachmentUri()
					
					
					Adds a new uniquely named resource to the property \ref ncal_attachmentUri "ncal:attachmentUri" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addAttachmentUri() { return baseAddObject< ncal::attachmentUri >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addAttachmentUri(::SopranoLive::Live< rdfs::Resource > const &attachmentUri_)
					
					
					Adds the given \a attachmentUri_ to the property \ref ncal_attachmentUri "ncal:attachmentUri" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addAttachmentUri(::SopranoLive::Live< rdfs::Resource > const &attachmentUri_) { return baseAddObject< ncal::attachmentUri >( attachmentUri_ ); }
				/*!
					\fn void removeAttachmentUri(::SopranoLive::Live< rdfs::Resource > const &attachmentUri_)
					
					
					Removes the given \a attachmentUri_ from the property \ref ncal_attachmentUri "ncal:attachmentUri" set.
					\sa LiveResource::removeObject
				 */
				void removeAttachmentUri(::SopranoLive::Live< rdfs::Resource > const &attachmentUri_) { baseRemoveObject< ncal::attachmentUri >(attachmentUri_); }

				/* Property generated from ncal:fmttype
				 * \n To specify the content type of a referenced object. Inspired by RFC 2445 sec. 4.2.8. The value of this property should be an IANA-registered content type (e.g. application/binary)
				 * \n rdfs:label=fmttype
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:Attachment
				 * \n tracker:modified=1592
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFmttypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_fmttype "ncal:fmttype" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFmttypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::fmttype >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFmttypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_fmttype "ncal:fmttype" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFmttypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::fmttype >(object_info, strategy, parent); }
				/*!
					\fn void setFmttypes(LiveNodes const &fmttype_)
					
					
					Sets the property \ref ncal_fmttype "ncal:fmttype" set to the given \a fmttype_ set.
					\sa LiveResource::setObjects
				 */
				void setFmttypes(LiveNodes const &fmttype_) { baseSetObjects(ncal::fmttype::iri(), fmttype_); }
				/*!
					\fn void removeFmttypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_fmttype "ncal:fmttype" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFmttypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::fmttype::iri(), object_info); }
				/*!
					\fn QString getFmttype()
					
					
					Returns the property \ref ncal_fmttype "ncal:fmttype". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getFmttype() { return baseGetObject< ncal::fmttype >(); }
				/*!
					\fn void setFmttype(QString const &fmttype_)
					
					
					Sets the property \ref ncal_fmttype "ncal:fmttype" to the given \a fmttype.
					\sa LiveResource::setObject
				 */
				void setFmttype(QString const &fmttype_) { baseSetObject< ncal::fmttype >( fmttype_ ); }
				/*!
					\fn QString firstFmttype()
					
					
					Returns the first property \ref ncal_fmttype "ncal:fmttype". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstFmttype() { return baseFirstObject< ncal::fmttype >(); }
				/*!
					\fn void addFmttype(QString const &fmttype_)
					
					
					Adds the given \a fmttype_ to the property \ref ncal_fmttype "ncal:fmttype" set.
					\sa LiveResource::addObject
				 */
				void addFmttype(QString const &fmttype_) { baseAddObject< ncal::fmttype >( fmttype_ ); }
				/*!
					\fn void removeFmttype(QString const &fmttype_)
					
					
					Removes the given \a fmttype_ from the property \ref ncal_fmttype "ncal:fmttype" set.
					\sa LiveResource::removeObject
				 */
				void removeFmttype(QString const &fmttype_) { baseRemoveObject< ncal::fmttype >(fmttype_); }
				 //@}
			};

			/*! Class generated from ncal:AttachmentEncoding
			 * \ingroup onto_ncal_classes
			 * Attachment encoding. This class has been introduced to express the limited vocabulary of values for the ncal:encoding property. See the documentation of ncal:encoding for details.
			 * 
			 * rdfs:label = AttachmentEncoding
			 * 
			 * tracker:modified = 1014
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_encoding "ncal:encoding"
			 */
			class AttachmentEncoding
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#AttachmentEncoding"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<AttachmentEncoding> Live;
				AttachmentEncoding() { this->attachInterfaceHelper< AttachmentEncoding >(); }
				~AttachmentEncoding() { this->detachInterfaceHelper< AttachmentEncoding >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:AttendeeOrOrganizer
			 * \ingroup onto_ncal_classes
			 * A common superclass for ncal:Attendee and ncal:Organizer.
			 * 
			 * rdfs:label = AttendeeOrOrganizer
			 * 
			 * tracker:modified = 1085
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class AttendeeOrOrganizer
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#AttendeeOrOrganizer"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<AttendeeOrOrganizer> Live;
				AttendeeOrOrganizer() { this->attachInterfaceHelper< AttendeeOrOrganizer >(); }
				~AttendeeOrOrganizer() { this->detachInterfaceHelper< AttendeeOrOrganizer >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:sentBy
				 * \n To specify the calendar user that is acting on behalf of the calendar user specified by the property. Inspired by RFC 2445 sec. 4.2.18. The original data type of this property was a mailto: URI. This has been changed to nco:Contact to promote integration between NCO and NCAL.
				 * \n rdfs:label=sentBy
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=ncal:AttendeeOrOrganizer
				 * \n tracker:modified=1549
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nco::Contact Contact;
				/*!
					\fn LiveNodes liveSentBys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_sentBy "ncal:sentBy" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSentBys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::sentBy >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSentBys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_sentBy "ncal:sentBy" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSentBys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::sentBy >(object_info, strategy, parent); }
				/*!
					\fn void setSentBys(LiveNodes const &sentBy_)
					
					
					Sets the property \ref ncal_sentBy "ncal:sentBy" set to the given \a sentBy_ set.
					\sa LiveResource::setObjects
				 */
				void setSentBys(LiveNodes const &sentBy_) { baseSetObjects(ncal::sentBy::iri(), sentBy_); }
				/*!
					\fn void removeSentBys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_sentBy "ncal:sentBy" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSentBys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::sentBy::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > getSentBy()
					
					
					Returns the property \ref ncal_sentBy "ncal:sentBy". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::Contact > getSentBy() { return baseGetObject< ncal::sentBy >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > setSentBy(::SopranoLive::Live< nco::Contact > const &sentBy_)
					
					
					Sets the property \ref ncal_sentBy "ncal:sentBy" to the given \a sentBy.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::Contact > setSentBy(::SopranoLive::Live< nco::Contact > const &sentBy_) { return baseSetObject< ncal::sentBy >( sentBy_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstSentBy()
					
					
					Returns the first property \ref ncal_sentBy "ncal:sentBy". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstSentBy() { return baseFirstObject< ncal::sentBy >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addSentBy()
					
					
					Adds a new uniquely named resource to the property \ref ncal_sentBy "ncal:sentBy" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addSentBy() { return baseAddObject< ncal::sentBy >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addSentBy(::SopranoLive::Live< nco::Contact > const &sentBy_)
					
					
					Adds the given \a sentBy_ to the property \ref ncal_sentBy "ncal:sentBy" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addSentBy(::SopranoLive::Live< nco::Contact > const &sentBy_) { return baseAddObject< ncal::sentBy >( sentBy_ ); }
				/*!
					\fn void removeSentBy(::SopranoLive::Live< nco::Contact > const &sentBy_)
					
					
					Removes the given \a sentBy_ from the property \ref ncal_sentBy "ncal:sentBy" set.
					\sa LiveResource::removeObject
				 */
				void removeSentBy(::SopranoLive::Live< nco::Contact > const &sentBy_) { baseRemoveObject< ncal::sentBy >(sentBy_); }

				/* Property generated from ncal:involvedContact
				 * \n A contact of the Attendee or the organizer involved in an event or other calendar entity. This property has been introduced to express the actual value of the ATTENDEE and ORGANIZER properties. The contact will also represent the CN parameter of those properties. See documentation of ncal:attendee or ncal:organizer for more details.
				 * \n rdfs:label=involvedContact
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=ncal:AttendeeOrOrganizer
				 * \n tracker:modified=1366
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveInvolvedContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_involvedContact "ncal:involvedContact" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveInvolvedContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::involvedContact >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getInvolvedContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_involvedContact "ncal:involvedContact" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getInvolvedContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::involvedContact >(object_info, strategy, parent); }
				/*!
					\fn void setInvolvedContacts(LiveNodes const &involvedContact_)
					
					
					Sets the property \ref ncal_involvedContact "ncal:involvedContact" set to the given \a involvedContact_ set.
					\sa LiveResource::setObjects
				 */
				void setInvolvedContacts(LiveNodes const &involvedContact_) { baseSetObjects(ncal::involvedContact::iri(), involvedContact_); }
				/*!
					\fn void removeInvolvedContacts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_involvedContact "ncal:involvedContact" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeInvolvedContacts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::involvedContact::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > getInvolvedContact()
					
					
					Returns the property \ref ncal_involvedContact "ncal:involvedContact". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::Contact > getInvolvedContact() { return baseGetObject< ncal::involvedContact >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > setInvolvedContact(::SopranoLive::Live< nco::Contact > const &involvedContact_)
					
					
					Sets the property \ref ncal_involvedContact "ncal:involvedContact" to the given \a involvedContact.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::Contact > setInvolvedContact(::SopranoLive::Live< nco::Contact > const &involvedContact_) { return baseSetObject< ncal::involvedContact >( involvedContact_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstInvolvedContact()
					
					
					Returns the first property \ref ncal_involvedContact "ncal:involvedContact". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstInvolvedContact() { return baseFirstObject< ncal::involvedContact >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addInvolvedContact()
					
					
					Adds a new uniquely named resource to the property \ref ncal_involvedContact "ncal:involvedContact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addInvolvedContact() { return baseAddObject< ncal::involvedContact >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addInvolvedContact(::SopranoLive::Live< nco::Contact > const &involvedContact_)
					
					
					Adds the given \a involvedContact_ to the property \ref ncal_involvedContact "ncal:involvedContact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addInvolvedContact(::SopranoLive::Live< nco::Contact > const &involvedContact_) { return baseAddObject< ncal::involvedContact >( involvedContact_ ); }
				/*!
					\fn void removeInvolvedContact(::SopranoLive::Live< nco::Contact > const &involvedContact_)
					
					
					Removes the given \a involvedContact_ from the property \ref ncal_involvedContact "ncal:involvedContact" set.
					\sa LiveResource::removeObject
				 */
				void removeInvolvedContact(::SopranoLive::Live< nco::Contact > const &involvedContact_) { baseRemoveObject< ncal::involvedContact >(involvedContact_); }

				/* Property generated from ncal:dir
				 * \n Specifies a reference to a directory entry associated with the calendar user specified by the property. Inspired by RFC 2445 sec. 4.2.6. Originally the data type of the value of this parameter was URI (Usually an LDAP URI). This has been expressed as rdfs:resource.
				 * \n rdfs:label=dir
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=ncal:AttendeeOrOrganizer
				 * \n tracker:modified=1288
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveDirs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_dir "ncal:dir" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDirs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::dir >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDirs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_dir "ncal:dir" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDirs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::dir >(object_info, strategy, parent); }
				/*!
					\fn void setDirs(LiveNodes const &dir_)
					
					
					Sets the property \ref ncal_dir "ncal:dir" set to the given \a dir_ set.
					\sa LiveResource::setObjects
				 */
				void setDirs(LiveNodes const &dir_) { baseSetObjects(ncal::dir::iri(), dir_); }
				/*!
					\fn void removeDirs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_dir "ncal:dir" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDirs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::dir::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getDir()
					
					
					Returns the property \ref ncal_dir "ncal:dir". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getDir() { return baseGetObject< ncal::dir >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setDir(::SopranoLive::Live< rdfs::Resource > const &dir_)
					
					
					Sets the property \ref ncal_dir "ncal:dir" to the given \a dir.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setDir(::SopranoLive::Live< rdfs::Resource > const &dir_) { return baseSetObject< ncal::dir >( dir_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstDir()
					
					
					Returns the first property \ref ncal_dir "ncal:dir". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstDir() { return baseFirstObject< ncal::dir >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addDir()
					
					
					Adds a new uniquely named resource to the property \ref ncal_dir "ncal:dir" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addDir() { return baseAddObject< ncal::dir >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addDir(::SopranoLive::Live< rdfs::Resource > const &dir_)
					
					
					Adds the given \a dir_ to the property \ref ncal_dir "ncal:dir" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addDir(::SopranoLive::Live< rdfs::Resource > const &dir_) { return baseAddObject< ncal::dir >( dir_ ); }
				/*!
					\fn void removeDir(::SopranoLive::Live< rdfs::Resource > const &dir_)
					
					
					Removes the given \a dir_ from the property \ref ncal_dir "ncal:dir" set.
					\sa LiveResource::removeObject
				 */
				void removeDir(::SopranoLive::Live< rdfs::Resource > const &dir_) { baseRemoveObject< ncal::dir >(dir_); }
				 //@}
			};

			/*! Class generated from ncal:Attendee
			 * \ingroup onto_ncal_classes
			 * An attendee of an event. This class has been introduced to serve as the range for ncal:attendee property. See documentation of ncal:attendee for details.
			 * 
			 * rdfs:label = Attendee
			 * 
			 * tracker:modified = 1567
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_attendee "ncal:attendee"
			 */
			class Attendee
				: public virtual AttendeeOrOrganizer

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Attendee"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<AttendeeOrOrganizer, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Attendee> Live;
				Attendee() { this->attachInterfaceHelper< Attendee >(); }
				~Attendee() { this->detachInterfaceHelper< Attendee >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:rsvp
				 * \n To specify whether there is an expectation of a favor of a reply from the calendar user specified by the property value. Inspired by RFC 2445 sec. 4.2.17
				 * \n rdfs:label=rsvp
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=ncal:Attendee
				 * \n tracker:modified=1001
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRsvps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_rsvp "ncal:rsvp" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRsvps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::rsvp >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRsvps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_rsvp "ncal:rsvp" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRsvps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::rsvp >(object_info, strategy, parent); }
				/*!
					\fn void setRsvps(LiveNodes const &rsvp_)
					
					
					Sets the property \ref ncal_rsvp "ncal:rsvp" set to the given \a rsvp_ set.
					\sa LiveResource::setObjects
				 */
				void setRsvps(LiveNodes const &rsvp_) { baseSetObjects(ncal::rsvp::iri(), rsvp_); }
				/*!
					\fn void removeRsvps(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_rsvp "ncal:rsvp" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRsvps(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::rsvp::iri(), object_info); }
				/*!
					\fn bool getRsvp()
					
					
					Returns the property \ref ncal_rsvp "ncal:rsvp". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getRsvp() { return baseGetObject< ncal::rsvp >(); }
				/*!
					\fn void setRsvp(bool const &rsvp_)
					
					
					Sets the property \ref ncal_rsvp "ncal:rsvp" to the given \a rsvp.
					\sa LiveResource::setObject
				 */
				void setRsvp(bool const &rsvp_) { baseSetObject< ncal::rsvp >( rsvp_ ); }
				/*!
					\fn bool firstRsvp()
					
					
					Returns the first property \ref ncal_rsvp "ncal:rsvp". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstRsvp() { return baseFirstObject< ncal::rsvp >(); }
				/*!
					\fn void addRsvp(bool const &rsvp_)
					
					
					Adds the given \a rsvp_ to the property \ref ncal_rsvp "ncal:rsvp" set.
					\sa LiveResource::addObject
				 */
				void addRsvp(bool const &rsvp_) { baseAddObject< ncal::rsvp >( rsvp_ ); }
				/*!
					\fn void removeRsvp(bool const &rsvp_)
					
					
					Removes the given \a rsvp_ from the property \ref ncal_rsvp "ncal:rsvp" set.
					\sa LiveResource::removeObject
				 */
				void removeRsvp(bool const &rsvp_) { baseRemoveObject< ncal::rsvp >(rsvp_); }

				/* Property generated from ncal:delegatedFrom
				 * \n To specify the calendar users that have delegated their participation to the calendar user specified by the property. Inspired by RFC 2445 sec. 4.2.4. Originally the value type for this property was CAL-ADDRESS. This has been expressed as nco:Contact to promote integration between NCAL and NCO.
				 * \n rdfs:label=delegatedFrom
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=ncal:Attendee
				 * \n tracker:modified=1926
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nco::Contact Contact;
				/*!
					\fn LiveNodes liveDelegatedFroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_delegatedFrom "ncal:delegatedFrom" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDelegatedFroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::delegatedFrom >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDelegatedFroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_delegatedFrom "ncal:delegatedFrom" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDelegatedFroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::delegatedFrom >(object_info, strategy, parent); }
				/*!
					\fn void setDelegatedFroms(LiveNodes const &delegatedFrom_)
					
					
					Sets the property \ref ncal_delegatedFrom "ncal:delegatedFrom" set to the given \a delegatedFrom_ set.
					\sa LiveResource::setObjects
				 */
				void setDelegatedFroms(LiveNodes const &delegatedFrom_) { baseSetObjects(ncal::delegatedFrom::iri(), delegatedFrom_); }
				/*!
					\fn void removeDelegatedFroms(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_delegatedFrom "ncal:delegatedFrom" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDelegatedFroms(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::delegatedFrom::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > getDelegatedFrom()
					
					
					Returns the property \ref ncal_delegatedFrom "ncal:delegatedFrom". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::Contact > getDelegatedFrom() { return baseGetObject< ncal::delegatedFrom >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > setDelegatedFrom(::SopranoLive::Live< nco::Contact > const &delegatedFrom_)
					
					
					Sets the property \ref ncal_delegatedFrom "ncal:delegatedFrom" to the given \a delegatedFrom.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::Contact > setDelegatedFrom(::SopranoLive::Live< nco::Contact > const &delegatedFrom_) { return baseSetObject< ncal::delegatedFrom >( delegatedFrom_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstDelegatedFrom()
					
					
					Returns the first property \ref ncal_delegatedFrom "ncal:delegatedFrom". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstDelegatedFrom() { return baseFirstObject< ncal::delegatedFrom >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addDelegatedFrom()
					
					
					Adds a new uniquely named resource to the property \ref ncal_delegatedFrom "ncal:delegatedFrom" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addDelegatedFrom() { return baseAddObject< ncal::delegatedFrom >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addDelegatedFrom(::SopranoLive::Live< nco::Contact > const &delegatedFrom_)
					
					
					Adds the given \a delegatedFrom_ to the property \ref ncal_delegatedFrom "ncal:delegatedFrom" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addDelegatedFrom(::SopranoLive::Live< nco::Contact > const &delegatedFrom_) { return baseAddObject< ncal::delegatedFrom >( delegatedFrom_ ); }
				/*!
					\fn void removeDelegatedFrom(::SopranoLive::Live< nco::Contact > const &delegatedFrom_)
					
					
					Removes the given \a delegatedFrom_ from the property \ref ncal_delegatedFrom "ncal:delegatedFrom" set.
					\sa LiveResource::removeObject
				 */
				void removeDelegatedFrom(::SopranoLive::Live< nco::Contact > const &delegatedFrom_) { baseRemoveObject< ncal::delegatedFrom >(delegatedFrom_); }

				/* Property generated from ncal:role
				 * \n To specify the participation role for the calendar user specified by the property. Inspired by the RFC 2445 sec. 4.2.16. Originally this property had a limited vocabulary for values. The terms of that vocabulary have been expressed as instances of the AttendeeRole class.
				 * \n rdfs:label=role
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:AttendeeRole
				 * \n rdfs:domain=ncal:Attendee
				 * \n tracker:modified=1951
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRoles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_role "ncal:role" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRoles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::role >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRoles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_role "ncal:role" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRoles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::role >(object_info, strategy, parent); }
				/*!
					\fn void setRoles(LiveNodes const &role_)
					
					
					Sets the property \ref ncal_role "ncal:role" set to the given \a role_ set.
					\sa LiveResource::setObjects
				 */
				void setRoles(LiveNodes const &role_) { baseSetObjects(ncal::role::iri(), role_); }
				/*!
					\fn void removeRoles(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_role "ncal:role" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRoles(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::role::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< AttendeeRole > getRole()
					
					
					Returns the property \ref ncal_role "ncal:role". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< AttendeeRole > getRole() { return baseGetObject< ncal::role >(); }
				/*!
					\fn ::SopranoLive::Live< AttendeeRole > setRole(::SopranoLive::Live< AttendeeRole > const &role_)
					
					
					Sets the property \ref ncal_role "ncal:role" to the given \a role.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< AttendeeRole > setRole(::SopranoLive::Live< AttendeeRole > const &role_) { return baseSetObject< ncal::role >( role_ ); }
				/*!
					\fn ::SopranoLive::Live< AttendeeRole > firstRole()
					
					
					Returns the first property \ref ncal_role "ncal:role". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< AttendeeRole > firstRole() { return baseFirstObject< ncal::role >(); }
				/*!
					\fn ::SopranoLive::Live< AttendeeRole > addRole()
					
					
					Adds a new uniquely named resource to the property \ref ncal_role "ncal:role" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AttendeeRole > addRole() { return baseAddObject< ncal::role >(); }
				/*!
					\fn ::SopranoLive::Live< AttendeeRole > addRole(::SopranoLive::Live< AttendeeRole > const &role_)
					
					
					Adds the given \a role_ to the property \ref ncal_role "ncal:role" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AttendeeRole > addRole(::SopranoLive::Live< AttendeeRole > const &role_) { return baseAddObject< ncal::role >( role_ ); }
				/*!
					\fn void removeRole(::SopranoLive::Live< AttendeeRole > const &role_)
					
					
					Removes the given \a role_ from the property \ref ncal_role "ncal:role" set.
					\sa LiveResource::removeObject
				 */
				void removeRole(::SopranoLive::Live< AttendeeRole > const &role_) { baseRemoveObject< ncal::role >(role_); }

				/* Property generated from ncal:cutype
				 * \n To specify the type of calendar user specified by the property. Inspired by RFC 2445 sec. 4.2.3. This parameter has a limited vocabulary. The terms that may serve as values for this property have been expressed as instances of CalendarUserType class. The user may use instances provided with this ontology or create his own.
				 * \n rdfs:label=cutype
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:CalendarUserType
				 * \n rdfs:domain=ncal:Attendee
				 * \n tracker:modified=1620
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCutypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_cutype "ncal:cutype" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCutypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::cutype >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCutypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_cutype "ncal:cutype" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCutypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::cutype >(object_info, strategy, parent); }
				/*!
					\fn void setCutypes(LiveNodes const &cutype_)
					
					
					Sets the property \ref ncal_cutype "ncal:cutype" set to the given \a cutype_ set.
					\sa LiveResource::setObjects
				 */
				void setCutypes(LiveNodes const &cutype_) { baseSetObjects(ncal::cutype::iri(), cutype_); }
				/*!
					\fn void removeCutypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_cutype "ncal:cutype" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCutypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::cutype::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< CalendarUserType > getCutype()
					
					
					Returns the property \ref ncal_cutype "ncal:cutype". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< CalendarUserType > getCutype() { return baseGetObject< ncal::cutype >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarUserType > setCutype(::SopranoLive::Live< CalendarUserType > const &cutype_)
					
					
					Sets the property \ref ncal_cutype "ncal:cutype" to the given \a cutype.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< CalendarUserType > setCutype(::SopranoLive::Live< CalendarUserType > const &cutype_) { return baseSetObject< ncal::cutype >( cutype_ ); }
				/*!
					\fn ::SopranoLive::Live< CalendarUserType > firstCutype()
					
					
					Returns the first property \ref ncal_cutype "ncal:cutype". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< CalendarUserType > firstCutype() { return baseFirstObject< ncal::cutype >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarUserType > addCutype()
					
					
					Adds a new uniquely named resource to the property \ref ncal_cutype "ncal:cutype" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CalendarUserType > addCutype() { return baseAddObject< ncal::cutype >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarUserType > addCutype(::SopranoLive::Live< CalendarUserType > const &cutype_)
					
					
					Adds the given \a cutype_ to the property \ref ncal_cutype "ncal:cutype" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CalendarUserType > addCutype(::SopranoLive::Live< CalendarUserType > const &cutype_) { return baseAddObject< ncal::cutype >( cutype_ ); }
				/*!
					\fn void removeCutype(::SopranoLive::Live< CalendarUserType > const &cutype_)
					
					
					Removes the given \a cutype_ from the property \ref ncal_cutype "ncal:cutype" set.
					\sa LiveResource::removeObject
				 */
				void removeCutype(::SopranoLive::Live< CalendarUserType > const &cutype_) { baseRemoveObject< ncal::cutype >(cutype_); }

				/* Property generated from ncal:delegatedTo
				 * \n To specify the calendar users to whom the calendar user specified by the property has delegated participation. Inspired by RFC 2445 sec. 4.2.5. Originally the value type for this parameter was CAL-ADDRESS. This has been expressed as nco:Contact to promote integration between NCAL and NCO.
				 * \n rdfs:label=delegatedTo
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=ncal:Attendee
				 * \n tracker:modified=1255
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDelegatedTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_delegatedTo "ncal:delegatedTo" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDelegatedTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::delegatedTo >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDelegatedTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_delegatedTo "ncal:delegatedTo" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDelegatedTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::delegatedTo >(object_info, strategy, parent); }
				/*!
					\fn void setDelegatedTos(LiveNodes const &delegatedTo_)
					
					
					Sets the property \ref ncal_delegatedTo "ncal:delegatedTo" set to the given \a delegatedTo_ set.
					\sa LiveResource::setObjects
				 */
				void setDelegatedTos(LiveNodes const &delegatedTo_) { baseSetObjects(ncal::delegatedTo::iri(), delegatedTo_); }
				/*!
					\fn void removeDelegatedTos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_delegatedTo "ncal:delegatedTo" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDelegatedTos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::delegatedTo::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > getDelegatedTo()
					
					
					Returns the property \ref ncal_delegatedTo "ncal:delegatedTo". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::Contact > getDelegatedTo() { return baseGetObject< ncal::delegatedTo >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > setDelegatedTo(::SopranoLive::Live< nco::Contact > const &delegatedTo_)
					
					
					Sets the property \ref ncal_delegatedTo "ncal:delegatedTo" to the given \a delegatedTo.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::Contact > setDelegatedTo(::SopranoLive::Live< nco::Contact > const &delegatedTo_) { return baseSetObject< ncal::delegatedTo >( delegatedTo_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstDelegatedTo()
					
					
					Returns the first property \ref ncal_delegatedTo "ncal:delegatedTo". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstDelegatedTo() { return baseFirstObject< ncal::delegatedTo >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addDelegatedTo()
					
					
					Adds a new uniquely named resource to the property \ref ncal_delegatedTo "ncal:delegatedTo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addDelegatedTo() { return baseAddObject< ncal::delegatedTo >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addDelegatedTo(::SopranoLive::Live< nco::Contact > const &delegatedTo_)
					
					
					Adds the given \a delegatedTo_ to the property \ref ncal_delegatedTo "ncal:delegatedTo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addDelegatedTo(::SopranoLive::Live< nco::Contact > const &delegatedTo_) { return baseAddObject< ncal::delegatedTo >( delegatedTo_ ); }
				/*!
					\fn void removeDelegatedTo(::SopranoLive::Live< nco::Contact > const &delegatedTo_)
					
					
					Removes the given \a delegatedTo_ from the property \ref ncal_delegatedTo "ncal:delegatedTo" set.
					\sa LiveResource::removeObject
				 */
				void removeDelegatedTo(::SopranoLive::Live< nco::Contact > const &delegatedTo_) { baseRemoveObject< ncal::delegatedTo >(delegatedTo_); }

				/* Property generated from ncal:partstat
				 * \n To specify the participation status for the calendar user specified by the property. Inspired by RFC 2445 sec. 4.2.12. Originally this parameter had three sets of allowed values. Which set applied to a particular case - depended on the type of calendar entity this parameter occured in. (event, todo, journal entry). This would be awkward to model in RDF so a single ParticipationStatus class has been introduced. Terms of the values vocabulary are expressed as instances of this class. Users are advised to pay attention which instances they use.
				 * \n rdfs:label=partstat
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:ParticipationStatus
				 * \n rdfs:domain=ncal:Attendee
				 * \n tracker:modified=1431
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePartstats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_partstat "ncal:partstat" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePartstats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::partstat >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPartstats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_partstat "ncal:partstat" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPartstats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::partstat >(object_info, strategy, parent); }
				/*!
					\fn void setPartstats(LiveNodes const &partstat_)
					
					
					Sets the property \ref ncal_partstat "ncal:partstat" set to the given \a partstat_ set.
					\sa LiveResource::setObjects
				 */
				void setPartstats(LiveNodes const &partstat_) { baseSetObjects(ncal::partstat::iri(), partstat_); }
				/*!
					\fn void removePartstats(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_partstat "ncal:partstat" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePartstats(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::partstat::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< ParticipationStatus > getPartstat()
					
					
					Returns the property \ref ncal_partstat "ncal:partstat". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< ParticipationStatus > getPartstat() { return baseGetObject< ncal::partstat >(); }
				/*!
					\fn ::SopranoLive::Live< ParticipationStatus > setPartstat(::SopranoLive::Live< ParticipationStatus > const &partstat_)
					
					
					Sets the property \ref ncal_partstat "ncal:partstat" to the given \a partstat.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< ParticipationStatus > setPartstat(::SopranoLive::Live< ParticipationStatus > const &partstat_) { return baseSetObject< ncal::partstat >( partstat_ ); }
				/*!
					\fn ::SopranoLive::Live< ParticipationStatus > firstPartstat()
					
					
					Returns the first property \ref ncal_partstat "ncal:partstat". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< ParticipationStatus > firstPartstat() { return baseFirstObject< ncal::partstat >(); }
				/*!
					\fn ::SopranoLive::Live< ParticipationStatus > addPartstat()
					
					
					Adds a new uniquely named resource to the property \ref ncal_partstat "ncal:partstat" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ParticipationStatus > addPartstat() { return baseAddObject< ncal::partstat >(); }
				/*!
					\fn ::SopranoLive::Live< ParticipationStatus > addPartstat(::SopranoLive::Live< ParticipationStatus > const &partstat_)
					
					
					Adds the given \a partstat_ to the property \ref ncal_partstat "ncal:partstat" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< ParticipationStatus > addPartstat(::SopranoLive::Live< ParticipationStatus > const &partstat_) { return baseAddObject< ncal::partstat >( partstat_ ); }
				/*!
					\fn void removePartstat(::SopranoLive::Live< ParticipationStatus > const &partstat_)
					
					
					Removes the given \a partstat_ from the property \ref ncal_partstat "ncal:partstat" set.
					\sa LiveResource::removeObject
				 */
				void removePartstat(::SopranoLive::Live< ParticipationStatus > const &partstat_) { baseRemoveObject< ncal::partstat >(partstat_); }

				/* Property generated from ncal:member
				 * \n To specify the group or list membership of the calendar user specified by the property. Inspired by RFC 2445 sec. 4.2.11. Originally this parameter had a value type of CAL-ADDRESS. This has been expressed as nco:Contact to promote integration between NCAL and NCO
				 * \n rdfs:label=member
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=ncal:Attendee
				 * \n tracker:modified=1326
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMembers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_member "ncal:member" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMembers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::member >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMembers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_member "ncal:member" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMembers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::member >(object_info, strategy, parent); }
				/*!
					\fn void setMembers(LiveNodes const &member_)
					
					
					Sets the property \ref ncal_member "ncal:member" set to the given \a member_ set.
					\sa LiveResource::setObjects
				 */
				void setMembers(LiveNodes const &member_) { baseSetObjects(ncal::member::iri(), member_); }
				/*!
					\fn void removeMembers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_member "ncal:member" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMembers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::member::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > getMember()
					
					
					Returns the property \ref ncal_member "ncal:member". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::Contact > getMember() { return baseGetObject< ncal::member >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > setMember(::SopranoLive::Live< nco::Contact > const &member_)
					
					
					Sets the property \ref ncal_member "ncal:member" to the given \a member.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::Contact > setMember(::SopranoLive::Live< nco::Contact > const &member_) { return baseSetObject< ncal::member >( member_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstMember()
					
					
					Returns the first property \ref ncal_member "ncal:member". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstMember() { return baseFirstObject< ncal::member >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addMember()
					
					
					Adds a new uniquely named resource to the property \ref ncal_member "ncal:member" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addMember() { return baseAddObject< ncal::member >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addMember(::SopranoLive::Live< nco::Contact > const &member_)
					
					
					Adds the given \a member_ to the property \ref ncal_member "ncal:member" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addMember(::SopranoLive::Live< nco::Contact > const &member_) { return baseAddObject< ncal::member >( member_ ); }
				/*!
					\fn void removeMember(::SopranoLive::Live< nco::Contact > const &member_)
					
					
					Removes the given \a member_ from the property \ref ncal_member "ncal:member" set.
					\sa LiveResource::removeObject
				 */
				void removeMember(::SopranoLive::Live< nco::Contact > const &member_) { baseRemoveObject< ncal::member >(member_); }
				 //@}
			};

			/*! Class generated from ncal:AttendeeRole
			 * \ingroup onto_ncal_classes
			 * A role the attendee is going to play during an event. This class has been introduced to express the limited vocabulary for the values of ncal:role property. Please refer to the documentation of ncal:role for details.
			 * 
			 * rdfs:label = AttendeeRole
			 * 
			 * tracker:modified = 1522
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_role "ncal:role"
			 */
			class AttendeeRole
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#AttendeeRole"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<AttendeeRole> Live;
				AttendeeRole() { this->attachInterfaceHelper< AttendeeRole >(); }
				~AttendeeRole() { this->detachInterfaceHelper< AttendeeRole >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:BydayRulePart
			 * \ingroup onto_ncal_classes
			 * Expresses the compound value of a byday part of a recurrence rule. It stores the weekday and the integer modifier. Inspired by RFC 2445 sec. 4.3.10
			 * 
			 * rdfs:label = BydayRulePart
			 * 
			 * tracker:modified = 1099
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_byday "ncal:byday"
			 */
			class BydayRulePart
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#BydayRulePart"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<BydayRulePart> Live;
				BydayRulePart() { this->attachInterfaceHelper< BydayRulePart >(); }
				~BydayRulePart() { this->detachInterfaceHelper< BydayRulePart >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:bydayWeekday
				 * \n Connects a BydayRulePath with a weekday.
				 * \n rdfs:range=ncal:Weekday
				 * \n rdfs:label=bydayWeekday
				 * \n tracker:modified=1624
				 * \n rdfs:domain=ncal:BydayRulePart
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBydayWeekdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_bydayWeekday "ncal:bydayWeekday" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBydayWeekdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::bydayWeekday >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBydayWeekdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_bydayWeekday "ncal:bydayWeekday" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBydayWeekdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::bydayWeekday >(object_info, strategy, parent); }
				/*!
					\fn void setBydayWeekdays(LiveNodes const &bydayWeekday_)
					
					
					Sets the property \ref ncal_bydayWeekday "ncal:bydayWeekday" set to the given \a bydayWeekday_ set.
					\sa LiveResource::setObjects
				 */
				void setBydayWeekdays(LiveNodes const &bydayWeekday_) { baseSetObjects(ncal::bydayWeekday::iri(), bydayWeekday_); }
				/*!
					\fn void removeBydayWeekdays(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_bydayWeekday "ncal:bydayWeekday" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBydayWeekdays(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::bydayWeekday::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Weekday > firstBydayWeekday()
					
					
					Returns the first property \ref ncal_bydayWeekday "ncal:bydayWeekday". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Weekday > firstBydayWeekday() { return baseFirstObject< ncal::bydayWeekday >(); }
				/*!
					\fn ::SopranoLive::Live< Weekday > addBydayWeekday()
					
					
					Adds a new uniquely named resource to the property \ref ncal_bydayWeekday "ncal:bydayWeekday" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Weekday > addBydayWeekday() { return baseAddObject< ncal::bydayWeekday >(); }
				/*!
					\fn ::SopranoLive::Live< Weekday > addBydayWeekday(::SopranoLive::Live< Weekday > const &bydayWeekday_)
					
					
					Adds the given \a bydayWeekday_ to the property \ref ncal_bydayWeekday "ncal:bydayWeekday" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Weekday > addBydayWeekday(::SopranoLive::Live< Weekday > const &bydayWeekday_) { return baseAddObject< ncal::bydayWeekday >( bydayWeekday_ ); }
				/*!
					\fn void removeBydayWeekday(::SopranoLive::Live< Weekday > const &bydayWeekday_)
					
					
					Removes the given \a bydayWeekday_ from the property \ref ncal_bydayWeekday "ncal:bydayWeekday" set.
					\sa LiveResource::removeObject
				 */
				void removeBydayWeekday(::SopranoLive::Live< Weekday > const &bydayWeekday_) { baseRemoveObject< ncal::bydayWeekday >(bydayWeekday_); }

				/* Property generated from ncal:bydayModifier
				 * \n A n integer modifier for the BYDAY rule part. Each BYDAY value can also be preceded by a positive (+n) or negative  (-n) integer. If present, this indicates the nth occurrence of the specific day within the MONTHLY or YEARLY RRULE. For example, within a MONTHLY rule, +1MO (or simply 1MO) represents the first Monday within the month, whereas -1MO represents the last Monday of the month. If an integer modifier is not present, it means all days of this type within the specified frequency. For example, within a MONTHLY rule, MO represents all Mondays within the month. Inspired by RFC 2445 sec. 4.3.10
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:label=bydayModifier
				 * \n tracker:modified=1352
				 * \n rdfs:domain=ncal:BydayRulePart
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBydayModifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_bydayModifier "ncal:bydayModifier" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBydayModifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::bydayModifier >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBydayModifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_bydayModifier "ncal:bydayModifier" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBydayModifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::bydayModifier >(object_info, strategy, parent); }
				/*!
					\fn void setBydayModifiers(LiveNodes const &bydayModifier_)
					
					
					Sets the property \ref ncal_bydayModifier "ncal:bydayModifier" set to the given \a bydayModifier_ set.
					\sa LiveResource::setObjects
				 */
				void setBydayModifiers(LiveNodes const &bydayModifier_) { baseSetObjects(ncal::bydayModifier::iri(), bydayModifier_); }
				/*!
					\fn void removeBydayModifiers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_bydayModifier "ncal:bydayModifier" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBydayModifiers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::bydayModifier::iri(), object_info); }
				/*!
					\fn qint64 firstBydayModifier()
					
					
					Returns the first property \ref ncal_bydayModifier "ncal:bydayModifier". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstBydayModifier() { return baseFirstObject< ncal::bydayModifier >(); }
				/*!
					\fn void addBydayModifier(qint64 const &bydayModifier_)
					
					
					Adds the given \a bydayModifier_ to the property \ref ncal_bydayModifier "ncal:bydayModifier" set.
					\sa LiveResource::addObject
				 */
				void addBydayModifier(qint64 const &bydayModifier_) { baseAddObject< ncal::bydayModifier >( bydayModifier_ ); }
				/*!
					\fn void removeBydayModifier(qint64 const &bydayModifier_)
					
					
					Removes the given \a bydayModifier_ from the property \ref ncal_bydayModifier "ncal:bydayModifier" set.
					\sa LiveResource::removeObject
				 */
				void removeBydayModifier(qint64 const &bydayModifier_) { baseRemoveObject< ncal::bydayModifier >(bydayModifier_); }
				 //@}
			};

			/*! Class generated from ncal:Calendar
			 * \ingroup onto_ncal_classes
			 * A calendar. Inspirations for this class can be traced to the VCALENDAR component defined in RFC 2445 sec. 4.4, but it may just as well be used to represent any kind of Calendar.
			 * 
			 * rdfs:label = Calendar
			 * 
			 * tracker:modified = 1310
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Calendar
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Calendar"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Calendar> Live;
				Calendar() { this->attachInterfaceHelper< Calendar >(); }
				~Calendar() { this->detachInterfaceHelper< Calendar >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:prodid
				 * \n This property specifies the identifier for the product that created the iCalendar object. Defined in RFC 2445 sec. 4.7.2
				 * \n rdfs:label=prodid
				 * \n rdfs:subPropertyOf=nie:generator
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:Calendar
				 * \n tracker:modified=1921
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveProdids(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_prodid "ncal:prodid" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveProdids(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::prodid >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getProdids(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_prodid "ncal:prodid" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getProdids(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::prodid >(object_info, strategy, parent); }
				/*!
					\fn void setProdids(LiveNodes const &prodid_)
					
					
					Sets the property \ref ncal_prodid "ncal:prodid" set to the given \a prodid_ set.
					\sa LiveResource::setObjects
				 */
				void setProdids(LiveNodes const &prodid_) { baseSetObjects(ncal::prodid::iri(), prodid_); }
				/*!
					\fn void removeProdids(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_prodid "ncal:prodid" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeProdids(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::prodid::iri(), object_info); }
				/*!
					\fn QString getProdid()
					
					
					Returns the property \ref ncal_prodid "ncal:prodid". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getProdid() { return baseGetObject< ncal::prodid >(); }
				/*!
					\fn void setProdid(QString const &prodid_)
					
					
					Sets the property \ref ncal_prodid "ncal:prodid" to the given \a prodid.
					\sa LiveResource::setObject
				 */
				void setProdid(QString const &prodid_) { baseSetObject< ncal::prodid >( prodid_ ); }
				/*!
					\fn QString firstProdid()
					
					
					Returns the first property \ref ncal_prodid "ncal:prodid". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstProdid() { return baseFirstObject< ncal::prodid >(); }
				/*!
					\fn void addProdid(QString const &prodid_)
					
					
					Adds the given \a prodid_ to the property \ref ncal_prodid "ncal:prodid" set.
					\sa LiveResource::addObject
				 */
				void addProdid(QString const &prodid_) { baseAddObject< ncal::prodid >( prodid_ ); }
				/*!
					\fn void removeProdid(QString const &prodid_)
					
					
					Removes the given \a prodid_ from the property \ref ncal_prodid "ncal:prodid" set.
					\sa LiveResource::removeObject
				 */
				void removeProdid(QString const &prodid_) { baseRemoveObject< ncal::prodid >(prodid_); }

				/* Property generated from ncal:method
				 * \n This property defines the iCalendar object method associated with the calendar object. Defined in RFC 2445 sec. 4.7.2
				 * \n rdfs:label=method
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:Calendar
				 * \n tracker:modified=1552
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMethods(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_method "ncal:method" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMethods(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::method >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMethods(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_method "ncal:method" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMethods(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::method >(object_info, strategy, parent); }
				/*!
					\fn void setMethods(LiveNodes const &method_)
					
					
					Sets the property \ref ncal_method "ncal:method" set to the given \a method_ set.
					\sa LiveResource::setObjects
				 */
				void setMethods(LiveNodes const &method_) { baseSetObjects(ncal::method::iri(), method_); }
				/*!
					\fn void removeMethods(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_method "ncal:method" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMethods(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::method::iri(), object_info); }
				/*!
					\fn QString getMethod()
					
					
					Returns the property \ref ncal_method "ncal:method". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getMethod() { return baseGetObject< ncal::method >(); }
				/*!
					\fn void setMethod(QString const &method_)
					
					
					Sets the property \ref ncal_method "ncal:method" to the given \a method.
					\sa LiveResource::setObject
				 */
				void setMethod(QString const &method_) { baseSetObject< ncal::method >( method_ ); }
				/*!
					\fn QString firstMethod()
					
					
					Returns the first property \ref ncal_method "ncal:method". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMethod() { return baseFirstObject< ncal::method >(); }
				/*!
					\fn void addMethod(QString const &method_)
					
					
					Adds the given \a method_ to the property \ref ncal_method "ncal:method" set.
					\sa LiveResource::addObject
				 */
				void addMethod(QString const &method_) { baseAddObject< ncal::method >( method_ ); }
				/*!
					\fn void removeMethod(QString const &method_)
					
					
					Removes the given \a method_ from the property \ref ncal_method "ncal:method" set.
					\sa LiveResource::removeObject
				 */
				void removeMethod(QString const &method_) { baseRemoveObject< ncal::method >(method_); }

				/* Property generated from ncal:version
				 * \n This property specifies the identifier corresponding to the highest version number or the minimum and maximum range of the iCalendar specification that is required in order to interpret the iCalendar object. Defined in RFC 2445 sec. 4.7.4
				 * \n rdfs:label=version
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:Calendar
				 * \n tracker:modified=1351
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveVersions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_version "ncal:version" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveVersions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::version >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getVersions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_version "ncal:version" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getVersions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::version >(object_info, strategy, parent); }
				/*!
					\fn void setVersions(LiveNodes const &version_)
					
					
					Sets the property \ref ncal_version "ncal:version" set to the given \a version_ set.
					\sa LiveResource::setObjects
				 */
				void setVersions(LiveNodes const &version_) { baseSetObjects(ncal::version::iri(), version_); }
				/*!
					\fn void removeVersions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_version "ncal:version" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeVersions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::version::iri(), object_info); }
				/*!
					\fn QString getVersion()
					
					
					Returns the property \ref ncal_version "ncal:version". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getVersion() { return baseGetObject< ncal::version >(); }
				/*!
					\fn void setVersion(QString const &version_)
					
					
					Sets the property \ref ncal_version "ncal:version" to the given \a version.
					\sa LiveResource::setObject
				 */
				void setVersion(QString const &version_) { baseSetObject< ncal::version >( version_ ); }
				/*!
					\fn QString firstVersion()
					
					
					Returns the first property \ref ncal_version "ncal:version". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstVersion() { return baseFirstObject< ncal::version >(); }
				/*!
					\fn void addVersion(QString const &version_)
					
					
					Adds the given \a version_ to the property \ref ncal_version "ncal:version" set.
					\sa LiveResource::addObject
				 */
				void addVersion(QString const &version_) { baseAddObject< ncal::version >( version_ ); }
				/*!
					\fn void removeVersion(QString const &version_)
					
					
					Removes the given \a version_ from the property \ref ncal_version "ncal:version" set.
					\sa LiveResource::removeObject
				 */
				void removeVersion(QString const &version_) { baseRemoveObject< ncal::version >(version_); }

				/* Property generated from ncal:component
				 * \n Links the Vcalendar instance with the calendar components. This property has no direct equivalent in the RFC specification. It has been introduced to express the containmnent relations.
				 * \n rdfs:label=component
				 * \n rdfs:subPropertyOf=nie:hasPart
				 * \n rdfs:range=ncal:CalendarDataObject
				 * \n rdfs:domain=ncal:Calendar
				 * \n tracker:modified=1616
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveComponents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_component "ncal:component" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveComponents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::component >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getComponents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_component "ncal:component" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getComponents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::component >(object_info, strategy, parent); }
				/*!
					\fn void setComponents(LiveNodes const &component_)
					
					
					Sets the property \ref ncal_component "ncal:component" set to the given \a component_ set.
					\sa LiveResource::setObjects
				 */
				void setComponents(LiveNodes const &component_) { baseSetObjects(ncal::component::iri(), component_); }
				/*!
					\fn void removeComponents(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_component "ncal:component" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeComponents(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::component::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< CalendarDataObject > firstComponent()
					
					
					Returns the first property \ref ncal_component "ncal:component". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< CalendarDataObject > firstComponent() { return baseFirstObject< ncal::component >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarDataObject > addComponent()
					
					
					Adds a new uniquely named resource to the property \ref ncal_component "ncal:component" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CalendarDataObject > addComponent() { return baseAddObject< ncal::component >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarDataObject > addComponent(::SopranoLive::Live< CalendarDataObject > const &component_)
					
					
					Adds the given \a component_ to the property \ref ncal_component "ncal:component" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CalendarDataObject > addComponent(::SopranoLive::Live< CalendarDataObject > const &component_) { return baseAddObject< ncal::component >( component_ ); }
				/*!
					\fn void removeComponent(::SopranoLive::Live< CalendarDataObject > const &component_)
					
					
					Removes the given \a component_ from the property \ref ncal_component "ncal:component" set.
					\sa LiveResource::removeObject
				 */
				void removeComponent(::SopranoLive::Live< CalendarDataObject > const &component_) { baseRemoveObject< ncal::component >(component_); }

				/* Property generated from ncal:calscale
				 * \n This property defines the calendar scale used for the calendar information specified in the iCalendar object. Defined in RFC 2445 sec. 4.7.1
				 * \n rdfs:label=calscale
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:CalendarScale
				 * \n rdfs:domain=ncal:Calendar
				 * \n tracker:modified=1483
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCalscales(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_calscale "ncal:calscale" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCalscales(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::calscale >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCalscales(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_calscale "ncal:calscale" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCalscales(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::calscale >(object_info, strategy, parent); }
				/*!
					\fn void setCalscales(LiveNodes const &calscale_)
					
					
					Sets the property \ref ncal_calscale "ncal:calscale" set to the given \a calscale_ set.
					\sa LiveResource::setObjects
				 */
				void setCalscales(LiveNodes const &calscale_) { baseSetObjects(ncal::calscale::iri(), calscale_); }
				/*!
					\fn void removeCalscales(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_calscale "ncal:calscale" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCalscales(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::calscale::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< CalendarScale > getCalscale()
					
					
					Returns the property \ref ncal_calscale "ncal:calscale". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< CalendarScale > getCalscale() { return baseGetObject< ncal::calscale >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarScale > setCalscale(::SopranoLive::Live< CalendarScale > const &calscale_)
					
					
					Sets the property \ref ncal_calscale "ncal:calscale" to the given \a calscale.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< CalendarScale > setCalscale(::SopranoLive::Live< CalendarScale > const &calscale_) { return baseSetObject< ncal::calscale >( calscale_ ); }
				/*!
					\fn ::SopranoLive::Live< CalendarScale > firstCalscale()
					
					
					Returns the first property \ref ncal_calscale "ncal:calscale". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< CalendarScale > firstCalscale() { return baseFirstObject< ncal::calscale >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarScale > addCalscale()
					
					
					Adds a new uniquely named resource to the property \ref ncal_calscale "ncal:calscale" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CalendarScale > addCalscale() { return baseAddObject< ncal::calscale >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarScale > addCalscale(::SopranoLive::Live< CalendarScale > const &calscale_)
					
					
					Adds the given \a calscale_ to the property \ref ncal_calscale "ncal:calscale" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CalendarScale > addCalscale(::SopranoLive::Live< CalendarScale > const &calscale_) { return baseAddObject< ncal::calscale >( calscale_ ); }
				/*!
					\fn void removeCalscale(::SopranoLive::Live< CalendarScale > const &calscale_)
					
					
					Removes the given \a calscale_ from the property \ref ncal_calscale "ncal:calscale" set.
					\sa LiveResource::removeObject
				 */
				void removeCalscale(::SopranoLive::Live< CalendarScale > const &calscale_) { baseRemoveObject< ncal::calscale >(calscale_); }
				 //@}
			};

			/*! Class generated from ncal:CalendarDataObject
			 * \ingroup onto_ncal_classes
			 * A DataObject found in a calendar. It is usually interpreted as one of the calendar entity types (e.g. Event, Journal, Todo etc.)
			 * 
			 * rdfs:label = CalendarDataObject
			 * 
			 * tracker:modified = 1339
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_hasAlarm "ncal:hasAlarm"
			 * 		\ref ncal_component "ncal:component"
			 */
			class CalendarDataObject
				: public virtual nie::DataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#CalendarDataObject"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::DataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<CalendarDataObject> Live;
				CalendarDataObject() { this->attachInterfaceHelper< CalendarDataObject >(); }
				~CalendarDataObject() { this->detachInterfaceHelper< CalendarDataObject >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:CalendarScale
			 * \ingroup onto_ncal_classes
			 * A calendar scale. This class has been introduced to provide the limited vocabulary for the ncal:calscale property.
			 * 
			 * rdfs:label = CalendarScale
			 * 
			 * tracker:modified = 1432
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_calscale "ncal:calscale"
			 */
			class CalendarScale
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#CalendarScale"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<CalendarScale> Live;
				CalendarScale() { this->attachInterfaceHelper< CalendarScale >(); }
				~CalendarScale() { this->detachInterfaceHelper< CalendarScale >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:CalendarUserType
			 * \ingroup onto_ncal_classes
			 * A calendar user type. This class has been introduced to express the limited vocabulary for the ncal:cutype property. See documentation of ncal:cutype for details.
			 * 
			 * rdfs:label = CalendarUserType
			 * 
			 * tracker:modified = 1010
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_cutype "ncal:cutype"
			 */
			class CalendarUserType
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#CalendarUserType"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<CalendarUserType> Live;
				CalendarUserType() { this->attachInterfaceHelper< CalendarUserType >(); }
				~CalendarUserType() { this->detachInterfaceHelper< CalendarUserType >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:Event
			 * \ingroup onto_ncal_classes
			 * Provide a grouping of component properties that describe an event.
			 * 
			 * rdfs:label = Event
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1768
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_anniversary "ncal:anniversary"
			 * 		\ref ncal_birthday "ncal:birthday"
			 */
			class Event
				: public virtual nie::InformationElement, public virtual UnionParentClass

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Event"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, QPair<UnionParentClass, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Event> Live;
				Event() { this->attachInterfaceHelper< Event >(); }
				~Event() { this->detachInterfaceHelper< Event >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:eventStatus
				 * \n Defines the overall status or confirmation for an Event. Based on the STATUS property defined in RFC 2445 sec. 4.8.1.11.
				 * \n rdfs:label=status
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:EventStatus
				 * \n rdfs:domain=ncal:Event
				 * \n tracker:modified=1089
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEventStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_eventStatus "ncal:eventStatus" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEventStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::eventStatus >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEventStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_eventStatus "ncal:eventStatus" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEventStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::eventStatus >(object_info, strategy, parent); }
				/*!
					\fn void setEventStatuss(LiveNodes const &eventStatus_)
					
					
					Sets the property \ref ncal_eventStatus "ncal:eventStatus" set to the given \a eventStatus_ set.
					\sa LiveResource::setObjects
				 */
				void setEventStatuss(LiveNodes const &eventStatus_) { baseSetObjects(ncal::eventStatus::iri(), eventStatus_); }
				/*!
					\fn void removeEventStatuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_eventStatus "ncal:eventStatus" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEventStatuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::eventStatus::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< EventStatus > getEventStatus()
					
					
					Returns the property \ref ncal_eventStatus "ncal:eventStatus". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< EventStatus > getEventStatus() { return baseGetObject< ncal::eventStatus >(); }
				/*!
					\fn ::SopranoLive::Live< EventStatus > setEventStatus(::SopranoLive::Live< EventStatus > const &eventStatus_)
					
					
					Sets the property \ref ncal_eventStatus "ncal:eventStatus" to the given \a eventStatus.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< EventStatus > setEventStatus(::SopranoLive::Live< EventStatus > const &eventStatus_) { return baseSetObject< ncal::eventStatus >( eventStatus_ ); }
				/*!
					\fn ::SopranoLive::Live< EventStatus > firstEventStatus()
					
					
					Returns the first property \ref ncal_eventStatus "ncal:eventStatus". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< EventStatus > firstEventStatus() { return baseFirstObject< ncal::eventStatus >(); }
				/*!
					\fn ::SopranoLive::Live< EventStatus > addEventStatus()
					
					
					Adds a new uniquely named resource to the property \ref ncal_eventStatus "ncal:eventStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< EventStatus > addEventStatus() { return baseAddObject< ncal::eventStatus >(); }
				/*!
					\fn ::SopranoLive::Live< EventStatus > addEventStatus(::SopranoLive::Live< EventStatus > const &eventStatus_)
					
					
					Adds the given \a eventStatus_ to the property \ref ncal_eventStatus "ncal:eventStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< EventStatus > addEventStatus(::SopranoLive::Live< EventStatus > const &eventStatus_) { return baseAddObject< ncal::eventStatus >( eventStatus_ ); }
				/*!
					\fn void removeEventStatus(::SopranoLive::Live< EventStatus > const &eventStatus_)
					
					
					Removes the given \a eventStatus_ from the property \ref ncal_eventStatus "ncal:eventStatus" set.
					\sa LiveResource::removeObject
				 */
				void removeEventStatus(::SopranoLive::Live< EventStatus > const &eventStatus_) { baseRemoveObject< ncal::eventStatus >(eventStatus_); }

				/* Property generated from ncal:transp
				 * \n Defines whether an event is transparent or not  to busy time searches. Inspired by RFC 2445 sec.4.8.2.7. Values for this property can be chosen from a limited vocabulary. To express this a TimeTransparency class has been introduced.
				 * \n rdfs:label=transp
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:TimeTransparency
				 * \n rdfs:domain=ncal:Event
				 * \n tracker:modified=1399
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTransps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_transp "ncal:transp" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTransps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::transp >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTransps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_transp "ncal:transp" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTransps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::transp >(object_info, strategy, parent); }
				/*!
					\fn void setTransps(LiveNodes const &transp_)
					
					
					Sets the property \ref ncal_transp "ncal:transp" set to the given \a transp_ set.
					\sa LiveResource::setObjects
				 */
				void setTransps(LiveNodes const &transp_) { baseSetObjects(ncal::transp::iri(), transp_); }
				/*!
					\fn void removeTransps(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_transp "ncal:transp" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTransps(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::transp::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TimeTransparency > getTransp()
					
					
					Returns the property \ref ncal_transp "ncal:transp". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TimeTransparency > getTransp() { return baseGetObject< ncal::transp >(); }
				/*!
					\fn ::SopranoLive::Live< TimeTransparency > setTransp(::SopranoLive::Live< TimeTransparency > const &transp_)
					
					
					Sets the property \ref ncal_transp "ncal:transp" to the given \a transp.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TimeTransparency > setTransp(::SopranoLive::Live< TimeTransparency > const &transp_) { return baseSetObject< ncal::transp >( transp_ ); }
				/*!
					\fn ::SopranoLive::Live< TimeTransparency > firstTransp()
					
					
					Returns the first property \ref ncal_transp "ncal:transp". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TimeTransparency > firstTransp() { return baseFirstObject< ncal::transp >(); }
				/*!
					\fn ::SopranoLive::Live< TimeTransparency > addTransp()
					
					
					Adds a new uniquely named resource to the property \ref ncal_transp "ncal:transp" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimeTransparency > addTransp() { return baseAddObject< ncal::transp >(); }
				/*!
					\fn ::SopranoLive::Live< TimeTransparency > addTransp(::SopranoLive::Live< TimeTransparency > const &transp_)
					
					
					Adds the given \a transp_ to the property \ref ncal_transp "ncal:transp" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimeTransparency > addTransp(::SopranoLive::Live< TimeTransparency > const &transp_) { return baseAddObject< ncal::transp >( transp_ ); }
				/*!
					\fn void removeTransp(::SopranoLive::Live< TimeTransparency > const &transp_)
					
					
					Removes the given \a transp_ from the property \ref ncal_transp "ncal:transp" set.
					\sa LiveResource::removeObject
				 */
				void removeTransp(::SopranoLive::Live< TimeTransparency > const &transp_) { baseRemoveObject< ncal::transp >(transp_); }
				 //@}
			};

			/*! Class generated from ncal:EventStatus
			 * \ingroup onto_ncal_classes
			 * A status of an event. This class has been introduced to express the limited set of values for the ncal:status property. The user may use the instances provided with this ontology or create his/her own. See the documentation for ncal:eventStatus for details.
			 * 
			 * rdfs:label = EventStatus
			 * 
			 * tracker:modified = 1054
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_eventStatus "ncal:eventStatus"
			 */
			class EventStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#EventStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<EventStatus> Live;
				EventStatus() { this->attachInterfaceHelper< EventStatus >(); }
				~EventStatus() { this->detachInterfaceHelper< EventStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:Freebusy
			 * \ingroup onto_ncal_classes
			 * Provide a grouping of component properties that describe either a request for free/busy time, describe a response to a request for free/busy time or describe a published set of busy time.
			 * 
			 * rdfs:label = Freebusy
			 * 
			 * tracker:modified = 1936
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Freebusy
				: public virtual nie::InformationElement, public virtual UnionParentClass

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Freebusy"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, QPair<UnionParentClass, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Freebusy> Live;
				Freebusy() { this->attachInterfaceHelper< Freebusy >(); }
				~Freebusy() { this->detachInterfaceHelper< Freebusy >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:freebusy
				 * \n The property defines one or more free or busy time intervals. Inspired by RFC 2445 sec. 4.8.2.6. Note that the periods specified by this property can only be expressed with UTC times. Originally this property could have many comma-separated values. Please use a separate triple for each value.
				 * \n rdfs:range=ncal:FreebusyPeriod
				 * \n rdfs:label=freebusy
				 * \n tracker:modified=1088
				 * \n rdfs:domain=ncal:Freebusy
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFreebusys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_freebusy "ncal:freebusy" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFreebusys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::freebusy >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFreebusys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_freebusy "ncal:freebusy" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFreebusys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::freebusy >(object_info, strategy, parent); }
				/*!
					\fn void setFreebusys(LiveNodes const &freebusy_)
					
					
					Sets the property \ref ncal_freebusy "ncal:freebusy" set to the given \a freebusy_ set.
					\sa LiveResource::setObjects
				 */
				void setFreebusys(LiveNodes const &freebusy_) { baseSetObjects(ncal::freebusy::iri(), freebusy_); }
				/*!
					\fn void removeFreebusys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_freebusy "ncal:freebusy" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFreebusys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::freebusy::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< FreebusyPeriod > firstFreebusy()
					
					
					Returns the first property \ref ncal_freebusy "ncal:freebusy". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< FreebusyPeriod > firstFreebusy() { return baseFirstObject< ncal::freebusy >(); }
				/*!
					\fn ::SopranoLive::Live< FreebusyPeriod > addFreebusy()
					
					
					Adds a new uniquely named resource to the property \ref ncal_freebusy "ncal:freebusy" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< FreebusyPeriod > addFreebusy() { return baseAddObject< ncal::freebusy >(); }
				/*!
					\fn ::SopranoLive::Live< FreebusyPeriod > addFreebusy(::SopranoLive::Live< FreebusyPeriod > const &freebusy_)
					
					
					Adds the given \a freebusy_ to the property \ref ncal_freebusy "ncal:freebusy" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< FreebusyPeriod > addFreebusy(::SopranoLive::Live< FreebusyPeriod > const &freebusy_) { return baseAddObject< ncal::freebusy >( freebusy_ ); }
				/*!
					\fn void removeFreebusy(::SopranoLive::Live< FreebusyPeriod > const &freebusy_)
					
					
					Removes the given \a freebusy_ from the property \ref ncal_freebusy "ncal:freebusy" set.
					\sa LiveResource::removeObject
				 */
				void removeFreebusy(::SopranoLive::Live< FreebusyPeriod > const &freebusy_) { baseRemoveObject< ncal::freebusy >(freebusy_); }
				 //@}
			};

			/*! Class generated from ncal:NcalTimeEntity
			 * \ingroup onto_ncal_classes
			 * A time entity. Conceived as a common superclass for NcalDateTime and NcalPeriod. According to RFC 2445 both DateTime and Period can be interpreted in different timezones. The first case is explored in many properties. The second case is theoretically possible in ncal:rdate property. Therefore the timezone properties have been defined at this level.
			 * 
			 * rdfs:label = NcalTimeEntity
			 * 
			 * tracker:modified = 1996
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_rdate "ncal:rdate"
			 */
			class NcalTimeEntity
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#NcalTimeEntity"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<NcalTimeEntity> Live;
				NcalTimeEntity() { this->attachInterfaceHelper< NcalTimeEntity >(); }
				~NcalTimeEntity() { this->detachInterfaceHelper< NcalTimeEntity >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:NcalPeriod
			 * \ingroup onto_ncal_classes
			 * A period of time. Inspired by the PERIOD datatype specified in RFC 2445 sec. 4.3.9
			 * 
			 * rdfs:label = NcalPeriod
			 * 
			 * tracker:modified = 1834
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class NcalPeriod
				: public virtual NcalTimeEntity

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#NcalPeriod"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<NcalTimeEntity, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<NcalPeriod> Live;
				NcalPeriod() { this->attachInterfaceHelper< NcalPeriod >(); }
				~NcalPeriod() { this->detachInterfaceHelper< NcalPeriod >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:periodEnd
				 * \n End of a period of time. Inspired by the second part of a structured value of a PERIOD datatype specified in RFC 2445 sec. 4.3.9. Note that a single NcalPeriod instance shouldn't have the periodEnd and periodDuration properties specified simultaneously.
				 * \n rdfs:label=periodEnd
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=ncal:NcalPeriod
				 * \n tracker:modified=1157
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePeriodEnds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_periodEnd "ncal:periodEnd" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePeriodEnds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::periodEnd >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPeriodEnds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_periodEnd "ncal:periodEnd" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPeriodEnds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::periodEnd >(object_info, strategy, parent); }
				/*!
					\fn void setPeriodEnds(LiveNodes const &periodEnd_)
					
					
					Sets the property \ref ncal_periodEnd "ncal:periodEnd" set to the given \a periodEnd_ set.
					\sa LiveResource::setObjects
				 */
				void setPeriodEnds(LiveNodes const &periodEnd_) { baseSetObjects(ncal::periodEnd::iri(), periodEnd_); }
				/*!
					\fn void removePeriodEnds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_periodEnd "ncal:periodEnd" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePeriodEnds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::periodEnd::iri(), object_info); }
				/*!
					\fn QDateTime getPeriodEnd()
					
					
					Returns the property \ref ncal_periodEnd "ncal:periodEnd". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getPeriodEnd() { return baseGetObject< ncal::periodEnd >(); }
				/*!
					\fn void setPeriodEnd(QDateTime const &periodEnd_)
					
					
					Sets the property \ref ncal_periodEnd "ncal:periodEnd" to the given \a periodEnd.
					\sa LiveResource::setObject
				 */
				void setPeriodEnd(QDateTime const &periodEnd_) { baseSetObject< ncal::periodEnd >( periodEnd_ ); }
				/*!
					\fn QDateTime firstPeriodEnd()
					
					
					Returns the first property \ref ncal_periodEnd "ncal:periodEnd". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstPeriodEnd() { return baseFirstObject< ncal::periodEnd >(); }
				/*!
					\fn void addPeriodEnd(QDateTime const &periodEnd_)
					
					
					Adds the given \a periodEnd_ to the property \ref ncal_periodEnd "ncal:periodEnd" set.
					\sa LiveResource::addObject
				 */
				void addPeriodEnd(QDateTime const &periodEnd_) { baseAddObject< ncal::periodEnd >( periodEnd_ ); }
				/*!
					\fn void removePeriodEnd(QDateTime const &periodEnd_)
					
					
					Removes the given \a periodEnd_ from the property \ref ncal_periodEnd "ncal:periodEnd" set.
					\sa LiveResource::removeObject
				 */
				void removePeriodEnd(QDateTime const &periodEnd_) { baseRemoveObject< ncal::periodEnd >(periodEnd_); }

				/* Property generated from ncal:periodBegin
				 * \n Beginng of a period. Inspired by the first part of a structured value of the PERIOD datatype specified in RFC 2445 sec. 4.3.9
				 * \n rdfs:label=periodBegin
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=ncal:NcalPeriod
				 * \n tracker:modified=1367
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePeriodBegins(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_periodBegin "ncal:periodBegin" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePeriodBegins(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::periodBegin >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPeriodBegins(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_periodBegin "ncal:periodBegin" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPeriodBegins(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::periodBegin >(object_info, strategy, parent); }
				/*!
					\fn void setPeriodBegins(LiveNodes const &periodBegin_)
					
					
					Sets the property \ref ncal_periodBegin "ncal:periodBegin" set to the given \a periodBegin_ set.
					\sa LiveResource::setObjects
				 */
				void setPeriodBegins(LiveNodes const &periodBegin_) { baseSetObjects(ncal::periodBegin::iri(), periodBegin_); }
				/*!
					\fn void removePeriodBegins(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_periodBegin "ncal:periodBegin" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePeriodBegins(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::periodBegin::iri(), object_info); }
				/*!
					\fn QDateTime getPeriodBegin()
					
					
					Returns the property \ref ncal_periodBegin "ncal:periodBegin". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getPeriodBegin() { return baseGetObject< ncal::periodBegin >(); }
				/*!
					\fn void setPeriodBegin(QDateTime const &periodBegin_)
					
					
					Sets the property \ref ncal_periodBegin "ncal:periodBegin" to the given \a periodBegin.
					\sa LiveResource::setObject
				 */
				void setPeriodBegin(QDateTime const &periodBegin_) { baseSetObject< ncal::periodBegin >( periodBegin_ ); }
				/*!
					\fn QDateTime firstPeriodBegin()
					
					
					Returns the first property \ref ncal_periodBegin "ncal:periodBegin". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstPeriodBegin() { return baseFirstObject< ncal::periodBegin >(); }
				/*!
					\fn void addPeriodBegin(QDateTime const &periodBegin_)
					
					
					Adds the given \a periodBegin_ to the property \ref ncal_periodBegin "ncal:periodBegin" set.
					\sa LiveResource::addObject
				 */
				void addPeriodBegin(QDateTime const &periodBegin_) { baseAddObject< ncal::periodBegin >( periodBegin_ ); }
				/*!
					\fn void removePeriodBegin(QDateTime const &periodBegin_)
					
					
					Removes the given \a periodBegin_ from the property \ref ncal_periodBegin "ncal:periodBegin" set.
					\sa LiveResource::removeObject
				 */
				void removePeriodBegin(QDateTime const &periodBegin_) { baseRemoveObject< ncal::periodBegin >(periodBegin_); }

				/* Property generated from ncal:periodDuration
				 * \n Duration of a period of time. Inspired by the second part of a structured value of the PERIOD datatype specified in RFC 2445 sec. 4.3.9. Note that a single NcalPeriod instance shouldn't have the periodEnd and periodDuration properties specified simultaneously.
				 * \n rdfs:label=periodDuration
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=ncal:NcalPeriod
				 * \n tracker:modified=1806
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePeriodDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_periodDuration "ncal:periodDuration" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePeriodDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::periodDuration >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPeriodDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_periodDuration "ncal:periodDuration" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPeriodDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::periodDuration >(object_info, strategy, parent); }
				/*!
					\fn void setPeriodDurations(LiveNodes const &periodDuration_)
					
					
					Sets the property \ref ncal_periodDuration "ncal:periodDuration" set to the given \a periodDuration_ set.
					\sa LiveResource::setObjects
				 */
				void setPeriodDurations(LiveNodes const &periodDuration_) { baseSetObjects(ncal::periodDuration::iri(), periodDuration_); }
				/*!
					\fn void removePeriodDurations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_periodDuration "ncal:periodDuration" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePeriodDurations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::periodDuration::iri(), object_info); }
				/*!
					\fn qint64 getPeriodDuration()
					
					
					Returns the property \ref ncal_periodDuration "ncal:periodDuration". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getPeriodDuration() { return baseGetObject< ncal::periodDuration >(); }
				/*!
					\fn void setPeriodDuration(qint64 const &periodDuration_)
					
					
					Sets the property \ref ncal_periodDuration "ncal:periodDuration" to the given \a periodDuration.
					\sa LiveResource::setObject
				 */
				void setPeriodDuration(qint64 const &periodDuration_) { baseSetObject< ncal::periodDuration >( periodDuration_ ); }
				/*!
					\fn qint64 firstPeriodDuration()
					
					
					Returns the first property \ref ncal_periodDuration "ncal:periodDuration". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstPeriodDuration() { return baseFirstObject< ncal::periodDuration >(); }
				/*!
					\fn void addPeriodDuration(qint64 const &periodDuration_)
					
					
					Adds the given \a periodDuration_ to the property \ref ncal_periodDuration "ncal:periodDuration" set.
					\sa LiveResource::addObject
				 */
				void addPeriodDuration(qint64 const &periodDuration_) { baseAddObject< ncal::periodDuration >( periodDuration_ ); }
				/*!
					\fn void removePeriodDuration(qint64 const &periodDuration_)
					
					
					Removes the given \a periodDuration_ from the property \ref ncal_periodDuration "ncal:periodDuration" set.
					\sa LiveResource::removeObject
				 */
				void removePeriodDuration(qint64 const &periodDuration_) { baseRemoveObject< ncal::periodDuration >(periodDuration_); }
				 //@}
			};

			/*! Class generated from ncal:FreebusyPeriod
			 * \ingroup onto_ncal_classes
			 * An aggregate of a period and a freebusy type. This class has been introduced to serve as a range of the ncal:freebusy property. See documentation for ncal:freebusy for details. Note that the specification of freebusy property states that the period is to be expressed using UTC time, so the timezone properties should NOT be used for instances of this class.
			 * 
			 * rdfs:label = FreebusyPeriod
			 * 
			 * tracker:modified = 1886
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_freebusy "ncal:freebusy"
			 */
			class FreebusyPeriod
				: public virtual NcalPeriod

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#FreebusyPeriod"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<NcalPeriod, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<FreebusyPeriod> Live;
				FreebusyPeriod() { this->attachInterfaceHelper< FreebusyPeriod >(); }
				~FreebusyPeriod() { this->detachInterfaceHelper< FreebusyPeriod >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:fbtype
				 * \n To specify the free or busy time type. Inspired by RFC 2445 sec. 4.2.9. The RFC specified a limited vocabulary for the values of this property. The terms of this vocabulary have been expressed as instances of the FreebusyType class. The user can use instances provided with this ontology or create his own.
				 * \n rdfs:label=fbtype
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:FreebusyType
				 * \n rdfs:domain=ncal:FreebusyPeriod
				 * \n tracker:modified=1354
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFbtypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_fbtype "ncal:fbtype" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFbtypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::fbtype >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFbtypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_fbtype "ncal:fbtype" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFbtypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::fbtype >(object_info, strategy, parent); }
				/*!
					\fn void setFbtypes(LiveNodes const &fbtype_)
					
					
					Sets the property \ref ncal_fbtype "ncal:fbtype" set to the given \a fbtype_ set.
					\sa LiveResource::setObjects
				 */
				void setFbtypes(LiveNodes const &fbtype_) { baseSetObjects(ncal::fbtype::iri(), fbtype_); }
				/*!
					\fn void removeFbtypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_fbtype "ncal:fbtype" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFbtypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::fbtype::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< FreebusyType > getFbtype()
					
					
					Returns the property \ref ncal_fbtype "ncal:fbtype". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< FreebusyType > getFbtype() { return baseGetObject< ncal::fbtype >(); }
				/*!
					\fn ::SopranoLive::Live< FreebusyType > setFbtype(::SopranoLive::Live< FreebusyType > const &fbtype_)
					
					
					Sets the property \ref ncal_fbtype "ncal:fbtype" to the given \a fbtype.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< FreebusyType > setFbtype(::SopranoLive::Live< FreebusyType > const &fbtype_) { return baseSetObject< ncal::fbtype >( fbtype_ ); }
				/*!
					\fn ::SopranoLive::Live< FreebusyType > firstFbtype()
					
					
					Returns the first property \ref ncal_fbtype "ncal:fbtype". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< FreebusyType > firstFbtype() { return baseFirstObject< ncal::fbtype >(); }
				/*!
					\fn ::SopranoLive::Live< FreebusyType > addFbtype()
					
					
					Adds a new uniquely named resource to the property \ref ncal_fbtype "ncal:fbtype" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< FreebusyType > addFbtype() { return baseAddObject< ncal::fbtype >(); }
				/*!
					\fn ::SopranoLive::Live< FreebusyType > addFbtype(::SopranoLive::Live< FreebusyType > const &fbtype_)
					
					
					Adds the given \a fbtype_ to the property \ref ncal_fbtype "ncal:fbtype" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< FreebusyType > addFbtype(::SopranoLive::Live< FreebusyType > const &fbtype_) { return baseAddObject< ncal::fbtype >( fbtype_ ); }
				/*!
					\fn void removeFbtype(::SopranoLive::Live< FreebusyType > const &fbtype_)
					
					
					Removes the given \a fbtype_ from the property \ref ncal_fbtype "ncal:fbtype" set.
					\sa LiveResource::removeObject
				 */
				void removeFbtype(::SopranoLive::Live< FreebusyType > const &fbtype_) { baseRemoveObject< ncal::fbtype >(fbtype_); }
				 //@}
			};

			/*! Class generated from ncal:FreebusyType
			 * \ingroup onto_ncal_classes
			 * Type of a Freebusy indication. This class has been introduced to serve as a limited set of values for the ncal:fbtype property. See the documentation of ncal:fbtype for details.
			 * 
			 * rdfs:label = FreebusyType
			 * 
			 * tracker:modified = 1162
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_fbtype "ncal:fbtype"
			 */
			class FreebusyType
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#FreebusyType"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<FreebusyType> Live;
				FreebusyType() { this->attachInterfaceHelper< FreebusyType >(); }
				~FreebusyType() { this->detachInterfaceHelper< FreebusyType >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:Journal
			 * \ingroup onto_ncal_classes
			 * Provide a grouping of component properties that describe a journal entry.
			 * 
			 * rdfs:label = Journal
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1270
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Journal
				: public virtual nie::InformationElement, public virtual UnionParentClass

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Journal"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, QPair<UnionParentClass, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Journal> Live;
				Journal() { this->attachInterfaceHelper< Journal >(); }
				~Journal() { this->detachInterfaceHelper< Journal >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:journalStatus
				 * \n Defines the overall status or confirmation for a journal entry. Based on the STATUS property defined in RFC 2445 sec. 4.8.1.11.
				 * \n rdfs:label=status
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:JournalStatus
				 * \n rdfs:domain=ncal:Journal
				 * \n tracker:modified=1960
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveJournalStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_journalStatus "ncal:journalStatus" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveJournalStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::journalStatus >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getJournalStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_journalStatus "ncal:journalStatus" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getJournalStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::journalStatus >(object_info, strategy, parent); }
				/*!
					\fn void setJournalStatuss(LiveNodes const &journalStatus_)
					
					
					Sets the property \ref ncal_journalStatus "ncal:journalStatus" set to the given \a journalStatus_ set.
					\sa LiveResource::setObjects
				 */
				void setJournalStatuss(LiveNodes const &journalStatus_) { baseSetObjects(ncal::journalStatus::iri(), journalStatus_); }
				/*!
					\fn void removeJournalStatuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_journalStatus "ncal:journalStatus" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeJournalStatuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::journalStatus::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< JournalStatus > getJournalStatus()
					
					
					Returns the property \ref ncal_journalStatus "ncal:journalStatus". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< JournalStatus > getJournalStatus() { return baseGetObject< ncal::journalStatus >(); }
				/*!
					\fn ::SopranoLive::Live< JournalStatus > setJournalStatus(::SopranoLive::Live< JournalStatus > const &journalStatus_)
					
					
					Sets the property \ref ncal_journalStatus "ncal:journalStatus" to the given \a journalStatus.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< JournalStatus > setJournalStatus(::SopranoLive::Live< JournalStatus > const &journalStatus_) { return baseSetObject< ncal::journalStatus >( journalStatus_ ); }
				/*!
					\fn ::SopranoLive::Live< JournalStatus > firstJournalStatus()
					
					
					Returns the first property \ref ncal_journalStatus "ncal:journalStatus". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< JournalStatus > firstJournalStatus() { return baseFirstObject< ncal::journalStatus >(); }
				/*!
					\fn ::SopranoLive::Live< JournalStatus > addJournalStatus()
					
					
					Adds a new uniquely named resource to the property \ref ncal_journalStatus "ncal:journalStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< JournalStatus > addJournalStatus() { return baseAddObject< ncal::journalStatus >(); }
				/*!
					\fn ::SopranoLive::Live< JournalStatus > addJournalStatus(::SopranoLive::Live< JournalStatus > const &journalStatus_)
					
					
					Adds the given \a journalStatus_ to the property \ref ncal_journalStatus "ncal:journalStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< JournalStatus > addJournalStatus(::SopranoLive::Live< JournalStatus > const &journalStatus_) { return baseAddObject< ncal::journalStatus >( journalStatus_ ); }
				/*!
					\fn void removeJournalStatus(::SopranoLive::Live< JournalStatus > const &journalStatus_)
					
					
					Removes the given \a journalStatus_ from the property \ref ncal_journalStatus "ncal:journalStatus" set.
					\sa LiveResource::removeObject
				 */
				void removeJournalStatus(::SopranoLive::Live< JournalStatus > const &journalStatus_) { baseRemoveObject< ncal::journalStatus >(journalStatus_); }
				 //@}
			};

			/*! Class generated from ncal:JournalStatus
			 * \ingroup onto_ncal_classes
			 * A status of a journal entry. This class has been introduced to express the limited set of values for the ncal:status property. The user may use the instances provided with this ontology or create his/her own. See the documentation for ncal:journalStatus for details.
			 * 
			 * rdfs:label = JournalStatus
			 * 
			 * tracker:modified = 1247
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_journalStatus "ncal:journalStatus"
			 */
			class JournalStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#JournalStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<JournalStatus> Live;
				JournalStatus() { this->attachInterfaceHelper< JournalStatus >(); }
				~JournalStatus() { this->detachInterfaceHelper< JournalStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:NcalDateTime
			 * \ingroup onto_ncal_classes
			 * 
			 * rdfs:label = NcalDateTime
			 * 
			 * tracker:modified = 1680
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_exdate "ncal:exdate"
			 * 		\ref ncal_dtend "ncal:dtend"
			 * 		\ref ncal_due "ncal:due"
			 * 		\ref ncal_recurrenceIdDateTime "ncal:recurrenceIdDateTime"
			 * 		\ref ncal_dtstart "ncal:dtstart"
			 */
			class NcalDateTime
				: public virtual NcalTimeEntity

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#NcalDateTime"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<NcalTimeEntity, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<NcalDateTime> Live;
				NcalDateTime() { this->attachInterfaceHelper< NcalDateTime >(); }
				~NcalDateTime() { this->detachInterfaceHelper< NcalDateTime >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:ncalTimezone
				 * \n The timezone instance that should be used to interpret an NcalDateTime. The purpose of this property is similar to the TZID parameter specified in RFC 2445 sec. 4.2.19
				 * \n rdfs:label=ncalTimezone
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:Timezone
				 * \n rdfs:domain=ncal:NcalDateTime
				 * \n tracker:modified=1184
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNcalTimezones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_ncalTimezone "ncal:ncalTimezone" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNcalTimezones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::ncalTimezone >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNcalTimezones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_ncalTimezone "ncal:ncalTimezone" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNcalTimezones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::ncalTimezone >(object_info, strategy, parent); }
				/*!
					\fn void setNcalTimezones(LiveNodes const &ncalTimezone_)
					
					
					Sets the property \ref ncal_ncalTimezone "ncal:ncalTimezone" set to the given \a ncalTimezone_ set.
					\sa LiveResource::setObjects
				 */
				void setNcalTimezones(LiveNodes const &ncalTimezone_) { baseSetObjects(ncal::ncalTimezone::iri(), ncalTimezone_); }
				/*!
					\fn void removeNcalTimezones(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_ncalTimezone "ncal:ncalTimezone" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNcalTimezones(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::ncalTimezone::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Timezone > getNcalTimezone()
					
					
					Returns the property \ref ncal_ncalTimezone "ncal:ncalTimezone". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Timezone > getNcalTimezone() { return baseGetObject< ncal::ncalTimezone >(); }
				/*!
					\fn ::SopranoLive::Live< Timezone > setNcalTimezone(::SopranoLive::Live< Timezone > const &ncalTimezone_)
					
					
					Sets the property \ref ncal_ncalTimezone "ncal:ncalTimezone" to the given \a ncalTimezone.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Timezone > setNcalTimezone(::SopranoLive::Live< Timezone > const &ncalTimezone_) { return baseSetObject< ncal::ncalTimezone >( ncalTimezone_ ); }
				/*!
					\fn ::SopranoLive::Live< Timezone > firstNcalTimezone()
					
					
					Returns the first property \ref ncal_ncalTimezone "ncal:ncalTimezone". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Timezone > firstNcalTimezone() { return baseFirstObject< ncal::ncalTimezone >(); }
				/*!
					\fn ::SopranoLive::Live< Timezone > addNcalTimezone()
					
					
					Adds a new uniquely named resource to the property \ref ncal_ncalTimezone "ncal:ncalTimezone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Timezone > addNcalTimezone() { return baseAddObject< ncal::ncalTimezone >(); }
				/*!
					\fn ::SopranoLive::Live< Timezone > addNcalTimezone(::SopranoLive::Live< Timezone > const &ncalTimezone_)
					
					
					Adds the given \a ncalTimezone_ to the property \ref ncal_ncalTimezone "ncal:ncalTimezone" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Timezone > addNcalTimezone(::SopranoLive::Live< Timezone > const &ncalTimezone_) { return baseAddObject< ncal::ncalTimezone >( ncalTimezone_ ); }
				/*!
					\fn void removeNcalTimezone(::SopranoLive::Live< Timezone > const &ncalTimezone_)
					
					
					Removes the given \a ncalTimezone_ from the property \ref ncal_ncalTimezone "ncal:ncalTimezone" set.
					\sa LiveResource::removeObject
				 */
				void removeNcalTimezone(::SopranoLive::Live< Timezone > const &ncalTimezone_) { baseRemoveObject< ncal::ncalTimezone >(ncalTimezone_); }

				/* Property generated from ncal:dateTime
				 * \n Representation of a date an instance of NcalDateTime actually refers to. It's purpose is to express values in DATE-TIME datatype, as defined in RFC 2445 sec. 4.3.5
				 * \n rdfs:label=dateTime
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=ncal:NcalDateTime
				 * \n tracker:modified=1466
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_dateTime "ncal:dateTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::dateTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_dateTime "ncal:dateTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::dateTime >(object_info, strategy, parent); }
				/*!
					\fn void setDateTimes(LiveNodes const &dateTime_)
					
					
					Sets the property \ref ncal_dateTime "ncal:dateTime" set to the given \a dateTime_ set.
					\sa LiveResource::setObjects
				 */
				void setDateTimes(LiveNodes const &dateTime_) { baseSetObjects(ncal::dateTime::iri(), dateTime_); }
				/*!
					\fn void removeDateTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_dateTime "ncal:dateTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDateTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::dateTime::iri(), object_info); }
				/*!
					\fn QDateTime getDateTime()
					
					
					Returns the property \ref ncal_dateTime "ncal:dateTime". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getDateTime() { return baseGetObject< ncal::dateTime >(); }
				/*!
					\fn void setDateTime(QDateTime const &dateTime_)
					
					
					Sets the property \ref ncal_dateTime "ncal:dateTime" to the given \a dateTime.
					\sa LiveResource::setObject
				 */
				void setDateTime(QDateTime const &dateTime_) { baseSetObject< ncal::dateTime >( dateTime_ ); }
				/*!
					\fn QDateTime firstDateTime()
					
					
					Returns the first property \ref ncal_dateTime "ncal:dateTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstDateTime() { return baseFirstObject< ncal::dateTime >(); }
				/*!
					\fn void addDateTime(QDateTime const &dateTime_)
					
					
					Adds the given \a dateTime_ to the property \ref ncal_dateTime "ncal:dateTime" set.
					\sa LiveResource::addObject
				 */
				void addDateTime(QDateTime const &dateTime_) { baseAddObject< ncal::dateTime >( dateTime_ ); }
				/*!
					\fn void removeDateTime(QDateTime const &dateTime_)
					
					
					Removes the given \a dateTime_ from the property \ref ncal_dateTime "ncal:dateTime" set.
					\sa LiveResource::removeObject
				 */
				void removeDateTime(QDateTime const &dateTime_) { baseRemoveObject< ncal::dateTime >(dateTime_); }

				/* Property generated from ncal:date
				 * \n Date an instance of NcalDateTime refers to. It was conceived to express values in DATE datatype specified in RFC 2445 4.3.4
				 * \n rdfs:label=date
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=ncal:NcalDateTime
				 * \n tracker:modified=1928
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_date "ncal:date" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::date >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_date "ncal:date" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::date >(object_info, strategy, parent); }
				/*!
					\fn void setDates(LiveNodes const &date_)
					
					
					Sets the property \ref ncal_date "ncal:date" set to the given \a date_ set.
					\sa LiveResource::setObjects
				 */
				void setDates(LiveNodes const &date_) { baseSetObjects(ncal::date::iri(), date_); }
				/*!
					\fn void removeDates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_date "ncal:date" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::date::iri(), object_info); }
				/*!
					\fn QDateTime getDate()
					
					
					Returns the property \ref ncal_date "ncal:date". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getDate() { return baseGetObject< ncal::date >(); }
				/*!
					\fn void setDate(QDateTime const &date_)
					
					
					Sets the property \ref ncal_date "ncal:date" to the given \a date.
					\sa LiveResource::setObject
				 */
				void setDate(QDateTime const &date_) { baseSetObject< ncal::date >( date_ ); }
				/*!
					\fn QDateTime firstDate()
					
					
					Returns the first property \ref ncal_date "ncal:date". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstDate() { return baseFirstObject< ncal::date >(); }
				/*!
					\fn void addDate(QDateTime const &date_)
					
					
					Adds the given \a date_ to the property \ref ncal_date "ncal:date" set.
					\sa LiveResource::addObject
				 */
				void addDate(QDateTime const &date_) { baseAddObject< ncal::date >( date_ ); }
				/*!
					\fn void removeDate(QDateTime const &date_)
					
					
					Removes the given \a date_ from the property \ref ncal_date "ncal:date" set.
					\sa LiveResource::removeObject
				 */
				void removeDate(QDateTime const &date_) { baseRemoveObject< ncal::date >(date_); }
				 //@}
			};

			/*! Class generated from ncal:Organizer
			 * \ingroup onto_ncal_classes
			 * An organizer of an event. This class has been introduced to serve as a range of ncal:organizer property. See documentation of ncal:organizer for details.
			 * 
			 * rdfs:label = Organizer
			 * 
			 * tracker:modified = 1879
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_organizer "ncal:organizer"
			 */
			class Organizer
				: public virtual AttendeeOrOrganizer

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Organizer"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<AttendeeOrOrganizer, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Organizer> Live;
				Organizer() { this->attachInterfaceHelper< Organizer >(); }
				~Organizer() { this->detachInterfaceHelper< Organizer >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:ParticipationStatus
			 * \ingroup onto_ncal_classes
			 * Participation Status. This class has been introduced to express the limited vocabulary of values for the ncal:partstat property. See the documentation of ncal:partstat for details.
			 * 
			 * rdfs:label = ParticipationStatus
			 * 
			 * tracker:modified = 1703
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_partstat "ncal:partstat"
			 */
			class ParticipationStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#ParticipationStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<ParticipationStatus> Live;
				ParticipationStatus() { this->attachInterfaceHelper< ParticipationStatus >(); }
				~ParticipationStatus() { this->detachInterfaceHelper< ParticipationStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:RecurrenceFrequency
			 * \ingroup onto_ncal_classes
			 * Frequency of a recurrence rule. This class has been introduced to express a limited set of allowed values for the ncal:freq property. See the documentation of ncal:freq for details.
			 * 
			 * rdfs:label = RecurrenceFrequency
			 * 
			 * tracker:modified = 1965
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_freq "ncal:freq"
			 */
			class RecurrenceFrequency
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#RecurrenceFrequency"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<RecurrenceFrequency> Live;
				RecurrenceFrequency() { this->attachInterfaceHelper< RecurrenceFrequency >(); }
				~RecurrenceFrequency() { this->detachInterfaceHelper< RecurrenceFrequency >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:RecurrenceIdentifier
			 * \ingroup onto_ncal_classes
			 * Recurrence Identifier. Introduced to provide a structure for the value of ncal:recurrenceId property. See the documentation of ncal:recurrenceId for details.
			 * 
			 * rdfs:label = RecurrenceIdentifier
			 * 
			 * tracker:modified = 1967
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_recurrenceId "ncal:recurrenceId"
			 */
			class RecurrenceIdentifier
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#RecurrenceIdentifier"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<RecurrenceIdentifier> Live;
				RecurrenceIdentifier() { this->attachInterfaceHelper< RecurrenceIdentifier >(); }
				~RecurrenceIdentifier() { this->detachInterfaceHelper< RecurrenceIdentifier >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:range
				 * \n To specify the effective range of recurrence instances from the instance specified by the recurrence identifier specified by the property. It is intended to express the RANGE parameter specified in RFC 2445 sec. 4.2.13. The set of possible values for this property is limited. See also the documentation for ncal:recurrenceId for more details.
				 * \n rdfs:label=range
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:RecurrenceIdentifierRange
				 * \n rdfs:domain=ncal:RecurrenceIdentifier
				 * \n tracker:modified=1848
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRanges(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_range "ncal:range" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRanges(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::range >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRanges(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_range "ncal:range" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRanges(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::range >(object_info, strategy, parent); }
				/*!
					\fn void setRanges(LiveNodes const &range_)
					
					
					Sets the property \ref ncal_range "ncal:range" set to the given \a range_ set.
					\sa LiveResource::setObjects
				 */
				void setRanges(LiveNodes const &range_) { baseSetObjects(ncal::range::iri(), range_); }
				/*!
					\fn void removeRanges(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_range "ncal:range" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRanges(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::range::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceIdentifierRange > getRange()
					
					
					Returns the property \ref ncal_range "ncal:range". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< RecurrenceIdentifierRange > getRange() { return baseGetObject< ncal::range >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceIdentifierRange > setRange(::SopranoLive::Live< RecurrenceIdentifierRange > const &range_)
					
					
					Sets the property \ref ncal_range "ncal:range" to the given \a range.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< RecurrenceIdentifierRange > setRange(::SopranoLive::Live< RecurrenceIdentifierRange > const &range_) { return baseSetObject< ncal::range >( range_ ); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceIdentifierRange > firstRange()
					
					
					Returns the first property \ref ncal_range "ncal:range". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< RecurrenceIdentifierRange > firstRange() { return baseFirstObject< ncal::range >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceIdentifierRange > addRange()
					
					
					Adds a new uniquely named resource to the property \ref ncal_range "ncal:range" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RecurrenceIdentifierRange > addRange() { return baseAddObject< ncal::range >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceIdentifierRange > addRange(::SopranoLive::Live< RecurrenceIdentifierRange > const &range_)
					
					
					Adds the given \a range_ to the property \ref ncal_range "ncal:range" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RecurrenceIdentifierRange > addRange(::SopranoLive::Live< RecurrenceIdentifierRange > const &range_) { return baseAddObject< ncal::range >( range_ ); }
				/*!
					\fn void removeRange(::SopranoLive::Live< RecurrenceIdentifierRange > const &range_)
					
					
					Removes the given \a range_ from the property \ref ncal_range "ncal:range" set.
					\sa LiveResource::removeObject
				 */
				void removeRange(::SopranoLive::Live< RecurrenceIdentifierRange > const &range_) { baseRemoveObject< ncal::range >(range_); }

				/* Property generated from ncal:recurrenceIdDateTime
				 * \n The date and time of a recurrence identifier. Provided to express the actual value of the ncal:recurrenceId property. See documentation for ncal:recurrenceId for details.
				 * \n rdfs:label=recurrenceIdDateTime
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:NcalDateTime
				 * \n rdfs:domain=ncal:RecurrenceIdentifier
				 * \n tracker:modified=1902
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRecurrenceIdDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_recurrenceIdDateTime "ncal:recurrenceIdDateTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRecurrenceIdDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::recurrenceIdDateTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRecurrenceIdDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_recurrenceIdDateTime "ncal:recurrenceIdDateTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRecurrenceIdDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::recurrenceIdDateTime >(object_info, strategy, parent); }
				/*!
					\fn void setRecurrenceIdDateTimes(LiveNodes const &recurrenceIdDateTime_)
					
					
					Sets the property \ref ncal_recurrenceIdDateTime "ncal:recurrenceIdDateTime" set to the given \a recurrenceIdDateTime_ set.
					\sa LiveResource::setObjects
				 */
				void setRecurrenceIdDateTimes(LiveNodes const &recurrenceIdDateTime_) { baseSetObjects(ncal::recurrenceIdDateTime::iri(), recurrenceIdDateTime_); }
				/*!
					\fn void removeRecurrenceIdDateTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_recurrenceIdDateTime "ncal:recurrenceIdDateTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRecurrenceIdDateTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::recurrenceIdDateTime::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > getRecurrenceIdDateTime()
					
					
					Returns the property \ref ncal_recurrenceIdDateTime "ncal:recurrenceIdDateTime". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< NcalDateTime > getRecurrenceIdDateTime() { return baseGetObject< ncal::recurrenceIdDateTime >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > setRecurrenceIdDateTime(::SopranoLive::Live< NcalDateTime > const &recurrenceIdDateTime_)
					
					
					Sets the property \ref ncal_recurrenceIdDateTime "ncal:recurrenceIdDateTime" to the given \a recurrenceIdDateTime.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< NcalDateTime > setRecurrenceIdDateTime(::SopranoLive::Live< NcalDateTime > const &recurrenceIdDateTime_) { return baseSetObject< ncal::recurrenceIdDateTime >( recurrenceIdDateTime_ ); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > firstRecurrenceIdDateTime()
					
					
					Returns the first property \ref ncal_recurrenceIdDateTime "ncal:recurrenceIdDateTime". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< NcalDateTime > firstRecurrenceIdDateTime() { return baseFirstObject< ncal::recurrenceIdDateTime >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > addRecurrenceIdDateTime()
					
					
					Adds a new uniquely named resource to the property \ref ncal_recurrenceIdDateTime "ncal:recurrenceIdDateTime" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< NcalDateTime > addRecurrenceIdDateTime() { return baseAddObject< ncal::recurrenceIdDateTime >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > addRecurrenceIdDateTime(::SopranoLive::Live< NcalDateTime > const &recurrenceIdDateTime_)
					
					
					Adds the given \a recurrenceIdDateTime_ to the property \ref ncal_recurrenceIdDateTime "ncal:recurrenceIdDateTime" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< NcalDateTime > addRecurrenceIdDateTime(::SopranoLive::Live< NcalDateTime > const &recurrenceIdDateTime_) { return baseAddObject< ncal::recurrenceIdDateTime >( recurrenceIdDateTime_ ); }
				/*!
					\fn void removeRecurrenceIdDateTime(::SopranoLive::Live< NcalDateTime > const &recurrenceIdDateTime_)
					
					
					Removes the given \a recurrenceIdDateTime_ from the property \ref ncal_recurrenceIdDateTime "ncal:recurrenceIdDateTime" set.
					\sa LiveResource::removeObject
				 */
				void removeRecurrenceIdDateTime(::SopranoLive::Live< NcalDateTime > const &recurrenceIdDateTime_) { baseRemoveObject< ncal::recurrenceIdDateTime >(recurrenceIdDateTime_); }
				 //@}
			};

			/*! Class generated from ncal:RecurrenceIdentifierRange
			 * \ingroup onto_ncal_classes
			 * Recurrence Identifier Range. This class has been created to provide means to express the limited set of values for the ncal:range property. See documentation for ncal:range for details.
			 * 
			 * rdfs:label = RecurrenceIdentifierRange
			 * 
			 * tracker:modified = 1441
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_range "ncal:range"
			 */
			class RecurrenceIdentifierRange
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#RecurrenceIdentifierRange"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<RecurrenceIdentifierRange> Live;
				RecurrenceIdentifierRange() { this->attachInterfaceHelper< RecurrenceIdentifierRange >(); }
				~RecurrenceIdentifierRange() { this->detachInterfaceHelper< RecurrenceIdentifierRange >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:RecurrenceRule
			 * \ingroup onto_ncal_classes
			 * 
			 * rdfs:label = RecurrenceRule
			 * 
			 * tracker:modified = 1119
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_exrule "ncal:exrule"
			 * 		\ref ncal_rrule "ncal:rrule"
			 */
			class RecurrenceRule
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#RecurrenceRule"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<RecurrenceRule> Live;
				RecurrenceRule() { this->attachInterfaceHelper< RecurrenceRule >(); }
				~RecurrenceRule() { this->detachInterfaceHelper< RecurrenceRule >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:bysecond
				 * \n Second of a recurrence. Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:label=bysecond
				 * \n tracker:modified=1912
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveByseconds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_bysecond "ncal:bysecond" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveByseconds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::bysecond >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getByseconds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_bysecond "ncal:bysecond" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getByseconds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::bysecond >(object_info, strategy, parent); }
				/*!
					\fn void setByseconds(LiveNodes const &bysecond_)
					
					
					Sets the property \ref ncal_bysecond "ncal:bysecond" set to the given \a bysecond_ set.
					\sa LiveResource::setObjects
				 */
				void setByseconds(LiveNodes const &bysecond_) { baseSetObjects(ncal::bysecond::iri(), bysecond_); }
				/*!
					\fn void removeByseconds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_bysecond "ncal:bysecond" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeByseconds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::bysecond::iri(), object_info); }
				/*!
					\fn qint64 firstBysecond()
					
					
					Returns the first property \ref ncal_bysecond "ncal:bysecond". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstBysecond() { return baseFirstObject< ncal::bysecond >(); }
				/*!
					\fn void addBysecond(qint64 const &bysecond_)
					
					
					Adds the given \a bysecond_ to the property \ref ncal_bysecond "ncal:bysecond" set.
					\sa LiveResource::addObject
				 */
				void addBysecond(qint64 const &bysecond_) { baseAddObject< ncal::bysecond >( bysecond_ ); }
				/*!
					\fn void removeBysecond(qint64 const &bysecond_)
					
					
					Removes the given \a bysecond_ from the property \ref ncal_bysecond "ncal:bysecond" set.
					\sa LiveResource::removeObject
				 */
				void removeBysecond(qint64 const &bysecond_) { baseRemoveObject< ncal::bysecond >(bysecond_); }

				/* Property generated from ncal:wkst
				 * \n The day that's counted as the start of the week. It is used to disambiguate the byweekno rule. Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:label=wkst
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:Weekday
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:modified=1265
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveWksts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_wkst "ncal:wkst" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveWksts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::wkst >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getWksts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_wkst "ncal:wkst" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getWksts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::wkst >(object_info, strategy, parent); }
				/*!
					\fn void setWksts(LiveNodes const &wkst_)
					
					
					Sets the property \ref ncal_wkst "ncal:wkst" set to the given \a wkst_ set.
					\sa LiveResource::setObjects
				 */
				void setWksts(LiveNodes const &wkst_) { baseSetObjects(ncal::wkst::iri(), wkst_); }
				/*!
					\fn void removeWksts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_wkst "ncal:wkst" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeWksts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::wkst::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Weekday > getWkst()
					
					
					Returns the property \ref ncal_wkst "ncal:wkst". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Weekday > getWkst() { return baseGetObject< ncal::wkst >(); }
				/*!
					\fn ::SopranoLive::Live< Weekday > setWkst(::SopranoLive::Live< Weekday > const &wkst_)
					
					
					Sets the property \ref ncal_wkst "ncal:wkst" to the given \a wkst.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Weekday > setWkst(::SopranoLive::Live< Weekday > const &wkst_) { return baseSetObject< ncal::wkst >( wkst_ ); }
				/*!
					\fn ::SopranoLive::Live< Weekday > firstWkst()
					
					
					Returns the first property \ref ncal_wkst "ncal:wkst". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Weekday > firstWkst() { return baseFirstObject< ncal::wkst >(); }
				/*!
					\fn ::SopranoLive::Live< Weekday > addWkst()
					
					
					Adds a new uniquely named resource to the property \ref ncal_wkst "ncal:wkst" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Weekday > addWkst() { return baseAddObject< ncal::wkst >(); }
				/*!
					\fn ::SopranoLive::Live< Weekday > addWkst(::SopranoLive::Live< Weekday > const &wkst_)
					
					
					Adds the given \a wkst_ to the property \ref ncal_wkst "ncal:wkst" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Weekday > addWkst(::SopranoLive::Live< Weekday > const &wkst_) { return baseAddObject< ncal::wkst >( wkst_ ); }
				/*!
					\fn void removeWkst(::SopranoLive::Live< Weekday > const &wkst_)
					
					
					Removes the given \a wkst_ from the property \ref ncal_wkst "ncal:wkst" set.
					\sa LiveResource::removeObject
				 */
				void removeWkst(::SopranoLive::Live< Weekday > const &wkst_) { baseRemoveObject< ncal::wkst >(wkst_); }

				/* Property generated from ncal:bymonth
				 * \n Number of the month of the recurrence. Valid values are integers from 1 (January) to 12 (December). Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:label=bymonth
				 * \n tracker:modified=1234
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBymonths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_bymonth "ncal:bymonth" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBymonths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::bymonth >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBymonths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_bymonth "ncal:bymonth" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBymonths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::bymonth >(object_info, strategy, parent); }
				/*!
					\fn void setBymonths(LiveNodes const &bymonth_)
					
					
					Sets the property \ref ncal_bymonth "ncal:bymonth" set to the given \a bymonth_ set.
					\sa LiveResource::setObjects
				 */
				void setBymonths(LiveNodes const &bymonth_) { baseSetObjects(ncal::bymonth::iri(), bymonth_); }
				/*!
					\fn void removeBymonths(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_bymonth "ncal:bymonth" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBymonths(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::bymonth::iri(), object_info); }
				/*!
					\fn qint64 firstBymonth()
					
					
					Returns the first property \ref ncal_bymonth "ncal:bymonth". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstBymonth() { return baseFirstObject< ncal::bymonth >(); }
				/*!
					\fn void addBymonth(qint64 const &bymonth_)
					
					
					Adds the given \a bymonth_ to the property \ref ncal_bymonth "ncal:bymonth" set.
					\sa LiveResource::addObject
				 */
				void addBymonth(qint64 const &bymonth_) { baseAddObject< ncal::bymonth >( bymonth_ ); }
				/*!
					\fn void removeBymonth(qint64 const &bymonth_)
					
					
					Removes the given \a bymonth_ from the property \ref ncal_bymonth "ncal:bymonth" set.
					\sa LiveResource::removeObject
				 */
				void removeBymonth(qint64 const &bymonth_) { baseRemoveObject< ncal::bymonth >(bymonth_); }

				/* Property generated from ncal:interval
				 * \n The INTERVAL rule part contains a positive integer representing how often the recurrence rule repeats. The default value is '1', meaning every second for a SECONDLY rule, or every minute for a MINUTELY rule, every hour for an HOURLY rule, every day for a DAILY rule, every week for a WEEKLY rule, every month for a MONTHLY rule andevery year for a YEARLY rule. Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:label=interval
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:modified=1380
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveIntervals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_interval "ncal:interval" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIntervals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::interval >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIntervals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_interval "ncal:interval" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIntervals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::interval >(object_info, strategy, parent); }
				/*!
					\fn void setIntervals(LiveNodes const &interval_)
					
					
					Sets the property \ref ncal_interval "ncal:interval" set to the given \a interval_ set.
					\sa LiveResource::setObjects
				 */
				void setIntervals(LiveNodes const &interval_) { baseSetObjects(ncal::interval::iri(), interval_); }
				/*!
					\fn void removeIntervals(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_interval "ncal:interval" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIntervals(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::interval::iri(), object_info); }
				/*!
					\fn qint64 getInterval()
					
					
					Returns the property \ref ncal_interval "ncal:interval". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getInterval() { return baseGetObject< ncal::interval >(); }
				/*!
					\fn void setInterval(qint64 const &interval_)
					
					
					Sets the property \ref ncal_interval "ncal:interval" to the given \a interval.
					\sa LiveResource::setObject
				 */
				void setInterval(qint64 const &interval_) { baseSetObject< ncal::interval >( interval_ ); }
				/*!
					\fn qint64 firstInterval()
					
					
					Returns the first property \ref ncal_interval "ncal:interval". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstInterval() { return baseFirstObject< ncal::interval >(); }
				/*!
					\fn void addInterval(qint64 const &interval_)
					
					
					Adds the given \a interval_ to the property \ref ncal_interval "ncal:interval" set.
					\sa LiveResource::addObject
				 */
				void addInterval(qint64 const &interval_) { baseAddObject< ncal::interval >( interval_ ); }
				/*!
					\fn void removeInterval(qint64 const &interval_)
					
					
					Removes the given \a interval_ from the property \ref ncal_interval "ncal:interval" set.
					\sa LiveResource::removeObject
				 */
				void removeInterval(qint64 const &interval_) { baseRemoveObject< ncal::interval >(interval_); }

				/* Property generated from ncal:until
				 * \n The UNTIL rule part defines a date-time value which bounds the recurrence rule in an inclusive manner. If the value specified by UNTIL is synchronized with the specified recurrence, this date or date-time becomes the last instance of the recurrence. If specified as a date-time value, then it MUST be specified in an UTC time format. If not present, and the COUNT rule part is also not present, the RRULE is considered to repeat forever.
				 * \n rdfs:label=until
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:modified=1458
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveUntils(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_until "ncal:until" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveUntils(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::until >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getUntils(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_until "ncal:until" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getUntils(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::until >(object_info, strategy, parent); }
				/*!
					\fn void setUntils(LiveNodes const &until_)
					
					
					Sets the property \ref ncal_until "ncal:until" set to the given \a until_ set.
					\sa LiveResource::setObjects
				 */
				void setUntils(LiveNodes const &until_) { baseSetObjects(ncal::until::iri(), until_); }
				/*!
					\fn void removeUntils(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_until "ncal:until" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeUntils(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::until::iri(), object_info); }
				/*!
					\fn QDateTime getUntil()
					
					
					Returns the property \ref ncal_until "ncal:until". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getUntil() { return baseGetObject< ncal::until >(); }
				/*!
					\fn void setUntil(QDateTime const &until_)
					
					
					Sets the property \ref ncal_until "ncal:until" to the given \a until.
					\sa LiveResource::setObject
				 */
				void setUntil(QDateTime const &until_) { baseSetObject< ncal::until >( until_ ); }
				/*!
					\fn QDateTime firstUntil()
					
					
					Returns the first property \ref ncal_until "ncal:until". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstUntil() { return baseFirstObject< ncal::until >(); }
				/*!
					\fn void addUntil(QDateTime const &until_)
					
					
					Adds the given \a until_ to the property \ref ncal_until "ncal:until" set.
					\sa LiveResource::addObject
				 */
				void addUntil(QDateTime const &until_) { baseAddObject< ncal::until >( until_ ); }
				/*!
					\fn void removeUntil(QDateTime const &until_)
					
					
					Removes the given \a until_ from the property \ref ncal_until "ncal:until" set.
					\sa LiveResource::removeObject
				 */
				void removeUntil(QDateTime const &until_) { baseRemoveObject< ncal::until >(until_); }

				/* Property generated from ncal:byyearday
				 * \n Day of the year the event should occur. Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:label=byyearday
				 * \n tracker:modified=1762
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveByyeardays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_byyearday "ncal:byyearday" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveByyeardays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::byyearday >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getByyeardays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_byyearday "ncal:byyearday" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getByyeardays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::byyearday >(object_info, strategy, parent); }
				/*!
					\fn void setByyeardays(LiveNodes const &byyearday_)
					
					
					Sets the property \ref ncal_byyearday "ncal:byyearday" set to the given \a byyearday_ set.
					\sa LiveResource::setObjects
				 */
				void setByyeardays(LiveNodes const &byyearday_) { baseSetObjects(ncal::byyearday::iri(), byyearday_); }
				/*!
					\fn void removeByyeardays(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_byyearday "ncal:byyearday" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeByyeardays(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::byyearday::iri(), object_info); }
				/*!
					\fn qint64 firstByyearday()
					
					
					Returns the first property \ref ncal_byyearday "ncal:byyearday". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstByyearday() { return baseFirstObject< ncal::byyearday >(); }
				/*!
					\fn void addByyearday(qint64 const &byyearday_)
					
					
					Adds the given \a byyearday_ to the property \ref ncal_byyearday "ncal:byyearday" set.
					\sa LiveResource::addObject
				 */
				void addByyearday(qint64 const &byyearday_) { baseAddObject< ncal::byyearday >( byyearday_ ); }
				/*!
					\fn void removeByyearday(qint64 const &byyearday_)
					
					
					Removes the given \a byyearday_ from the property \ref ncal_byyearday "ncal:byyearday" set.
					\sa LiveResource::removeObject
				 */
				void removeByyearday(qint64 const &byyearday_) { baseRemoveObject< ncal::byyearday >(byyearday_); }

				/* Property generated from ncal:byhour
				 * \n Hour of recurrence. Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:label=byhour
				 * \n tracker:modified=1596
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveByhours(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_byhour "ncal:byhour" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveByhours(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::byhour >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getByhours(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_byhour "ncal:byhour" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getByhours(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::byhour >(object_info, strategy, parent); }
				/*!
					\fn void setByhours(LiveNodes const &byhour_)
					
					
					Sets the property \ref ncal_byhour "ncal:byhour" set to the given \a byhour_ set.
					\sa LiveResource::setObjects
				 */
				void setByhours(LiveNodes const &byhour_) { baseSetObjects(ncal::byhour::iri(), byhour_); }
				/*!
					\fn void removeByhours(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_byhour "ncal:byhour" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeByhours(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::byhour::iri(), object_info); }
				/*!
					\fn qint64 firstByhour()
					
					
					Returns the first property \ref ncal_byhour "ncal:byhour". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstByhour() { return baseFirstObject< ncal::byhour >(); }
				/*!
					\fn void addByhour(qint64 const &byhour_)
					
					
					Adds the given \a byhour_ to the property \ref ncal_byhour "ncal:byhour" set.
					\sa LiveResource::addObject
				 */
				void addByhour(qint64 const &byhour_) { baseAddObject< ncal::byhour >( byhour_ ); }
				/*!
					\fn void removeByhour(qint64 const &byhour_)
					
					
					Removes the given \a byhour_ from the property \ref ncal_byhour "ncal:byhour" set.
					\sa LiveResource::removeObject
				 */
				void removeByhour(qint64 const &byhour_) { baseRemoveObject< ncal::byhour >(byhour_); }

				/* Property generated from ncal:bysetpos
				 * \n The BYSETPOS rule part specify values which correspond to the nth occurrence within the set of events specified by the rule. Valid values are 1 to 366 or -366 to -1. It MUST only be used in conjunction with another BYxxx rule part. For example 'the last work day of the month' could be represented as: RRULE: FREQ=MONTHLY; BYDAY=MO', 'TU', 'WE', 'TH', 'FR; BYSETPOS=-1. Each BYSETPOS value can include a positive (+n) or negative (-n)  integer. If present, this indicates the nth occurrence of the  specific occurrence within the set of events specified by the rule. Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:label=bysetpos
				 * \n tracker:modified=1790
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBysetposs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_bysetpos "ncal:bysetpos" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBysetposs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::bysetpos >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBysetposs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_bysetpos "ncal:bysetpos" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBysetposs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::bysetpos >(object_info, strategy, parent); }
				/*!
					\fn void setBysetposs(LiveNodes const &bysetpos_)
					
					
					Sets the property \ref ncal_bysetpos "ncal:bysetpos" set to the given \a bysetpos_ set.
					\sa LiveResource::setObjects
				 */
				void setBysetposs(LiveNodes const &bysetpos_) { baseSetObjects(ncal::bysetpos::iri(), bysetpos_); }
				/*!
					\fn void removeBysetposs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_bysetpos "ncal:bysetpos" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBysetposs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::bysetpos::iri(), object_info); }
				/*!
					\fn qint64 firstBysetpos()
					
					
					Returns the first property \ref ncal_bysetpos "ncal:bysetpos". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstBysetpos() { return baseFirstObject< ncal::bysetpos >(); }
				/*!
					\fn void addBysetpos(qint64 const &bysetpos_)
					
					
					Adds the given \a bysetpos_ to the property \ref ncal_bysetpos "ncal:bysetpos" set.
					\sa LiveResource::addObject
				 */
				void addBysetpos(qint64 const &bysetpos_) { baseAddObject< ncal::bysetpos >( bysetpos_ ); }
				/*!
					\fn void removeBysetpos(qint64 const &bysetpos_)
					
					
					Removes the given \a bysetpos_ from the property \ref ncal_bysetpos "ncal:bysetpos" set.
					\sa LiveResource::removeObject
				 */
				void removeBysetpos(qint64 const &bysetpos_) { baseRemoveObject< ncal::bysetpos >(bysetpos_); }

				/* Property generated from ncal:byweekno
				 * \n The number of the week an event should recur. Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:label=byweekno
				 * \n tracker:modified=1409
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveByweeknos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_byweekno "ncal:byweekno" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveByweeknos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::byweekno >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getByweeknos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_byweekno "ncal:byweekno" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getByweeknos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::byweekno >(object_info, strategy, parent); }
				/*!
					\fn void setByweeknos(LiveNodes const &byweekno_)
					
					
					Sets the property \ref ncal_byweekno "ncal:byweekno" set to the given \a byweekno_ set.
					\sa LiveResource::setObjects
				 */
				void setByweeknos(LiveNodes const &byweekno_) { baseSetObjects(ncal::byweekno::iri(), byweekno_); }
				/*!
					\fn void removeByweeknos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_byweekno "ncal:byweekno" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeByweeknos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::byweekno::iri(), object_info); }
				/*!
					\fn qint64 firstByweekno()
					
					
					Returns the first property \ref ncal_byweekno "ncal:byweekno". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstByweekno() { return baseFirstObject< ncal::byweekno >(); }
				/*!
					\fn void addByweekno(qint64 const &byweekno_)
					
					
					Adds the given \a byweekno_ to the property \ref ncal_byweekno "ncal:byweekno" set.
					\sa LiveResource::addObject
				 */
				void addByweekno(qint64 const &byweekno_) { baseAddObject< ncal::byweekno >( byweekno_ ); }
				/*!
					\fn void removeByweekno(qint64 const &byweekno_)
					
					
					Removes the given \a byweekno_ from the property \ref ncal_byweekno "ncal:byweekno" set.
					\sa LiveResource::removeObject
				 */
				void removeByweekno(qint64 const &byweekno_) { baseRemoveObject< ncal::byweekno >(byweekno_); }

				/* Property generated from ncal:bymonthday
				 * \n Day of the month when the event should recur. Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:label=bymonthday
				 * \n tracker:modified=1356
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBymonthdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_bymonthday "ncal:bymonthday" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBymonthdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::bymonthday >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBymonthdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_bymonthday "ncal:bymonthday" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBymonthdays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::bymonthday >(object_info, strategy, parent); }
				/*!
					\fn void setBymonthdays(LiveNodes const &bymonthday_)
					
					
					Sets the property \ref ncal_bymonthday "ncal:bymonthday" set to the given \a bymonthday_ set.
					\sa LiveResource::setObjects
				 */
				void setBymonthdays(LiveNodes const &bymonthday_) { baseSetObjects(ncal::bymonthday::iri(), bymonthday_); }
				/*!
					\fn void removeBymonthdays(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_bymonthday "ncal:bymonthday" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBymonthdays(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::bymonthday::iri(), object_info); }
				/*!
					\fn qint64 firstBymonthday()
					
					
					Returns the first property \ref ncal_bymonthday "ncal:bymonthday". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstBymonthday() { return baseFirstObject< ncal::bymonthday >(); }
				/*!
					\fn void addBymonthday(qint64 const &bymonthday_)
					
					
					Adds the given \a bymonthday_ to the property \ref ncal_bymonthday "ncal:bymonthday" set.
					\sa LiveResource::addObject
				 */
				void addBymonthday(qint64 const &bymonthday_) { baseAddObject< ncal::bymonthday >( bymonthday_ ); }
				/*!
					\fn void removeBymonthday(qint64 const &bymonthday_)
					
					
					Removes the given \a bymonthday_ from the property \ref ncal_bymonthday "ncal:bymonthday" set.
					\sa LiveResource::removeObject
				 */
				void removeBymonthday(qint64 const &bymonthday_) { baseRemoveObject< ncal::bymonthday >(bymonthday_); }

				/* Property generated from ncal:byday
				 * \n Weekdays the recurrence should occur. Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:range=ncal:BydayRulePart
				 * \n rdfs:label=byday
				 * \n tracker:modified=1861
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBydays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_byday "ncal:byday" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBydays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::byday >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBydays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_byday "ncal:byday" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBydays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::byday >(object_info, strategy, parent); }
				/*!
					\fn void setBydays(LiveNodes const &byday_)
					
					
					Sets the property \ref ncal_byday "ncal:byday" set to the given \a byday_ set.
					\sa LiveResource::setObjects
				 */
				void setBydays(LiveNodes const &byday_) { baseSetObjects(ncal::byday::iri(), byday_); }
				/*!
					\fn void removeBydays(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_byday "ncal:byday" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBydays(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::byday::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< BydayRulePart > firstByday()
					
					
					Returns the first property \ref ncal_byday "ncal:byday". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< BydayRulePart > firstByday() { return baseFirstObject< ncal::byday >(); }
				/*!
					\fn ::SopranoLive::Live< BydayRulePart > addByday()
					
					
					Adds a new uniquely named resource to the property \ref ncal_byday "ncal:byday" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< BydayRulePart > addByday() { return baseAddObject< ncal::byday >(); }
				/*!
					\fn ::SopranoLive::Live< BydayRulePart > addByday(::SopranoLive::Live< BydayRulePart > const &byday_)
					
					
					Adds the given \a byday_ to the property \ref ncal_byday "ncal:byday" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< BydayRulePart > addByday(::SopranoLive::Live< BydayRulePart > const &byday_) { return baseAddObject< ncal::byday >( byday_ ); }
				/*!
					\fn void removeByday(::SopranoLive::Live< BydayRulePart > const &byday_)
					
					
					Removes the given \a byday_ from the property \ref ncal_byday "ncal:byday" set.
					\sa LiveResource::removeObject
				 */
				void removeByday(::SopranoLive::Live< BydayRulePart > const &byday_) { baseRemoveObject< ncal::byday >(byday_); }

				/* Property generated from ncal:byminute
				 * \n Minute of recurrence. Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:label=byminute
				 * \n tracker:modified=1586
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveByminutes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_byminute "ncal:byminute" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveByminutes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::byminute >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getByminutes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_byminute "ncal:byminute" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getByminutes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::byminute >(object_info, strategy, parent); }
				/*!
					\fn void setByminutes(LiveNodes const &byminute_)
					
					
					Sets the property \ref ncal_byminute "ncal:byminute" set to the given \a byminute_ set.
					\sa LiveResource::setObjects
				 */
				void setByminutes(LiveNodes const &byminute_) { baseSetObjects(ncal::byminute::iri(), byminute_); }
				/*!
					\fn void removeByminutes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_byminute "ncal:byminute" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeByminutes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::byminute::iri(), object_info); }
				/*!
					\fn qint64 firstByminute()
					
					
					Returns the first property \ref ncal_byminute "ncal:byminute". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstByminute() { return baseFirstObject< ncal::byminute >(); }
				/*!
					\fn void addByminute(qint64 const &byminute_)
					
					
					Adds the given \a byminute_ to the property \ref ncal_byminute "ncal:byminute" set.
					\sa LiveResource::addObject
				 */
				void addByminute(qint64 const &byminute_) { baseAddObject< ncal::byminute >( byminute_ ); }
				/*!
					\fn void removeByminute(qint64 const &byminute_)
					
					
					Removes the given \a byminute_ from the property \ref ncal_byminute "ncal:byminute" set.
					\sa LiveResource::removeObject
				 */
				void removeByminute(qint64 const &byminute_) { baseRemoveObject< ncal::byminute >(byminute_); }

				/* Property generated from ncal:count
				 * \n How many times should an event be repeated. Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:label=count
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:modified=1885
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_count "ncal:count" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::count >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_count "ncal:count" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::count >(object_info, strategy, parent); }
				/*!
					\fn void setCounts(LiveNodes const &count_)
					
					
					Sets the property \ref ncal_count "ncal:count" set to the given \a count_ set.
					\sa LiveResource::setObjects
				 */
				void setCounts(LiveNodes const &count_) { baseSetObjects(ncal::count::iri(), count_); }
				/*!
					\fn void removeCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_count "ncal:count" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::count::iri(), object_info); }
				/*!
					\fn qint64 getCount()
					
					
					Returns the property \ref ncal_count "ncal:count". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getCount() { return baseGetObject< ncal::count >(); }
				/*!
					\fn void setCount(qint64 const &count_)
					
					
					Sets the property \ref ncal_count "ncal:count" to the given \a count.
					\sa LiveResource::setObject
				 */
				void setCount(qint64 const &count_) { baseSetObject< ncal::count >( count_ ); }
				/*!
					\fn qint64 firstCount()
					
					
					Returns the first property \ref ncal_count "ncal:count". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstCount() { return baseFirstObject< ncal::count >(); }
				/*!
					\fn void addCount(qint64 const &count_)
					
					
					Adds the given \a count_ to the property \ref ncal_count "ncal:count" set.
					\sa LiveResource::addObject
				 */
				void addCount(qint64 const &count_) { baseAddObject< ncal::count >( count_ ); }
				/*!
					\fn void removeCount(qint64 const &count_)
					
					
					Removes the given \a count_ from the property \ref ncal_count "ncal:count" set.
					\sa LiveResource::removeObject
				 */
				void removeCount(qint64 const &count_) { baseRemoveObject< ncal::count >(count_); }

				/* Property generated from ncal:freq
				 * \n Frequency of a recurrence rule. Defined in RFC 2445 sec. 4.3.10
				 * \n rdfs:label=freq
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:RecurrenceFrequency
				 * \n rdfs:domain=ncal:RecurrenceRule
				 * \n tracker:modified=1942
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFreqs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_freq "ncal:freq" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFreqs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::freq >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFreqs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_freq "ncal:freq" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFreqs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::freq >(object_info, strategy, parent); }
				/*!
					\fn void setFreqs(LiveNodes const &freq_)
					
					
					Sets the property \ref ncal_freq "ncal:freq" set to the given \a freq_ set.
					\sa LiveResource::setObjects
				 */
				void setFreqs(LiveNodes const &freq_) { baseSetObjects(ncal::freq::iri(), freq_); }
				/*!
					\fn void removeFreqs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_freq "ncal:freq" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFreqs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::freq::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceFrequency > getFreq()
					
					
					Returns the property \ref ncal_freq "ncal:freq". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< RecurrenceFrequency > getFreq() { return baseGetObject< ncal::freq >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceFrequency > setFreq(::SopranoLive::Live< RecurrenceFrequency > const &freq_)
					
					
					Sets the property \ref ncal_freq "ncal:freq" to the given \a freq.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< RecurrenceFrequency > setFreq(::SopranoLive::Live< RecurrenceFrequency > const &freq_) { return baseSetObject< ncal::freq >( freq_ ); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceFrequency > firstFreq()
					
					
					Returns the first property \ref ncal_freq "ncal:freq". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< RecurrenceFrequency > firstFreq() { return baseFirstObject< ncal::freq >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceFrequency > addFreq()
					
					
					Adds a new uniquely named resource to the property \ref ncal_freq "ncal:freq" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RecurrenceFrequency > addFreq() { return baseAddObject< ncal::freq >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceFrequency > addFreq(::SopranoLive::Live< RecurrenceFrequency > const &freq_)
					
					
					Adds the given \a freq_ to the property \ref ncal_freq "ncal:freq" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RecurrenceFrequency > addFreq(::SopranoLive::Live< RecurrenceFrequency > const &freq_) { return baseAddObject< ncal::freq >( freq_ ); }
				/*!
					\fn void removeFreq(::SopranoLive::Live< RecurrenceFrequency > const &freq_)
					
					
					Removes the given \a freq_ from the property \ref ncal_freq "ncal:freq" set.
					\sa LiveResource::removeObject
				 */
				void removeFreq(::SopranoLive::Live< RecurrenceFrequency > const &freq_) { baseRemoveObject< ncal::freq >(freq_); }
				 //@}
			};

			/*! Class generated from ncal:RequestStatus
			 * \ingroup onto_ncal_classes
			 * Request Status. A class that was introduced to provide a structure for the value of ncal:requestStatus property. See documentation for ncal:requestStatus for details.
			 * 
			 * rdfs:label = RequestStatus
			 * 
			 * tracker:modified = 1372
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_requestStatus "ncal:requestStatus"
			 */
			class RequestStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#RequestStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<RequestStatus> Live;
				RequestStatus() { this->attachInterfaceHelper< RequestStatus >(); }
				~RequestStatus() { this->detachInterfaceHelper< RequestStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:returnStatus
				 * \n Short return status. Inspired by the first element of the structured value of the REQUEST-STATUS property described in RFC 2445 sec. 4.8.8.2.
				 * \n rdfs:label=returnStatus
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:RequestStatus
				 * \n tracker:modified=1048
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveReturnStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_returnStatus "ncal:returnStatus" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveReturnStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::returnStatus >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getReturnStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_returnStatus "ncal:returnStatus" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getReturnStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::returnStatus >(object_info, strategy, parent); }
				/*!
					\fn void setReturnStatuss(LiveNodes const &returnStatus_)
					
					
					Sets the property \ref ncal_returnStatus "ncal:returnStatus" set to the given \a returnStatus_ set.
					\sa LiveResource::setObjects
				 */
				void setReturnStatuss(LiveNodes const &returnStatus_) { baseSetObjects(ncal::returnStatus::iri(), returnStatus_); }
				/*!
					\fn void removeReturnStatuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_returnStatus "ncal:returnStatus" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeReturnStatuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::returnStatus::iri(), object_info); }
				/*!
					\fn QString getReturnStatus()
					
					
					Returns the property \ref ncal_returnStatus "ncal:returnStatus". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getReturnStatus() { return baseGetObject< ncal::returnStatus >(); }
				/*!
					\fn void setReturnStatus(QString const &returnStatus_)
					
					
					Sets the property \ref ncal_returnStatus "ncal:returnStatus" to the given \a returnStatus.
					\sa LiveResource::setObject
				 */
				void setReturnStatus(QString const &returnStatus_) { baseSetObject< ncal::returnStatus >( returnStatus_ ); }
				/*!
					\fn QString firstReturnStatus()
					
					
					Returns the first property \ref ncal_returnStatus "ncal:returnStatus". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstReturnStatus() { return baseFirstObject< ncal::returnStatus >(); }
				/*!
					\fn void addReturnStatus(QString const &returnStatus_)
					
					
					Adds the given \a returnStatus_ to the property \ref ncal_returnStatus "ncal:returnStatus" set.
					\sa LiveResource::addObject
				 */
				void addReturnStatus(QString const &returnStatus_) { baseAddObject< ncal::returnStatus >( returnStatus_ ); }
				/*!
					\fn void removeReturnStatus(QString const &returnStatus_)
					
					
					Removes the given \a returnStatus_ from the property \ref ncal_returnStatus "ncal:returnStatus" set.
					\sa LiveResource::removeObject
				 */
				void removeReturnStatus(QString const &returnStatus_) { baseRemoveObject< ncal::returnStatus >(returnStatus_); }

				/* Property generated from ncal:statusDescription
				 * \n Longer return status description. Inspired by the second part of the structured value of the REQUEST-STATUS property defined in RFC 2445 sec. 4.8.8.2
				 * \n rdfs:label=statusDescription
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:RequestStatus
				 * \n tracker:modified=1642
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveStatusDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_statusDescription "ncal:statusDescription" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStatusDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::statusDescription >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStatusDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_statusDescription "ncal:statusDescription" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStatusDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::statusDescription >(object_info, strategy, parent); }
				/*!
					\fn void setStatusDescriptions(LiveNodes const &statusDescription_)
					
					
					Sets the property \ref ncal_statusDescription "ncal:statusDescription" set to the given \a statusDescription_ set.
					\sa LiveResource::setObjects
				 */
				void setStatusDescriptions(LiveNodes const &statusDescription_) { baseSetObjects(ncal::statusDescription::iri(), statusDescription_); }
				/*!
					\fn void removeStatusDescriptions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_statusDescription "ncal:statusDescription" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStatusDescriptions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::statusDescription::iri(), object_info); }
				/*!
					\fn QString getStatusDescription()
					
					
					Returns the property \ref ncal_statusDescription "ncal:statusDescription". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getStatusDescription() { return baseGetObject< ncal::statusDescription >(); }
				/*!
					\fn void setStatusDescription(QString const &statusDescription_)
					
					
					Sets the property \ref ncal_statusDescription "ncal:statusDescription" to the given \a statusDescription.
					\sa LiveResource::setObject
				 */
				void setStatusDescription(QString const &statusDescription_) { baseSetObject< ncal::statusDescription >( statusDescription_ ); }
				/*!
					\fn QString firstStatusDescription()
					
					
					Returns the first property \ref ncal_statusDescription "ncal:statusDescription". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstStatusDescription() { return baseFirstObject< ncal::statusDescription >(); }
				/*!
					\fn void addStatusDescription(QString const &statusDescription_)
					
					
					Adds the given \a statusDescription_ to the property \ref ncal_statusDescription "ncal:statusDescription" set.
					\sa LiveResource::addObject
				 */
				void addStatusDescription(QString const &statusDescription_) { baseAddObject< ncal::statusDescription >( statusDescription_ ); }
				/*!
					\fn void removeStatusDescription(QString const &statusDescription_)
					
					
					Removes the given \a statusDescription_ from the property \ref ncal_statusDescription "ncal:statusDescription" set.
					\sa LiveResource::removeObject
				 */
				void removeStatusDescription(QString const &statusDescription_) { baseRemoveObject< ncal::statusDescription >(statusDescription_); }

				/* Property generated from ncal:requestStatusData
				 * \n Additional data associated with a request status. Inspired by the third part of the structured value for the REQUEST-STATUS property defined in RFC 2445 sec. 4.8.8.2 ('Textual exception data. For example, the offending property name and value or complete property line')
				 * \n rdfs:label=requestStatusData
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:RequestStatus
				 * \n tracker:modified=1104
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRequestStatusDatas(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_requestStatusData "ncal:requestStatusData" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRequestStatusDatas(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::requestStatusData >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRequestStatusDatas(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_requestStatusData "ncal:requestStatusData" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRequestStatusDatas(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::requestStatusData >(object_info, strategy, parent); }
				/*!
					\fn void setRequestStatusDatas(LiveNodes const &requestStatusData_)
					
					
					Sets the property \ref ncal_requestStatusData "ncal:requestStatusData" set to the given \a requestStatusData_ set.
					\sa LiveResource::setObjects
				 */
				void setRequestStatusDatas(LiveNodes const &requestStatusData_) { baseSetObjects(ncal::requestStatusData::iri(), requestStatusData_); }
				/*!
					\fn void removeRequestStatusDatas(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_requestStatusData "ncal:requestStatusData" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRequestStatusDatas(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::requestStatusData::iri(), object_info); }
				/*!
					\fn QString getRequestStatusData()
					
					
					Returns the property \ref ncal_requestStatusData "ncal:requestStatusData". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getRequestStatusData() { return baseGetObject< ncal::requestStatusData >(); }
				/*!
					\fn void setRequestStatusData(QString const &requestStatusData_)
					
					
					Sets the property \ref ncal_requestStatusData "ncal:requestStatusData" to the given \a requestStatusData.
					\sa LiveResource::setObject
				 */
				void setRequestStatusData(QString const &requestStatusData_) { baseSetObject< ncal::requestStatusData >( requestStatusData_ ); }
				/*!
					\fn QString firstRequestStatusData()
					
					
					Returns the first property \ref ncal_requestStatusData "ncal:requestStatusData". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstRequestStatusData() { return baseFirstObject< ncal::requestStatusData >(); }
				/*!
					\fn void addRequestStatusData(QString const &requestStatusData_)
					
					
					Adds the given \a requestStatusData_ to the property \ref ncal_requestStatusData "ncal:requestStatusData" set.
					\sa LiveResource::addObject
				 */
				void addRequestStatusData(QString const &requestStatusData_) { baseAddObject< ncal::requestStatusData >( requestStatusData_ ); }
				/*!
					\fn void removeRequestStatusData(QString const &requestStatusData_)
					
					
					Removes the given \a requestStatusData_ from the property \ref ncal_requestStatusData "ncal:requestStatusData" set.
					\sa LiveResource::removeObject
				 */
				void removeRequestStatusData(QString const &requestStatusData_) { baseRemoveObject< ncal::requestStatusData >(requestStatusData_); }
				 //@}
			};

			/*! Class generated from ncal:TimeTransparency
			 * \ingroup onto_ncal_classes
			 * Time transparency. Introduced to provide a way to express the limited vocabulary for the values of ncal:transp property. See documentation of ncal:transp for details.
			 * 
			 * rdfs:label = TimeTransparency
			 * 
			 * tracker:modified = 1752
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_transp "ncal:transp"
			 */
			class TimeTransparency
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#TimeTransparency"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<TimeTransparency> Live;
				TimeTransparency() { this->attachInterfaceHelper< TimeTransparency >(); }
				~TimeTransparency() { this->detachInterfaceHelper< TimeTransparency >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:Timezone
			 * \ingroup onto_ncal_classes
			 * Provide a grouping of component properties that defines a time zone.
			 * 
			 * rdfs:label = Timezone
			 * 
			 * tracker:modified = 1463
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_ncalTimezone "ncal:ncalTimezone"
			 */
			class Timezone
				: public virtual nie::InformationElement, public virtual UnionParentClass

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Timezone"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, QPair<UnionParentClass, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Timezone> Live;
				Timezone() { this->attachInterfaceHelper< Timezone >(); }
				~Timezone() { this->detachInterfaceHelper< Timezone >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:standard
				 * \n Links the timezone with the standard timezone observance. This property has no direct equivalent in the RFC 2445. It has been inspired by the structure of the Vtimezone component defined in sec.4.6.5
				 * \n rdfs:label=standard
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:TimezoneObservance
				 * \n rdfs:domain=ncal:Timezone
				 * \n tracker:modified=1261
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveStandards(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_standard "ncal:standard" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStandards(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::standard >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStandards(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_standard "ncal:standard" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStandards(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::standard >(object_info, strategy, parent); }
				/*!
					\fn void setStandards(LiveNodes const &standard_)
					
					
					Sets the property \ref ncal_standard "ncal:standard" set to the given \a standard_ set.
					\sa LiveResource::setObjects
				 */
				void setStandards(LiveNodes const &standard_) { baseSetObjects(ncal::standard::iri(), standard_); }
				/*!
					\fn void removeStandards(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_standard "ncal:standard" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStandards(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::standard::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TimezoneObservance > getStandard()
					
					
					Returns the property \ref ncal_standard "ncal:standard". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TimezoneObservance > getStandard() { return baseGetObject< ncal::standard >(); }
				/*!
					\fn ::SopranoLive::Live< TimezoneObservance > setStandard(::SopranoLive::Live< TimezoneObservance > const &standard_)
					
					
					Sets the property \ref ncal_standard "ncal:standard" to the given \a standard.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TimezoneObservance > setStandard(::SopranoLive::Live< TimezoneObservance > const &standard_) { return baseSetObject< ncal::standard >( standard_ ); }
				/*!
					\fn ::SopranoLive::Live< TimezoneObservance > firstStandard()
					
					
					Returns the first property \ref ncal_standard "ncal:standard". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TimezoneObservance > firstStandard() { return baseFirstObject< ncal::standard >(); }
				/*!
					\fn ::SopranoLive::Live< TimezoneObservance > addStandard()
					
					
					Adds a new uniquely named resource to the property \ref ncal_standard "ncal:standard" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimezoneObservance > addStandard() { return baseAddObject< ncal::standard >(); }
				/*!
					\fn ::SopranoLive::Live< TimezoneObservance > addStandard(::SopranoLive::Live< TimezoneObservance > const &standard_)
					
					
					Adds the given \a standard_ to the property \ref ncal_standard "ncal:standard" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimezoneObservance > addStandard(::SopranoLive::Live< TimezoneObservance > const &standard_) { return baseAddObject< ncal::standard >( standard_ ); }
				/*!
					\fn void removeStandard(::SopranoLive::Live< TimezoneObservance > const &standard_)
					
					
					Removes the given \a standard_ from the property \ref ncal_standard "ncal:standard" set.
					\sa LiveResource::removeObject
				 */
				void removeStandard(::SopranoLive::Live< TimezoneObservance > const &standard_) { baseRemoveObject< ncal::standard >(standard_); }

				/* Property generated from ncal:tzurl
				 * \n The TZURL provides a means for a VTIMEZONE component to point to a network location that can be used to retrieve an up-to- date version of itself. Inspired by RFC 2445 sec. 4.8.3.5. Originally the range of this property had been specified as URI.
				 * \n rdfs:label=tzurl
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=ncal:Timezone
				 * \n tracker:modified=1465
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveTzurls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_tzurl "ncal:tzurl" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTzurls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::tzurl >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTzurls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_tzurl "ncal:tzurl" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTzurls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::tzurl >(object_info, strategy, parent); }
				/*!
					\fn void setTzurls(LiveNodes const &tzurl_)
					
					
					Sets the property \ref ncal_tzurl "ncal:tzurl" set to the given \a tzurl_ set.
					\sa LiveResource::setObjects
				 */
				void setTzurls(LiveNodes const &tzurl_) { baseSetObjects(ncal::tzurl::iri(), tzurl_); }
				/*!
					\fn void removeTzurls(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_tzurl "ncal:tzurl" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTzurls(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::tzurl::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getTzurl()
					
					
					Returns the property \ref ncal_tzurl "ncal:tzurl". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getTzurl() { return baseGetObject< ncal::tzurl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setTzurl(::SopranoLive::Live< rdfs::Resource > const &tzurl_)
					
					
					Sets the property \ref ncal_tzurl "ncal:tzurl" to the given \a tzurl.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setTzurl(::SopranoLive::Live< rdfs::Resource > const &tzurl_) { return baseSetObject< ncal::tzurl >( tzurl_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstTzurl()
					
					
					Returns the first property \ref ncal_tzurl "ncal:tzurl". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstTzurl() { return baseFirstObject< ncal::tzurl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addTzurl()
					
					
					Adds a new uniquely named resource to the property \ref ncal_tzurl "ncal:tzurl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addTzurl() { return baseAddObject< ncal::tzurl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addTzurl(::SopranoLive::Live< rdfs::Resource > const &tzurl_)
					
					
					Adds the given \a tzurl_ to the property \ref ncal_tzurl "ncal:tzurl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addTzurl(::SopranoLive::Live< rdfs::Resource > const &tzurl_) { return baseAddObject< ncal::tzurl >( tzurl_ ); }
				/*!
					\fn void removeTzurl(::SopranoLive::Live< rdfs::Resource > const &tzurl_)
					
					
					Removes the given \a tzurl_ from the property \ref ncal_tzurl "ncal:tzurl" set.
					\sa LiveResource::removeObject
				 */
				void removeTzurl(::SopranoLive::Live< rdfs::Resource > const &tzurl_) { baseRemoveObject< ncal::tzurl >(tzurl_); }

				/* Property generated from ncal:tzid
				 * \n This property specifies the text value that uniquely identifies the 'VTIMEZONE' calendar component. Inspired by RFC 2445 sec 4.8.3.1
				 * \n rdfs:label=tzid
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:Timezone
				 * \n tracker:modified=1347
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTzids(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_tzid "ncal:tzid" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTzids(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::tzid >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTzids(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_tzid "ncal:tzid" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTzids(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::tzid >(object_info, strategy, parent); }
				/*!
					\fn void setTzids(LiveNodes const &tzid_)
					
					
					Sets the property \ref ncal_tzid "ncal:tzid" set to the given \a tzid_ set.
					\sa LiveResource::setObjects
				 */
				void setTzids(LiveNodes const &tzid_) { baseSetObjects(ncal::tzid::iri(), tzid_); }
				/*!
					\fn void removeTzids(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_tzid "ncal:tzid" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTzids(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::tzid::iri(), object_info); }
				/*!
					\fn QString getTzid()
					
					
					Returns the property \ref ncal_tzid "ncal:tzid". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getTzid() { return baseGetObject< ncal::tzid >(); }
				/*!
					\fn void setTzid(QString const &tzid_)
					
					
					Sets the property \ref ncal_tzid "ncal:tzid" to the given \a tzid.
					\sa LiveResource::setObject
				 */
				void setTzid(QString const &tzid_) { baseSetObject< ncal::tzid >( tzid_ ); }
				/*!
					\fn QString firstTzid()
					
					
					Returns the first property \ref ncal_tzid "ncal:tzid". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTzid() { return baseFirstObject< ncal::tzid >(); }
				/*!
					\fn void addTzid(QString const &tzid_)
					
					
					Adds the given \a tzid_ to the property \ref ncal_tzid "ncal:tzid" set.
					\sa LiveResource::addObject
				 */
				void addTzid(QString const &tzid_) { baseAddObject< ncal::tzid >( tzid_ ); }
				/*!
					\fn void removeTzid(QString const &tzid_)
					
					
					Removes the given \a tzid_ from the property \ref ncal_tzid "ncal:tzid" set.
					\sa LiveResource::removeObject
				 */
				void removeTzid(QString const &tzid_) { baseRemoveObject< ncal::tzid >(tzid_); }

				/* Property generated from ncal:daylight
				 * \n Links a timezone with it's daylight observance. This property has no direct equivalent in the RFC 2445. It has been inspired by the structure of the Vtimezone component defined in sec.4.6.5
				 * \n rdfs:label=daylight
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:TimezoneObservance
				 * \n rdfs:domain=ncal:Timezone
				 * \n tracker:modified=1646
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDaylights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_daylight "ncal:daylight" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDaylights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::daylight >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDaylights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_daylight "ncal:daylight" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDaylights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::daylight >(object_info, strategy, parent); }
				/*!
					\fn void setDaylights(LiveNodes const &daylight_)
					
					
					Sets the property \ref ncal_daylight "ncal:daylight" set to the given \a daylight_ set.
					\sa LiveResource::setObjects
				 */
				void setDaylights(LiveNodes const &daylight_) { baseSetObjects(ncal::daylight::iri(), daylight_); }
				/*!
					\fn void removeDaylights(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_daylight "ncal:daylight" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDaylights(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::daylight::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TimezoneObservance > getDaylight()
					
					
					Returns the property \ref ncal_daylight "ncal:daylight". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TimezoneObservance > getDaylight() { return baseGetObject< ncal::daylight >(); }
				/*!
					\fn ::SopranoLive::Live< TimezoneObservance > setDaylight(::SopranoLive::Live< TimezoneObservance > const &daylight_)
					
					
					Sets the property \ref ncal_daylight "ncal:daylight" to the given \a daylight.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TimezoneObservance > setDaylight(::SopranoLive::Live< TimezoneObservance > const &daylight_) { return baseSetObject< ncal::daylight >( daylight_ ); }
				/*!
					\fn ::SopranoLive::Live< TimezoneObservance > firstDaylight()
					
					
					Returns the first property \ref ncal_daylight "ncal:daylight". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TimezoneObservance > firstDaylight() { return baseFirstObject< ncal::daylight >(); }
				/*!
					\fn ::SopranoLive::Live< TimezoneObservance > addDaylight()
					
					
					Adds a new uniquely named resource to the property \ref ncal_daylight "ncal:daylight" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimezoneObservance > addDaylight() { return baseAddObject< ncal::daylight >(); }
				/*!
					\fn ::SopranoLive::Live< TimezoneObservance > addDaylight(::SopranoLive::Live< TimezoneObservance > const &daylight_)
					
					
					Adds the given \a daylight_ to the property \ref ncal_daylight "ncal:daylight" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimezoneObservance > addDaylight(::SopranoLive::Live< TimezoneObservance > const &daylight_) { return baseAddObject< ncal::daylight >( daylight_ ); }
				/*!
					\fn void removeDaylight(::SopranoLive::Live< TimezoneObservance > const &daylight_)
					
					
					Removes the given \a daylight_ from the property \ref ncal_daylight "ncal:daylight" set.
					\sa LiveResource::removeObject
				 */
				void removeDaylight(::SopranoLive::Live< TimezoneObservance > const &daylight_) { baseRemoveObject< ncal::daylight >(daylight_); }
				 //@}
			};

			/*! Class generated from ncal:TimezoneObservance
			 * \ingroup onto_ncal_classes
			 * 
			 * rdfs:label = TimezoneObservance
			 * 
			 * tracker:modified = 1735
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_standard "ncal:standard"
			 * 		\ref ncal_daylight "ncal:daylight"
			 */
			class TimezoneObservance
				: public virtual UnionParentClass

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#TimezoneObservance"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<UnionParentClass, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<TimezoneObservance> Live;
				TimezoneObservance() { this->attachInterfaceHelper< TimezoneObservance >(); }
				~TimezoneObservance() { this->detachInterfaceHelper< TimezoneObservance >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:tzoffsetfrom
				 * \n This property specifies the offset which is in use prior to this time zone observance. Inspired by RFC 2445 sec. 4.8.3.3. The original domain was underspecified. It said that this property must appear within a Timezone component. In this ontology a TimezoneObservance class has been introduced to clarify this specification. The original range was UTC-OFFSET. There is no equivalent among the XSD datatypes so plain string was chosen.
				 * \n rdfs:label=tzoffsetfrom
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:TimezoneObservance
				 * \n tracker:modified=1966
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTzoffsetfroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_tzoffsetfrom "ncal:tzoffsetfrom" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTzoffsetfroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::tzoffsetfrom >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTzoffsetfroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_tzoffsetfrom "ncal:tzoffsetfrom" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTzoffsetfroms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::tzoffsetfrom >(object_info, strategy, parent); }
				/*!
					\fn void setTzoffsetfroms(LiveNodes const &tzoffsetfrom_)
					
					
					Sets the property \ref ncal_tzoffsetfrom "ncal:tzoffsetfrom" set to the given \a tzoffsetfrom_ set.
					\sa LiveResource::setObjects
				 */
				void setTzoffsetfroms(LiveNodes const &tzoffsetfrom_) { baseSetObjects(ncal::tzoffsetfrom::iri(), tzoffsetfrom_); }
				/*!
					\fn void removeTzoffsetfroms(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_tzoffsetfrom "ncal:tzoffsetfrom" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTzoffsetfroms(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::tzoffsetfrom::iri(), object_info); }
				/*!
					\fn QString getTzoffsetfrom()
					
					
					Returns the property \ref ncal_tzoffsetfrom "ncal:tzoffsetfrom". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getTzoffsetfrom() { return baseGetObject< ncal::tzoffsetfrom >(); }
				/*!
					\fn void setTzoffsetfrom(QString const &tzoffsetfrom_)
					
					
					Sets the property \ref ncal_tzoffsetfrom "ncal:tzoffsetfrom" to the given \a tzoffsetfrom.
					\sa LiveResource::setObject
				 */
				void setTzoffsetfrom(QString const &tzoffsetfrom_) { baseSetObject< ncal::tzoffsetfrom >( tzoffsetfrom_ ); }
				/*!
					\fn QString firstTzoffsetfrom()
					
					
					Returns the first property \ref ncal_tzoffsetfrom "ncal:tzoffsetfrom". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTzoffsetfrom() { return baseFirstObject< ncal::tzoffsetfrom >(); }
				/*!
					\fn void addTzoffsetfrom(QString const &tzoffsetfrom_)
					
					
					Adds the given \a tzoffsetfrom_ to the property \ref ncal_tzoffsetfrom "ncal:tzoffsetfrom" set.
					\sa LiveResource::addObject
				 */
				void addTzoffsetfrom(QString const &tzoffsetfrom_) { baseAddObject< ncal::tzoffsetfrom >( tzoffsetfrom_ ); }
				/*!
					\fn void removeTzoffsetfrom(QString const &tzoffsetfrom_)
					
					
					Removes the given \a tzoffsetfrom_ from the property \ref ncal_tzoffsetfrom "ncal:tzoffsetfrom" set.
					\sa LiveResource::removeObject
				 */
				void removeTzoffsetfrom(QString const &tzoffsetfrom_) { baseRemoveObject< ncal::tzoffsetfrom >(tzoffsetfrom_); }

				/* Property generated from ncal:tzoffsetto
				 * \n This property specifies the offset which is in use in this time zone observance. nspired by RFC 2445 sec. 4.8.3.4. The original domain was underspecified. It said that this property must appear within a Timezone component. In this ontology a TimezoneObservance class has been introduced to clarify this specification. The original range was UTC-OFFSET. There is no equivalent among the XSD datatypes so plain string was chosen.
				 * \n rdfs:label=tzoffsetto
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:TimezoneObservance
				 * \n tracker:modified=1670
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTzoffsettos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_tzoffsetto "ncal:tzoffsetto" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTzoffsettos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::tzoffsetto >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTzoffsettos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_tzoffsetto "ncal:tzoffsetto" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTzoffsettos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::tzoffsetto >(object_info, strategy, parent); }
				/*!
					\fn void setTzoffsettos(LiveNodes const &tzoffsetto_)
					
					
					Sets the property \ref ncal_tzoffsetto "ncal:tzoffsetto" set to the given \a tzoffsetto_ set.
					\sa LiveResource::setObjects
				 */
				void setTzoffsettos(LiveNodes const &tzoffsetto_) { baseSetObjects(ncal::tzoffsetto::iri(), tzoffsetto_); }
				/*!
					\fn void removeTzoffsettos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_tzoffsetto "ncal:tzoffsetto" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTzoffsettos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::tzoffsetto::iri(), object_info); }
				/*!
					\fn QString getTzoffsetto()
					
					
					Returns the property \ref ncal_tzoffsetto "ncal:tzoffsetto". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getTzoffsetto() { return baseGetObject< ncal::tzoffsetto >(); }
				/*!
					\fn void setTzoffsetto(QString const &tzoffsetto_)
					
					
					Sets the property \ref ncal_tzoffsetto "ncal:tzoffsetto" to the given \a tzoffsetto.
					\sa LiveResource::setObject
				 */
				void setTzoffsetto(QString const &tzoffsetto_) { baseSetObject< ncal::tzoffsetto >( tzoffsetto_ ); }
				/*!
					\fn QString firstTzoffsetto()
					
					
					Returns the first property \ref ncal_tzoffsetto "ncal:tzoffsetto". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTzoffsetto() { return baseFirstObject< ncal::tzoffsetto >(); }
				/*!
					\fn void addTzoffsetto(QString const &tzoffsetto_)
					
					
					Adds the given \a tzoffsetto_ to the property \ref ncal_tzoffsetto "ncal:tzoffsetto" set.
					\sa LiveResource::addObject
				 */
				void addTzoffsetto(QString const &tzoffsetto_) { baseAddObject< ncal::tzoffsetto >( tzoffsetto_ ); }
				/*!
					\fn void removeTzoffsetto(QString const &tzoffsetto_)
					
					
					Removes the given \a tzoffsetto_ from the property \ref ncal_tzoffsetto "ncal:tzoffsetto" set.
					\sa LiveResource::removeObject
				 */
				void removeTzoffsetto(QString const &tzoffsetto_) { baseRemoveObject< ncal::tzoffsetto >(tzoffsetto_); }

				/* Property generated from ncal:tzname
				 * \n Specifies the customary designation for a timezone description. Inspired by RFC 2445 sec. 4.8.3.2 The LANGUAGE parameter has been discarded. Please xml:lang literals to express languages. Original specification for the domain of this property stated that it must appear within the timezone component. In this ontology the TimezoneObservance class has been itroduced to clarify this specification.
				 * \n rdfs:label=tzname
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=ncal:TimezoneObservance
				 * \n tracker:modified=1515
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTznames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_tzname "ncal:tzname" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTznames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::tzname >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTznames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_tzname "ncal:tzname" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTznames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::tzname >(object_info, strategy, parent); }
				/*!
					\fn void setTznames(LiveNodes const &tzname_)
					
					
					Sets the property \ref ncal_tzname "ncal:tzname" set to the given \a tzname_ set.
					\sa LiveResource::setObjects
				 */
				void setTznames(LiveNodes const &tzname_) { baseSetObjects(ncal::tzname::iri(), tzname_); }
				/*!
					\fn void removeTznames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_tzname "ncal:tzname" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTznames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::tzname::iri(), object_info); }
				/*!
					\fn QString getTzname()
					
					
					Returns the property \ref ncal_tzname "ncal:tzname". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getTzname() { return baseGetObject< ncal::tzname >(); }
				/*!
					\fn void setTzname(QString const &tzname_)
					
					
					Sets the property \ref ncal_tzname "ncal:tzname" to the given \a tzname.
					\sa LiveResource::setObject
				 */
				void setTzname(QString const &tzname_) { baseSetObject< ncal::tzname >( tzname_ ); }
				/*!
					\fn QString firstTzname()
					
					
					Returns the first property \ref ncal_tzname "ncal:tzname". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTzname() { return baseFirstObject< ncal::tzname >(); }
				/*!
					\fn void addTzname(QString const &tzname_)
					
					
					Adds the given \a tzname_ to the property \ref ncal_tzname "ncal:tzname" set.
					\sa LiveResource::addObject
				 */
				void addTzname(QString const &tzname_) { baseAddObject< ncal::tzname >( tzname_ ); }
				/*!
					\fn void removeTzname(QString const &tzname_)
					
					
					Removes the given \a tzname_ from the property \ref ncal_tzname "ncal:tzname" set.
					\sa LiveResource::removeObject
				 */
				void removeTzname(QString const &tzname_) { baseRemoveObject< ncal::tzname >(tzname_); }
				 //@}
			};

			/*! Class generated from ncal:Todo
			 * \ingroup onto_ncal_classes
			 * Provide a grouping of calendar properties that describe a to-do.
			 * 
			 * rdfs:label = Todo
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1525
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Todo
				: public virtual nie::InformationElement, public virtual UnionParentClass

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Todo"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, QPair<UnionParentClass, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Todo> Live;
				Todo() { this->attachInterfaceHelper< Todo >(); }
				~Todo() { this->detachInterfaceHelper< Todo >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:percentComplete
				 * \n This property is used by an assignee or delegatee of a to-do to convey the percent completion of a to-do to the Organizer. Inspired by RFC 2445 sec. 4.8.1.8
				 * \n rdfs:label=percentComplete
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=ncal:Todo
				 * \n tracker:modified=1732
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePercentCompletes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_percentComplete "ncal:percentComplete" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePercentCompletes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::percentComplete >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPercentCompletes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_percentComplete "ncal:percentComplete" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPercentCompletes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::percentComplete >(object_info, strategy, parent); }
				/*!
					\fn void setPercentCompletes(LiveNodes const &percentComplete_)
					
					
					Sets the property \ref ncal_percentComplete "ncal:percentComplete" set to the given \a percentComplete_ set.
					\sa LiveResource::setObjects
				 */
				void setPercentCompletes(LiveNodes const &percentComplete_) { baseSetObjects(ncal::percentComplete::iri(), percentComplete_); }
				/*!
					\fn void removePercentCompletes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_percentComplete "ncal:percentComplete" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePercentCompletes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::percentComplete::iri(), object_info); }
				/*!
					\fn qint64 getPercentComplete()
					
					
					Returns the property \ref ncal_percentComplete "ncal:percentComplete". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getPercentComplete() { return baseGetObject< ncal::percentComplete >(); }
				/*!
					\fn void setPercentComplete(qint64 const &percentComplete_)
					
					
					Sets the property \ref ncal_percentComplete "ncal:percentComplete" to the given \a percentComplete.
					\sa LiveResource::setObject
				 */
				void setPercentComplete(qint64 const &percentComplete_) { baseSetObject< ncal::percentComplete >( percentComplete_ ); }
				/*!
					\fn qint64 firstPercentComplete()
					
					
					Returns the first property \ref ncal_percentComplete "ncal:percentComplete". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstPercentComplete() { return baseFirstObject< ncal::percentComplete >(); }
				/*!
					\fn void addPercentComplete(qint64 const &percentComplete_)
					
					
					Adds the given \a percentComplete_ to the property \ref ncal_percentComplete "ncal:percentComplete" set.
					\sa LiveResource::addObject
				 */
				void addPercentComplete(qint64 const &percentComplete_) { baseAddObject< ncal::percentComplete >( percentComplete_ ); }
				/*!
					\fn void removePercentComplete(qint64 const &percentComplete_)
					
					
					Removes the given \a percentComplete_ from the property \ref ncal_percentComplete "ncal:percentComplete" set.
					\sa LiveResource::removeObject
				 */
				void removePercentComplete(qint64 const &percentComplete_) { baseRemoveObject< ncal::percentComplete >(percentComplete_); }

				/* Property generated from ncal:completed
				 * \n This property defines the date and time that a to-do was actually completed. Inspired by RFC 2445 sec. 4.8.2.1. Note that the RFC allows ONLY UTC time values for this property.
				 * \n rdfs:label=completed
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=ncal:Todo
				 * \n tracker:modified=1294
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCompleteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_completed "ncal:completed" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCompleteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::completed >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCompleteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_completed "ncal:completed" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCompleteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::completed >(object_info, strategy, parent); }
				/*!
					\fn void setCompleteds(LiveNodes const &completed_)
					
					
					Sets the property \ref ncal_completed "ncal:completed" set to the given \a completed_ set.
					\sa LiveResource::setObjects
				 */
				void setCompleteds(LiveNodes const &completed_) { baseSetObjects(ncal::completed::iri(), completed_); }
				/*!
					\fn void removeCompleteds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_completed "ncal:completed" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCompleteds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::completed::iri(), object_info); }
				/*!
					\fn QDateTime getCompleted()
					
					
					Returns the property \ref ncal_completed "ncal:completed". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getCompleted() { return baseGetObject< ncal::completed >(); }
				/*!
					\fn void setCompleted(QDateTime const &completed_)
					
					
					Sets the property \ref ncal_completed "ncal:completed" to the given \a completed.
					\sa LiveResource::setObject
				 */
				void setCompleted(QDateTime const &completed_) { baseSetObject< ncal::completed >( completed_ ); }
				/*!
					\fn QDateTime firstCompleted()
					
					
					Returns the first property \ref ncal_completed "ncal:completed". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstCompleted() { return baseFirstObject< ncal::completed >(); }
				/*!
					\fn void addCompleted(QDateTime const &completed_)
					
					
					Adds the given \a completed_ to the property \ref ncal_completed "ncal:completed" set.
					\sa LiveResource::addObject
				 */
				void addCompleted(QDateTime const &completed_) { baseAddObject< ncal::completed >( completed_ ); }
				/*!
					\fn void removeCompleted(QDateTime const &completed_)
					
					
					Removes the given \a completed_ from the property \ref ncal_completed "ncal:completed" set.
					\sa LiveResource::removeObject
				 */
				void removeCompleted(QDateTime const &completed_) { baseRemoveObject< ncal::completed >(completed_); }

				/* Property generated from ncal:due
				 * \n This property defines the date and time that a to-do is expected to be completed. Inspired by RFC 2445 sec. 4.8.2.3
				 * \n rdfs:label=due
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:NcalDateTime
				 * \n rdfs:domain=ncal:Todo
				 * \n tracker:modified=1457
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_due "ncal:due" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::due >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_due "ncal:due" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::due >(object_info, strategy, parent); }
				/*!
					\fn void setDues(LiveNodes const &due_)
					
					
					Sets the property \ref ncal_due "ncal:due" set to the given \a due_ set.
					\sa LiveResource::setObjects
				 */
				void setDues(LiveNodes const &due_) { baseSetObjects(ncal::due::iri(), due_); }
				/*!
					\fn void removeDues(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_due "ncal:due" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDues(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::due::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > getDue()
					
					
					Returns the property \ref ncal_due "ncal:due". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< NcalDateTime > getDue() { return baseGetObject< ncal::due >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > setDue(::SopranoLive::Live< NcalDateTime > const &due_)
					
					
					Sets the property \ref ncal_due "ncal:due" to the given \a due.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< NcalDateTime > setDue(::SopranoLive::Live< NcalDateTime > const &due_) { return baseSetObject< ncal::due >( due_ ); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > firstDue()
					
					
					Returns the first property \ref ncal_due "ncal:due". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< NcalDateTime > firstDue() { return baseFirstObject< ncal::due >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > addDue()
					
					
					Adds a new uniquely named resource to the property \ref ncal_due "ncal:due" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< NcalDateTime > addDue() { return baseAddObject< ncal::due >(); }
				/*!
					\fn ::SopranoLive::Live< NcalDateTime > addDue(::SopranoLive::Live< NcalDateTime > const &due_)
					
					
					Adds the given \a due_ to the property \ref ncal_due "ncal:due" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< NcalDateTime > addDue(::SopranoLive::Live< NcalDateTime > const &due_) { return baseAddObject< ncal::due >( due_ ); }
				/*!
					\fn void removeDue(::SopranoLive::Live< NcalDateTime > const &due_)
					
					
					Removes the given \a due_ from the property \ref ncal_due "ncal:due" set.
					\sa LiveResource::removeObject
				 */
				void removeDue(::SopranoLive::Live< NcalDateTime > const &due_) { baseRemoveObject< ncal::due >(due_); }

				/* Property generated from ncal:todoStatus
				 * \n Defines the overall status or confirmation for a todo. Based on the STATUS property defined in RFC 2445 sec. 4.8.1.11.
				 * \n rdfs:label=status
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:TodoStatus
				 * \n rdfs:domain=ncal:Todo
				 * \n tracker:modified=1915
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTodoStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_todoStatus "ncal:todoStatus" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTodoStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::todoStatus >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTodoStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_todoStatus "ncal:todoStatus" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTodoStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::todoStatus >(object_info, strategy, parent); }
				/*!
					\fn void setTodoStatuss(LiveNodes const &todoStatus_)
					
					
					Sets the property \ref ncal_todoStatus "ncal:todoStatus" set to the given \a todoStatus_ set.
					\sa LiveResource::setObjects
				 */
				void setTodoStatuss(LiveNodes const &todoStatus_) { baseSetObjects(ncal::todoStatus::iri(), todoStatus_); }
				/*!
					\fn void removeTodoStatuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_todoStatus "ncal:todoStatus" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTodoStatuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::todoStatus::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TodoStatus > getTodoStatus()
					
					
					Returns the property \ref ncal_todoStatus "ncal:todoStatus". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TodoStatus > getTodoStatus() { return baseGetObject< ncal::todoStatus >(); }
				/*!
					\fn ::SopranoLive::Live< TodoStatus > setTodoStatus(::SopranoLive::Live< TodoStatus > const &todoStatus_)
					
					
					Sets the property \ref ncal_todoStatus "ncal:todoStatus" to the given \a todoStatus.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TodoStatus > setTodoStatus(::SopranoLive::Live< TodoStatus > const &todoStatus_) { return baseSetObject< ncal::todoStatus >( todoStatus_ ); }
				/*!
					\fn ::SopranoLive::Live< TodoStatus > firstTodoStatus()
					
					
					Returns the first property \ref ncal_todoStatus "ncal:todoStatus". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TodoStatus > firstTodoStatus() { return baseFirstObject< ncal::todoStatus >(); }
				/*!
					\fn ::SopranoLive::Live< TodoStatus > addTodoStatus()
					
					
					Adds a new uniquely named resource to the property \ref ncal_todoStatus "ncal:todoStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TodoStatus > addTodoStatus() { return baseAddObject< ncal::todoStatus >(); }
				/*!
					\fn ::SopranoLive::Live< TodoStatus > addTodoStatus(::SopranoLive::Live< TodoStatus > const &todoStatus_)
					
					
					Adds the given \a todoStatus_ to the property \ref ncal_todoStatus "ncal:todoStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TodoStatus > addTodoStatus(::SopranoLive::Live< TodoStatus > const &todoStatus_) { return baseAddObject< ncal::todoStatus >( todoStatus_ ); }
				/*!
					\fn void removeTodoStatus(::SopranoLive::Live< TodoStatus > const &todoStatus_)
					
					
					Removes the given \a todoStatus_ from the property \ref ncal_todoStatus "ncal:todoStatus" set.
					\sa LiveResource::removeObject
				 */
				void removeTodoStatus(::SopranoLive::Live< TodoStatus > const &todoStatus_) { baseRemoveObject< ncal::todoStatus >(todoStatus_); }
				 //@}
			};

			/*! Class generated from ncal:TodoStatus
			 * \ingroup onto_ncal_classes
			 * A status of a calendar entity. This class has been introduced to express the limited set of values for the ncal:status property. The user may use the instances provided with this ontology or create his/her own. See the documentation for ncal:todoStatus for details.
			 * 
			 * rdfs:label = TodoStatus
			 * 
			 * tracker:modified = 1828
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_todoStatus "ncal:todoStatus"
			 */
			class TodoStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#TodoStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<TodoStatus> Live;
				TodoStatus() { this->attachInterfaceHelper< TodoStatus >(); }
				~TodoStatus() { this->detachInterfaceHelper< TodoStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:Trigger
			 * \ingroup onto_ncal_classes
			 * An alarm trigger. This class has been created to serve as the range of ncal:trigger property. See the documentation for ncal:trigger for more details.
			 * 
			 * rdfs:label = Trigger
			 * 
			 * tracker:modified = 1019
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_trigger "ncal:trigger"
			 */
			class Trigger
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Trigger"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Trigger> Live;
				Trigger() { this->attachInterfaceHelper< Trigger >(); }
				~Trigger() { this->detachInterfaceHelper< Trigger >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from ncal:triggerDuration
				 * \n The duration of a trigger. This property has been created to express the VALUE=DURATION parameter of the TRIGGER property. See documentation for ncal:trigger for more details.
				 * \n rdfs:label=triggerDuration
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=ncal:Trigger
				 * \n tracker:modified=1582
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTriggerDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_triggerDuration "ncal:triggerDuration" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTriggerDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::triggerDuration >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTriggerDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_triggerDuration "ncal:triggerDuration" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTriggerDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::triggerDuration >(object_info, strategy, parent); }
				/*!
					\fn void setTriggerDurations(LiveNodes const &triggerDuration_)
					
					
					Sets the property \ref ncal_triggerDuration "ncal:triggerDuration" set to the given \a triggerDuration_ set.
					\sa LiveResource::setObjects
				 */
				void setTriggerDurations(LiveNodes const &triggerDuration_) { baseSetObjects(ncal::triggerDuration::iri(), triggerDuration_); }
				/*!
					\fn void removeTriggerDurations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_triggerDuration "ncal:triggerDuration" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTriggerDurations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::triggerDuration::iri(), object_info); }
				/*!
					\fn qint64 getTriggerDuration()
					
					
					Returns the property \ref ncal_triggerDuration "ncal:triggerDuration". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getTriggerDuration() { return baseGetObject< ncal::triggerDuration >(); }
				/*!
					\fn void setTriggerDuration(qint64 const &triggerDuration_)
					
					
					Sets the property \ref ncal_triggerDuration "ncal:triggerDuration" to the given \a triggerDuration.
					\sa LiveResource::setObject
				 */
				void setTriggerDuration(qint64 const &triggerDuration_) { baseSetObject< ncal::triggerDuration >( triggerDuration_ ); }
				/*!
					\fn qint64 firstTriggerDuration()
					
					
					Returns the first property \ref ncal_triggerDuration "ncal:triggerDuration". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstTriggerDuration() { return baseFirstObject< ncal::triggerDuration >(); }
				/*!
					\fn void addTriggerDuration(qint64 const &triggerDuration_)
					
					
					Adds the given \a triggerDuration_ to the property \ref ncal_triggerDuration "ncal:triggerDuration" set.
					\sa LiveResource::addObject
				 */
				void addTriggerDuration(qint64 const &triggerDuration_) { baseAddObject< ncal::triggerDuration >( triggerDuration_ ); }
				/*!
					\fn void removeTriggerDuration(qint64 const &triggerDuration_)
					
					
					Removes the given \a triggerDuration_ from the property \ref ncal_triggerDuration "ncal:triggerDuration" set.
					\sa LiveResource::removeObject
				 */
				void removeTriggerDuration(qint64 const &triggerDuration_) { baseRemoveObject< ncal::triggerDuration >(triggerDuration_); }

				/* Property generated from ncal:triggerDateTime
				 * \n The exact date and time of the trigger. This property has been created to express the VALUE=DATE, and VALUE=DATE-TIME parameters of the TRIGGER property. See the documentation for ncal:trigger for more details
				 * \n rdfs:label=triggerDateTime
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=ncal:Trigger
				 * \n tracker:modified=1243
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTriggerDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_triggerDateTime "ncal:triggerDateTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTriggerDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::triggerDateTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTriggerDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_triggerDateTime "ncal:triggerDateTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTriggerDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::triggerDateTime >(object_info, strategy, parent); }
				/*!
					\fn void setTriggerDateTimes(LiveNodes const &triggerDateTime_)
					
					
					Sets the property \ref ncal_triggerDateTime "ncal:triggerDateTime" set to the given \a triggerDateTime_ set.
					\sa LiveResource::setObjects
				 */
				void setTriggerDateTimes(LiveNodes const &triggerDateTime_) { baseSetObjects(ncal::triggerDateTime::iri(), triggerDateTime_); }
				/*!
					\fn void removeTriggerDateTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_triggerDateTime "ncal:triggerDateTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTriggerDateTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::triggerDateTime::iri(), object_info); }
				/*!
					\fn QDateTime getTriggerDateTime()
					
					
					Returns the property \ref ncal_triggerDateTime "ncal:triggerDateTime". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getTriggerDateTime() { return baseGetObject< ncal::triggerDateTime >(); }
				/*!
					\fn void setTriggerDateTime(QDateTime const &triggerDateTime_)
					
					
					Sets the property \ref ncal_triggerDateTime "ncal:triggerDateTime" to the given \a triggerDateTime.
					\sa LiveResource::setObject
				 */
				void setTriggerDateTime(QDateTime const &triggerDateTime_) { baseSetObject< ncal::triggerDateTime >( triggerDateTime_ ); }
				/*!
					\fn QDateTime firstTriggerDateTime()
					
					
					Returns the first property \ref ncal_triggerDateTime "ncal:triggerDateTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstTriggerDateTime() { return baseFirstObject< ncal::triggerDateTime >(); }
				/*!
					\fn void addTriggerDateTime(QDateTime const &triggerDateTime_)
					
					
					Adds the given \a triggerDateTime_ to the property \ref ncal_triggerDateTime "ncal:triggerDateTime" set.
					\sa LiveResource::addObject
				 */
				void addTriggerDateTime(QDateTime const &triggerDateTime_) { baseAddObject< ncal::triggerDateTime >( triggerDateTime_ ); }
				/*!
					\fn void removeTriggerDateTime(QDateTime const &triggerDateTime_)
					
					
					Removes the given \a triggerDateTime_ from the property \ref ncal_triggerDateTime "ncal:triggerDateTime" set.
					\sa LiveResource::removeObject
				 */
				void removeTriggerDateTime(QDateTime const &triggerDateTime_) { baseRemoveObject< ncal::triggerDateTime >(triggerDateTime_); }

				/* Property generated from ncal:related
				 * \n To specify the relationship of the alarm trigger with respect to the start or end of the calendar component. Inspired by RFC 2445 4.2.14. The RFC has specified two possible values for this property ('START' and 'END') they have been expressed as instances of the TriggerRelation class.
				 * \n rdfs:label=related
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=ncal:TriggerRelation
				 * \n rdfs:domain=ncal:Trigger
				 * \n tracker:modified=1712
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRelateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref ncal_related "ncal:related" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRelateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< ncal::related >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRelateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref ncal_related "ncal:related" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRelateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< ncal::related >(object_info, strategy, parent); }
				/*!
					\fn void setRelateds(LiveNodes const &related_)
					
					
					Sets the property \ref ncal_related "ncal:related" set to the given \a related_ set.
					\sa LiveResource::setObjects
				 */
				void setRelateds(LiveNodes const &related_) { baseSetObjects(ncal::related::iri(), related_); }
				/*!
					\fn void removeRelateds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref ncal_related "ncal:related" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRelateds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(ncal::related::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TriggerRelation > getRelated()
					
					
					Returns the property \ref ncal_related "ncal:related". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TriggerRelation > getRelated() { return baseGetObject< ncal::related >(); }
				/*!
					\fn ::SopranoLive::Live< TriggerRelation > setRelated(::SopranoLive::Live< TriggerRelation > const &related_)
					
					
					Sets the property \ref ncal_related "ncal:related" to the given \a related.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TriggerRelation > setRelated(::SopranoLive::Live< TriggerRelation > const &related_) { return baseSetObject< ncal::related >( related_ ); }
				/*!
					\fn ::SopranoLive::Live< TriggerRelation > firstRelated()
					
					
					Returns the first property \ref ncal_related "ncal:related". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TriggerRelation > firstRelated() { return baseFirstObject< ncal::related >(); }
				/*!
					\fn ::SopranoLive::Live< TriggerRelation > addRelated()
					
					
					Adds a new uniquely named resource to the property \ref ncal_related "ncal:related" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TriggerRelation > addRelated() { return baseAddObject< ncal::related >(); }
				/*!
					\fn ::SopranoLive::Live< TriggerRelation > addRelated(::SopranoLive::Live< TriggerRelation > const &related_)
					
					
					Adds the given \a related_ to the property \ref ncal_related "ncal:related" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TriggerRelation > addRelated(::SopranoLive::Live< TriggerRelation > const &related_) { return baseAddObject< ncal::related >( related_ ); }
				/*!
					\fn void removeRelated(::SopranoLive::Live< TriggerRelation > const &related_)
					
					
					Removes the given \a related_ from the property \ref ncal_related "ncal:related" set.
					\sa LiveResource::removeObject
				 */
				void removeRelated(::SopranoLive::Live< TriggerRelation > const &related_) { baseRemoveObject< ncal::related >(related_); }
				 //@}
			};

			/*! Class generated from ncal:TriggerRelation
			 * \ingroup onto_ncal_classes
			 * The relation between the trigger and its parent calendar component. This class has been introduced to express the limited vocabulary for the ncal:related property. See the documentation for ncal:related for more details.
			 * 
			 * rdfs:label = TriggerRelation
			 * 
			 * tracker:modified = 1944
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_related "ncal:related"
			 */
			class TriggerRelation
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#TriggerRelation"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<TriggerRelation> Live;
				TriggerRelation() { this->attachInterfaceHelper< TriggerRelation >(); }
				~TriggerRelation() { this->detachInterfaceHelper< TriggerRelation >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from ncal:Weekday
			 * \ingroup onto_ncal_classes
			 * Day of the week. This class has been created to provide the limited vocabulary for ncal:byday property. See the documentation for ncal:byday for details.
			 * 
			 * rdfs:label = Weekday
			 * 
			 * tracker:modified = 1698
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref ncal_wkst "ncal:wkst"
			 * 		\ref ncal_bydayWeekday "ncal:bydayWeekday"
			 */
			class Weekday
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Weekday"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_ncal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Weekday> Live;
				Weekday() { this->attachInterfaceHelper< Weekday >(); }
				~Weekday() { this->detachInterfaceHelper< Weekday >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::AccessClassification::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::Alarm::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::AlarmAction::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::Attachment::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::AttachmentEncoding::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::Attendee::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::AttendeeOrOrganizer::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::AttendeeRole::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::BydayRulePart::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::Calendar::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::CalendarDataObject::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::CalendarScale::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::CalendarUserType::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::Event::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::EventStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::Freebusy::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::FreebusyPeriod::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::FreebusyType::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::Journal::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::JournalStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::NcalDateTime::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::NcalPeriod::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::NcalTimeEntity::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::Organizer::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::ParticipationStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::RecurrenceFrequency::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::RecurrenceIdentifier::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::RecurrenceIdentifierRange::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::RecurrenceRule::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::RequestStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::TimeTransparency::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::Timezone::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::TimezoneObservance::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::Todo::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::TodoStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::Trigger::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::TriggerRelation::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::UnionParentClass::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::ncal::Weekday::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_NCAL_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_NCAL_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_NCAL_H_POST_INCLUDES
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#endif
