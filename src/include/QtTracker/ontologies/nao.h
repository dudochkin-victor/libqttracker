/*
 * nao.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:24.703713
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/nao.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_NAO_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_NAO_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_nao_classes namespace nao class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nao_properties namespace nao property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nao_resources namespace nao resource definitions
		 *  @{
		 *  @}
		 */
		static const char nao_namespace_prefix[] = "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#";
		struct Ontology_nao
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(nao_namespace_prefix) + suffix;
			}
		};
		namespace nao
		{
			inline QUrl iri(QString suffix) { return Ontology_nao::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class Property;
			class Tag;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NAO_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NAO_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NAO_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nao
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from nao:propertyName
			 * \anchor nao_propertyName
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1244
			 * \n rdfs:domain=nao:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nao_properties
			class propertyName
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#propertyName"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nao Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Property RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nao:propertyValue
			 * \anchor nao_propertyValue
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1648
			 * \n rdfs:domain=nao:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nao_properties
			class propertyValue
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#propertyValue"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nao Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Property RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nao:prefLabel
			 * \anchor nao_prefLabel
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nao:Tag
			 * \n tracker:writeback=true
			 * \n tracker:weight=10
			 * \n tracker:modified=1249
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nao_properties
			class prefLabel
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#prefLabel"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nao Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Tag Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Tag RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nao:description
			 * \anchor nao_description
			 * \n In the context of the social semantic desktop the textual annotation provided via rdfs:comment is meant for technical users, the textual annotation here is aimed at average users and is meant to be used to define custom descriptions of resources on the desktop
			 * \n rdfs:subPropertyOf=rdfs:comment
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nao:Tag
			 * \n tracker:weight=3
			 * \n tracker:modified=1286
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nao_properties
			class description
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#description"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nao Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Tag Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Tag RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nao:deprecated
			 * \anchor nao_deprecated
			 * \n If this property is assigned, the subject class, property, or resource, is deprecated and should not be used in production systems any longer. It may be removed without further notice.
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:label=deprecated
			 * \n tracker:modified=1097
			 * \n rdfs:domain=rdfs:Resource
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nao_properties
			class deprecated
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#deprecated"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nao Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdfs::Resource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdfs::Resource RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nao:hasProperty
			 * \anchor nao_hasProperty
			 * \n rdfs:range=nao:Property
			 * \n tracker:modified=1897
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nao_properties
			class hasProperty
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasProperty"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nao Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef nie::InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nie::InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef Property Range;
				/// The full, non-localized rdf range type of this property
				typedef Property RDFRange;
			};
			/*! Property generated from nao:hasTag
			 * \anchor nao_hasTag
			 * \n rdfs:range=rdfs:Resource
			 * \n tracker:isAnnotation=true
			 * \n rdfs:domain=rdfs:Resource
			 * \n tracker:writeback=true
			 * \n tracker:indexed=true
			 * \n tracker:modified=1760
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nao_properties
			class hasTag
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasTag"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nao Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef rdfs::Resource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdfs::Resource RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from nao:identifier
			 * \anchor nao_identifier
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1950
			 * \n rdfs:domain=rdfs:Resource
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nao_properties
			class identifier
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#identifier"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nao Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdfs::Resource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdfs::Resource RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nao:isRelated
			 * \anchor nao_isRelated
			 * \n This property defines a symmetric relation between any two resources. In order for this property to be used legally, the relationship must be symmetric.
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:label=Is related
			 * \n tracker:modified=1846
			 * \n rdfs:domain=rdfs:Resource
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nao_properties
			class isRelated
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#isRelated"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nao Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef rdfs::Resource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdfs::Resource RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from nao:lastModified
			 * \anchor nao_lastModified
			 * \n last modification date
			 * \n rdfs:label=lastModified
			 * \n rdfs:subPropertyOf=dc:date
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=rdfs:Resource
			 * \n tracker:modified=1480
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nao_properties
			class lastModified
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#lastModified"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nao Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdfs::Resource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdfs::Resource RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nao:numericRating
			 * \anchor nao_numericRating
			 * \n rdfs:range=xsd:double
			 * \n tracker:modified=1749
			 * \n rdfs:domain=rdfs:Resource
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nao_properties
			class numericRating
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#numericRating"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nao Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef rdfs::Resource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdfs::Resource RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			/*! Resource generated from nao:predefined-tag-favorite
			 * \anchor nao_predefined_tag_favorite
			 */
			/// \ingroup onto_nao_resources
			class predefined_tag_favorite
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#predefined-tag-favorite"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Tag ResourceType;
				//! The ontology of this resource
				typedef Ontology_nao Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NAO_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NAO_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NAO_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nao
		{

			using namespace nie;
			using namespace rdf;
			using namespace xsd;
			using namespace rdfs;

			/*! Class generated from nao:Property
			 * \ingroup onto_nao_classes
			 * Dont use this without asking first your ontology doctor
			 * 
			 * rdfs:label = Custom property to extend a class dynamically
			 * 
			 * tracker:modified = 1336
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nao_hasProperty "nao:hasProperty"
			 */
			class Property
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#Property"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nao Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Property> Live;
				Property() { this->attachInterfaceHelper< Property >(); }
				~Property() { this->detachInterfaceHelper< Property >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nao:propertyName
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1244
				 * \n rdfs:domain=nao:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes livePropertyNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nao_propertyName "nao:propertyName" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePropertyNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nao::propertyName >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPropertyNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nao_propertyName "nao:propertyName" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPropertyNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nao::propertyName >(object_info, strategy, parent); }
				/*!
					\fn void setPropertyNames(LiveNodes const &propertyName_)
					
					
					Sets the property \ref nao_propertyName "nao:propertyName" set to the given \a propertyName_ set.
					\sa LiveResource::setObjects
				 */
				void setPropertyNames(LiveNodes const &propertyName_) { baseSetObjects(nao::propertyName::iri(), propertyName_); }
				/*!
					\fn void removePropertyNames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nao_propertyName "nao:propertyName" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePropertyNames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nao::propertyName::iri(), object_info); }
				/*!
					\fn QString getPropertyName()
					
					
					Returns the property \ref nao_propertyName "nao:propertyName". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getPropertyName() { return baseGetObject< nao::propertyName >(); }
				/*!
					\fn void setPropertyName(QString const &propertyName_)
					
					
					Sets the property \ref nao_propertyName "nao:propertyName" to the given \a propertyName.
					\sa LiveResource::setObject
				 */
				void setPropertyName(QString const &propertyName_) { baseSetObject< nao::propertyName >( propertyName_ ); }
				/*!
					\fn QString firstPropertyName()
					
					
					Returns the first property \ref nao_propertyName "nao:propertyName". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstPropertyName() { return baseFirstObject< nao::propertyName >(); }
				/*!
					\fn void addPropertyName(QString const &propertyName_)
					
					
					Adds the given \a propertyName_ to the property \ref nao_propertyName "nao:propertyName" set.
					\sa LiveResource::addObject
				 */
				void addPropertyName(QString const &propertyName_) { baseAddObject< nao::propertyName >( propertyName_ ); }
				/*!
					\fn void removePropertyName(QString const &propertyName_)
					
					
					Removes the given \a propertyName_ from the property \ref nao_propertyName "nao:propertyName" set.
					\sa LiveResource::removeObject
				 */
				void removePropertyName(QString const &propertyName_) { baseRemoveObject< nao::propertyName >(propertyName_); }

				/* Property generated from nao:propertyValue
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1648
				 * \n rdfs:domain=nao:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes livePropertyValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nao_propertyValue "nao:propertyValue" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePropertyValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nao::propertyValue >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPropertyValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nao_propertyValue "nao:propertyValue" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPropertyValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nao::propertyValue >(object_info, strategy, parent); }
				/*!
					\fn void setPropertyValues(LiveNodes const &propertyValue_)
					
					
					Sets the property \ref nao_propertyValue "nao:propertyValue" set to the given \a propertyValue_ set.
					\sa LiveResource::setObjects
				 */
				void setPropertyValues(LiveNodes const &propertyValue_) { baseSetObjects(nao::propertyValue::iri(), propertyValue_); }
				/*!
					\fn void removePropertyValues(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nao_propertyValue "nao:propertyValue" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePropertyValues(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nao::propertyValue::iri(), object_info); }
				/*!
					\fn QString getPropertyValue()
					
					
					Returns the property \ref nao_propertyValue "nao:propertyValue". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getPropertyValue() { return baseGetObject< nao::propertyValue >(); }
				/*!
					\fn void setPropertyValue(QString const &propertyValue_)
					
					
					Sets the property \ref nao_propertyValue "nao:propertyValue" to the given \a propertyValue.
					\sa LiveResource::setObject
				 */
				void setPropertyValue(QString const &propertyValue_) { baseSetObject< nao::propertyValue >( propertyValue_ ); }
				/*!
					\fn QString firstPropertyValue()
					
					
					Returns the first property \ref nao_propertyValue "nao:propertyValue". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstPropertyValue() { return baseFirstObject< nao::propertyValue >(); }
				/*!
					\fn void addPropertyValue(QString const &propertyValue_)
					
					
					Adds the given \a propertyValue_ to the property \ref nao_propertyValue "nao:propertyValue" set.
					\sa LiveResource::addObject
				 */
				void addPropertyValue(QString const &propertyValue_) { baseAddObject< nao::propertyValue >( propertyValue_ ); }
				/*!
					\fn void removePropertyValue(QString const &propertyValue_)
					
					
					Removes the given \a propertyValue_ from the property \ref nao_propertyValue "nao:propertyValue" set.
					\sa LiveResource::removeObject
				 */
				void removePropertyValue(QString const &propertyValue_) { baseRemoveObject< nao::propertyValue >(propertyValue_); }
				 //@}
			};

			/*! Class generated from nao:Tag
			 * \ingroup onto_nao_classes
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1083
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nao_predefined_tag_favorite "nao:predefined-tag-favorite"
			 */
			class Tag
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/08/15/nao#Tag"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nao Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Tag> Live;
				Tag() { this->attachInterfaceHelper< Tag >(); }
				~Tag() { this->detachInterfaceHelper< Tag >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from tracker:isDefaultTag
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1853
				 * \n rdfs:domain=nao:Tag
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTrackerIsDefaultTags(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_isDefaultTag "tracker:isDefaultTag" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerIsDefaultTags(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::isDefaultTag >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerIsDefaultTags(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_isDefaultTag "tracker:isDefaultTag" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerIsDefaultTags(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::isDefaultTag >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerIsDefaultTags(LiveNodes const &trackerIsDefaultTag_)
					
					
					Sets the property \ref tracker_isDefaultTag "tracker:isDefaultTag" set to the given \a trackerIsDefaultTag_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerIsDefaultTags(LiveNodes const &trackerIsDefaultTag_) { baseSetObjects(tracker::isDefaultTag::iri(), trackerIsDefaultTag_); }
				/*!
					\fn void removeTrackerIsDefaultTags(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_isDefaultTag "tracker:isDefaultTag" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerIsDefaultTags(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::isDefaultTag::iri(), object_info); }
				/*!
					\fn bool firstTrackerIsDefaultTag()
					
					
					Returns the first property \ref tracker_isDefaultTag "tracker:isDefaultTag". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstTrackerIsDefaultTag() { return baseFirstObject< tracker::isDefaultTag >(); }
				/*!
					\fn void addTrackerIsDefaultTag(bool const &trackerIsDefaultTag_)
					
					
					Adds the given \a trackerIsDefaultTag_ to the property \ref tracker_isDefaultTag "tracker:isDefaultTag" set.
					\sa LiveResource::addObject
				 */
				void addTrackerIsDefaultTag(bool const &trackerIsDefaultTag_) { baseAddObject< tracker::isDefaultTag >( trackerIsDefaultTag_ ); }
				/*!
					\fn void removeTrackerIsDefaultTag(bool const &trackerIsDefaultTag_)
					
					
					Removes the given \a trackerIsDefaultTag_ from the property \ref tracker_isDefaultTag "tracker:isDefaultTag" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerIsDefaultTag(bool const &trackerIsDefaultTag_) { baseRemoveObject< tracker::isDefaultTag >(trackerIsDefaultTag_); }

				/* Property generated from nao:description
				 * \n In the context of the social semantic desktop the textual annotation provided via rdfs:comment is meant for technical users, the textual annotation here is aimed at average users and is meant to be used to define custom descriptions of resources on the desktop
				 * \n rdfs:subPropertyOf=rdfs:comment
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nao:Tag
				 * \n tracker:weight=3
				 * \n tracker:modified=1286
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nao_description "nao:description" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nao::description >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nao_description "nao:description" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nao::description >(object_info, strategy, parent); }
				/*!
					\fn void setDescriptions(LiveNodes const &description_)
					
					
					Sets the property \ref nao_description "nao:description" set to the given \a description_ set.
					\sa LiveResource::setObjects
				 */
				void setDescriptions(LiveNodes const &description_) { baseSetObjects(nao::description::iri(), description_); }
				/*!
					\fn void removeDescriptions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nao_description "nao:description" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDescriptions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nao::description::iri(), object_info); }
				/*!
					\fn QString getDescription()
					
					
					Returns the property \ref nao_description "nao:description". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDescription() { return baseGetObject< nao::description >(); }
				/*!
					\fn void setDescription(QString const &description_)
					
					
					Sets the property \ref nao_description "nao:description" to the given \a description.
					\sa LiveResource::setObject
				 */
				void setDescription(QString const &description_) { baseSetObject< nao::description >( description_ ); }
				/*!
					\fn QString firstDescription()
					
					
					Returns the first property \ref nao_description "nao:description". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDescription() { return baseFirstObject< nao::description >(); }
				/*!
					\fn void addDescription(QString const &description_)
					
					
					Adds the given \a description_ to the property \ref nao_description "nao:description" set.
					\sa LiveResource::addObject
				 */
				void addDescription(QString const &description_) { baseAddObject< nao::description >( description_ ); }
				/*!
					\fn void removeDescription(QString const &description_)
					
					
					Removes the given \a description_ from the property \ref nao_description "nao:description" set.
					\sa LiveResource::removeObject
				 */
				void removeDescription(QString const &description_) { baseRemoveObject< nao::description >(description_); }

				/* Property generated from tracker:tagRelatedTo
				 * \n rdfs:range=rdfs:Class
				 * \n tracker:modified=1225
				 * \n rdfs:domain=nao:Tag
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Class Class;
				/*!
					\fn LiveNodes liveTrackerTagRelatedTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_tagRelatedTo "tracker:tagRelatedTo" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerTagRelatedTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::tagRelatedTo >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerTagRelatedTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_tagRelatedTo "tracker:tagRelatedTo" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerTagRelatedTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::tagRelatedTo >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerTagRelatedTos(LiveNodes const &trackerTagRelatedTo_)
					
					
					Sets the property \ref tracker_tagRelatedTo "tracker:tagRelatedTo" set to the given \a trackerTagRelatedTo_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerTagRelatedTos(LiveNodes const &trackerTagRelatedTo_) { baseSetObjects(tracker::tagRelatedTo::iri(), trackerTagRelatedTo_); }
				/*!
					\fn void removeTrackerTagRelatedTos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_tagRelatedTo "tracker:tagRelatedTo" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerTagRelatedTos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::tagRelatedTo::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Class > firstTrackerTagRelatedTo()
					
					
					Returns the first property \ref tracker_tagRelatedTo "tracker:tagRelatedTo". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Class > firstTrackerTagRelatedTo() { return baseFirstObject< tracker::tagRelatedTo >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Class > addTrackerTagRelatedTo()
					
					
					Adds a new uniquely named resource to the property \ref tracker_tagRelatedTo "tracker:tagRelatedTo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Class > addTrackerTagRelatedTo() { return baseAddObject< tracker::tagRelatedTo >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Class > addTrackerTagRelatedTo(::SopranoLive::Live< rdfs::Class > const &trackerTagRelatedTo_)
					
					
					Adds the given \a trackerTagRelatedTo_ to the property \ref tracker_tagRelatedTo "tracker:tagRelatedTo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Class > addTrackerTagRelatedTo(::SopranoLive::Live< rdfs::Class > const &trackerTagRelatedTo_) { return baseAddObject< tracker::tagRelatedTo >( trackerTagRelatedTo_ ); }
				/*!
					\fn void removeTrackerTagRelatedTo(::SopranoLive::Live< rdfs::Class > const &trackerTagRelatedTo_)
					
					
					Removes the given \a trackerTagRelatedTo_ from the property \ref tracker_tagRelatedTo "tracker:tagRelatedTo" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerTagRelatedTo(::SopranoLive::Live< rdfs::Class > const &trackerTagRelatedTo_) { baseRemoveObject< tracker::tagRelatedTo >(trackerTagRelatedTo_); }

				/* Property generated from nao:prefLabel
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nao:Tag
				 * \n tracker:writeback=true
				 * \n tracker:weight=10
				 * \n tracker:modified=1249
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePrefLabels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nao_prefLabel "nao:prefLabel" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePrefLabels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nao::prefLabel >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPrefLabels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nao_prefLabel "nao:prefLabel" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPrefLabels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nao::prefLabel >(object_info, strategy, parent); }
				/*!
					\fn void setPrefLabels(LiveNodes const &prefLabel_)
					
					
					Sets the property \ref nao_prefLabel "nao:prefLabel" set to the given \a prefLabel_ set.
					\sa LiveResource::setObjects
				 */
				void setPrefLabels(LiveNodes const &prefLabel_) { baseSetObjects(nao::prefLabel::iri(), prefLabel_); }
				/*!
					\fn void removePrefLabels(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nao_prefLabel "nao:prefLabel" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePrefLabels(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nao::prefLabel::iri(), object_info); }
				/*!
					\fn QString getPrefLabel()
					
					
					Returns the property \ref nao_prefLabel "nao:prefLabel". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getPrefLabel() { return baseGetObject< nao::prefLabel >(); }
				/*!
					\fn void setPrefLabel(QString const &prefLabel_)
					
					
					Sets the property \ref nao_prefLabel "nao:prefLabel" to the given \a prefLabel.
					\sa LiveResource::setObject
				 */
				void setPrefLabel(QString const &prefLabel_) { baseSetObject< nao::prefLabel >( prefLabel_ ); }
				/*!
					\fn QString firstPrefLabel()
					
					
					Returns the first property \ref nao_prefLabel "nao:prefLabel". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstPrefLabel() { return baseFirstObject< nao::prefLabel >(); }
				/*!
					\fn void addPrefLabel(QString const &prefLabel_)
					
					
					Adds the given \a prefLabel_ to the property \ref nao_prefLabel "nao:prefLabel" set.
					\sa LiveResource::addObject
				 */
				void addPrefLabel(QString const &prefLabel_) { baseAddObject< nao::prefLabel >( prefLabel_ ); }
				/*!
					\fn void removePrefLabel(QString const &prefLabel_)
					
					
					Removes the given \a prefLabel_ from the property \ref nao_prefLabel "nao:prefLabel" set.
					\sa LiveResource::removeObject
				 */
				void removePrefLabel(QString const &prefLabel_) { baseRemoveObject< nao::prefLabel >(prefLabel_); }
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nao::Property::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nao::Tag::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_NAO_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_NAO_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_NAO_H_POST_INCLUDES
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#endif
