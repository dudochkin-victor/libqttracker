/*
 * rdfs.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:26.503546
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/rdfs.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_RDFS_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_RDFS_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_rdfs_classes namespace rdfs class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_rdfs_properties namespace rdfs property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_rdfs_resources namespace rdfs resource definitions
		 *  @{
		 *  @}
		 */
		static const char rdfs_namespace_prefix[] = "http://www.w3.org/2000/01/rdf-schema#";
		struct Ontology_rdfs
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(rdfs_namespace_prefix) + suffix;
			}
		};
		namespace rdfs
		{
			inline QUrl iri(QString suffix) { return Ontology_rdfs::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class Class;
			class Literal;
			class Resource;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_RDFS_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_RDFS_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_RDFS_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/dc.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/dc.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/dc.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace rdfs
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from rdfs:subClassOf
			 * \anchor rdfs_subClassOf
			 * \n rdfs:range=rdfs:Class
			 * \n tracker:modified=1469
			 * \n rdfs:domain=rdfs:Class
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_rdfs_properties
			class subClassOf
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.w3.org/2000/01/rdf-schema#subClassOf"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_rdfs Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Class Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Class RDFDomain;
				/// The localized c++ range type of this property
				typedef Class Range;
				/// The full, non-localized rdf range type of this property
				typedef Class RDFRange;
			};
			/*! Property generated from rdfs:comment
			 * \anchor rdfs_comment
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1074
			 * \n rdfs:domain=rdfs:Resource
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_rdfs_properties
			class comment
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.w3.org/2000/01/rdf-schema#comment"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_rdfs Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Resource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Resource RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from rdfs:label
			 * \anchor rdfs_label
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1720
			 * \n rdfs:domain=rdfs:Resource
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_rdfs_properties
			class label
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.w3.org/2000/01/rdf-schema#label"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_rdfs Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Resource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Resource RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from rdfs:domain
			 * \anchor rdfs_domain
			 * \n rdfs:range=rdfs:Resource
			 * \n tracker:modified=1452
			 * \n rdfs:domain=rdf:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_rdfs_properties
			class domain
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.w3.org/2000/01/rdf-schema#domain"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_rdfs Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef rdf::Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdf::Property RDFDomain;
				/// The localized c++ range type of this property
				typedef Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef Resource RDFRange;
			};
			/*! Property generated from rdfs:range
			 * \anchor rdfs_range
			 * \n rdfs:range=rdfs:Class
			 * \n tracker:modified=1969
			 * \n rdfs:domain=rdf:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_rdfs_properties
			class range
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.w3.org/2000/01/rdf-schema#range"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_rdfs Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef rdf::Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdf::Property RDFDomain;
				/// The localized c++ range type of this property
				typedef Class Range;
				/// The full, non-localized rdf range type of this property
				typedef Class RDFRange;
			};
			/*! Property generated from rdfs:subPropertyOf
			 * \anchor rdfs_subPropertyOf
			 * \n rdfs:range=rdf:Property
			 * \n tracker:modified=1500
			 * \n rdfs:domain=rdf:Property
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_rdfs_properties
			class subPropertyOf
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.w3.org/2000/01/rdf-schema#subPropertyOf"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_rdfs Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef rdf::Property Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdf::Property RDFDomain;
				/// The localized c++ range type of this property
				typedef rdf::Property Range;
				/// The full, non-localized rdf range type of this property
				typedef rdf::Property RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_RDFS_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_RDFS_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_RDFS_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/dc.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/dc.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace rdfs
		{

			using namespace rdf;
			using namespace xsd;

			/*! Class generated from rdfs:Resource
			 * \ingroup onto_rdfs_classes
			 * All resources
			 * 
			 * rdfs:label = All Resources
			 * 
			 * tracker:modified = 1149
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref dc_source "dc:source"
			 * 		\ref rdfs_domain "rdfs:domain"
			 * 		\ref nao_isRelated "nao:isRelated"
			 * 		\ref nao_hasTag "nao:hasTag"
			 */
			class Resource
				: public virtual LiveResourceBridge

			{
//			Q_OBJECT

			public:

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_rdfs Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Resource> Live;
				Resource() { this->attachInterfaceHelper< Resource >(); }
				~Resource() { this->detachInterfaceHelper< Resource >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from dc:rights
				 * \n Information about rights held in and over the resource.
				 * \n rdfs:label=Rights
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:modified=1314
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcRightss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_rights "dc:rights" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcRightss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::rights >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcRightss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_rights "dc:rights" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcRightss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::rights >(object_info, strategy, parent); }
				/*!
					\fn void setDcRightss(LiveNodes const &dcRights_)
					
					
					Sets the property \ref dc_rights "dc:rights" set to the given \a dcRights_ set.
					\sa LiveResource::setObjects
				 */
				void setDcRightss(LiveNodes const &dcRights_) { baseSetObjects(dc::rights::iri(), dcRights_); }
				/*!
					\fn void removeDcRightss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_rights "dc:rights" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcRightss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::rights::iri(), object_info); }
				/*!
					\fn QString getDcRights()
					
					
					Returns the property \ref dc_rights "dc:rights". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDcRights() { return baseGetObject< dc::rights >(); }
				/*!
					\fn void setDcRights(QString const &dcRights_)
					
					
					Sets the property \ref dc_rights "dc:rights" to the given \a dcRights.
					\sa LiveResource::setObject
				 */
				void setDcRights(QString const &dcRights_) { baseSetObject< dc::rights >( dcRights_ ); }
				/*!
					\fn QString firstDcRights()
					
					
					Returns the first property \ref dc_rights "dc:rights". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcRights() { return baseFirstObject< dc::rights >(); }
				/*!
					\fn void addDcRights(QString const &dcRights_)
					
					
					Adds the given \a dcRights_ to the property \ref dc_rights "dc:rights" set.
					\sa LiveResource::addObject
				 */
				void addDcRights(QString const &dcRights_) { baseAddObject< dc::rights >( dcRights_ ); }
				/*!
					\fn void removeDcRights(QString const &dcRights_)
					
					
					Removes the given \a dcRights_ from the property \ref dc_rights "dc:rights" set.
					\sa LiveResource::removeObject
				 */
				void removeDcRights(QString const &dcRights_) { baseRemoveObject< dc::rights >(dcRights_); }

				/* Property generated from dc:contributor
				 * \n An entity responsible for making contributions to the resource.
				 * \n rdfs:label=Contributor
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:weight=4
				 * \n tracker:modified=1068
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcContributors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_contributor "dc:contributor" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcContributors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::contributor >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcContributors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_contributor "dc:contributor" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcContributors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::contributor >(object_info, strategy, parent); }
				/*!
					\fn void setDcContributors(LiveNodes const &dcContributor_)
					
					
					Sets the property \ref dc_contributor "dc:contributor" set to the given \a dcContributor_ set.
					\sa LiveResource::setObjects
				 */
				void setDcContributors(LiveNodes const &dcContributor_) { baseSetObjects(dc::contributor::iri(), dcContributor_); }
				/*!
					\fn void removeDcContributors(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_contributor "dc:contributor" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcContributors(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::contributor::iri(), object_info); }
				/*!
					\fn QString firstDcContributor()
					
					
					Returns the first property \ref dc_contributor "dc:contributor". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcContributor() { return baseFirstObject< dc::contributor >(); }
				/*!
					\fn void addDcContributor(QString const &dcContributor_)
					
					
					Adds the given \a dcContributor_ to the property \ref dc_contributor "dc:contributor" set.
					\sa LiveResource::addObject
				 */
				void addDcContributor(QString const &dcContributor_) { baseAddObject< dc::contributor >( dcContributor_ ); }
				/*!
					\fn void removeDcContributor(QString const &dcContributor_)
					
					
					Removes the given \a dcContributor_ from the property \ref dc_contributor "dc:contributor" set.
					\sa LiveResource::removeObject
				 */
				void removeDcContributor(QString const &dcContributor_) { baseRemoveObject< dc::contributor >(dcContributor_); }

				/* Property generated from dc:format
				 * \n The file format, physical medium, or dimensions of the resource.
				 * \n rdfs:label=Format
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:modified=1305
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcFormats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_format "dc:format" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcFormats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::format >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcFormats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_format "dc:format" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcFormats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::format >(object_info, strategy, parent); }
				/*!
					\fn void setDcFormats(LiveNodes const &dcFormat_)
					
					
					Sets the property \ref dc_format "dc:format" set to the given \a dcFormat_ set.
					\sa LiveResource::setObjects
				 */
				void setDcFormats(LiveNodes const &dcFormat_) { baseSetObjects(dc::format::iri(), dcFormat_); }
				/*!
					\fn void removeDcFormats(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_format "dc:format" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcFormats(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::format::iri(), object_info); }
				/*!
					\fn QString getDcFormat()
					
					
					Returns the property \ref dc_format "dc:format". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDcFormat() { return baseGetObject< dc::format >(); }
				/*!
					\fn void setDcFormat(QString const &dcFormat_)
					
					
					Sets the property \ref dc_format "dc:format" to the given \a dcFormat.
					\sa LiveResource::setObject
				 */
				void setDcFormat(QString const &dcFormat_) { baseSetObject< dc::format >( dcFormat_ ); }
				/*!
					\fn QString firstDcFormat()
					
					
					Returns the first property \ref dc_format "dc:format". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcFormat() { return baseFirstObject< dc::format >(); }
				/*!
					\fn void addDcFormat(QString const &dcFormat_)
					
					
					Adds the given \a dcFormat_ to the property \ref dc_format "dc:format" set.
					\sa LiveResource::addObject
				 */
				void addDcFormat(QString const &dcFormat_) { baseAddObject< dc::format >( dcFormat_ ); }
				/*!
					\fn void removeDcFormat(QString const &dcFormat_)
					
					
					Removes the given \a dcFormat_ from the property \ref dc_format "dc:format" set.
					\sa LiveResource::removeObject
				 */
				void removeDcFormat(QString const &dcFormat_) { baseRemoveObject< dc::format >(dcFormat_); }

				/* Property generated from nao:deprecated
				 * \n If this property is assigned, the subject class, property, or resource, is deprecated and should not be used in production systems any longer. It may be removed without further notice.
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:label=deprecated
				 * \n tracker:modified=1097
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNaoDeprecateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nao_deprecated "nao:deprecated" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNaoDeprecateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nao::deprecated >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNaoDeprecateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nao_deprecated "nao:deprecated" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNaoDeprecateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nao::deprecated >(object_info, strategy, parent); }
				/*!
					\fn void setNaoDeprecateds(LiveNodes const &naoDeprecated_)
					
					
					Sets the property \ref nao_deprecated "nao:deprecated" set to the given \a naoDeprecated_ set.
					\sa LiveResource::setObjects
				 */
				void setNaoDeprecateds(LiveNodes const &naoDeprecated_) { baseSetObjects(nao::deprecated::iri(), naoDeprecated_); }
				/*!
					\fn void removeNaoDeprecateds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nao_deprecated "nao:deprecated" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNaoDeprecateds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nao::deprecated::iri(), object_info); }
				/*!
					\fn bool firstNaoDeprecated()
					
					
					Returns the first property \ref nao_deprecated "nao:deprecated". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstNaoDeprecated() { return baseFirstObject< nao::deprecated >(); }
				/*!
					\fn void addNaoDeprecated(bool const &naoDeprecated_)
					
					
					Adds the given \a naoDeprecated_ to the property \ref nao_deprecated "nao:deprecated" set.
					\sa LiveResource::addObject
				 */
				void addNaoDeprecated(bool const &naoDeprecated_) { baseAddObject< nao::deprecated >( naoDeprecated_ ); }
				/*!
					\fn void removeNaoDeprecated(bool const &naoDeprecated_)
					
					
					Removes the given \a naoDeprecated_ from the property \ref nao_deprecated "nao:deprecated" set.
					\sa LiveResource::removeObject
				 */
				void removeNaoDeprecated(bool const &naoDeprecated_) { baseRemoveObject< nao::deprecated >(naoDeprecated_); }

				/* Property generated from tracker:added
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n tracker:isAnnotation=true
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:indexed=true
				 * \n tracker:modified=1733
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTrackerAddeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_added "tracker:added" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerAddeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::added >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerAddeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_added "tracker:added" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerAddeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::added >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerAddeds(LiveNodes const &trackerAdded_)
					
					
					Sets the property \ref tracker_added "tracker:added" set to the given \a trackerAdded_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerAddeds(LiveNodes const &trackerAdded_) { baseSetObjects(tracker::added::iri(), trackerAdded_); }
				/*!
					\fn void removeTrackerAddeds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_added "tracker:added" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerAddeds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::added::iri(), object_info); }
				/*!
					\fn QDateTime getTrackerAdded()
					
					
					Returns the property \ref tracker_added "tracker:added". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getTrackerAdded() { return baseGetObject< tracker::added >(); }
				/*!
					\fn void setTrackerAdded(QDateTime const &trackerAdded_)
					
					
					Sets the property \ref tracker_added "tracker:added" to the given \a trackerAdded.
					\sa LiveResource::setObject
				 */
				void setTrackerAdded(QDateTime const &trackerAdded_) { baseSetObject< tracker::added >( trackerAdded_ ); }
				/*!
					\fn QDateTime firstTrackerAdded()
					
					
					Returns the first property \ref tracker_added "tracker:added". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstTrackerAdded() { return baseFirstObject< tracker::added >(); }
				/*!
					\fn void addTrackerAdded(QDateTime const &trackerAdded_)
					
					
					Adds the given \a trackerAdded_ to the property \ref tracker_added "tracker:added" set.
					\sa LiveResource::addObject
				 */
				void addTrackerAdded(QDateTime const &trackerAdded_) { baseAddObject< tracker::added >( trackerAdded_ ); }
				/*!
					\fn void removeTrackerAdded(QDateTime const &trackerAdded_)
					
					
					Removes the given \a trackerAdded_ from the property \ref tracker_added "tracker:added" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerAdded(QDateTime const &trackerAdded_) { baseRemoveObject< tracker::added >(trackerAdded_); }

				/* Property generated from dc:publisher
				 * \n An entity responsible for making the resource available.
				 * \n rdfs:label=Publisher
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:weight=4
				 * \n tracker:modified=1566
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcPublishers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_publisher "dc:publisher" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcPublishers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::publisher >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcPublishers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_publisher "dc:publisher" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcPublishers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::publisher >(object_info, strategy, parent); }
				/*!
					\fn void setDcPublishers(LiveNodes const &dcPublisher_)
					
					
					Sets the property \ref dc_publisher "dc:publisher" set to the given \a dcPublisher_ set.
					\sa LiveResource::setObjects
				 */
				void setDcPublishers(LiveNodes const &dcPublisher_) { baseSetObjects(dc::publisher::iri(), dcPublisher_); }
				/*!
					\fn void removeDcPublishers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_publisher "dc:publisher" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcPublishers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::publisher::iri(), object_info); }
				/*!
					\fn QString getDcPublisher()
					
					
					Returns the property \ref dc_publisher "dc:publisher". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDcPublisher() { return baseGetObject< dc::publisher >(); }
				/*!
					\fn void setDcPublisher(QString const &dcPublisher_)
					
					
					Sets the property \ref dc_publisher "dc:publisher" to the given \a dcPublisher.
					\sa LiveResource::setObject
				 */
				void setDcPublisher(QString const &dcPublisher_) { baseSetObject< dc::publisher >( dcPublisher_ ); }
				/*!
					\fn QString firstDcPublisher()
					
					
					Returns the first property \ref dc_publisher "dc:publisher". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcPublisher() { return baseFirstObject< dc::publisher >(); }
				/*!
					\fn void addDcPublisher(QString const &dcPublisher_)
					
					
					Adds the given \a dcPublisher_ to the property \ref dc_publisher "dc:publisher" set.
					\sa LiveResource::addObject
				 */
				void addDcPublisher(QString const &dcPublisher_) { baseAddObject< dc::publisher >( dcPublisher_ ); }
				/*!
					\fn void removeDcPublisher(QString const &dcPublisher_)
					
					
					Removes the given \a dcPublisher_ from the property \ref dc_publisher "dc:publisher" set.
					\sa LiveResource::removeObject
				 */
				void removeDcPublisher(QString const &dcPublisher_) { baseRemoveObject< dc::publisher >(dcPublisher_); }

				/* Property generated from rdf:type
				 * \n rdfs:range=rdfs:Class
				 * \n tracker:modified=1397
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRdfTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref rdf_type "rdf:type" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRdfTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< rdf::type >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRdfTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref rdf_type "rdf:type" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRdfTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< rdf::type >(object_info, strategy, parent); }
				/*!
					\fn void setRdfTypes(LiveNodes const &rdfType_)
					
					
					Sets the property \ref rdf_type "rdf:type" set to the given \a rdfType_ set.
					\sa LiveResource::setObjects
				 */
				void setRdfTypes(LiveNodes const &rdfType_) { baseSetObjects(rdf::type::iri(), rdfType_); }
				/*!
					\fn void removeRdfTypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref rdf_type "rdf:type" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRdfTypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(rdf::type::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Class > firstRdfType()
					
					
					Returns the first property \ref rdf_type "rdf:type". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Class > firstRdfType() { return baseFirstObject< rdf::type >(); }
				/*!
					\fn ::SopranoLive::Live< Class > addRdfType()
					
					
					Adds a new uniquely named resource to the property \ref rdf_type "rdf:type" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Class > addRdfType() { return baseAddObject< rdf::type >(); }
				/*!
					\fn ::SopranoLive::Live< Class > addRdfType(::SopranoLive::Live< Class > const &rdfType_)
					
					
					Adds the given \a rdfType_ to the property \ref rdf_type "rdf:type" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Class > addRdfType(::SopranoLive::Live< Class > const &rdfType_) { return baseAddObject< rdf::type >( rdfType_ ); }
				/*!
					\fn void removeRdfType(::SopranoLive::Live< Class > const &rdfType_)
					
					
					Removes the given \a rdfType_ from the property \ref rdf_type "rdf:type" set.
					\sa LiveResource::removeObject
				 */
				void removeRdfType(::SopranoLive::Live< Class > const &rdfType_) { baseRemoveObject< rdf::type >(rdfType_); }

				/* Property generated from dc:title
				 * \n A name given to the resource.
				 * \n rdfs:label=Title
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:weight=10
				 * \n tracker:modified=1370
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_title "dc:title" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::title >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_title "dc:title" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::title >(object_info, strategy, parent); }
				/*!
					\fn void setDcTitles(LiveNodes const &dcTitle_)
					
					
					Sets the property \ref dc_title "dc:title" set to the given \a dcTitle_ set.
					\sa LiveResource::setObjects
				 */
				void setDcTitles(LiveNodes const &dcTitle_) { baseSetObjects(dc::title::iri(), dcTitle_); }
				/*!
					\fn void removeDcTitles(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_title "dc:title" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcTitles(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::title::iri(), object_info); }
				/*!
					\fn QString getDcTitle()
					
					
					Returns the property \ref dc_title "dc:title". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDcTitle() { return baseGetObject< dc::title >(); }
				/*!
					\fn void setDcTitle(QString const &dcTitle_)
					
					
					Sets the property \ref dc_title "dc:title" to the given \a dcTitle.
					\sa LiveResource::setObject
				 */
				void setDcTitle(QString const &dcTitle_) { baseSetObject< dc::title >( dcTitle_ ); }
				/*!
					\fn QString firstDcTitle()
					
					
					Returns the first property \ref dc_title "dc:title". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcTitle() { return baseFirstObject< dc::title >(); }
				/*!
					\fn void addDcTitle(QString const &dcTitle_)
					
					
					Adds the given \a dcTitle_ to the property \ref dc_title "dc:title" set.
					\sa LiveResource::addObject
				 */
				void addDcTitle(QString const &dcTitle_) { baseAddObject< dc::title >( dcTitle_ ); }
				/*!
					\fn void removeDcTitle(QString const &dcTitle_)
					
					
					Removes the given \a dcTitle_ from the property \ref dc_title "dc:title" set.
					\sa LiveResource::removeObject
				 */
				void removeDcTitle(QString const &dcTitle_) { baseRemoveObject< dc::title >(dcTitle_); }

				/* Property generated from nao:hasTag
				 * \n rdfs:range=rdfs:Resource
				 * \n tracker:isAnnotation=true
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:writeback=true
				 * \n tracker:indexed=true
				 * \n tracker:modified=1760
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNaoHasTags(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nao_hasTag "nao:hasTag" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNaoHasTags(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nao::hasTag >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNaoHasTags(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nao_hasTag "nao:hasTag" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNaoHasTags(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nao::hasTag >(object_info, strategy, parent); }
				/*!
					\fn void setNaoHasTags(LiveNodes const &naoHasTag_)
					
					
					Sets the property \ref nao_hasTag "nao:hasTag" set to the given \a naoHasTag_ set.
					\sa LiveResource::setObjects
				 */
				void setNaoHasTags(LiveNodes const &naoHasTag_) { baseSetObjects(nao::hasTag::iri(), naoHasTag_); }
				/*!
					\fn void removeNaoHasTags(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nao_hasTag "nao:hasTag" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNaoHasTags(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nao::hasTag::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Resource > firstNaoHasTag()
					
					
					Returns the first property \ref nao_hasTag "nao:hasTag". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Resource > firstNaoHasTag() { return baseFirstObject< nao::hasTag >(); }
				/*!
					\fn ::SopranoLive::Live< Resource > addNaoHasTag()
					
					
					Adds a new uniquely named resource to the property \ref nao_hasTag "nao:hasTag" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Resource > addNaoHasTag() { return baseAddObject< nao::hasTag >(); }
				/*!
					\fn ::SopranoLive::Live< Resource > addNaoHasTag(::SopranoLive::Live< Resource > const &naoHasTag_)
					
					
					Adds the given \a naoHasTag_ to the property \ref nao_hasTag "nao:hasTag" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Resource > addNaoHasTag(::SopranoLive::Live< Resource > const &naoHasTag_) { return baseAddObject< nao::hasTag >( naoHasTag_ ); }
				/*!
					\fn void removeNaoHasTag(::SopranoLive::Live< Resource > const &naoHasTag_)
					
					
					Removes the given \a naoHasTag_ from the property \ref nao_hasTag "nao:hasTag" set.
					\sa LiveResource::removeObject
				 */
				void removeNaoHasTag(::SopranoLive::Live< Resource > const &naoHasTag_) { baseRemoveObject< nao::hasTag >(naoHasTag_); }

				/* Property generated from dc:source
				 * \n A related resource from which the described resource is derived.
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:label=Source
				 * \n tracker:modified=1622
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcSources(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_source "dc:source" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcSources(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::source >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcSources(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_source "dc:source" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcSources(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::source >(object_info, strategy, parent); }
				/*!
					\fn void setDcSources(LiveNodes const &dcSource_)
					
					
					Sets the property \ref dc_source "dc:source" set to the given \a dcSource_ set.
					\sa LiveResource::setObjects
				 */
				void setDcSources(LiveNodes const &dcSource_) { baseSetObjects(dc::source::iri(), dcSource_); }
				/*!
					\fn void removeDcSources(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_source "dc:source" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcSources(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::source::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Resource > firstDcSource()
					
					
					Returns the first property \ref dc_source "dc:source". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Resource > firstDcSource() { return baseFirstObject< dc::source >(); }
				/*!
					\fn ::SopranoLive::Live< Resource > addDcSource()
					
					
					Adds a new uniquely named resource to the property \ref dc_source "dc:source" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Resource > addDcSource() { return baseAddObject< dc::source >(); }
				/*!
					\fn ::SopranoLive::Live< Resource > addDcSource(::SopranoLive::Live< Resource > const &dcSource_)
					
					
					Adds the given \a dcSource_ to the property \ref dc_source "dc:source" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Resource > addDcSource(::SopranoLive::Live< Resource > const &dcSource_) { return baseAddObject< dc::source >( dcSource_ ); }
				/*!
					\fn void removeDcSource(::SopranoLive::Live< Resource > const &dcSource_)
					
					
					Removes the given \a dcSource_ from the property \ref dc_source "dc:source" set.
					\sa LiveResource::removeObject
				 */
				void removeDcSource(::SopranoLive::Live< Resource > const &dcSource_) { baseRemoveObject< dc::source >(dcSource_); }

				/* Property generated from dc:date
				 * \n A point or period of time associated with an event in the lifecycle of the resource.
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:label=Date
				 * \n tracker:modified=1865
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_date "dc:date" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::date >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_date "dc:date" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::date >(object_info, strategy, parent); }
				/*!
					\fn void setDcDates(LiveNodes const &dcDate_)
					
					
					Sets the property \ref dc_date "dc:date" set to the given \a dcDate_ set.
					\sa LiveResource::setObjects
				 */
				void setDcDates(LiveNodes const &dcDate_) { baseSetObjects(dc::date::iri(), dcDate_); }
				/*!
					\fn void removeDcDates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_date "dc:date" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcDates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::date::iri(), object_info); }
				/*!
					\fn QDateTime firstDcDate()
					
					
					Returns the first property \ref dc_date "dc:date". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstDcDate() { return baseFirstObject< dc::date >(); }
				/*!
					\fn void addDcDate(QDateTime const &dcDate_)
					
					
					Adds the given \a dcDate_ to the property \ref dc_date "dc:date" set.
					\sa LiveResource::addObject
				 */
				void addDcDate(QDateTime const &dcDate_) { baseAddObject< dc::date >( dcDate_ ); }
				/*!
					\fn void removeDcDate(QDateTime const &dcDate_)
					
					
					Removes the given \a dcDate_ from the property \ref dc_date "dc:date" set.
					\sa LiveResource::removeObject
				 */
				void removeDcDate(QDateTime const &dcDate_) { baseRemoveObject< dc::date >(dcDate_); }

				/* Property generated from dc:identifier
				 * \n An unambiguous reference to the resource within a given context.
				 * \n rdfs:label=Identifier
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:modified=1757
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_identifier "dc:identifier" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::identifier >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_identifier "dc:identifier" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::identifier >(object_info, strategy, parent); }
				/*!
					\fn void setDcIdentifiers(LiveNodes const &dcIdentifier_)
					
					
					Sets the property \ref dc_identifier "dc:identifier" set to the given \a dcIdentifier_ set.
					\sa LiveResource::setObjects
				 */
				void setDcIdentifiers(LiveNodes const &dcIdentifier_) { baseSetObjects(dc::identifier::iri(), dcIdentifier_); }
				/*!
					\fn void removeDcIdentifiers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_identifier "dc:identifier" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcIdentifiers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::identifier::iri(), object_info); }
				/*!
					\fn QString getDcIdentifier()
					
					
					Returns the property \ref dc_identifier "dc:identifier". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDcIdentifier() { return baseGetObject< dc::identifier >(); }
				/*!
					\fn void setDcIdentifier(QString const &dcIdentifier_)
					
					
					Sets the property \ref dc_identifier "dc:identifier" to the given \a dcIdentifier.
					\sa LiveResource::setObject
				 */
				void setDcIdentifier(QString const &dcIdentifier_) { baseSetObject< dc::identifier >( dcIdentifier_ ); }
				/*!
					\fn QString firstDcIdentifier()
					
					
					Returns the first property \ref dc_identifier "dc:identifier". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcIdentifier() { return baseFirstObject< dc::identifier >(); }
				/*!
					\fn void addDcIdentifier(QString const &dcIdentifier_)
					
					
					Adds the given \a dcIdentifier_ to the property \ref dc_identifier "dc:identifier" set.
					\sa LiveResource::addObject
				 */
				void addDcIdentifier(QString const &dcIdentifier_) { baseAddObject< dc::identifier >( dcIdentifier_ ); }
				/*!
					\fn void removeDcIdentifier(QString const &dcIdentifier_)
					
					
					Removes the given \a dcIdentifier_ from the property \ref dc_identifier "dc:identifier" set.
					\sa LiveResource::removeObject
				 */
				void removeDcIdentifier(QString const &dcIdentifier_) { baseRemoveObject< dc::identifier >(dcIdentifier_); }

				/* Property generated from dc:description
				 * \n An account of the resource.
				 * \n rdfs:label=Description
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:weight=3
				 * \n tracker:modified=1460
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_description "dc:description" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::description >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_description "dc:description" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::description >(object_info, strategy, parent); }
				/*!
					\fn void setDcDescriptions(LiveNodes const &dcDescription_)
					
					
					Sets the property \ref dc_description "dc:description" set to the given \a dcDescription_ set.
					\sa LiveResource::setObjects
				 */
				void setDcDescriptions(LiveNodes const &dcDescription_) { baseSetObjects(dc::description::iri(), dcDescription_); }
				/*!
					\fn void removeDcDescriptions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_description "dc:description" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcDescriptions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::description::iri(), object_info); }
				/*!
					\fn QString getDcDescription()
					
					
					Returns the property \ref dc_description "dc:description". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDcDescription() { return baseGetObject< dc::description >(); }
				/*!
					\fn void setDcDescription(QString const &dcDescription_)
					
					
					Sets the property \ref dc_description "dc:description" to the given \a dcDescription.
					\sa LiveResource::setObject
				 */
				void setDcDescription(QString const &dcDescription_) { baseSetObject< dc::description >( dcDescription_ ); }
				/*!
					\fn QString firstDcDescription()
					
					
					Returns the first property \ref dc_description "dc:description". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcDescription() { return baseFirstObject< dc::description >(); }
				/*!
					\fn void addDcDescription(QString const &dcDescription_)
					
					
					Adds the given \a dcDescription_ to the property \ref dc_description "dc:description" set.
					\sa LiveResource::addObject
				 */
				void addDcDescription(QString const &dcDescription_) { baseAddObject< dc::description >( dcDescription_ ); }
				/*!
					\fn void removeDcDescription(QString const &dcDescription_)
					
					
					Removes the given \a dcDescription_ from the property \ref dc_description "dc:description" set.
					\sa LiveResource::removeObject
				 */
				void removeDcDescription(QString const &dcDescription_) { baseRemoveObject< dc::description >(dcDescription_); }

				/* Property generated from dc:relation
				 * \n A related resource.
				 * \n rdfs:range=xsd:string
				 * \n rdfs:label=Relation
				 * \n tracker:modified=1312
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcRelations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_relation "dc:relation" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcRelations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::relation >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcRelations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_relation "dc:relation" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcRelations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::relation >(object_info, strategy, parent); }
				/*!
					\fn void setDcRelations(LiveNodes const &dcRelation_)
					
					
					Sets the property \ref dc_relation "dc:relation" set to the given \a dcRelation_ set.
					\sa LiveResource::setObjects
				 */
				void setDcRelations(LiveNodes const &dcRelation_) { baseSetObjects(dc::relation::iri(), dcRelation_); }
				/*!
					\fn void removeDcRelations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_relation "dc:relation" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcRelations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::relation::iri(), object_info); }
				/*!
					\fn QString firstDcRelation()
					
					
					Returns the first property \ref dc_relation "dc:relation". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcRelation() { return baseFirstObject< dc::relation >(); }
				/*!
					\fn void addDcRelation(QString const &dcRelation_)
					
					
					Adds the given \a dcRelation_ to the property \ref dc_relation "dc:relation" set.
					\sa LiveResource::addObject
				 */
				void addDcRelation(QString const &dcRelation_) { baseAddObject< dc::relation >( dcRelation_ ); }
				/*!
					\fn void removeDcRelation(QString const &dcRelation_)
					
					
					Removes the given \a dcRelation_ from the property \ref dc_relation "dc:relation" set.
					\sa LiveResource::removeObject
				 */
				void removeDcRelation(QString const &dcRelation_) { baseRemoveObject< dc::relation >(dcRelation_); }

				/* Property generated from nao:identifier
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1950
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveNaoIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nao_identifier "nao:identifier" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNaoIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nao::identifier >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNaoIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nao_identifier "nao:identifier" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNaoIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nao::identifier >(object_info, strategy, parent); }
				/*!
					\fn void setNaoIdentifiers(LiveNodes const &naoIdentifier_)
					
					
					Sets the property \ref nao_identifier "nao:identifier" set to the given \a naoIdentifier_ set.
					\sa LiveResource::setObjects
				 */
				void setNaoIdentifiers(LiveNodes const &naoIdentifier_) { baseSetObjects(nao::identifier::iri(), naoIdentifier_); }
				/*!
					\fn void removeNaoIdentifiers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nao_identifier "nao:identifier" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNaoIdentifiers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nao::identifier::iri(), object_info); }
				/*!
					\fn QString getNaoIdentifier()
					
					
					Returns the property \ref nao_identifier "nao:identifier". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getNaoIdentifier() { return baseGetObject< nao::identifier >(); }
				/*!
					\fn void setNaoIdentifier(QString const &naoIdentifier_)
					
					
					Sets the property \ref nao_identifier "nao:identifier" to the given \a naoIdentifier.
					\sa LiveResource::setObject
				 */
				void setNaoIdentifier(QString const &naoIdentifier_) { baseSetObject< nao::identifier >( naoIdentifier_ ); }
				/*!
					\fn QString firstNaoIdentifier()
					
					
					Returns the first property \ref nao_identifier "nao:identifier". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstNaoIdentifier() { return baseFirstObject< nao::identifier >(); }
				/*!
					\fn void addNaoIdentifier(QString const &naoIdentifier_)
					
					
					Adds the given \a naoIdentifier_ to the property \ref nao_identifier "nao:identifier" set.
					\sa LiveResource::addObject
				 */
				void addNaoIdentifier(QString const &naoIdentifier_) { baseAddObject< nao::identifier >( naoIdentifier_ ); }
				/*!
					\fn void removeNaoIdentifier(QString const &naoIdentifier_)
					
					
					Removes the given \a naoIdentifier_ from the property \ref nao_identifier "nao:identifier" set.
					\sa LiveResource::removeObject
				 */
				void removeNaoIdentifier(QString const &naoIdentifier_) { baseRemoveObject< nao::identifier >(naoIdentifier_); }

				/* Property generated from rdfs:label
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1720
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveLabels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref rdfs_label "rdfs:label" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLabels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< rdfs::label >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLabels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref rdfs_label "rdfs:label" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLabels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< rdfs::label >(object_info, strategy, parent); }
				/*!
					\fn void setLabels(LiveNodes const &label_)
					
					
					Sets the property \ref rdfs_label "rdfs:label" set to the given \a label_ set.
					\sa LiveResource::setObjects
				 */
				void setLabels(LiveNodes const &label_) { baseSetObjects(rdfs::label::iri(), label_); }
				/*!
					\fn void removeLabels(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref rdfs_label "rdfs:label" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLabels(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(rdfs::label::iri(), object_info); }
				/*!
					\fn QString getLabel()
					
					
					Returns the property \ref rdfs_label "rdfs:label". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getLabel() { return baseGetObject< rdfs::label >(); }
				/*!
					\fn void setLabel(QString const &label_)
					
					
					Sets the property \ref rdfs_label "rdfs:label" to the given \a label.
					\sa LiveResource::setObject
				 */
				void setLabel(QString const &label_) { baseSetObject< rdfs::label >( label_ ); }
				/*!
					\fn QString firstLabel()
					
					
					Returns the first property \ref rdfs_label "rdfs:label". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstLabel() { return baseFirstObject< rdfs::label >(); }
				/*!
					\fn void addLabel(QString const &label_)
					
					
					Adds the given \a label_ to the property \ref rdfs_label "rdfs:label" set.
					\sa LiveResource::addObject
				 */
				void addLabel(QString const &label_) { baseAddObject< rdfs::label >( label_ ); }
				/*!
					\fn void removeLabel(QString const &label_)
					
					
					Removes the given \a label_ from the property \ref rdfs_label "rdfs:label" set.
					\sa LiveResource::removeObject
				 */
				void removeLabel(QString const &label_) { baseRemoveObject< rdfs::label >(label_); }

				/* Property generated from nao:lastModified
				 * \n last modification date
				 * \n rdfs:label=lastModified
				 * \n rdfs:subPropertyOf=dc:date
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:modified=1480
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNaoLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nao_lastModified "nao:lastModified" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNaoLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nao::lastModified >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNaoLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nao_lastModified "nao:lastModified" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNaoLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nao::lastModified >(object_info, strategy, parent); }
				/*!
					\fn void setNaoLastModifieds(LiveNodes const &naoLastModified_)
					
					
					Sets the property \ref nao_lastModified "nao:lastModified" set to the given \a naoLastModified_ set.
					\sa LiveResource::setObjects
				 */
				void setNaoLastModifieds(LiveNodes const &naoLastModified_) { baseSetObjects(nao::lastModified::iri(), naoLastModified_); }
				/*!
					\fn void removeNaoLastModifieds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nao_lastModified "nao:lastModified" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNaoLastModifieds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nao::lastModified::iri(), object_info); }
				/*!
					\fn QDateTime getNaoLastModified()
					
					
					Returns the property \ref nao_lastModified "nao:lastModified". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getNaoLastModified() { return baseGetObject< nao::lastModified >(); }
				/*!
					\fn void setNaoLastModified(QDateTime const &naoLastModified_)
					
					
					Sets the property \ref nao_lastModified "nao:lastModified" to the given \a naoLastModified.
					\sa LiveResource::setObject
				 */
				void setNaoLastModified(QDateTime const &naoLastModified_) { baseSetObject< nao::lastModified >( naoLastModified_ ); }
				/*!
					\fn QDateTime firstNaoLastModified()
					
					
					Returns the first property \ref nao_lastModified "nao:lastModified". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstNaoLastModified() { return baseFirstObject< nao::lastModified >(); }
				/*!
					\fn void addNaoLastModified(QDateTime const &naoLastModified_)
					
					
					Adds the given \a naoLastModified_ to the property \ref nao_lastModified "nao:lastModified" set.
					\sa LiveResource::addObject
				 */
				void addNaoLastModified(QDateTime const &naoLastModified_) { baseAddObject< nao::lastModified >( naoLastModified_ ); }
				/*!
					\fn void removeNaoLastModified(QDateTime const &naoLastModified_)
					
					
					Removes the given \a naoLastModified_ from the property \ref nao_lastModified "nao:lastModified" set.
					\sa LiveResource::removeObject
				 */
				void removeNaoLastModified(QDateTime const &naoLastModified_) { baseRemoveObject< nao::lastModified >(naoLastModified_); }

				/* Property generated from nao:numericRating
				 * \n rdfs:range=xsd:double
				 * \n tracker:modified=1749
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveNaoNumericRatings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nao_numericRating "nao:numericRating" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNaoNumericRatings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nao::numericRating >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNaoNumericRatings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nao_numericRating "nao:numericRating" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNaoNumericRatings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nao::numericRating >(object_info, strategy, parent); }
				/*!
					\fn void setNaoNumericRatings(LiveNodes const &naoNumericRating_)
					
					
					Sets the property \ref nao_numericRating "nao:numericRating" set to the given \a naoNumericRating_ set.
					\sa LiveResource::setObjects
				 */
				void setNaoNumericRatings(LiveNodes const &naoNumericRating_) { baseSetObjects(nao::numericRating::iri(), naoNumericRating_); }
				/*!
					\fn void removeNaoNumericRatings(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nao_numericRating "nao:numericRating" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNaoNumericRatings(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nao::numericRating::iri(), object_info); }
				/*!
					\fn double getNaoNumericRating()
					
					
					Returns the property \ref nao_numericRating "nao:numericRating". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getNaoNumericRating() { return baseGetObject< nao::numericRating >(); }
				/*!
					\fn void setNaoNumericRating(double const &naoNumericRating_)
					
					
					Sets the property \ref nao_numericRating "nao:numericRating" to the given \a naoNumericRating.
					\sa LiveResource::setObject
				 */
				void setNaoNumericRating(double const &naoNumericRating_) { baseSetObject< nao::numericRating >( naoNumericRating_ ); }
				/*!
					\fn double firstNaoNumericRating()
					
					
					Returns the first property \ref nao_numericRating "nao:numericRating". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstNaoNumericRating() { return baseFirstObject< nao::numericRating >(); }
				/*!
					\fn void addNaoNumericRating(double const &naoNumericRating_)
					
					
					Adds the given \a naoNumericRating_ to the property \ref nao_numericRating "nao:numericRating" set.
					\sa LiveResource::addObject
				 */
				void addNaoNumericRating(double const &naoNumericRating_) { baseAddObject< nao::numericRating >( naoNumericRating_ ); }
				/*!
					\fn void removeNaoNumericRating(double const &naoNumericRating_)
					
					
					Removes the given \a naoNumericRating_ from the property \ref nao_numericRating "nao:numericRating" set.
					\sa LiveResource::removeObject
				 */
				void removeNaoNumericRating(double const &naoNumericRating_) { baseRemoveObject< nao::numericRating >(naoNumericRating_); }

				/* Property generated from dc:creator
				 * \n An entity primarily responsible for making the resource.
				 * \n rdfs:label=Creator
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:weight=4
				 * \n tracker:modified=1015
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcCreators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_creator "dc:creator" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcCreators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::creator >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcCreators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_creator "dc:creator" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcCreators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::creator >(object_info, strategy, parent); }
				/*!
					\fn void setDcCreators(LiveNodes const &dcCreator_)
					
					
					Sets the property \ref dc_creator "dc:creator" set to the given \a dcCreator_ set.
					\sa LiveResource::setObjects
				 */
				void setDcCreators(LiveNodes const &dcCreator_) { baseSetObjects(dc::creator::iri(), dcCreator_); }
				/*!
					\fn void removeDcCreators(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_creator "dc:creator" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcCreators(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::creator::iri(), object_info); }
				/*!
					\fn QString getDcCreator()
					
					
					Returns the property \ref dc_creator "dc:creator". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDcCreator() { return baseGetObject< dc::creator >(); }
				/*!
					\fn void setDcCreator(QString const &dcCreator_)
					
					
					Sets the property \ref dc_creator "dc:creator" to the given \a dcCreator.
					\sa LiveResource::setObject
				 */
				void setDcCreator(QString const &dcCreator_) { baseSetObject< dc::creator >( dcCreator_ ); }
				/*!
					\fn QString firstDcCreator()
					
					
					Returns the first property \ref dc_creator "dc:creator". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcCreator() { return baseFirstObject< dc::creator >(); }
				/*!
					\fn void addDcCreator(QString const &dcCreator_)
					
					
					Adds the given \a dcCreator_ to the property \ref dc_creator "dc:creator" set.
					\sa LiveResource::addObject
				 */
				void addDcCreator(QString const &dcCreator_) { baseAddObject< dc::creator >( dcCreator_ ); }
				/*!
					\fn void removeDcCreator(QString const &dcCreator_)
					
					
					Removes the given \a dcCreator_ from the property \ref dc_creator "dc:creator" set.
					\sa LiveResource::removeObject
				 */
				void removeDcCreator(QString const &dcCreator_) { baseRemoveObject< dc::creator >(dcCreator_); }

				/* Property generated from rdfs:comment
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1074
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref rdfs_comment "rdfs:comment" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< rdfs::comment >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref rdfs_comment "rdfs:comment" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< rdfs::comment >(object_info, strategy, parent); }
				/*!
					\fn void setComments(LiveNodes const &comment_)
					
					
					Sets the property \ref rdfs_comment "rdfs:comment" set to the given \a comment_ set.
					\sa LiveResource::setObjects
				 */
				void setComments(LiveNodes const &comment_) { baseSetObjects(rdfs::comment::iri(), comment_); }
				/*!
					\fn void removeComments(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref rdfs_comment "rdfs:comment" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeComments(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(rdfs::comment::iri(), object_info); }
				/*!
					\fn QString getComment()
					
					
					Returns the property \ref rdfs_comment "rdfs:comment". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getComment() { return baseGetObject< rdfs::comment >(); }
				/*!
					\fn void setComment(QString const &comment_)
					
					
					Sets the property \ref rdfs_comment "rdfs:comment" to the given \a comment.
					\sa LiveResource::setObject
				 */
				void setComment(QString const &comment_) { baseSetObject< rdfs::comment >( comment_ ); }
				/*!
					\fn QString firstComment()
					
					
					Returns the first property \ref rdfs_comment "rdfs:comment". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstComment() { return baseFirstObject< rdfs::comment >(); }
				/*!
					\fn void addComment(QString const &comment_)
					
					
					Adds the given \a comment_ to the property \ref rdfs_comment "rdfs:comment" set.
					\sa LiveResource::addObject
				 */
				void addComment(QString const &comment_) { baseAddObject< rdfs::comment >( comment_ ); }
				/*!
					\fn void removeComment(QString const &comment_)
					
					
					Removes the given \a comment_ from the property \ref rdfs_comment "rdfs:comment" set.
					\sa LiveResource::removeObject
				 */
				void removeComment(QString const &comment_) { baseRemoveObject< rdfs::comment >(comment_); }

				/* Property generated from dc:type
				 * \n The nature or genre of the resource.
				 * \n rdfs:label=Type
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:modified=1883
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_type "dc:type" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::type >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_type "dc:type" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::type >(object_info, strategy, parent); }
				/*!
					\fn void setDcTypes(LiveNodes const &dcType_)
					
					
					Sets the property \ref dc_type "dc:type" set to the given \a dcType_ set.
					\sa LiveResource::setObjects
				 */
				void setDcTypes(LiveNodes const &dcType_) { baseSetObjects(dc::type::iri(), dcType_); }
				/*!
					\fn void removeDcTypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_type "dc:type" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcTypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::type::iri(), object_info); }
				/*!
					\fn QString getDcType()
					
					
					Returns the property \ref dc_type "dc:type". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDcType() { return baseGetObject< dc::type >(); }
				/*!
					\fn void setDcType(QString const &dcType_)
					
					
					Sets the property \ref dc_type "dc:type" to the given \a dcType.
					\sa LiveResource::setObject
				 */
				void setDcType(QString const &dcType_) { baseSetObject< dc::type >( dcType_ ); }
				/*!
					\fn QString firstDcType()
					
					
					Returns the first property \ref dc_type "dc:type". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcType() { return baseFirstObject< dc::type >(); }
				/*!
					\fn void addDcType(QString const &dcType_)
					
					
					Adds the given \a dcType_ to the property \ref dc_type "dc:type" set.
					\sa LiveResource::addObject
				 */
				void addDcType(QString const &dcType_) { baseAddObject< dc::type >( dcType_ ); }
				/*!
					\fn void removeDcType(QString const &dcType_)
					
					
					Removes the given \a dcType_ from the property \ref dc_type "dc:type" set.
					\sa LiveResource::removeObject
				 */
				void removeDcType(QString const &dcType_) { baseRemoveObject< dc::type >(dcType_); }

				/* Property generated from nao:isRelated
				 * \n This property defines a symmetric relation between any two resources. In order for this property to be used legally, the relationship must be symmetric.
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:label=Is related
				 * \n tracker:modified=1846
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNaoIsRelateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nao_isRelated "nao:isRelated" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNaoIsRelateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nao::isRelated >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNaoIsRelateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nao_isRelated "nao:isRelated" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNaoIsRelateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nao::isRelated >(object_info, strategy, parent); }
				/*!
					\fn void setNaoIsRelateds(LiveNodes const &naoIsRelated_)
					
					
					Sets the property \ref nao_isRelated "nao:isRelated" set to the given \a naoIsRelated_ set.
					\sa LiveResource::setObjects
				 */
				void setNaoIsRelateds(LiveNodes const &naoIsRelated_) { baseSetObjects(nao::isRelated::iri(), naoIsRelated_); }
				/*!
					\fn void removeNaoIsRelateds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nao_isRelated "nao:isRelated" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNaoIsRelateds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nao::isRelated::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Resource > firstNaoIsRelated()
					
					
					Returns the first property \ref nao_isRelated "nao:isRelated". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Resource > firstNaoIsRelated() { return baseFirstObject< nao::isRelated >(); }
				/*!
					\fn ::SopranoLive::Live< Resource > addNaoIsRelated()
					
					
					Adds a new uniquely named resource to the property \ref nao_isRelated "nao:isRelated" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Resource > addNaoIsRelated() { return baseAddObject< nao::isRelated >(); }
				/*!
					\fn ::SopranoLive::Live< Resource > addNaoIsRelated(::SopranoLive::Live< Resource > const &naoIsRelated_)
					
					
					Adds the given \a naoIsRelated_ to the property \ref nao_isRelated "nao:isRelated" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Resource > addNaoIsRelated(::SopranoLive::Live< Resource > const &naoIsRelated_) { return baseAddObject< nao::isRelated >( naoIsRelated_ ); }
				/*!
					\fn void removeNaoIsRelated(::SopranoLive::Live< Resource > const &naoIsRelated_)
					
					
					Removes the given \a naoIsRelated_ from the property \ref nao_isRelated "nao:isRelated" set.
					\sa LiveResource::removeObject
				 */
				void removeNaoIsRelated(::SopranoLive::Live< Resource > const &naoIsRelated_) { baseRemoveObject< nao::isRelated >(naoIsRelated_); }

				/* Property generated from dc:language
				 * \n A language of the resource.
				 * \n rdfs:label=Language
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:modified=1433
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcLanguages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_language "dc:language" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcLanguages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::language >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcLanguages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_language "dc:language" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcLanguages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::language >(object_info, strategy, parent); }
				/*!
					\fn void setDcLanguages(LiveNodes const &dcLanguage_)
					
					
					Sets the property \ref dc_language "dc:language" set to the given \a dcLanguage_ set.
					\sa LiveResource::setObjects
				 */
				void setDcLanguages(LiveNodes const &dcLanguage_) { baseSetObjects(dc::language::iri(), dcLanguage_); }
				/*!
					\fn void removeDcLanguages(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_language "dc:language" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcLanguages(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::language::iri(), object_info); }
				/*!
					\fn QString getDcLanguage()
					
					
					Returns the property \ref dc_language "dc:language". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDcLanguage() { return baseGetObject< dc::language >(); }
				/*!
					\fn void setDcLanguage(QString const &dcLanguage_)
					
					
					Sets the property \ref dc_language "dc:language" to the given \a dcLanguage.
					\sa LiveResource::setObject
				 */
				void setDcLanguage(QString const &dcLanguage_) { baseSetObject< dc::language >( dcLanguage_ ); }
				/*!
					\fn QString firstDcLanguage()
					
					
					Returns the first property \ref dc_language "dc:language". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcLanguage() { return baseFirstObject< dc::language >(); }
				/*!
					\fn void addDcLanguage(QString const &dcLanguage_)
					
					
					Adds the given \a dcLanguage_ to the property \ref dc_language "dc:language" set.
					\sa LiveResource::addObject
				 */
				void addDcLanguage(QString const &dcLanguage_) { baseAddObject< dc::language >( dcLanguage_ ); }
				/*!
					\fn void removeDcLanguage(QString const &dcLanguage_)
					
					
					Removes the given \a dcLanguage_ from the property \ref dc_language "dc:language" set.
					\sa LiveResource::removeObject
				 */
				void removeDcLanguage(QString const &dcLanguage_) { baseRemoveObject< dc::language >(dcLanguage_); }

				/* Property generated from tracker:modified
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n tracker:isAnnotation=true
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:modified=1980
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTrackerModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_modified "tracker:modified" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::modified >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_modified "tracker:modified" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::modified >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerModifieds(LiveNodes const &trackerModified_)
					
					
					Sets the property \ref tracker_modified "tracker:modified" set to the given \a trackerModified_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerModifieds(LiveNodes const &trackerModified_) { baseSetObjects(tracker::modified::iri(), trackerModified_); }
				/*!
					\fn void removeTrackerModifieds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_modified "tracker:modified" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerModifieds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::modified::iri(), object_info); }
				/*!
					\fn qint64 getTrackerModified()
					
					
					Returns the property \ref tracker_modified "tracker:modified". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getTrackerModified() { return baseGetObject< tracker::modified >(); }
				/*!
					\fn void setTrackerModified(qint64 const &trackerModified_)
					
					
					Sets the property \ref tracker_modified "tracker:modified" to the given \a trackerModified.
					\sa LiveResource::setObject
				 */
				void setTrackerModified(qint64 const &trackerModified_) { baseSetObject< tracker::modified >( trackerModified_ ); }
				/*!
					\fn qint64 firstTrackerModified()
					
					
					Returns the first property \ref tracker_modified "tracker:modified". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstTrackerModified() { return baseFirstObject< tracker::modified >(); }
				/*!
					\fn void addTrackerModified(qint64 const &trackerModified_)
					
					
					Adds the given \a trackerModified_ to the property \ref tracker_modified "tracker:modified" set.
					\sa LiveResource::addObject
				 */
				void addTrackerModified(qint64 const &trackerModified_) { baseAddObject< tracker::modified >( trackerModified_ ); }
				/*!
					\fn void removeTrackerModified(qint64 const &trackerModified_)
					
					
					Removes the given \a trackerModified_ from the property \ref tracker_modified "tracker:modified" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerModified(qint64 const &trackerModified_) { baseRemoveObject< tracker::modified >(trackerModified_); }

				/* Property generated from dc:coverage
				 * \n The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant.
				 * \n rdfs:label=Coverage
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:modified=1569
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcCoverages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_coverage "dc:coverage" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcCoverages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::coverage >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcCoverages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_coverage "dc:coverage" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcCoverages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::coverage >(object_info, strategy, parent); }
				/*!
					\fn void setDcCoverages(LiveNodes const &dcCoverage_)
					
					
					Sets the property \ref dc_coverage "dc:coverage" set to the given \a dcCoverage_ set.
					\sa LiveResource::setObjects
				 */
				void setDcCoverages(LiveNodes const &dcCoverage_) { baseSetObjects(dc::coverage::iri(), dcCoverage_); }
				/*!
					\fn void removeDcCoverages(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_coverage "dc:coverage" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcCoverages(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::coverage::iri(), object_info); }
				/*!
					\fn QString getDcCoverage()
					
					
					Returns the property \ref dc_coverage "dc:coverage". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDcCoverage() { return baseGetObject< dc::coverage >(); }
				/*!
					\fn void setDcCoverage(QString const &dcCoverage_)
					
					
					Sets the property \ref dc_coverage "dc:coverage" to the given \a dcCoverage.
					\sa LiveResource::setObject
				 */
				void setDcCoverage(QString const &dcCoverage_) { baseSetObject< dc::coverage >( dcCoverage_ ); }
				/*!
					\fn QString firstDcCoverage()
					
					
					Returns the first property \ref dc_coverage "dc:coverage". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcCoverage() { return baseFirstObject< dc::coverage >(); }
				/*!
					\fn void addDcCoverage(QString const &dcCoverage_)
					
					
					Adds the given \a dcCoverage_ to the property \ref dc_coverage "dc:coverage" set.
					\sa LiveResource::addObject
				 */
				void addDcCoverage(QString const &dcCoverage_) { baseAddObject< dc::coverage >( dcCoverage_ ); }
				/*!
					\fn void removeDcCoverage(QString const &dcCoverage_)
					
					
					Removes the given \a dcCoverage_ from the property \ref dc_coverage "dc:coverage" set.
					\sa LiveResource::removeObject
				 */
				void removeDcCoverage(QString const &dcCoverage_) { baseRemoveObject< dc::coverage >(dcCoverage_); }

				/* Property generated from dc:subject
				 * \n The topic of the resource.
				 * \n rdfs:label=Subject
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=rdfs:Resource
				 * \n tracker:weight=5
				 * \n tracker:modified=1802
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDcSubjects(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref dc_subject "dc:subject" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDcSubjects(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< dc::subject >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDcSubjects(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref dc_subject "dc:subject" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDcSubjects(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< dc::subject >(object_info, strategy, parent); }
				/*!
					\fn void setDcSubjects(LiveNodes const &dcSubject_)
					
					
					Sets the property \ref dc_subject "dc:subject" set to the given \a dcSubject_ set.
					\sa LiveResource::setObjects
				 */
				void setDcSubjects(LiveNodes const &dcSubject_) { baseSetObjects(dc::subject::iri(), dcSubject_); }
				/*!
					\fn void removeDcSubjects(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref dc_subject "dc:subject" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDcSubjects(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(dc::subject::iri(), object_info); }
				/*!
					\fn QString getDcSubject()
					
					
					Returns the property \ref dc_subject "dc:subject". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDcSubject() { return baseGetObject< dc::subject >(); }
				/*!
					\fn void setDcSubject(QString const &dcSubject_)
					
					
					Sets the property \ref dc_subject "dc:subject" to the given \a dcSubject.
					\sa LiveResource::setObject
				 */
				void setDcSubject(QString const &dcSubject_) { baseSetObject< dc::subject >( dcSubject_ ); }
				/*!
					\fn QString firstDcSubject()
					
					
					Returns the first property \ref dc_subject "dc:subject". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDcSubject() { return baseFirstObject< dc::subject >(); }
				/*!
					\fn void addDcSubject(QString const &dcSubject_)
					
					
					Adds the given \a dcSubject_ to the property \ref dc_subject "dc:subject" set.
					\sa LiveResource::addObject
				 */
				void addDcSubject(QString const &dcSubject_) { baseAddObject< dc::subject >( dcSubject_ ); }
				/*!
					\fn void removeDcSubject(QString const &dcSubject_)
					
					
					Removes the given \a dcSubject_ from the property \ref dc_subject "dc:subject" set.
					\sa LiveResource::removeObject
				 */
				void removeDcSubject(QString const &dcSubject_) { baseRemoveObject< dc::subject >(dcSubject_); }
				 //@}
			};

			/*! Class generated from rdfs:Class
			 * \ingroup onto_rdfs_classes
			 * 
			 * rdfs:label = Class
			 * 
			 * tracker:modified = 1113
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref rdfs_range "rdfs:range"
			 * 		\ref rdfs_subClassOf "rdfs:subClassOf"
			 * 		\ref rdf_type "rdf:type"
			 */
			class Class
				: public virtual Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.w3.org/2000/01/rdf-schema#Class"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_rdfs Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Class> Live;
				Class() { this->attachInterfaceHelper< Class >(); }
				~Class() { this->detachInterfaceHelper< Class >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from tracker:notify
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1714
				 * \n rdfs:domain=rdfs:Class
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveTrackerNotifys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_notify "tracker:notify" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerNotifys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::notify >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerNotifys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_notify "tracker:notify" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerNotifys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::notify >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerNotifys(LiveNodes const &trackerNotify_)
					
					
					Sets the property \ref tracker_notify "tracker:notify" set to the given \a trackerNotify_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerNotifys(LiveNodes const &trackerNotify_) { baseSetObjects(tracker::notify::iri(), trackerNotify_); }
				/*!
					\fn void removeTrackerNotifys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_notify "tracker:notify" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerNotifys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::notify::iri(), object_info); }
				/*!
					\fn bool getTrackerNotify()
					
					
					Returns the property \ref tracker_notify "tracker:notify". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getTrackerNotify() { return baseGetObject< tracker::notify >(); }
				/*!
					\fn void setTrackerNotify(bool const &trackerNotify_)
					
					
					Sets the property \ref tracker_notify "tracker:notify" to the given \a trackerNotify.
					\sa LiveResource::setObject
				 */
				void setTrackerNotify(bool const &trackerNotify_) { baseSetObject< tracker::notify >( trackerNotify_ ); }
				/*!
					\fn bool firstTrackerNotify()
					
					
					Returns the first property \ref tracker_notify "tracker:notify". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstTrackerNotify() { return baseFirstObject< tracker::notify >(); }
				/*!
					\fn void addTrackerNotify(bool const &trackerNotify_)
					
					
					Adds the given \a trackerNotify_ to the property \ref tracker_notify "tracker:notify" set.
					\sa LiveResource::addObject
				 */
				void addTrackerNotify(bool const &trackerNotify_) { baseAddObject< tracker::notify >( trackerNotify_ ); }
				/*!
					\fn void removeTrackerNotify(bool const &trackerNotify_)
					
					
					Removes the given \a trackerNotify_ from the property \ref tracker_notify "tracker:notify" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerNotify(bool const &trackerNotify_) { baseRemoveObject< tracker::notify >(trackerNotify_); }

				/* Property generated from rdfs:subClassOf
				 * \n rdfs:range=rdfs:Class
				 * \n tracker:modified=1469
				 * \n rdfs:domain=rdfs:Class
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSubClassOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref rdfs_subClassOf "rdfs:subClassOf" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSubClassOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< rdfs::subClassOf >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSubClassOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref rdfs_subClassOf "rdfs:subClassOf" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSubClassOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< rdfs::subClassOf >(object_info, strategy, parent); }
				/*!
					\fn void setSubClassOfs(LiveNodes const &subClassOf_)
					
					
					Sets the property \ref rdfs_subClassOf "rdfs:subClassOf" set to the given \a subClassOf_ set.
					\sa LiveResource::setObjects
				 */
				void setSubClassOfs(LiveNodes const &subClassOf_) { baseSetObjects(rdfs::subClassOf::iri(), subClassOf_); }
				/*!
					\fn void removeSubClassOfs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref rdfs_subClassOf "rdfs:subClassOf" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSubClassOfs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(rdfs::subClassOf::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Class > firstSubClassOf()
					
					
					Returns the first property \ref rdfs_subClassOf "rdfs:subClassOf". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Class > firstSubClassOf() { return baseFirstObject< rdfs::subClassOf >(); }
				/*!
					\fn ::SopranoLive::Live< Class > addSubClassOf()
					
					
					Adds a new uniquely named resource to the property \ref rdfs_subClassOf "rdfs:subClassOf" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Class > addSubClassOf() { return baseAddObject< rdfs::subClassOf >(); }
				/*!
					\fn ::SopranoLive::Live< Class > addSubClassOf(::SopranoLive::Live< Class > const &subClassOf_)
					
					
					Adds the given \a subClassOf_ to the property \ref rdfs_subClassOf "rdfs:subClassOf" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Class > addSubClassOf(::SopranoLive::Live< Class > const &subClassOf_) { return baseAddObject< rdfs::subClassOf >( subClassOf_ ); }
				/*!
					\fn void removeSubClassOf(::SopranoLive::Live< Class > const &subClassOf_)
					
					
					Removes the given \a subClassOf_ from the property \ref rdfs_subClassOf "rdfs:subClassOf" set.
					\sa LiveResource::removeObject
				 */
				void removeSubClassOf(::SopranoLive::Live< Class > const &subClassOf_) { baseRemoveObject< rdfs::subClassOf >(subClassOf_); }

				/* Property generated from tracker:domainIndex
				 * \n rdfs:range=rdf:Property
				 * \n tracker:modified=1602
				 * \n rdfs:domain=rdfs:Class
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdf::Property Property;
				/*!
					\fn LiveNodes liveTrackerDomainIndexs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_domainIndex "tracker:domainIndex" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerDomainIndexs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::domainIndex >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerDomainIndexs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_domainIndex "tracker:domainIndex" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerDomainIndexs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::domainIndex >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerDomainIndexs(LiveNodes const &trackerDomainIndex_)
					
					
					Sets the property \ref tracker_domainIndex "tracker:domainIndex" set to the given \a trackerDomainIndex_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerDomainIndexs(LiveNodes const &trackerDomainIndex_) { baseSetObjects(tracker::domainIndex::iri(), trackerDomainIndex_); }
				/*!
					\fn void removeTrackerDomainIndexs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_domainIndex "tracker:domainIndex" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerDomainIndexs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::domainIndex::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdf::Property > firstTrackerDomainIndex()
					
					
					Returns the first property \ref tracker_domainIndex "tracker:domainIndex". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdf::Property > firstTrackerDomainIndex() { return baseFirstObject< tracker::domainIndex >(); }
				/*!
					\fn ::SopranoLive::Live< rdf::Property > addTrackerDomainIndex()
					
					
					Adds a new uniquely named resource to the property \ref tracker_domainIndex "tracker:domainIndex" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdf::Property > addTrackerDomainIndex() { return baseAddObject< tracker::domainIndex >(); }
				/*!
					\fn ::SopranoLive::Live< rdf::Property > addTrackerDomainIndex(::SopranoLive::Live< rdf::Property > const &trackerDomainIndex_)
					
					
					Adds the given \a trackerDomainIndex_ to the property \ref tracker_domainIndex "tracker:domainIndex" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdf::Property > addTrackerDomainIndex(::SopranoLive::Live< rdf::Property > const &trackerDomainIndex_) { return baseAddObject< tracker::domainIndex >( trackerDomainIndex_ ); }
				/*!
					\fn void removeTrackerDomainIndex(::SopranoLive::Live< rdf::Property > const &trackerDomainIndex_)
					
					
					Removes the given \a trackerDomainIndex_ from the property \ref tracker_domainIndex "tracker:domainIndex" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerDomainIndex(::SopranoLive::Live< rdf::Property > const &trackerDomainIndex_) { baseRemoveObject< tracker::domainIndex >(trackerDomainIndex_); }
				 //@}
			};

			/*! Class generated from rdfs:Literal
			 * \ingroup onto_rdfs_classes
			 * 
			 * rdfs:label = Literal
			 * 
			 * tracker:modified = 1995
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Literal
				: public virtual Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.w3.org/2000/01/rdf-schema#Literal"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_rdfs Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Literal> Live;
				Literal() { this->attachInterfaceHelper< Literal >(); }
				~Literal() { this->detachInterfaceHelper< Literal >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::rdfs::Class::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::rdfs::Literal::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::rdfs::Resource::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_RDFS_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_RDFS_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_RDFS_H_POST_INCLUDES
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/dc.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#endif
