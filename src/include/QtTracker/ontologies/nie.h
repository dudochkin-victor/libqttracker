/*
 * nie.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:25.760710
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/nie.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_NIE_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_NIE_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_nie_classes namespace nie class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nie_properties namespace nie property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nie_resources namespace nie resource definitions
		 *  @{
		 *  @}
		 */
		static const char nie_namespace_prefix[] = "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#";
		struct Ontology_nie
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(nie_namespace_prefix) + suffix;
			}
		};
		namespace nie
		{
			inline QUrl iri(QString suffix) { return Ontology_nie::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class DataObject;
			class DataSource;
			class InformationElement;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NIE_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NIE_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NIE_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/slo.h>
#include <QtTracker/ontologies/mlo.h>
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/slo.h>
#include <QtTracker/ontologies/mlo.h>
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/slo.h>
#include <QtTracker/ontologies/mlo.h>
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nie
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from nie:byteSize
			 * \anchor nie_byteSize
			 * \n File size in bytes
			 * \n rdfs:label=Size
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nie:DataObject
			 * \n tracker:modified=1248
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class byteSize
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef DataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef DataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nie:dataSource
			 * \anchor nie_dataSource
			 * \n rdfs:range=nie:DataSource
			 * \n tracker:modified=1813
			 * \n rdfs:domain=nie:DataObject
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n rdfs:subPropertyOf=dc:source
			 */
			/// \ingroup onto_nie_properties
			class dataSource
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#dataSource"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef DataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef DataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef DataSource Range;
				/// The full, non-localized rdf range type of this property
				typedef DataSource RDFRange;
			};
			/*! Property generated from nie:interpretedAs
			 * \anchor nie_interpretedAs
			 * \n rdfs:range=nie:InformationElement
			 * \n tracker:modified=1656
			 * \n rdfs:domain=nie:DataObject
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nie_properties
			class interpretedAs
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#interpretedAs"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef DataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef DataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef InformationElement Range;
				/// The full, non-localized rdf range type of this property
				typedef InformationElement RDFRange;
			};
			/*! Property generated from nie:lastRefreshed
			 * \anchor nie_lastRefreshed
			 * \n rdfs:subPropertyOf=dc:date
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=nie:DataObject
			 * \n tracker:modified=1402
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class lastRefreshed
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastRefreshed"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef DataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef DataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nie:created
			 * \anchor nie_created
			 * \n rdfs:range=xsd:dateTime
			 * \n tracker:modified=1436
			 * \n rdfs:domain=nie:DataObject
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nie_properties
			class created
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef DataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef DataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nie:isPartOf
			 * \anchor nie_isPartOf
			 * \n rdfs:range=nie:InformationElement
			 * \n tracker:weight=2
			 * \n tracker:modified=1537
			 * \n rdfs:domain=nie:DataObject
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class isPartOf
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef DataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef DataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef InformationElement Range;
				/// The full, non-localized rdf range type of this property
				typedef InformationElement RDFRange;
			};
			/*! Property generated from nie:url
			 * \anchor nie_url
			 * \n URL pointing at the location of the resource. In cases where creating a simple file:// or http:// URL for a file is difficult (e.g. for files inside compressed archives) the applications are encouraged to use conventions defined by Apache Commons VFS Project at http://jakarta.apache.org/  commons/ vfs/ filesystems.html.
			 * \n rdfs:label=URL
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:DataObject
			 * \n tracker:indexed=true
			 * \n tracker:modified=1935
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class url
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#url"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef DataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef DataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:title
			 * \anchor nie_title
			 * \n The title of the document
			 * \n rdfs:label=Title
			 * \n rdfs:subPropertyOf=dc:title
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:writeback=true
			 * \n tracker:weight=10
			 * \n tracker:modified=1317
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n tracker:fulltextNoLimit=true
			 */
			/// \ingroup onto_nie_properties
			class title
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:subject
			 * \anchor nie_subject
			 * \n The subject or topic of the document
			 * \n rdfs:label=Subject
			 * \n rdfs:subPropertyOf=dc:subject
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:weight=5
			 * \n tracker:modified=1376
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n tracker:fulltextNoLimit=true
			 */
			/// \ingroup onto_nie_properties
			class subject
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:mimeType
			 * \anchor nie_mimeType
			 * \n File Mime Type
			 * \n rdfs:label=Mime Type
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1647
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class mimeType
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:language
			 * \anchor nie_language
			 * \n Language the InformationElement is expressed in. Users are encouraged to use the two-letter code specified in the RFC 3066
			 * \n rdfs:label=Language
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1051
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class language
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:plainTextContent
			 * \anchor nie_plainTextContent
			 * \n Plain-text representation of the content of a InformationElement with all markup removed. The main purpose of this property is full-text indexing and search. Its exact content is considered application-specific. The user can make no assumptions about what is and what is not contained within. Applications should use more specific properties wherever possible.
			 * \n rdfs:label=Plain-text content
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:weight=2
			 * \n tracker:modified=1619
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class plainTextContent
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:informationElementDate
			 * \anchor nie_informationElementDate
			 * \n rdfs:range=xsd:dateTime
			 * \n tracker:modified=1977
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n rdfs:subPropertyOf=dc:date
			 */
			/// \ingroup onto_nie_properties
			class informationElementDate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#informationElementDate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nie:legal
			 * \anchor nie_legal
			 * \n A common superproperty for all properties that point at legal information about an Information Element
			 * \n rdfs:subPropertyOf=dc:rights
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1115
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class legal
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:relatedTo
			 * \anchor nie_relatedTo
			 * \n A common superproperty for all relations between a piece of content and other pieces of data (which may be interpreted as other pieces of content).
			 * \n rdfs:range=nie:DataObject
			 * \n tracker:modified=1939
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n rdfs:subPropertyOf=dc:relation
			 */
			/// \ingroup onto_nie_properties
			class relatedTo
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef DataObject RDFRange;
			};
			/*! Property generated from nie:generator
			 * \anchor nie_generator
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1519
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nie_properties
			class generator
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:description
			 * \anchor nie_description
			 * \n rdfs:subPropertyOf=dc:description
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:writeback=true
			 * \n tracker:weight=3
			 * \n tracker:modified=1187
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class description
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:disclaimer
			 * \anchor nie_disclaimer
			 * \n rdfs:subPropertyOf=nie:legal
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1375
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class disclaimer
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#disclaimer"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:depends
			 * \anchor nie_depends
			 * \n rdfs:subPropertyOf=nie:relatedTo
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1295
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class depends
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#depends"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef DataObject RDFRange;
			};
			/*! Property generated from nie:links
			 * \anchor nie_links
			 * \n A linking relation. A piece of content links/mentions a piece of data
			 * \n rdfs:subPropertyOf=nie:relatedTo
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1018
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class links
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef DataObject RDFRange;
			};
			/*! Property generated from nie:copyright
			 * \anchor nie_copyright
			 * \n rdfs:subPropertyOf=nie:legal
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:writeback=true
			 * \n tracker:modified=1396
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class copyright
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#copyright"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:comment
			 * \anchor nie_comment
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:weight=2
			 * \n tracker:modified=1894
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class comment
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:isStoredAs
			 * \anchor nie_isStoredAs
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:range=nie:DataObject
			 * \n tracker:modified=1801
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nie_properties
			class isStoredAs
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef DataObject RDFRange;
			};
			/*! Property generated from nie:contentLastModified
			 * \anchor nie_contentLastModified
			 * \n rdfs:subPropertyOf=nie:informationElementDate
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1020
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class contentLastModified
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentLastModified"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nie:version
			 * \anchor nie_version
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1842
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nie_properties
			class version
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:contentCreated
			 * \anchor nie_contentCreated
			 * \n rdfs:subPropertyOf=nie:informationElementDate
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:writeback=true
			 * \n tracker:modified=1429
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class contentCreated
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nie:contentAccessed
			 * \anchor nie_contentAccessed
			 * \n rdfs:subPropertyOf=nie:informationElementDate
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1578
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class contentAccessed
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentAccessed"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nie:license
			 * \anchor nie_license
			 * \n Terms and intellectual property rights licensing conditions.
			 * \n rdfs:subPropertyOf=nie:legal
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1400
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class license
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#license"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:identifier
			 * \anchor nie_identifier
			 * \n rdfs:subPropertyOf=dc:identifier
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1283
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class identifier
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:keyword
			 * \anchor nie_keyword
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:writeback=true
			 * \n tracker:weight=5
			 * \n tracker:modified=1929
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class keyword
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:hasLogicalPart
			 * \anchor nie_hasLogicalPart
			 * \n rdfs:range=nie:InformationElement
			 * \n tracker:weight=2
			 * \n tracker:modified=1958
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class hasLogicalPart
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef InformationElement Range;
				/// The full, non-localized rdf range type of this property
				typedef InformationElement RDFRange;
			};
			/*! Property generated from nie:hasPart
			 * \anchor nie_hasPart
			 * \n rdfs:subPropertyOf=nie:relatedTo
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:weight=2
			 * \n tracker:modified=1302
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class hasPart
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef DataObject RDFRange;
			};
			/*! Property generated from nie:licenseType
			 * \anchor nie_licenseType
			 * \n rdfs:subPropertyOf=nie:legal
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1777
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class licenseType
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#licenseType"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:characterSet
			 * \anchor nie_characterSet
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1563
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nie_properties
			class characterSet
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nie:isLogicalPartOf
			 * \anchor nie_isLogicalPartOf
			 * \n rdfs:range=nie:InformationElement
			 * \n tracker:weight=2
			 * \n tracker:modified=1663
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class isLogicalPartOf
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef InformationElement Range;
				/// The full, non-localized rdf range type of this property
				typedef InformationElement RDFRange;
			};
			/*! Property generated from nie:contentSize
			 * \anchor nie_contentSize
			 * \n rdfs:range=xsd:integer
			 * \n tracker:modified=1257
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nie_properties
			class contentSize
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nie:rootElementOf
			 * \anchor nie_rootElementOf
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nie:DataSource
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:weight=2
			 * \n tracker:modified=1385
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class rootElementOf
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef DataSource Range;
				/// The full, non-localized rdf range type of this property
				typedef DataSource RDFRange;
			};
			/*! Property generated from nie:usageCounter
			 * \anchor nie_usageCounter
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n tracker:isAnnotation=true
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:weight=3
			 * \n tracker:modified=1359
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nie_properties
			class usageCounter
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#usageCounter"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nie Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NIE_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NIE_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NIE_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/slo.h>
#include <QtTracker/ontologies/mlo.h>
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/slo.h>
#include <QtTracker/ontologies/mlo.h>
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nie
		{

			using namespace rdf;
			using namespace nfo;
			using namespace rdfs;
			using namespace nao;
			using namespace slo;
			using namespace xsd;
			using namespace nco;
			using namespace mlo;

			/*! Class generated from nie:DataObject
			 * \ingroup onto_nie_classes
			 * A unit of data that is created, annotated and processed on the user desktop. It represents a native structure the user works with. The usage of the term 'native'	is important. It means that a DataObject can be directly mapped to a data structure maintained by a native application.	This may be a file, a set of files or a part of a file. The granularity depends on the user. This class is not intended to be instantiated by itself. Use more specific subclasses.
			 * 
			 * rdfs:label = Data Object
			 * 
			 * tracker:modified = 1012
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nie_isStoredAs "nie:isStoredAs"
			 * 		\ref nie_hasPart "nie:hasPart"
			 * 		\ref nie_links "nie:links"
			 * 		\ref nie_relatedTo "nie:relatedTo"
			 * 		\ref nie_depends "nie:depends"
			 */
			class DataObject
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#DataObject"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nie Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<DataObject> Live;
				DataObject() { this->attachInterfaceHelper< DataObject >(); }
				~DataObject() { this->detachInterfaceHelper< DataObject >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nie:interpretedAs
				 * \n rdfs:range=nie:InformationElement
				 * \n tracker:modified=1656
				 * \n rdfs:domain=nie:DataObject
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveInterpretedAss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_interpretedAs "nie:interpretedAs" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveInterpretedAss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::interpretedAs >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getInterpretedAss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_interpretedAs "nie:interpretedAs" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getInterpretedAss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::interpretedAs >(object_info, strategy, parent); }
				/*!
					\fn void setInterpretedAss(LiveNodes const &interpretedAs_)
					
					
					Sets the property \ref nie_interpretedAs "nie:interpretedAs" set to the given \a interpretedAs_ set.
					\sa LiveResource::setObjects
				 */
				void setInterpretedAss(LiveNodes const &interpretedAs_) { baseSetObjects(nie::interpretedAs::iri(), interpretedAs_); }
				/*!
					\fn void removeInterpretedAss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_interpretedAs "nie:interpretedAs" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeInterpretedAss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::interpretedAs::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > getInterpretedAs()
					
					
					Returns the property \ref nie_interpretedAs "nie:interpretedAs". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< InformationElement > getInterpretedAs() { return baseGetObject< nie::interpretedAs >(); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > setInterpretedAs(::SopranoLive::Live< InformationElement > const &interpretedAs_)
					
					
					Sets the property \ref nie_interpretedAs "nie:interpretedAs" to the given \a interpretedAs.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< InformationElement > setInterpretedAs(::SopranoLive::Live< InformationElement > const &interpretedAs_) { return baseSetObject< nie::interpretedAs >( interpretedAs_ ); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > firstInterpretedAs()
					
					
					Returns the first property \ref nie_interpretedAs "nie:interpretedAs". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< InformationElement > firstInterpretedAs() { return baseFirstObject< nie::interpretedAs >(); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > addInterpretedAs()
					
					
					Adds a new uniquely named resource to the property \ref nie_interpretedAs "nie:interpretedAs" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< InformationElement > addInterpretedAs() { return baseAddObject< nie::interpretedAs >(); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > addInterpretedAs(::SopranoLive::Live< InformationElement > const &interpretedAs_)
					
					
					Adds the given \a interpretedAs_ to the property \ref nie_interpretedAs "nie:interpretedAs" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< InformationElement > addInterpretedAs(::SopranoLive::Live< InformationElement > const &interpretedAs_) { return baseAddObject< nie::interpretedAs >( interpretedAs_ ); }
				/*!
					\fn void removeInterpretedAs(::SopranoLive::Live< InformationElement > const &interpretedAs_)
					
					
					Removes the given \a interpretedAs_ from the property \ref nie_interpretedAs "nie:interpretedAs" set.
					\sa LiveResource::removeObject
				 */
				void removeInterpretedAs(::SopranoLive::Live< InformationElement > const &interpretedAs_) { baseRemoveObject< nie::interpretedAs >(interpretedAs_); }

				/* Property generated from nie:lastRefreshed
				 * \n rdfs:subPropertyOf=dc:date
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=nie:DataObject
				 * \n tracker:modified=1402
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLastRefresheds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_lastRefreshed "nie:lastRefreshed" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLastRefresheds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::lastRefreshed >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLastRefresheds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_lastRefreshed "nie:lastRefreshed" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLastRefresheds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::lastRefreshed >(object_info, strategy, parent); }
				/*!
					\fn void setLastRefresheds(LiveNodes const &lastRefreshed_)
					
					
					Sets the property \ref nie_lastRefreshed "nie:lastRefreshed" set to the given \a lastRefreshed_ set.
					\sa LiveResource::setObjects
				 */
				void setLastRefresheds(LiveNodes const &lastRefreshed_) { baseSetObjects(nie::lastRefreshed::iri(), lastRefreshed_); }
				/*!
					\fn void removeLastRefresheds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_lastRefreshed "nie:lastRefreshed" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLastRefresheds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::lastRefreshed::iri(), object_info); }
				/*!
					\fn QDateTime getLastRefreshed()
					
					
					Returns the property \ref nie_lastRefreshed "nie:lastRefreshed". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getLastRefreshed() { return baseGetObject< nie::lastRefreshed >(); }
				/*!
					\fn void setLastRefreshed(QDateTime const &lastRefreshed_)
					
					
					Sets the property \ref nie_lastRefreshed "nie:lastRefreshed" to the given \a lastRefreshed.
					\sa LiveResource::setObject
				 */
				void setLastRefreshed(QDateTime const &lastRefreshed_) { baseSetObject< nie::lastRefreshed >( lastRefreshed_ ); }
				/*!
					\fn QDateTime firstLastRefreshed()
					
					
					Returns the first property \ref nie_lastRefreshed "nie:lastRefreshed". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstLastRefreshed() { return baseFirstObject< nie::lastRefreshed >(); }
				/*!
					\fn void addLastRefreshed(QDateTime const &lastRefreshed_)
					
					
					Adds the given \a lastRefreshed_ to the property \ref nie_lastRefreshed "nie:lastRefreshed" set.
					\sa LiveResource::addObject
				 */
				void addLastRefreshed(QDateTime const &lastRefreshed_) { baseAddObject< nie::lastRefreshed >( lastRefreshed_ ); }
				/*!
					\fn void removeLastRefreshed(QDateTime const &lastRefreshed_)
					
					
					Removes the given \a lastRefreshed_ from the property \ref nie_lastRefreshed "nie:lastRefreshed" set.
					\sa LiveResource::removeObject
				 */
				void removeLastRefreshed(QDateTime const &lastRefreshed_) { baseRemoveObject< nie::lastRefreshed >(lastRefreshed_); }

				/* Property generated from tracker:available
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1183
				 * \n rdfs:domain=nie:DataObject
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveTrackerAvailables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_available "tracker:available" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerAvailables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::available >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerAvailables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_available "tracker:available" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerAvailables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::available >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerAvailables(LiveNodes const &trackerAvailable_)
					
					
					Sets the property \ref tracker_available "tracker:available" set to the given \a trackerAvailable_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerAvailables(LiveNodes const &trackerAvailable_) { baseSetObjects(tracker::available::iri(), trackerAvailable_); }
				/*!
					\fn void removeTrackerAvailables(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_available "tracker:available" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerAvailables(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::available::iri(), object_info); }
				/*!
					\fn bool getTrackerAvailable()
					
					
					Returns the property \ref tracker_available "tracker:available". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getTrackerAvailable() { return baseGetObject< tracker::available >(); }
				/*!
					\fn void setTrackerAvailable(bool const &trackerAvailable_)
					
					
					Sets the property \ref tracker_available "tracker:available" to the given \a trackerAvailable.
					\sa LiveResource::setObject
				 */
				void setTrackerAvailable(bool const &trackerAvailable_) { baseSetObject< tracker::available >( trackerAvailable_ ); }
				/*!
					\fn bool firstTrackerAvailable()
					
					
					Returns the first property \ref tracker_available "tracker:available". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstTrackerAvailable() { return baseFirstObject< tracker::available >(); }
				/*!
					\fn void addTrackerAvailable(bool const &trackerAvailable_)
					
					
					Adds the given \a trackerAvailable_ to the property \ref tracker_available "tracker:available" set.
					\sa LiveResource::addObject
				 */
				void addTrackerAvailable(bool const &trackerAvailable_) { baseAddObject< tracker::available >( trackerAvailable_ ); }
				/*!
					\fn void removeTrackerAvailable(bool const &trackerAvailable_)
					
					
					Removes the given \a trackerAvailable_ from the property \ref tracker_available "tracker:available" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerAvailable(bool const &trackerAvailable_) { baseRemoveObject< tracker::available >(trackerAvailable_); }

				/* Property generated from nie:byteSize
				 * \n File size in bytes
				 * \n rdfs:label=Size
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nie:DataObject
				 * \n tracker:modified=1248
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveByteSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_byteSize "nie:byteSize" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveByteSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::byteSize >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getByteSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_byteSize "nie:byteSize" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getByteSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::byteSize >(object_info, strategy, parent); }
				/*!
					\fn void setByteSizes(LiveNodes const &byteSize_)
					
					
					Sets the property \ref nie_byteSize "nie:byteSize" set to the given \a byteSize_ set.
					\sa LiveResource::setObjects
				 */
				void setByteSizes(LiveNodes const &byteSize_) { baseSetObjects(nie::byteSize::iri(), byteSize_); }
				/*!
					\fn void removeByteSizes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_byteSize "nie:byteSize" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeByteSizes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::byteSize::iri(), object_info); }
				/*!
					\fn qint64 getByteSize()
					
					
					Returns the property \ref nie_byteSize "nie:byteSize". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getByteSize() { return baseGetObject< nie::byteSize >(); }
				/*!
					\fn void setByteSize(qint64 const &byteSize_)
					
					
					Sets the property \ref nie_byteSize "nie:byteSize" to the given \a byteSize.
					\sa LiveResource::setObject
				 */
				void setByteSize(qint64 const &byteSize_) { baseSetObject< nie::byteSize >( byteSize_ ); }
				/*!
					\fn qint64 firstByteSize()
					
					
					Returns the first property \ref nie_byteSize "nie:byteSize". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstByteSize() { return baseFirstObject< nie::byteSize >(); }
				/*!
					\fn void addByteSize(qint64 const &byteSize_)
					
					
					Adds the given \a byteSize_ to the property \ref nie_byteSize "nie:byteSize" set.
					\sa LiveResource::addObject
				 */
				void addByteSize(qint64 const &byteSize_) { baseAddObject< nie::byteSize >( byteSize_ ); }
				/*!
					\fn void removeByteSize(qint64 const &byteSize_)
					
					
					Removes the given \a byteSize_ from the property \ref nie_byteSize "nie:byteSize" set.
					\sa LiveResource::removeObject
				 */
				void removeByteSize(qint64 const &byteSize_) { baseRemoveObject< nie::byteSize >(byteSize_); }

				/* Property generated from nie:url
				 * \n URL pointing at the location of the resource. In cases where creating a simple file:// or http:// URL for a file is difficult (e.g. for files inside compressed archives) the applications are encouraged to use conventions defined by Apache Commons VFS Project at http://jakarta.apache.org/  commons/ vfs/ filesystems.html.
				 * \n rdfs:label=URL
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:DataObject
				 * \n tracker:indexed=true
				 * \n tracker:modified=1935
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_url "nie:url" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::url >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_url "nie:url" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::url >(object_info, strategy, parent); }
				/*!
					\fn void setUrls(LiveNodes const &url_)
					
					
					Sets the property \ref nie_url "nie:url" set to the given \a url_ set.
					\sa LiveResource::setObjects
				 */
				void setUrls(LiveNodes const &url_) { baseSetObjects(nie::url::iri(), url_); }
				/*!
					\fn void removeUrls(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_url "nie:url" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeUrls(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::url::iri(), object_info); }
				/*!
					\fn QString getUrl()
					
					
					Returns the property \ref nie_url "nie:url". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getUrl() { return baseGetObject< nie::url >(); }
				/*!
					\fn void setUrl(QString const &url_)
					
					
					Sets the property \ref nie_url "nie:url" to the given \a url.
					\sa LiveResource::setObject
				 */
				void setUrl(QString const &url_) { baseSetObject< nie::url >( url_ ); }
				/*!
					\fn QString firstUrl()
					
					
					Returns the first property \ref nie_url "nie:url". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstUrl() { return baseFirstObject< nie::url >(); }
				/*!
					\fn void addUrl(QString const &url_)
					
					
					Adds the given \a url_ to the property \ref nie_url "nie:url" set.
					\sa LiveResource::addObject
				 */
				void addUrl(QString const &url_) { baseAddObject< nie::url >( url_ ); }
				/*!
					\fn void removeUrl(QString const &url_)
					
					
					Removes the given \a url_ from the property \ref nie_url "nie:url" set.
					\sa LiveResource::removeObject
				 */
				void removeUrl(QString const &url_) { baseRemoveObject< nie::url >(url_); }

				/* Property generated from nfo:belongsToContainer
				 * \n Models the containment relations between Files and Folders (or CompressedFiles).
				 * \n rdfs:label=belongsToContainer
				 * \n rdfs:subPropertyOf=nie:isPartOf
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:DataContainer
				 * \n rdfs:domain=nie:DataObject
				 * \n tracker:modified=1904
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nfo::DataContainer DataContainer;
				/*!
					\fn LiveNodes liveNfoBelongsToContainers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_belongsToContainer "nfo:belongsToContainer" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNfoBelongsToContainers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::belongsToContainer >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNfoBelongsToContainers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_belongsToContainer "nfo:belongsToContainer" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNfoBelongsToContainers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::belongsToContainer >(object_info, strategy, parent); }
				/*!
					\fn void setNfoBelongsToContainers(LiveNodes const &nfoBelongsToContainer_)
					
					
					Sets the property \ref nfo_belongsToContainer "nfo:belongsToContainer" set to the given \a nfoBelongsToContainer_ set.
					\sa LiveResource::setObjects
				 */
				void setNfoBelongsToContainers(LiveNodes const &nfoBelongsToContainer_) { baseSetObjects(nfo::belongsToContainer::iri(), nfoBelongsToContainer_); }
				/*!
					\fn void removeNfoBelongsToContainers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_belongsToContainer "nfo:belongsToContainer" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNfoBelongsToContainers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::belongsToContainer::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::DataContainer > getNfoBelongsToContainer()
					
					
					Returns the property \ref nfo_belongsToContainer "nfo:belongsToContainer". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::DataContainer > getNfoBelongsToContainer() { return baseGetObject< nfo::belongsToContainer >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::DataContainer > setNfoBelongsToContainer(::SopranoLive::Live< nfo::DataContainer > const &nfoBelongsToContainer_)
					
					
					Sets the property \ref nfo_belongsToContainer "nfo:belongsToContainer" to the given \a nfoBelongsToContainer.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::DataContainer > setNfoBelongsToContainer(::SopranoLive::Live< nfo::DataContainer > const &nfoBelongsToContainer_) { return baseSetObject< nfo::belongsToContainer >( nfoBelongsToContainer_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::DataContainer > firstNfoBelongsToContainer()
					
					
					Returns the first property \ref nfo_belongsToContainer "nfo:belongsToContainer". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::DataContainer > firstNfoBelongsToContainer() { return baseFirstObject< nfo::belongsToContainer >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::DataContainer > addNfoBelongsToContainer()
					
					
					Adds a new uniquely named resource to the property \ref nfo_belongsToContainer "nfo:belongsToContainer" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::DataContainer > addNfoBelongsToContainer() { return baseAddObject< nfo::belongsToContainer >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::DataContainer > addNfoBelongsToContainer(::SopranoLive::Live< nfo::DataContainer > const &nfoBelongsToContainer_)
					
					
					Adds the given \a nfoBelongsToContainer_ to the property \ref nfo_belongsToContainer "nfo:belongsToContainer" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::DataContainer > addNfoBelongsToContainer(::SopranoLive::Live< nfo::DataContainer > const &nfoBelongsToContainer_) { return baseAddObject< nfo::belongsToContainer >( nfoBelongsToContainer_ ); }
				/*!
					\fn void removeNfoBelongsToContainer(::SopranoLive::Live< nfo::DataContainer > const &nfoBelongsToContainer_)
					
					
					Removes the given \a nfoBelongsToContainer_ from the property \ref nfo_belongsToContainer "nfo:belongsToContainer" set.
					\sa LiveResource::removeObject
				 */
				void removeNfoBelongsToContainer(::SopranoLive::Live< nfo::DataContainer > const &nfoBelongsToContainer_) { baseRemoveObject< nfo::belongsToContainer >(nfoBelongsToContainer_); }

				/* Property generated from nie:created
				 * \n rdfs:range=xsd:dateTime
				 * \n tracker:modified=1436
				 * \n rdfs:domain=nie:DataObject
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_created "nie:created" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::created >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_created "nie:created" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::created >(object_info, strategy, parent); }
				/*!
					\fn void setCreateds(LiveNodes const &created_)
					
					
					Sets the property \ref nie_created "nie:created" set to the given \a created_ set.
					\sa LiveResource::setObjects
				 */
				void setCreateds(LiveNodes const &created_) { baseSetObjects(nie::created::iri(), created_); }
				/*!
					\fn void removeCreateds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_created "nie:created" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCreateds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::created::iri(), object_info); }
				/*!
					\fn QDateTime getCreated()
					
					
					Returns the property \ref nie_created "nie:created". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getCreated() { return baseGetObject< nie::created >(); }
				/*!
					\fn void setCreated(QDateTime const &created_)
					
					
					Sets the property \ref nie_created "nie:created" to the given \a created.
					\sa LiveResource::setObject
				 */
				void setCreated(QDateTime const &created_) { baseSetObject< nie::created >( created_ ); }
				/*!
					\fn QDateTime firstCreated()
					
					
					Returns the first property \ref nie_created "nie:created". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstCreated() { return baseFirstObject< nie::created >(); }
				/*!
					\fn void addCreated(QDateTime const &created_)
					
					
					Adds the given \a created_ to the property \ref nie_created "nie:created" set.
					\sa LiveResource::addObject
				 */
				void addCreated(QDateTime const &created_) { baseAddObject< nie::created >( created_ ); }
				/*!
					\fn void removeCreated(QDateTime const &created_)
					
					
					Removes the given \a created_ from the property \ref nie_created "nie:created" set.
					\sa LiveResource::removeObject
				 */
				void removeCreated(QDateTime const &created_) { baseRemoveObject< nie::created >(created_); }

				/* Property generated from nie:dataSource
				 * \n rdfs:range=nie:DataSource
				 * \n tracker:modified=1813
				 * \n rdfs:domain=nie:DataObject
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n rdfs:subPropertyOf=dc:source
				 */
				/*!
					\fn LiveNodes liveDataSources(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_dataSource "nie:dataSource" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDataSources(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::dataSource >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDataSources(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_dataSource "nie:dataSource" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDataSources(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::dataSource >(object_info, strategy, parent); }
				/*!
					\fn void setDataSources(LiveNodes const &dataSource_)
					
					
					Sets the property \ref nie_dataSource "nie:dataSource" set to the given \a dataSource_ set.
					\sa LiveResource::setObjects
				 */
				void setDataSources(LiveNodes const &dataSource_) { baseSetObjects(nie::dataSource::iri(), dataSource_); }
				/*!
					\fn void removeDataSources(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_dataSource "nie:dataSource" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDataSources(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::dataSource::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< DataSource > firstDataSource()
					
					
					Returns the first property \ref nie_dataSource "nie:dataSource". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< DataSource > firstDataSource() { return baseFirstObject< nie::dataSource >(); }
				/*!
					\fn ::SopranoLive::Live< DataSource > addDataSource()
					
					
					Adds a new uniquely named resource to the property \ref nie_dataSource "nie:dataSource" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DataSource > addDataSource() { return baseAddObject< nie::dataSource >(); }
				/*!
					\fn ::SopranoLive::Live< DataSource > addDataSource(::SopranoLive::Live< DataSource > const &dataSource_)
					
					
					Adds the given \a dataSource_ to the property \ref nie_dataSource "nie:dataSource" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DataSource > addDataSource(::SopranoLive::Live< DataSource > const &dataSource_) { return baseAddObject< nie::dataSource >( dataSource_ ); }
				/*!
					\fn void removeDataSource(::SopranoLive::Live< DataSource > const &dataSource_)
					
					
					Removes the given \a dataSource_ from the property \ref nie_dataSource "nie:dataSource" set.
					\sa LiveResource::removeObject
				 */
				void removeDataSource(::SopranoLive::Live< DataSource > const &dataSource_) { baseRemoveObject< nie::dataSource >(dataSource_); }

				/* Property generated from nie:isPartOf
				 * \n rdfs:range=nie:InformationElement
				 * \n tracker:weight=2
				 * \n tracker:modified=1537
				 * \n rdfs:domain=nie:DataObject
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveIsPartOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_isPartOf "nie:isPartOf" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsPartOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::isPartOf >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsPartOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_isPartOf "nie:isPartOf" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsPartOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::isPartOf >(object_info, strategy, parent); }
				/*!
					\fn void setIsPartOfs(LiveNodes const &isPartOf_)
					
					
					Sets the property \ref nie_isPartOf "nie:isPartOf" set to the given \a isPartOf_ set.
					\sa LiveResource::setObjects
				 */
				void setIsPartOfs(LiveNodes const &isPartOf_) { baseSetObjects(nie::isPartOf::iri(), isPartOf_); }
				/*!
					\fn void removeIsPartOfs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_isPartOf "nie:isPartOf" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsPartOfs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::isPartOf::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > firstIsPartOf()
					
					
					Returns the first property \ref nie_isPartOf "nie:isPartOf". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< InformationElement > firstIsPartOf() { return baseFirstObject< nie::isPartOf >(); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > addIsPartOf()
					
					
					Adds a new uniquely named resource to the property \ref nie_isPartOf "nie:isPartOf" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< InformationElement > addIsPartOf() { return baseAddObject< nie::isPartOf >(); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > addIsPartOf(::SopranoLive::Live< InformationElement > const &isPartOf_)
					
					
					Adds the given \a isPartOf_ to the property \ref nie_isPartOf "nie:isPartOf" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< InformationElement > addIsPartOf(::SopranoLive::Live< InformationElement > const &isPartOf_) { return baseAddObject< nie::isPartOf >( isPartOf_ ); }
				/*!
					\fn void removeIsPartOf(::SopranoLive::Live< InformationElement > const &isPartOf_)
					
					
					Removes the given \a isPartOf_ from the property \ref nie_isPartOf "nie:isPartOf" set.
					\sa LiveResource::removeObject
				 */
				void removeIsPartOf(::SopranoLive::Live< InformationElement > const &isPartOf_) { baseRemoveObject< nie::isPartOf >(isPartOf_); }
				 //@}
			};

			/*! Class generated from nie:DataSource
			 * \ingroup onto_nie_classes
			 * A superclass for all entities from which DataObjects can be extracted. Each entity represents a native application or some other system that manages information that may be of interest to the user of the Semantic Desktop. Subclasses may include FileSystems, Mailboxes, Calendars, websites etc. The exact choice of subclasses and their properties is considered application-specific. Each data extraction application is supposed to provide it's own DataSource ontology. Such an ontology should contain supported data source types coupled with properties necessary for the application to gain access to the data sources. (paths, urls, passwords etc...)
			 * 
			 * rdfs:label = Data Source
			 * 
			 * tracker:modified = 1032
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nie_rootElementOf "nie:rootElementOf"
			 * 		\ref nie_dataSource "nie:dataSource"
			 */
			class DataSource
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#DataSource"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nie Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<DataSource> Live;
				DataSource() { this->attachInterfaceHelper< DataSource >(); }
				~DataSource() { this->detachInterfaceHelper< DataSource >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nie:InformationElement
			 * \ingroup onto_nie_classes
			 * A unit of content the user works with. This is a superclass for all interpretations of a DataObject.
			 * 
			 * rdfs:label = Information Element
			 * 
			 * tracker:modified = 1453
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nie_interpretedAs "nie:interpretedAs"
			 * 		\ref nie_isLogicalPartOf "nie:isLogicalPartOf"
			 * 		\ref nie_hasLogicalPart "nie:hasLogicalPart"
			 * 		\ref nie_isPartOf "nie:isPartOf"
			 */
			class InformationElement
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nie Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<InformationElement> Live;
				InformationElement() { this->attachInterfaceHelper< InformationElement >(); }
				~InformationElement() { this->detachInterfaceHelper< InformationElement >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nie:contentSize
				 * \n rdfs:range=xsd:integer
				 * \n tracker:modified=1257
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveContentSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_contentSize "nie:contentSize" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContentSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::contentSize >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContentSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_contentSize "nie:contentSize" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContentSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::contentSize >(object_info, strategy, parent); }
				/*!
					\fn void setContentSizes(LiveNodes const &contentSize_)
					
					
					Sets the property \ref nie_contentSize "nie:contentSize" set to the given \a contentSize_ set.
					\sa LiveResource::setObjects
				 */
				void setContentSizes(LiveNodes const &contentSize_) { baseSetObjects(nie::contentSize::iri(), contentSize_); }
				/*!
					\fn void removeContentSizes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_contentSize "nie:contentSize" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContentSizes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::contentSize::iri(), object_info); }
				/*!
					\fn qint64 getContentSize()
					
					
					Returns the property \ref nie_contentSize "nie:contentSize". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getContentSize() { return baseGetObject< nie::contentSize >(); }
				/*!
					\fn void setContentSize(qint64 const &contentSize_)
					
					
					Sets the property \ref nie_contentSize "nie:contentSize" to the given \a contentSize.
					\sa LiveResource::setObject
				 */
				void setContentSize(qint64 const &contentSize_) { baseSetObject< nie::contentSize >( contentSize_ ); }
				/*!
					\fn qint64 firstContentSize()
					
					
					Returns the first property \ref nie_contentSize "nie:contentSize". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstContentSize() { return baseFirstObject< nie::contentSize >(); }
				/*!
					\fn void addContentSize(qint64 const &contentSize_)
					
					
					Adds the given \a contentSize_ to the property \ref nie_contentSize "nie:contentSize" set.
					\sa LiveResource::addObject
				 */
				void addContentSize(qint64 const &contentSize_) { baseAddObject< nie::contentSize >( contentSize_ ); }
				/*!
					\fn void removeContentSize(qint64 const &contentSize_)
					
					
					Removes the given \a contentSize_ from the property \ref nie_contentSize "nie:contentSize" set.
					\sa LiveResource::removeObject
				 */
				void removeContentSize(qint64 const &contentSize_) { baseRemoveObject< nie::contentSize >(contentSize_); }

				/* Property generated from nie:usageCounter
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n tracker:isAnnotation=true
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:weight=3
				 * \n tracker:modified=1359
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveUsageCounters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_usageCounter "nie:usageCounter" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveUsageCounters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::usageCounter >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getUsageCounters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_usageCounter "nie:usageCounter" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getUsageCounters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::usageCounter >(object_info, strategy, parent); }
				/*!
					\fn void setUsageCounters(LiveNodes const &usageCounter_)
					
					
					Sets the property \ref nie_usageCounter "nie:usageCounter" set to the given \a usageCounter_ set.
					\sa LiveResource::setObjects
				 */
				void setUsageCounters(LiveNodes const &usageCounter_) { baseSetObjects(nie::usageCounter::iri(), usageCounter_); }
				/*!
					\fn void removeUsageCounters(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_usageCounter "nie:usageCounter" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeUsageCounters(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::usageCounter::iri(), object_info); }
				/*!
					\fn qint64 getUsageCounter()
					
					
					Returns the property \ref nie_usageCounter "nie:usageCounter". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getUsageCounter() { return baseGetObject< nie::usageCounter >(); }
				/*!
					\fn void setUsageCounter(qint64 const &usageCounter_)
					
					
					Sets the property \ref nie_usageCounter "nie:usageCounter" to the given \a usageCounter.
					\sa LiveResource::setObject
				 */
				void setUsageCounter(qint64 const &usageCounter_) { baseSetObject< nie::usageCounter >( usageCounter_ ); }
				/*!
					\fn qint64 firstUsageCounter()
					
					
					Returns the first property \ref nie_usageCounter "nie:usageCounter". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstUsageCounter() { return baseFirstObject< nie::usageCounter >(); }
				/*!
					\fn void addUsageCounter(qint64 const &usageCounter_)
					
					
					Adds the given \a usageCounter_ to the property \ref nie_usageCounter "nie:usageCounter" set.
					\sa LiveResource::addObject
				 */
				void addUsageCounter(qint64 const &usageCounter_) { baseAddObject< nie::usageCounter >( usageCounter_ ); }
				/*!
					\fn void removeUsageCounter(qint64 const &usageCounter_)
					
					
					Removes the given \a usageCounter_ from the property \ref nie_usageCounter "nie:usageCounter" set.
					\sa LiveResource::removeObject
				 */
				void removeUsageCounter(qint64 const &usageCounter_) { baseRemoveObject< nie::usageCounter >(usageCounter_); }

				/* Property generated from nfo:isContentEncrypted
				 * \n Might change (IE of DataObject property?)
				 * \n rdfs:label=Is content encrypted
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1344
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNfoIsContentEncrypteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_isContentEncrypted "nfo:isContentEncrypted" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNfoIsContentEncrypteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::isContentEncrypted >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNfoIsContentEncrypteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_isContentEncrypted "nfo:isContentEncrypted" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNfoIsContentEncrypteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::isContentEncrypted >(object_info, strategy, parent); }
				/*!
					\fn void setNfoIsContentEncrypteds(LiveNodes const &nfoIsContentEncrypted_)
					
					
					Sets the property \ref nfo_isContentEncrypted "nfo:isContentEncrypted" set to the given \a nfoIsContentEncrypted_ set.
					\sa LiveResource::setObjects
				 */
				void setNfoIsContentEncrypteds(LiveNodes const &nfoIsContentEncrypted_) { baseSetObjects(nfo::isContentEncrypted::iri(), nfoIsContentEncrypted_); }
				/*!
					\fn void removeNfoIsContentEncrypteds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_isContentEncrypted "nfo:isContentEncrypted" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNfoIsContentEncrypteds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::isContentEncrypted::iri(), object_info); }
				/*!
					\fn bool getNfoIsContentEncrypted()
					
					
					Returns the property \ref nfo_isContentEncrypted "nfo:isContentEncrypted". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getNfoIsContentEncrypted() { return baseGetObject< nfo::isContentEncrypted >(); }
				/*!
					\fn void setNfoIsContentEncrypted(bool const &nfoIsContentEncrypted_)
					
					
					Sets the property \ref nfo_isContentEncrypted "nfo:isContentEncrypted" to the given \a nfoIsContentEncrypted.
					\sa LiveResource::setObject
				 */
				void setNfoIsContentEncrypted(bool const &nfoIsContentEncrypted_) { baseSetObject< nfo::isContentEncrypted >( nfoIsContentEncrypted_ ); }
				/*!
					\fn bool firstNfoIsContentEncrypted()
					
					
					Returns the first property \ref nfo_isContentEncrypted "nfo:isContentEncrypted". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstNfoIsContentEncrypted() { return baseFirstObject< nfo::isContentEncrypted >(); }
				/*!
					\fn void addNfoIsContentEncrypted(bool const &nfoIsContentEncrypted_)
					
					
					Adds the given \a nfoIsContentEncrypted_ to the property \ref nfo_isContentEncrypted "nfo:isContentEncrypted" set.
					\sa LiveResource::addObject
				 */
				void addNfoIsContentEncrypted(bool const &nfoIsContentEncrypted_) { baseAddObject< nfo::isContentEncrypted >( nfoIsContentEncrypted_ ); }
				/*!
					\fn void removeNfoIsContentEncrypted(bool const &nfoIsContentEncrypted_)
					
					
					Removes the given \a nfoIsContentEncrypted_ from the property \ref nfo_isContentEncrypted "nfo:isContentEncrypted" set.
					\sa LiveResource::removeObject
				 */
				void removeNfoIsContentEncrypted(bool const &nfoIsContentEncrypted_) { baseRemoveObject< nfo::isContentEncrypted >(nfoIsContentEncrypted_); }

				/* Property generated from nie:description
				 * \n rdfs:subPropertyOf=dc:description
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:writeback=true
				 * \n tracker:weight=3
				 * \n tracker:modified=1187
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_description "nie:description" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::description >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_description "nie:description" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDescriptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::description >(object_info, strategy, parent); }
				/*!
					\fn void setDescriptions(LiveNodes const &description_)
					
					
					Sets the property \ref nie_description "nie:description" set to the given \a description_ set.
					\sa LiveResource::setObjects
				 */
				void setDescriptions(LiveNodes const &description_) { baseSetObjects(nie::description::iri(), description_); }
				/*!
					\fn void removeDescriptions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_description "nie:description" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDescriptions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::description::iri(), object_info); }
				/*!
					\fn QString getDescription()
					
					
					Returns the property \ref nie_description "nie:description". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDescription() { return baseGetObject< nie::description >(); }
				/*!
					\fn void setDescription(QString const &description_)
					
					
					Sets the property \ref nie_description "nie:description" to the given \a description.
					\sa LiveResource::setObject
				 */
				void setDescription(QString const &description_) { baseSetObject< nie::description >( description_ ); }
				/*!
					\fn QString firstDescription()
					
					
					Returns the first property \ref nie_description "nie:description". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDescription() { return baseFirstObject< nie::description >(); }
				/*!
					\fn void addDescription(QString const &description_)
					
					
					Adds the given \a description_ to the property \ref nie_description "nie:description" set.
					\sa LiveResource::addObject
				 */
				void addDescription(QString const &description_) { baseAddObject< nie::description >( description_ ); }
				/*!
					\fn void removeDescription(QString const &description_)
					
					
					Removes the given \a description_ from the property \ref nie_description "nie:description" set.
					\sa LiveResource::removeObject
				 */
				void removeDescription(QString const &description_) { baseRemoveObject< nie::description >(description_); }

				/* Property generated from nie:relatedTo
				 * \n A common superproperty for all relations between a piece of content and other pieces of data (which may be interpreted as other pieces of content).
				 * \n rdfs:range=nie:DataObject
				 * \n tracker:modified=1939
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n rdfs:subPropertyOf=dc:relation
				 */
				/*!
					\fn LiveNodes liveRelatedTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_relatedTo "nie:relatedTo" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRelatedTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::relatedTo >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRelatedTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_relatedTo "nie:relatedTo" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRelatedTos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::relatedTo >(object_info, strategy, parent); }
				/*!
					\fn void setRelatedTos(LiveNodes const &relatedTo_)
					
					
					Sets the property \ref nie_relatedTo "nie:relatedTo" set to the given \a relatedTo_ set.
					\sa LiveResource::setObjects
				 */
				void setRelatedTos(LiveNodes const &relatedTo_) { baseSetObjects(nie::relatedTo::iri(), relatedTo_); }
				/*!
					\fn void removeRelatedTos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_relatedTo "nie:relatedTo" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRelatedTos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::relatedTo::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< DataObject > firstRelatedTo()
					
					
					Returns the first property \ref nie_relatedTo "nie:relatedTo". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< DataObject > firstRelatedTo() { return baseFirstObject< nie::relatedTo >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > addRelatedTo()
					
					
					Adds a new uniquely named resource to the property \ref nie_relatedTo "nie:relatedTo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DataObject > addRelatedTo() { return baseAddObject< nie::relatedTo >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > addRelatedTo(::SopranoLive::Live< DataObject > const &relatedTo_)
					
					
					Adds the given \a relatedTo_ to the property \ref nie_relatedTo "nie:relatedTo" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DataObject > addRelatedTo(::SopranoLive::Live< DataObject > const &relatedTo_) { return baseAddObject< nie::relatedTo >( relatedTo_ ); }
				/*!
					\fn void removeRelatedTo(::SopranoLive::Live< DataObject > const &relatedTo_)
					
					
					Removes the given \a relatedTo_ from the property \ref nie_relatedTo "nie:relatedTo" set.
					\sa LiveResource::removeObject
				 */
				void removeRelatedTo(::SopranoLive::Live< DataObject > const &relatedTo_) { baseRemoveObject< nie::relatedTo >(relatedTo_); }

				/* Property generated from nie:legal
				 * \n A common superproperty for all properties that point at legal information about an Information Element
				 * \n rdfs:subPropertyOf=dc:rights
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1115
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLegals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_legal "nie:legal" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLegals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::legal >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLegals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_legal "nie:legal" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLegals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::legal >(object_info, strategy, parent); }
				/*!
					\fn void setLegals(LiveNodes const &legal_)
					
					
					Sets the property \ref nie_legal "nie:legal" set to the given \a legal_ set.
					\sa LiveResource::setObjects
				 */
				void setLegals(LiveNodes const &legal_) { baseSetObjects(nie::legal::iri(), legal_); }
				/*!
					\fn void removeLegals(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_legal "nie:legal" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLegals(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::legal::iri(), object_info); }
				/*!
					\fn QString getLegal()
					
					
					Returns the property \ref nie_legal "nie:legal". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getLegal() { return baseGetObject< nie::legal >(); }
				/*!
					\fn void setLegal(QString const &legal_)
					
					
					Sets the property \ref nie_legal "nie:legal" to the given \a legal.
					\sa LiveResource::setObject
				 */
				void setLegal(QString const &legal_) { baseSetObject< nie::legal >( legal_ ); }
				/*!
					\fn QString firstLegal()
					
					
					Returns the first property \ref nie_legal "nie:legal". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstLegal() { return baseFirstObject< nie::legal >(); }
				/*!
					\fn void addLegal(QString const &legal_)
					
					
					Adds the given \a legal_ to the property \ref nie_legal "nie:legal" set.
					\sa LiveResource::addObject
				 */
				void addLegal(QString const &legal_) { baseAddObject< nie::legal >( legal_ ); }
				/*!
					\fn void removeLegal(QString const &legal_)
					
					
					Removes the given \a legal_ from the property \ref nie_legal "nie:legal" set.
					\sa LiveResource::removeObject
				 */
				void removeLegal(QString const &legal_) { baseRemoveObject< nie::legal >(legal_); }

				/* Property generated from nie:language
				 * \n Language the InformationElement is expressed in. Users are encouraged to use the two-letter code specified in the RFC 3066
				 * \n rdfs:label=Language
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1051
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLanguages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_language "nie:language" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLanguages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::language >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLanguages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_language "nie:language" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLanguages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::language >(object_info, strategy, parent); }
				/*!
					\fn void setLanguages(LiveNodes const &language_)
					
					
					Sets the property \ref nie_language "nie:language" set to the given \a language_ set.
					\sa LiveResource::setObjects
				 */
				void setLanguages(LiveNodes const &language_) { baseSetObjects(nie::language::iri(), language_); }
				/*!
					\fn void removeLanguages(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_language "nie:language" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLanguages(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::language::iri(), object_info); }
				/*!
					\fn QString getLanguage()
					
					
					Returns the property \ref nie_language "nie:language". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getLanguage() { return baseGetObject< nie::language >(); }
				/*!
					\fn void setLanguage(QString const &language_)
					
					
					Sets the property \ref nie_language "nie:language" to the given \a language.
					\sa LiveResource::setObject
				 */
				void setLanguage(QString const &language_) { baseSetObject< nie::language >( language_ ); }
				/*!
					\fn QString firstLanguage()
					
					
					Returns the first property \ref nie_language "nie:language". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstLanguage() { return baseFirstObject< nie::language >(); }
				/*!
					\fn void addLanguage(QString const &language_)
					
					
					Adds the given \a language_ to the property \ref nie_language "nie:language" set.
					\sa LiveResource::addObject
				 */
				void addLanguage(QString const &language_) { baseAddObject< nie::language >( language_ ); }
				/*!
					\fn void removeLanguage(QString const &language_)
					
					
					Removes the given \a language_ from the property \ref nie_language "nie:language" set.
					\sa LiveResource::removeObject
				 */
				void removeLanguage(QString const &language_) { baseRemoveObject< nie::language >(language_); }

				/* Property generated from nie:contentLastModified
				 * \n rdfs:subPropertyOf=nie:informationElementDate
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1020
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContentLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_contentLastModified "nie:contentLastModified" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContentLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::contentLastModified >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContentLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_contentLastModified "nie:contentLastModified" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContentLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::contentLastModified >(object_info, strategy, parent); }
				/*!
					\fn void setContentLastModifieds(LiveNodes const &contentLastModified_)
					
					
					Sets the property \ref nie_contentLastModified "nie:contentLastModified" set to the given \a contentLastModified_ set.
					\sa LiveResource::setObjects
				 */
				void setContentLastModifieds(LiveNodes const &contentLastModified_) { baseSetObjects(nie::contentLastModified::iri(), contentLastModified_); }
				/*!
					\fn void removeContentLastModifieds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_contentLastModified "nie:contentLastModified" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContentLastModifieds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::contentLastModified::iri(), object_info); }
				/*!
					\fn QDateTime getContentLastModified()
					
					
					Returns the property \ref nie_contentLastModified "nie:contentLastModified". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getContentLastModified() { return baseGetObject< nie::contentLastModified >(); }
				/*!
					\fn void setContentLastModified(QDateTime const &contentLastModified_)
					
					
					Sets the property \ref nie_contentLastModified "nie:contentLastModified" to the given \a contentLastModified.
					\sa LiveResource::setObject
				 */
				void setContentLastModified(QDateTime const &contentLastModified_) { baseSetObject< nie::contentLastModified >( contentLastModified_ ); }
				/*!
					\fn QDateTime firstContentLastModified()
					
					
					Returns the first property \ref nie_contentLastModified "nie:contentLastModified". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstContentLastModified() { return baseFirstObject< nie::contentLastModified >(); }
				/*!
					\fn void addContentLastModified(QDateTime const &contentLastModified_)
					
					
					Adds the given \a contentLastModified_ to the property \ref nie_contentLastModified "nie:contentLastModified" set.
					\sa LiveResource::addObject
				 */
				void addContentLastModified(QDateTime const &contentLastModified_) { baseAddObject< nie::contentLastModified >( contentLastModified_ ); }
				/*!
					\fn void removeContentLastModified(QDateTime const &contentLastModified_)
					
					
					Removes the given \a contentLastModified_ from the property \ref nie_contentLastModified "nie:contentLastModified" set.
					\sa LiveResource::removeObject
				 */
				void removeContentLastModified(QDateTime const &contentLastModified_) { baseRemoveObject< nie::contentLastModified >(contentLastModified_); }

				/* Property generated from nie:informationElementDate
				 * \n rdfs:range=xsd:dateTime
				 * \n tracker:modified=1977
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n rdfs:subPropertyOf=dc:date
				 */
				/*!
					\fn LiveNodes liveInformationElementDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_informationElementDate "nie:informationElementDate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveInformationElementDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::informationElementDate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getInformationElementDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_informationElementDate "nie:informationElementDate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getInformationElementDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::informationElementDate >(object_info, strategy, parent); }
				/*!
					\fn void setInformationElementDates(LiveNodes const &informationElementDate_)
					
					
					Sets the property \ref nie_informationElementDate "nie:informationElementDate" set to the given \a informationElementDate_ set.
					\sa LiveResource::setObjects
				 */
				void setInformationElementDates(LiveNodes const &informationElementDate_) { baseSetObjects(nie::informationElementDate::iri(), informationElementDate_); }
				/*!
					\fn void removeInformationElementDates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_informationElementDate "nie:informationElementDate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeInformationElementDates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::informationElementDate::iri(), object_info); }
				/*!
					\fn QDateTime firstInformationElementDate()
					
					
					Returns the first property \ref nie_informationElementDate "nie:informationElementDate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstInformationElementDate() { return baseFirstObject< nie::informationElementDate >(); }
				/*!
					\fn void addInformationElementDate(QDateTime const &informationElementDate_)
					
					
					Adds the given \a informationElementDate_ to the property \ref nie_informationElementDate "nie:informationElementDate" set.
					\sa LiveResource::addObject
				 */
				void addInformationElementDate(QDateTime const &informationElementDate_) { baseAddObject< nie::informationElementDate >( informationElementDate_ ); }
				/*!
					\fn void removeInformationElementDate(QDateTime const &informationElementDate_)
					
					
					Removes the given \a informationElementDate_ from the property \ref nie_informationElementDate "nie:informationElementDate" set.
					\sa LiveResource::removeObject
				 */
				void removeInformationElementDate(QDateTime const &informationElementDate_) { baseRemoveObject< nie::informationElementDate >(informationElementDate_); }

				/* Property generated from nie:characterSet
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1563
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveCharacterSets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_characterSet "nie:characterSet" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCharacterSets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::characterSet >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCharacterSets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_characterSet "nie:characterSet" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCharacterSets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::characterSet >(object_info, strategy, parent); }
				/*!
					\fn void setCharacterSets(LiveNodes const &characterSet_)
					
					
					Sets the property \ref nie_characterSet "nie:characterSet" set to the given \a characterSet_ set.
					\sa LiveResource::setObjects
				 */
				void setCharacterSets(LiveNodes const &characterSet_) { baseSetObjects(nie::characterSet::iri(), characterSet_); }
				/*!
					\fn void removeCharacterSets(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_characterSet "nie:characterSet" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCharacterSets(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::characterSet::iri(), object_info); }
				/*!
					\fn QString getCharacterSet()
					
					
					Returns the property \ref nie_characterSet "nie:characterSet". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getCharacterSet() { return baseGetObject< nie::characterSet >(); }
				/*!
					\fn void setCharacterSet(QString const &characterSet_)
					
					
					Sets the property \ref nie_characterSet "nie:characterSet" to the given \a characterSet.
					\sa LiveResource::setObject
				 */
				void setCharacterSet(QString const &characterSet_) { baseSetObject< nie::characterSet >( characterSet_ ); }
				/*!
					\fn QString firstCharacterSet()
					
					
					Returns the first property \ref nie_characterSet "nie:characterSet". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstCharacterSet() { return baseFirstObject< nie::characterSet >(); }
				/*!
					\fn void addCharacterSet(QString const &characterSet_)
					
					
					Adds the given \a characterSet_ to the property \ref nie_characterSet "nie:characterSet" set.
					\sa LiveResource::addObject
				 */
				void addCharacterSet(QString const &characterSet_) { baseAddObject< nie::characterSet >( characterSet_ ); }
				/*!
					\fn void removeCharacterSet(QString const &characterSet_)
					
					
					Removes the given \a characterSet_ from the property \ref nie_characterSet "nie:characterSet" set.
					\sa LiveResource::removeObject
				 */
				void removeCharacterSet(QString const &characterSet_) { baseRemoveObject< nie::characterSet >(characterSet_); }

				/* Property generated from nco:creator
				 * \n Creator of a data object, an entity primarily responsible for the creation of the content of the data object.
				 * \n rdfs:label=creator
				 * \n rdfs:subPropertyOf=nco:contributor
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:writeback=true
				 * \n tracker:weight=4
				 * \n tracker:modified=1639
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nco::Contact Contact;
				/*!
					\fn LiveNodes liveNcoCreators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_creator "nco:creator" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNcoCreators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::creator >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNcoCreators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_creator "nco:creator" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNcoCreators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::creator >(object_info, strategy, parent); }
				/*!
					\fn void setNcoCreators(LiveNodes const &ncoCreator_)
					
					
					Sets the property \ref nco_creator "nco:creator" set to the given \a ncoCreator_ set.
					\sa LiveResource::setObjects
				 */
				void setNcoCreators(LiveNodes const &ncoCreator_) { baseSetObjects(nco::creator::iri(), ncoCreator_); }
				/*!
					\fn void removeNcoCreators(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_creator "nco:creator" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNcoCreators(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::creator::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstNcoCreator()
					
					
					Returns the first property \ref nco_creator "nco:creator". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstNcoCreator() { return baseFirstObject< nco::creator >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addNcoCreator()
					
					
					Adds a new uniquely named resource to the property \ref nco_creator "nco:creator" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addNcoCreator() { return baseAddObject< nco::creator >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addNcoCreator(::SopranoLive::Live< nco::Contact > const &ncoCreator_)
					
					
					Adds the given \a ncoCreator_ to the property \ref nco_creator "nco:creator" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addNcoCreator(::SopranoLive::Live< nco::Contact > const &ncoCreator_) { return baseAddObject< nco::creator >( ncoCreator_ ); }
				/*!
					\fn void removeNcoCreator(::SopranoLive::Live< nco::Contact > const &ncoCreator_)
					
					
					Removes the given \a ncoCreator_ from the property \ref nco_creator "nco:creator" set.
					\sa LiveResource::removeObject
				 */
				void removeNcoCreator(::SopranoLive::Live< nco::Contact > const &ncoCreator_) { baseRemoveObject< nco::creator >(ncoCreator_); }

				/* Property generated from slo:location
				 * \n This can be subclassed to add semantics
				 * \n rdfs:label=Property linking something to a location
				 * \n rdfs:range=slo:GeoLocation
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:writeback=true
				 * \n tracker:indexed=true
				 * \n tracker:modified=2054
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef slo::GeoLocation GeoLocation;
				/*!
					\fn LiveNodes liveSloLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_location "slo:location" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSloLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::location >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSloLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_location "slo:location" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSloLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::location >(object_info, strategy, parent); }
				/*!
					\fn void setSloLocations(LiveNodes const &sloLocation_)
					
					
					Sets the property \ref slo_location "slo:location" set to the given \a sloLocation_ set.
					\sa LiveResource::setObjects
				 */
				void setSloLocations(LiveNodes const &sloLocation_) { baseSetObjects(slo::location::iri(), sloLocation_); }
				/*!
					\fn void removeSloLocations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_location "slo:location" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSloLocations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::location::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< slo::GeoLocation > firstSloLocation()
					
					
					Returns the first property \ref slo_location "slo:location". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< slo::GeoLocation > firstSloLocation() { return baseFirstObject< slo::location >(); }
				/*!
					\fn ::SopranoLive::Live< slo::GeoLocation > addSloLocation()
					
					
					Adds a new uniquely named resource to the property \ref slo_location "slo:location" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< slo::GeoLocation > addSloLocation() { return baseAddObject< slo::location >(); }
				/*!
					\fn ::SopranoLive::Live< slo::GeoLocation > addSloLocation(::SopranoLive::Live< slo::GeoLocation > const &sloLocation_)
					
					
					Adds the given \a sloLocation_ to the property \ref slo_location "slo:location" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< slo::GeoLocation > addSloLocation(::SopranoLive::Live< slo::GeoLocation > const &sloLocation_) { return baseAddObject< slo::location >( sloLocation_ ); }
				/*!
					\fn void removeSloLocation(::SopranoLive::Live< slo::GeoLocation > const &sloLocation_)
					
					
					Removes the given \a sloLocation_ from the property \ref slo_location "slo:location" set.
					\sa LiveResource::removeObject
				 */
				void removeSloLocation(::SopranoLive::Live< slo::GeoLocation > const &sloLocation_) { baseRemoveObject< slo::location >(sloLocation_); }

				/* Property generated from nie:version
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1842
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveVersions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_version "nie:version" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveVersions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::version >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getVersions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_version "nie:version" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getVersions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::version >(object_info, strategy, parent); }
				/*!
					\fn void setVersions(LiveNodes const &version_)
					
					
					Sets the property \ref nie_version "nie:version" set to the given \a version_ set.
					\sa LiveResource::setObjects
				 */
				void setVersions(LiveNodes const &version_) { baseSetObjects(nie::version::iri(), version_); }
				/*!
					\fn void removeVersions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_version "nie:version" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeVersions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::version::iri(), object_info); }
				/*!
					\fn QString getVersion()
					
					
					Returns the property \ref nie_version "nie:version". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getVersion() { return baseGetObject< nie::version >(); }
				/*!
					\fn void setVersion(QString const &version_)
					
					
					Sets the property \ref nie_version "nie:version" to the given \a version.
					\sa LiveResource::setObject
				 */
				void setVersion(QString const &version_) { baseSetObject< nie::version >( version_ ); }
				/*!
					\fn QString firstVersion()
					
					
					Returns the first property \ref nie_version "nie:version". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstVersion() { return baseFirstObject< nie::version >(); }
				/*!
					\fn void addVersion(QString const &version_)
					
					
					Adds the given \a version_ to the property \ref nie_version "nie:version" set.
					\sa LiveResource::addObject
				 */
				void addVersion(QString const &version_) { baseAddObject< nie::version >( version_ ); }
				/*!
					\fn void removeVersion(QString const &version_)
					
					
					Removes the given \a version_ from the property \ref nie_version "nie:version" set.
					\sa LiveResource::removeObject
				 */
				void removeVersion(QString const &version_) { baseRemoveObject< nie::version >(version_); }

				/* Property generated from nie:hasLogicalPart
				 * \n rdfs:range=nie:InformationElement
				 * \n tracker:weight=2
				 * \n tracker:modified=1958
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasLogicalParts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_hasLogicalPart "nie:hasLogicalPart" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasLogicalParts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::hasLogicalPart >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasLogicalParts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_hasLogicalPart "nie:hasLogicalPart" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasLogicalParts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::hasLogicalPart >(object_info, strategy, parent); }
				/*!
					\fn void setHasLogicalParts(LiveNodes const &hasLogicalPart_)
					
					
					Sets the property \ref nie_hasLogicalPart "nie:hasLogicalPart" set to the given \a hasLogicalPart_ set.
					\sa LiveResource::setObjects
				 */
				void setHasLogicalParts(LiveNodes const &hasLogicalPart_) { baseSetObjects(nie::hasLogicalPart::iri(), hasLogicalPart_); }
				/*!
					\fn void removeHasLogicalParts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_hasLogicalPart "nie:hasLogicalPart" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasLogicalParts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::hasLogicalPart::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > firstHasLogicalPart()
					
					
					Returns the first property \ref nie_hasLogicalPart "nie:hasLogicalPart". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< InformationElement > firstHasLogicalPart() { return baseFirstObject< nie::hasLogicalPart >(); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > addHasLogicalPart()
					
					
					Adds a new uniquely named resource to the property \ref nie_hasLogicalPart "nie:hasLogicalPart" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< InformationElement > addHasLogicalPart() { return baseAddObject< nie::hasLogicalPart >(); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > addHasLogicalPart(::SopranoLive::Live< InformationElement > const &hasLogicalPart_)
					
					
					Adds the given \a hasLogicalPart_ to the property \ref nie_hasLogicalPart "nie:hasLogicalPart" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< InformationElement > addHasLogicalPart(::SopranoLive::Live< InformationElement > const &hasLogicalPart_) { return baseAddObject< nie::hasLogicalPart >( hasLogicalPart_ ); }
				/*!
					\fn void removeHasLogicalPart(::SopranoLive::Live< InformationElement > const &hasLogicalPart_)
					
					
					Removes the given \a hasLogicalPart_ from the property \ref nie_hasLogicalPart "nie:hasLogicalPart" set.
					\sa LiveResource::removeObject
				 */
				void removeHasLogicalPart(::SopranoLive::Live< InformationElement > const &hasLogicalPart_) { baseRemoveObject< nie::hasLogicalPart >(hasLogicalPart_); }

				/* Property generated from nie:disclaimer
				 * \n rdfs:subPropertyOf=nie:legal
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1375
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDisclaimers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_disclaimer "nie:disclaimer" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDisclaimers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::disclaimer >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDisclaimers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_disclaimer "nie:disclaimer" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDisclaimers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::disclaimer >(object_info, strategy, parent); }
				/*!
					\fn void setDisclaimers(LiveNodes const &disclaimer_)
					
					
					Sets the property \ref nie_disclaimer "nie:disclaimer" set to the given \a disclaimer_ set.
					\sa LiveResource::setObjects
				 */
				void setDisclaimers(LiveNodes const &disclaimer_) { baseSetObjects(nie::disclaimer::iri(), disclaimer_); }
				/*!
					\fn void removeDisclaimers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_disclaimer "nie:disclaimer" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDisclaimers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::disclaimer::iri(), object_info); }
				/*!
					\fn QString getDisclaimer()
					
					
					Returns the property \ref nie_disclaimer "nie:disclaimer". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDisclaimer() { return baseGetObject< nie::disclaimer >(); }
				/*!
					\fn void setDisclaimer(QString const &disclaimer_)
					
					
					Sets the property \ref nie_disclaimer "nie:disclaimer" to the given \a disclaimer.
					\sa LiveResource::setObject
				 */
				void setDisclaimer(QString const &disclaimer_) { baseSetObject< nie::disclaimer >( disclaimer_ ); }
				/*!
					\fn QString firstDisclaimer()
					
					
					Returns the first property \ref nie_disclaimer "nie:disclaimer". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDisclaimer() { return baseFirstObject< nie::disclaimer >(); }
				/*!
					\fn void addDisclaimer(QString const &disclaimer_)
					
					
					Adds the given \a disclaimer_ to the property \ref nie_disclaimer "nie:disclaimer" set.
					\sa LiveResource::addObject
				 */
				void addDisclaimer(QString const &disclaimer_) { baseAddObject< nie::disclaimer >( disclaimer_ ); }
				/*!
					\fn void removeDisclaimer(QString const &disclaimer_)
					
					
					Removes the given \a disclaimer_ from the property \ref nie_disclaimer "nie:disclaimer" set.
					\sa LiveResource::removeObject
				 */
				void removeDisclaimer(QString const &disclaimer_) { baseRemoveObject< nie::disclaimer >(disclaimer_); }

				/* Property generated from nie:license
				 * \n Terms and intellectual property rights licensing conditions.
				 * \n rdfs:subPropertyOf=nie:legal
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1400
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLicenses(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_license "nie:license" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLicenses(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::license >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLicenses(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_license "nie:license" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLicenses(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::license >(object_info, strategy, parent); }
				/*!
					\fn void setLicenses(LiveNodes const &license_)
					
					
					Sets the property \ref nie_license "nie:license" set to the given \a license_ set.
					\sa LiveResource::setObjects
				 */
				void setLicenses(LiveNodes const &license_) { baseSetObjects(nie::license::iri(), license_); }
				/*!
					\fn void removeLicenses(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_license "nie:license" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLicenses(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::license::iri(), object_info); }
				/*!
					\fn QString getLicense()
					
					
					Returns the property \ref nie_license "nie:license". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getLicense() { return baseGetObject< nie::license >(); }
				/*!
					\fn void setLicense(QString const &license_)
					
					
					Sets the property \ref nie_license "nie:license" to the given \a license.
					\sa LiveResource::setObject
				 */
				void setLicense(QString const &license_) { baseSetObject< nie::license >( license_ ); }
				/*!
					\fn QString firstLicense()
					
					
					Returns the first property \ref nie_license "nie:license". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstLicense() { return baseFirstObject< nie::license >(); }
				/*!
					\fn void addLicense(QString const &license_)
					
					
					Adds the given \a license_ to the property \ref nie_license "nie:license" set.
					\sa LiveResource::addObject
				 */
				void addLicense(QString const &license_) { baseAddObject< nie::license >( license_ ); }
				/*!
					\fn void removeLicense(QString const &license_)
					
					
					Removes the given \a license_ from the property \ref nie_license "nie:license" set.
					\sa LiveResource::removeObject
				 */
				void removeLicense(QString const &license_) { baseRemoveObject< nie::license >(license_); }

				/* Property generated from nie:subject
				 * \n The subject or topic of the document
				 * \n rdfs:label=Subject
				 * \n rdfs:subPropertyOf=dc:subject
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:weight=5
				 * \n tracker:modified=1376
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n tracker:fulltextNoLimit=true
				 */
				/*!
					\fn LiveNodes liveSubjects(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_subject "nie:subject" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSubjects(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::subject >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSubjects(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_subject "nie:subject" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSubjects(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::subject >(object_info, strategy, parent); }
				/*!
					\fn void setSubjects(LiveNodes const &subject_)
					
					
					Sets the property \ref nie_subject "nie:subject" set to the given \a subject_ set.
					\sa LiveResource::setObjects
				 */
				void setSubjects(LiveNodes const &subject_) { baseSetObjects(nie::subject::iri(), subject_); }
				/*!
					\fn void removeSubjects(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_subject "nie:subject" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSubjects(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::subject::iri(), object_info); }
				/*!
					\fn QString getSubject()
					
					
					Returns the property \ref nie_subject "nie:subject". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getSubject() { return baseGetObject< nie::subject >(); }
				/*!
					\fn void setSubject(QString const &subject_)
					
					
					Sets the property \ref nie_subject "nie:subject" to the given \a subject.
					\sa LiveResource::setObject
				 */
				void setSubject(QString const &subject_) { baseSetObject< nie::subject >( subject_ ); }
				/*!
					\fn QString firstSubject()
					
					
					Returns the first property \ref nie_subject "nie:subject". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstSubject() { return baseFirstObject< nie::subject >(); }
				/*!
					\fn void addSubject(QString const &subject_)
					
					
					Adds the given \a subject_ to the property \ref nie_subject "nie:subject" set.
					\sa LiveResource::addObject
				 */
				void addSubject(QString const &subject_) { baseAddObject< nie::subject >( subject_ ); }
				/*!
					\fn void removeSubject(QString const &subject_)
					
					
					Removes the given \a subject_ from the property \ref nie_subject "nie:subject" set.
					\sa LiveResource::removeObject
				 */
				void removeSubject(QString const &subject_) { baseRemoveObject< nie::subject >(subject_); }

				/* Property generated from nie:mimeType
				 * \n File Mime Type
				 * \n rdfs:label=Mime Type
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1647
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMimeTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_mimeType "nie:mimeType" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMimeTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::mimeType >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMimeTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_mimeType "nie:mimeType" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMimeTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::mimeType >(object_info, strategy, parent); }
				/*!
					\fn void setMimeTypes(LiveNodes const &mimeType_)
					
					
					Sets the property \ref nie_mimeType "nie:mimeType" set to the given \a mimeType_ set.
					\sa LiveResource::setObjects
				 */
				void setMimeTypes(LiveNodes const &mimeType_) { baseSetObjects(nie::mimeType::iri(), mimeType_); }
				/*!
					\fn void removeMimeTypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_mimeType "nie:mimeType" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMimeTypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::mimeType::iri(), object_info); }
				/*!
					\fn QString getMimeType()
					
					
					Returns the property \ref nie_mimeType "nie:mimeType". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getMimeType() { return baseGetObject< nie::mimeType >(); }
				/*!
					\fn void setMimeType(QString const &mimeType_)
					
					
					Sets the property \ref nie_mimeType "nie:mimeType" to the given \a mimeType.
					\sa LiveResource::setObject
				 */
				void setMimeType(QString const &mimeType_) { baseSetObject< nie::mimeType >( mimeType_ ); }
				/*!
					\fn QString firstMimeType()
					
					
					Returns the first property \ref nie_mimeType "nie:mimeType". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMimeType() { return baseFirstObject< nie::mimeType >(); }
				/*!
					\fn void addMimeType(QString const &mimeType_)
					
					
					Adds the given \a mimeType_ to the property \ref nie_mimeType "nie:mimeType" set.
					\sa LiveResource::addObject
				 */
				void addMimeType(QString const &mimeType_) { baseAddObject< nie::mimeType >( mimeType_ ); }
				/*!
					\fn void removeMimeType(QString const &mimeType_)
					
					
					Removes the given \a mimeType_ from the property \ref nie_mimeType "nie:mimeType" set.
					\sa LiveResource::removeObject
				 */
				void removeMimeType(QString const &mimeType_) { baseRemoveObject< nie::mimeType >(mimeType_); }

				/* Property generated from nie:contentCreated
				 * \n rdfs:subPropertyOf=nie:informationElementDate
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:writeback=true
				 * \n tracker:modified=1429
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContentCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_contentCreated "nie:contentCreated" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContentCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::contentCreated >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContentCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_contentCreated "nie:contentCreated" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContentCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::contentCreated >(object_info, strategy, parent); }
				/*!
					\fn void setContentCreateds(LiveNodes const &contentCreated_)
					
					
					Sets the property \ref nie_contentCreated "nie:contentCreated" set to the given \a contentCreated_ set.
					\sa LiveResource::setObjects
				 */
				void setContentCreateds(LiveNodes const &contentCreated_) { baseSetObjects(nie::contentCreated::iri(), contentCreated_); }
				/*!
					\fn void removeContentCreateds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_contentCreated "nie:contentCreated" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContentCreateds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::contentCreated::iri(), object_info); }
				/*!
					\fn QDateTime getContentCreated()
					
					
					Returns the property \ref nie_contentCreated "nie:contentCreated". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getContentCreated() { return baseGetObject< nie::contentCreated >(); }
				/*!
					\fn void setContentCreated(QDateTime const &contentCreated_)
					
					
					Sets the property \ref nie_contentCreated "nie:contentCreated" to the given \a contentCreated.
					\sa LiveResource::setObject
				 */
				void setContentCreated(QDateTime const &contentCreated_) { baseSetObject< nie::contentCreated >( contentCreated_ ); }
				/*!
					\fn QDateTime firstContentCreated()
					
					
					Returns the first property \ref nie_contentCreated "nie:contentCreated". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstContentCreated() { return baseFirstObject< nie::contentCreated >(); }
				/*!
					\fn void addContentCreated(QDateTime const &contentCreated_)
					
					
					Adds the given \a contentCreated_ to the property \ref nie_contentCreated "nie:contentCreated" set.
					\sa LiveResource::addObject
				 */
				void addContentCreated(QDateTime const &contentCreated_) { baseAddObject< nie::contentCreated >( contentCreated_ ); }
				/*!
					\fn void removeContentCreated(QDateTime const &contentCreated_)
					
					
					Removes the given \a contentCreated_ from the property \ref nie_contentCreated "nie:contentCreated" set.
					\sa LiveResource::removeObject
				 */
				void removeContentCreated(QDateTime const &contentCreated_) { baseRemoveObject< nie::contentCreated >(contentCreated_); }

				/* Property generated from nie:copyright
				 * \n rdfs:subPropertyOf=nie:legal
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:writeback=true
				 * \n tracker:modified=1396
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCopyrights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_copyright "nie:copyright" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCopyrights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::copyright >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCopyrights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_copyright "nie:copyright" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCopyrights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::copyright >(object_info, strategy, parent); }
				/*!
					\fn void setCopyrights(LiveNodes const &copyright_)
					
					
					Sets the property \ref nie_copyright "nie:copyright" set to the given \a copyright_ set.
					\sa LiveResource::setObjects
				 */
				void setCopyrights(LiveNodes const &copyright_) { baseSetObjects(nie::copyright::iri(), copyright_); }
				/*!
					\fn void removeCopyrights(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_copyright "nie:copyright" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCopyrights(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::copyright::iri(), object_info); }
				/*!
					\fn QString getCopyright()
					
					
					Returns the property \ref nie_copyright "nie:copyright". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getCopyright() { return baseGetObject< nie::copyright >(); }
				/*!
					\fn void setCopyright(QString const &copyright_)
					
					
					Sets the property \ref nie_copyright "nie:copyright" to the given \a copyright.
					\sa LiveResource::setObject
				 */
				void setCopyright(QString const &copyright_) { baseSetObject< nie::copyright >( copyright_ ); }
				/*!
					\fn QString firstCopyright()
					
					
					Returns the first property \ref nie_copyright "nie:copyright". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstCopyright() { return baseFirstObject< nie::copyright >(); }
				/*!
					\fn void addCopyright(QString const &copyright_)
					
					
					Adds the given \a copyright_ to the property \ref nie_copyright "nie:copyright" set.
					\sa LiveResource::addObject
				 */
				void addCopyright(QString const &copyright_) { baseAddObject< nie::copyright >( copyright_ ); }
				/*!
					\fn void removeCopyright(QString const &copyright_)
					
					
					Removes the given \a copyright_ from the property \ref nie_copyright "nie:copyright" set.
					\sa LiveResource::removeObject
				 */
				void removeCopyright(QString const &copyright_) { baseRemoveObject< nie::copyright >(copyright_); }

				/* Property generated from nco:publisher
				 * \n An entity responsible for making the InformationElement available.
				 * \n rdfs:label=publisher
				 * \n rdfs:subPropertyOf=dc:publisher
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:weight=2
				 * \n tracker:modified=1983
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNcoPublishers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_publisher "nco:publisher" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNcoPublishers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::publisher >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNcoPublishers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_publisher "nco:publisher" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNcoPublishers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::publisher >(object_info, strategy, parent); }
				/*!
					\fn void setNcoPublishers(LiveNodes const &ncoPublisher_)
					
					
					Sets the property \ref nco_publisher "nco:publisher" set to the given \a ncoPublisher_ set.
					\sa LiveResource::setObjects
				 */
				void setNcoPublishers(LiveNodes const &ncoPublisher_) { baseSetObjects(nco::publisher::iri(), ncoPublisher_); }
				/*!
					\fn void removeNcoPublishers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_publisher "nco:publisher" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNcoPublishers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::publisher::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > getNcoPublisher()
					
					
					Returns the property \ref nco_publisher "nco:publisher". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::Contact > getNcoPublisher() { return baseGetObject< nco::publisher >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > setNcoPublisher(::SopranoLive::Live< nco::Contact > const &ncoPublisher_)
					
					
					Sets the property \ref nco_publisher "nco:publisher" to the given \a ncoPublisher.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::Contact > setNcoPublisher(::SopranoLive::Live< nco::Contact > const &ncoPublisher_) { return baseSetObject< nco::publisher >( ncoPublisher_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstNcoPublisher()
					
					
					Returns the first property \ref nco_publisher "nco:publisher". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstNcoPublisher() { return baseFirstObject< nco::publisher >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addNcoPublisher()
					
					
					Adds a new uniquely named resource to the property \ref nco_publisher "nco:publisher" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addNcoPublisher() { return baseAddObject< nco::publisher >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addNcoPublisher(::SopranoLive::Live< nco::Contact > const &ncoPublisher_)
					
					
					Adds the given \a ncoPublisher_ to the property \ref nco_publisher "nco:publisher" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addNcoPublisher(::SopranoLive::Live< nco::Contact > const &ncoPublisher_) { return baseAddObject< nco::publisher >( ncoPublisher_ ); }
				/*!
					\fn void removeNcoPublisher(::SopranoLive::Live< nco::Contact > const &ncoPublisher_)
					
					
					Removes the given \a ncoPublisher_ from the property \ref nco_publisher "nco:publisher" set.
					\sa LiveResource::removeObject
				 */
				void removeNcoPublisher(::SopranoLive::Live< nco::Contact > const &ncoPublisher_) { baseRemoveObject< nco::publisher >(ncoPublisher_); }

				/* Property generated from mlo:location
				 * \n This can be subclassed to add semantics
				 * \n rdfs:label=Property linking something to a location
				 * \n rdfs:range=mlo:GeoLocation
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:writeback=true
				 * \n tracker:indexed=true
				 * \n tracker:modified=1386
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMloLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_location "mlo:location" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMloLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::location >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMloLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_location "mlo:location" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMloLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::location >(object_info, strategy, parent); }
				/*!
					\fn void setMloLocations(LiveNodes const &mloLocation_)
					
					
					Sets the property \ref mlo_location "mlo:location" set to the given \a mloLocation_ set.
					\sa LiveResource::setObjects
				 */
				void setMloLocations(LiveNodes const &mloLocation_) { baseSetObjects(mlo::location::iri(), mloLocation_); }
				/*!
					\fn void removeMloLocations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_location "mlo:location" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMloLocations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::location::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< mlo::GeoLocation > firstMloLocation()
					
					
					Returns the first property \ref mlo_location "mlo:location". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< mlo::GeoLocation > firstMloLocation() { return baseFirstObject< mlo::location >(); }
				/*!
					\fn ::SopranoLive::Live< mlo::GeoLocation > addMloLocation()
					
					
					Adds a new uniquely named resource to the property \ref mlo_location "mlo:location" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< mlo::GeoLocation > addMloLocation() { return baseAddObject< mlo::location >(); }
				/*!
					\fn ::SopranoLive::Live< mlo::GeoLocation > addMloLocation(::SopranoLive::Live< mlo::GeoLocation > const &mloLocation_)
					
					
					Adds the given \a mloLocation_ to the property \ref mlo_location "mlo:location" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< mlo::GeoLocation > addMloLocation(::SopranoLive::Live< mlo::GeoLocation > const &mloLocation_) { return baseAddObject< mlo::location >( mloLocation_ ); }
				/*!
					\fn void removeMloLocation(::SopranoLive::Live< mlo::GeoLocation > const &mloLocation_)
					
					
					Removes the given \a mloLocation_ from the property \ref mlo_location "mlo:location" set.
					\sa LiveResource::removeObject
				 */
				void removeMloLocation(::SopranoLive::Live< mlo::GeoLocation > const &mloLocation_) { baseRemoveObject< mlo::location >(mloLocation_); }

				/* Property generated from nie:title
				 * \n The title of the document
				 * \n rdfs:label=Title
				 * \n rdfs:subPropertyOf=dc:title
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:writeback=true
				 * \n tracker:weight=10
				 * \n tracker:modified=1317
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n tracker:fulltextNoLimit=true
				 */
				/*!
					\fn LiveNodes liveTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_title "nie:title" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::title >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_title "nie:title" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::title >(object_info, strategy, parent); }
				/*!
					\fn void setTitles(LiveNodes const &title_)
					
					
					Sets the property \ref nie_title "nie:title" set to the given \a title_ set.
					\sa LiveResource::setObjects
				 */
				void setTitles(LiveNodes const &title_) { baseSetObjects(nie::title::iri(), title_); }
				/*!
					\fn void removeTitles(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_title "nie:title" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTitles(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::title::iri(), object_info); }
				/*!
					\fn QString getTitle()
					
					
					Returns the property \ref nie_title "nie:title". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getTitle() { return baseGetObject< nie::title >(); }
				/*!
					\fn void setTitle(QString const &title_)
					
					
					Sets the property \ref nie_title "nie:title" to the given \a title.
					\sa LiveResource::setObject
				 */
				void setTitle(QString const &title_) { baseSetObject< nie::title >( title_ ); }
				/*!
					\fn QString firstTitle()
					
					
					Returns the first property \ref nie_title "nie:title". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTitle() { return baseFirstObject< nie::title >(); }
				/*!
					\fn void addTitle(QString const &title_)
					
					
					Adds the given \a title_ to the property \ref nie_title "nie:title" set.
					\sa LiveResource::addObject
				 */
				void addTitle(QString const &title_) { baseAddObject< nie::title >( title_ ); }
				/*!
					\fn void removeTitle(QString const &title_)
					
					
					Removes the given \a title_ from the property \ref nie_title "nie:title" set.
					\sa LiveResource::removeObject
				 */
				void removeTitle(QString const &title_) { baseRemoveObject< nie::title >(title_); }

				/* Property generated from nie:licenseType
				 * \n rdfs:subPropertyOf=nie:legal
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1777
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLicenseTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_licenseType "nie:licenseType" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLicenseTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::licenseType >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLicenseTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_licenseType "nie:licenseType" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLicenseTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::licenseType >(object_info, strategy, parent); }
				/*!
					\fn void setLicenseTypes(LiveNodes const &licenseType_)
					
					
					Sets the property \ref nie_licenseType "nie:licenseType" set to the given \a licenseType_ set.
					\sa LiveResource::setObjects
				 */
				void setLicenseTypes(LiveNodes const &licenseType_) { baseSetObjects(nie::licenseType::iri(), licenseType_); }
				/*!
					\fn void removeLicenseTypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_licenseType "nie:licenseType" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLicenseTypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::licenseType::iri(), object_info); }
				/*!
					\fn QString getLicenseType()
					
					
					Returns the property \ref nie_licenseType "nie:licenseType". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getLicenseType() { return baseGetObject< nie::licenseType >(); }
				/*!
					\fn void setLicenseType(QString const &licenseType_)
					
					
					Sets the property \ref nie_licenseType "nie:licenseType" to the given \a licenseType.
					\sa LiveResource::setObject
				 */
				void setLicenseType(QString const &licenseType_) { baseSetObject< nie::licenseType >( licenseType_ ); }
				/*!
					\fn QString firstLicenseType()
					
					
					Returns the first property \ref nie_licenseType "nie:licenseType". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstLicenseType() { return baseFirstObject< nie::licenseType >(); }
				/*!
					\fn void addLicenseType(QString const &licenseType_)
					
					
					Adds the given \a licenseType_ to the property \ref nie_licenseType "nie:licenseType" set.
					\sa LiveResource::addObject
				 */
				void addLicenseType(QString const &licenseType_) { baseAddObject< nie::licenseType >( licenseType_ ); }
				/*!
					\fn void removeLicenseType(QString const &licenseType_)
					
					
					Removes the given \a licenseType_ from the property \ref nie_licenseType "nie:licenseType" set.
					\sa LiveResource::removeObject
				 */
				void removeLicenseType(QString const &licenseType_) { baseRemoveObject< nie::licenseType >(licenseType_); }

				/* Property generated from nao:hasProperty
				 * \n rdfs:range=nao:Property
				 * \n tracker:modified=1897
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nao::Property Property;
				/*!
					\fn LiveNodes liveNaoHasPropertys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nao_hasProperty "nao:hasProperty" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNaoHasPropertys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nao::hasProperty >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNaoHasPropertys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nao_hasProperty "nao:hasProperty" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNaoHasPropertys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nao::hasProperty >(object_info, strategy, parent); }
				/*!
					\fn void setNaoHasPropertys(LiveNodes const &naoHasProperty_)
					
					
					Sets the property \ref nao_hasProperty "nao:hasProperty" set to the given \a naoHasProperty_ set.
					\sa LiveResource::setObjects
				 */
				void setNaoHasPropertys(LiveNodes const &naoHasProperty_) { baseSetObjects(nao::hasProperty::iri(), naoHasProperty_); }
				/*!
					\fn void removeNaoHasPropertys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nao_hasProperty "nao:hasProperty" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNaoHasPropertys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nao::hasProperty::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nao::Property > firstNaoHasProperty()
					
					
					Returns the first property \ref nao_hasProperty "nao:hasProperty". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nao::Property > firstNaoHasProperty() { return baseFirstObject< nao::hasProperty >(); }
				/*!
					\fn ::SopranoLive::Live< nao::Property > addNaoHasProperty()
					
					
					Adds a new uniquely named resource to the property \ref nao_hasProperty "nao:hasProperty" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nao::Property > addNaoHasProperty() { return baseAddObject< nao::hasProperty >(); }
				/*!
					\fn ::SopranoLive::Live< nao::Property > addNaoHasProperty(::SopranoLive::Live< nao::Property > const &naoHasProperty_)
					
					
					Adds the given \a naoHasProperty_ to the property \ref nao_hasProperty "nao:hasProperty" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nao::Property > addNaoHasProperty(::SopranoLive::Live< nao::Property > const &naoHasProperty_) { return baseAddObject< nao::hasProperty >( naoHasProperty_ ); }
				/*!
					\fn void removeNaoHasProperty(::SopranoLive::Live< nao::Property > const &naoHasProperty_)
					
					
					Removes the given \a naoHasProperty_ from the property \ref nao_hasProperty "nao:hasProperty" set.
					\sa LiveResource::removeObject
				 */
				void removeNaoHasProperty(::SopranoLive::Live< nao::Property > const &naoHasProperty_) { baseRemoveObject< nao::hasProperty >(naoHasProperty_); }

				/* Property generated from nie:plainTextContent
				 * \n Plain-text representation of the content of a InformationElement with all markup removed. The main purpose of this property is full-text indexing and search. Its exact content is considered application-specific. The user can make no assumptions about what is and what is not contained within. Applications should use more specific properties wherever possible.
				 * \n rdfs:label=Plain-text content
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:weight=2
				 * \n tracker:modified=1619
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePlainTextContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_plainTextContent "nie:plainTextContent" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePlainTextContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::plainTextContent >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPlainTextContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_plainTextContent "nie:plainTextContent" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPlainTextContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::plainTextContent >(object_info, strategy, parent); }
				/*!
					\fn void setPlainTextContents(LiveNodes const &plainTextContent_)
					
					
					Sets the property \ref nie_plainTextContent "nie:plainTextContent" set to the given \a plainTextContent_ set.
					\sa LiveResource::setObjects
				 */
				void setPlainTextContents(LiveNodes const &plainTextContent_) { baseSetObjects(nie::plainTextContent::iri(), plainTextContent_); }
				/*!
					\fn void removePlainTextContents(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_plainTextContent "nie:plainTextContent" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePlainTextContents(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::plainTextContent::iri(), object_info); }
				/*!
					\fn QString getPlainTextContent()
					
					
					Returns the property \ref nie_plainTextContent "nie:plainTextContent". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getPlainTextContent() { return baseGetObject< nie::plainTextContent >(); }
				/*!
					\fn void setPlainTextContent(QString const &plainTextContent_)
					
					
					Sets the property \ref nie_plainTextContent "nie:plainTextContent" to the given \a plainTextContent.
					\sa LiveResource::setObject
				 */
				void setPlainTextContent(QString const &plainTextContent_) { baseSetObject< nie::plainTextContent >( plainTextContent_ ); }
				/*!
					\fn QString firstPlainTextContent()
					
					
					Returns the first property \ref nie_plainTextContent "nie:plainTextContent". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstPlainTextContent() { return baseFirstObject< nie::plainTextContent >(); }
				/*!
					\fn void addPlainTextContent(QString const &plainTextContent_)
					
					
					Adds the given \a plainTextContent_ to the property \ref nie_plainTextContent "nie:plainTextContent" set.
					\sa LiveResource::addObject
				 */
				void addPlainTextContent(QString const &plainTextContent_) { baseAddObject< nie::plainTextContent >( plainTextContent_ ); }
				/*!
					\fn void removePlainTextContent(QString const &plainTextContent_)
					
					
					Removes the given \a plainTextContent_ from the property \ref nie_plainTextContent "nie:plainTextContent" set.
					\sa LiveResource::removeObject
				 */
				void removePlainTextContent(QString const &plainTextContent_) { baseRemoveObject< nie::plainTextContent >(plainTextContent_); }

				/* Property generated from nie:contentAccessed
				 * \n rdfs:subPropertyOf=nie:informationElementDate
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1578
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContentAccesseds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_contentAccessed "nie:contentAccessed" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContentAccesseds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::contentAccessed >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContentAccesseds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_contentAccessed "nie:contentAccessed" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContentAccesseds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::contentAccessed >(object_info, strategy, parent); }
				/*!
					\fn void setContentAccesseds(LiveNodes const &contentAccessed_)
					
					
					Sets the property \ref nie_contentAccessed "nie:contentAccessed" set to the given \a contentAccessed_ set.
					\sa LiveResource::setObjects
				 */
				void setContentAccesseds(LiveNodes const &contentAccessed_) { baseSetObjects(nie::contentAccessed::iri(), contentAccessed_); }
				/*!
					\fn void removeContentAccesseds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_contentAccessed "nie:contentAccessed" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContentAccesseds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::contentAccessed::iri(), object_info); }
				/*!
					\fn QDateTime getContentAccessed()
					
					
					Returns the property \ref nie_contentAccessed "nie:contentAccessed". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getContentAccessed() { return baseGetObject< nie::contentAccessed >(); }
				/*!
					\fn void setContentAccessed(QDateTime const &contentAccessed_)
					
					
					Sets the property \ref nie_contentAccessed "nie:contentAccessed" to the given \a contentAccessed.
					\sa LiveResource::setObject
				 */
				void setContentAccessed(QDateTime const &contentAccessed_) { baseSetObject< nie::contentAccessed >( contentAccessed_ ); }
				/*!
					\fn QDateTime firstContentAccessed()
					
					
					Returns the first property \ref nie_contentAccessed "nie:contentAccessed". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstContentAccessed() { return baseFirstObject< nie::contentAccessed >(); }
				/*!
					\fn void addContentAccessed(QDateTime const &contentAccessed_)
					
					
					Adds the given \a contentAccessed_ to the property \ref nie_contentAccessed "nie:contentAccessed" set.
					\sa LiveResource::addObject
				 */
				void addContentAccessed(QDateTime const &contentAccessed_) { baseAddObject< nie::contentAccessed >( contentAccessed_ ); }
				/*!
					\fn void removeContentAccessed(QDateTime const &contentAccessed_)
					
					
					Removes the given \a contentAccessed_ from the property \ref nie_contentAccessed "nie:contentAccessed" set.
					\sa LiveResource::removeObject
				 */
				void removeContentAccessed(QDateTime const &contentAccessed_) { baseRemoveObject< nie::contentAccessed >(contentAccessed_); }

				/* Property generated from nie:comment
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:weight=2
				 * \n tracker:modified=1894
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_comment "nie:comment" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::comment >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_comment "nie:comment" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getComments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::comment >(object_info, strategy, parent); }
				/*!
					\fn void setComments(LiveNodes const &comment_)
					
					
					Sets the property \ref nie_comment "nie:comment" set to the given \a comment_ set.
					\sa LiveResource::setObjects
				 */
				void setComments(LiveNodes const &comment_) { baseSetObjects(nie::comment::iri(), comment_); }
				/*!
					\fn void removeComments(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_comment "nie:comment" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeComments(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::comment::iri(), object_info); }
				/*!
					\fn QString getComment()
					
					
					Returns the property \ref nie_comment "nie:comment". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getComment() { return baseGetObject< nie::comment >(); }
				/*!
					\fn void setComment(QString const &comment_)
					
					
					Sets the property \ref nie_comment "nie:comment" to the given \a comment.
					\sa LiveResource::setObject
				 */
				void setComment(QString const &comment_) { baseSetObject< nie::comment >( comment_ ); }
				/*!
					\fn QString firstComment()
					
					
					Returns the first property \ref nie_comment "nie:comment". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstComment() { return baseFirstObject< nie::comment >(); }
				/*!
					\fn void addComment(QString const &comment_)
					
					
					Adds the given \a comment_ to the property \ref nie_comment "nie:comment" set.
					\sa LiveResource::addObject
				 */
				void addComment(QString const &comment_) { baseAddObject< nie::comment >( comment_ ); }
				/*!
					\fn void removeComment(QString const &comment_)
					
					
					Removes the given \a comment_ from the property \ref nie_comment "nie:comment" set.
					\sa LiveResource::removeObject
				 */
				void removeComment(QString const &comment_) { baseRemoveObject< nie::comment >(comment_); }

				/* Property generated from nie:generator
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1519
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveGenerators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_generator "nie:generator" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveGenerators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::generator >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getGenerators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_generator "nie:generator" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getGenerators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::generator >(object_info, strategy, parent); }
				/*!
					\fn void setGenerators(LiveNodes const &generator_)
					
					
					Sets the property \ref nie_generator "nie:generator" set to the given \a generator_ set.
					\sa LiveResource::setObjects
				 */
				void setGenerators(LiveNodes const &generator_) { baseSetObjects(nie::generator::iri(), generator_); }
				/*!
					\fn void removeGenerators(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_generator "nie:generator" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeGenerators(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::generator::iri(), object_info); }
				/*!
					\fn QString getGenerator()
					
					
					Returns the property \ref nie_generator "nie:generator". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getGenerator() { return baseGetObject< nie::generator >(); }
				/*!
					\fn void setGenerator(QString const &generator_)
					
					
					Sets the property \ref nie_generator "nie:generator" to the given \a generator.
					\sa LiveResource::setObject
				 */
				void setGenerator(QString const &generator_) { baseSetObject< nie::generator >( generator_ ); }
				/*!
					\fn QString firstGenerator()
					
					
					Returns the first property \ref nie_generator "nie:generator". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstGenerator() { return baseFirstObject< nie::generator >(); }
				/*!
					\fn void addGenerator(QString const &generator_)
					
					
					Adds the given \a generator_ to the property \ref nie_generator "nie:generator" set.
					\sa LiveResource::addObject
				 */
				void addGenerator(QString const &generator_) { baseAddObject< nie::generator >( generator_ ); }
				/*!
					\fn void removeGenerator(QString const &generator_)
					
					
					Removes the given \a generator_ from the property \ref nie_generator "nie:generator" set.
					\sa LiveResource::removeObject
				 */
				void removeGenerator(QString const &generator_) { baseRemoveObject< nie::generator >(generator_); }

				/* Property generated from nie:isStoredAs
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:range=nie:DataObject
				 * \n tracker:modified=1801
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsStoredAss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nie::isStoredAs for replacement
					Returns a live model of property \ref nie_isStoredAs "nie:isStoredAs" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveIsStoredAss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::isStoredAs >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsStoredAss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nie::isStoredAs for replacement
					Returns all current values of property \ref nie_isStoredAs "nie:isStoredAs" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getIsStoredAss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::isStoredAs >(object_info, strategy, parent); }
				/*!
					\fn void setIsStoredAss(LiveNodes const &isStoredAs_)
					
					\deprecated See \ref nie::isStoredAs for replacement
					Sets the property \ref nie_isStoredAs "nie:isStoredAs" set to the given \a isStoredAs_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setIsStoredAss(LiveNodes const &isStoredAs_) { baseSetObjects(nie::isStoredAs::iri(), isStoredAs_); }
				/*!
					\fn void removeIsStoredAss(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nie::isStoredAs for replacement
					Removes the properties from property \ref nie_isStoredAs "nie:isStoredAs" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeIsStoredAss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::isStoredAs::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< DataObject > getIsStoredAs()
					
					\deprecated See \ref nie::isStoredAs for replacement
					Returns the property \ref nie_isStoredAs "nie:isStoredAs". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< DataObject > getIsStoredAs() { return baseGetObject< nie::isStoredAs >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > setIsStoredAs(::SopranoLive::Live< DataObject > const &isStoredAs_)
					
					\deprecated See \ref nie::isStoredAs for replacement
					Sets the property \ref nie_isStoredAs "nie:isStoredAs" to the given \a isStoredAs.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< DataObject > setIsStoredAs(::SopranoLive::Live< DataObject > const &isStoredAs_) { return baseSetObject< nie::isStoredAs >( isStoredAs_ ); }
				/*!
					\fn ::SopranoLive::Live< DataObject > firstIsStoredAs()
					
					\deprecated See \ref nie::isStoredAs for replacement
					Returns the first property \ref nie_isStoredAs "nie:isStoredAs". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< DataObject > firstIsStoredAs() { return baseFirstObject< nie::isStoredAs >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > addIsStoredAs()
					
					\deprecated See \ref nie::isStoredAs for replacement
					Adds a new uniquely named resource to the property \ref nie_isStoredAs "nie:isStoredAs" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< DataObject > addIsStoredAs() { return baseAddObject< nie::isStoredAs >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > addIsStoredAs(::SopranoLive::Live< DataObject > const &isStoredAs_)
					
					\deprecated See \ref nie::isStoredAs for replacement
					Adds the given \a isStoredAs_ to the property \ref nie_isStoredAs "nie:isStoredAs" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< DataObject > addIsStoredAs(::SopranoLive::Live< DataObject > const &isStoredAs_) { return baseAddObject< nie::isStoredAs >( isStoredAs_ ); }
				/*!
					\fn void removeIsStoredAs(::SopranoLive::Live< DataObject > const &isStoredAs_)
					
					\deprecated See \ref nie::isStoredAs for replacement
					Removes the given \a isStoredAs_ from the property \ref nie_isStoredAs "nie:isStoredAs" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeIsStoredAs(::SopranoLive::Live< DataObject > const &isStoredAs_) { baseRemoveObject< nie::isStoredAs >(isStoredAs_); }

				/* Property generated from nie:rootElementOf
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nie:DataSource
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:weight=2
				 * \n tracker:modified=1385
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRootElementOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_rootElementOf "nie:rootElementOf" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRootElementOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::rootElementOf >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRootElementOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_rootElementOf "nie:rootElementOf" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRootElementOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::rootElementOf >(object_info, strategy, parent); }
				/*!
					\fn void setRootElementOfs(LiveNodes const &rootElementOf_)
					
					
					Sets the property \ref nie_rootElementOf "nie:rootElementOf" set to the given \a rootElementOf_ set.
					\sa LiveResource::setObjects
				 */
				void setRootElementOfs(LiveNodes const &rootElementOf_) { baseSetObjects(nie::rootElementOf::iri(), rootElementOf_); }
				/*!
					\fn void removeRootElementOfs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_rootElementOf "nie:rootElementOf" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRootElementOfs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::rootElementOf::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< DataSource > getRootElementOf()
					
					
					Returns the property \ref nie_rootElementOf "nie:rootElementOf". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< DataSource > getRootElementOf() { return baseGetObject< nie::rootElementOf >(); }
				/*!
					\fn ::SopranoLive::Live< DataSource > setRootElementOf(::SopranoLive::Live< DataSource > const &rootElementOf_)
					
					
					Sets the property \ref nie_rootElementOf "nie:rootElementOf" to the given \a rootElementOf.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< DataSource > setRootElementOf(::SopranoLive::Live< DataSource > const &rootElementOf_) { return baseSetObject< nie::rootElementOf >( rootElementOf_ ); }
				/*!
					\fn ::SopranoLive::Live< DataSource > firstRootElementOf()
					
					
					Returns the first property \ref nie_rootElementOf "nie:rootElementOf". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< DataSource > firstRootElementOf() { return baseFirstObject< nie::rootElementOf >(); }
				/*!
					\fn ::SopranoLive::Live< DataSource > addRootElementOf()
					
					
					Adds a new uniquely named resource to the property \ref nie_rootElementOf "nie:rootElementOf" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DataSource > addRootElementOf() { return baseAddObject< nie::rootElementOf >(); }
				/*!
					\fn ::SopranoLive::Live< DataSource > addRootElementOf(::SopranoLive::Live< DataSource > const &rootElementOf_)
					
					
					Adds the given \a rootElementOf_ to the property \ref nie_rootElementOf "nie:rootElementOf" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DataSource > addRootElementOf(::SopranoLive::Live< DataSource > const &rootElementOf_) { return baseAddObject< nie::rootElementOf >( rootElementOf_ ); }
				/*!
					\fn void removeRootElementOf(::SopranoLive::Live< DataSource > const &rootElementOf_)
					
					
					Removes the given \a rootElementOf_ from the property \ref nie_rootElementOf "nie:rootElementOf" set.
					\sa LiveResource::removeObject
				 */
				void removeRootElementOf(::SopranoLive::Live< DataSource > const &rootElementOf_) { baseRemoveObject< nie::rootElementOf >(rootElementOf_); }

				/* Property generated from nco:contributor
				 * \n An entity responsible for making contributions to the content of the InformationElement.
				 * \n rdfs:label=contributor
				 * \n rdfs:subPropertyOf=dc:contributor
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:writeback=true
				 * \n tracker:modified=1373
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNcoContributors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nco_contributor "nco:contributor" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNcoContributors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nco::contributor >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNcoContributors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nco_contributor "nco:contributor" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNcoContributors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nco::contributor >(object_info, strategy, parent); }
				/*!
					\fn void setNcoContributors(LiveNodes const &ncoContributor_)
					
					
					Sets the property \ref nco_contributor "nco:contributor" set to the given \a ncoContributor_ set.
					\sa LiveResource::setObjects
				 */
				void setNcoContributors(LiveNodes const &ncoContributor_) { baseSetObjects(nco::contributor::iri(), ncoContributor_); }
				/*!
					\fn void removeNcoContributors(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nco_contributor "nco:contributor" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNcoContributors(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nco::contributor::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstNcoContributor()
					
					
					Returns the first property \ref nco_contributor "nco:contributor". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstNcoContributor() { return baseFirstObject< nco::contributor >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addNcoContributor()
					
					
					Adds a new uniquely named resource to the property \ref nco_contributor "nco:contributor" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addNcoContributor() { return baseAddObject< nco::contributor >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addNcoContributor(::SopranoLive::Live< nco::Contact > const &ncoContributor_)
					
					
					Adds the given \a ncoContributor_ to the property \ref nco_contributor "nco:contributor" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addNcoContributor(::SopranoLive::Live< nco::Contact > const &ncoContributor_) { return baseAddObject< nco::contributor >( ncoContributor_ ); }
				/*!
					\fn void removeNcoContributor(::SopranoLive::Live< nco::Contact > const &ncoContributor_)
					
					
					Removes the given \a ncoContributor_ from the property \ref nco_contributor "nco:contributor" set.
					\sa LiveResource::removeObject
				 */
				void removeNcoContributor(::SopranoLive::Live< nco::Contact > const &ncoContributor_) { baseRemoveObject< nco::contributor >(ncoContributor_); }

				/* Property generated from nie:depends
				 * \n rdfs:subPropertyOf=nie:relatedTo
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1295
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDependss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_depends "nie:depends" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDependss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::depends >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDependss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_depends "nie:depends" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDependss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::depends >(object_info, strategy, parent); }
				/*!
					\fn void setDependss(LiveNodes const &depends_)
					
					
					Sets the property \ref nie_depends "nie:depends" set to the given \a depends_ set.
					\sa LiveResource::setObjects
				 */
				void setDependss(LiveNodes const &depends_) { baseSetObjects(nie::depends::iri(), depends_); }
				/*!
					\fn void removeDependss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_depends "nie:depends" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDependss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::depends::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< DataObject > getDepends()
					
					
					Returns the property \ref nie_depends "nie:depends". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< DataObject > getDepends() { return baseGetObject< nie::depends >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > setDepends(::SopranoLive::Live< DataObject > const &depends_)
					
					
					Sets the property \ref nie_depends "nie:depends" to the given \a depends.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< DataObject > setDepends(::SopranoLive::Live< DataObject > const &depends_) { return baseSetObject< nie::depends >( depends_ ); }
				/*!
					\fn ::SopranoLive::Live< DataObject > firstDepends()
					
					
					Returns the first property \ref nie_depends "nie:depends". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< DataObject > firstDepends() { return baseFirstObject< nie::depends >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > addDepends()
					
					
					Adds a new uniquely named resource to the property \ref nie_depends "nie:depends" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DataObject > addDepends() { return baseAddObject< nie::depends >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > addDepends(::SopranoLive::Live< DataObject > const &depends_)
					
					
					Adds the given \a depends_ to the property \ref nie_depends "nie:depends" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DataObject > addDepends(::SopranoLive::Live< DataObject > const &depends_) { return baseAddObject< nie::depends >( depends_ ); }
				/*!
					\fn void removeDepends(::SopranoLive::Live< DataObject > const &depends_)
					
					
					Removes the given \a depends_ from the property \ref nie_depends "nie:depends" set.
					\sa LiveResource::removeObject
				 */
				void removeDepends(::SopranoLive::Live< DataObject > const &depends_) { baseRemoveObject< nie::depends >(depends_); }

				/* Property generated from nie:keyword
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:writeback=true
				 * \n tracker:weight=5
				 * \n tracker:modified=1929
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveKeywords(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_keyword "nie:keyword" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveKeywords(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::keyword >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getKeywords(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_keyword "nie:keyword" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getKeywords(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::keyword >(object_info, strategy, parent); }
				/*!
					\fn void setKeywords(LiveNodes const &keyword_)
					
					
					Sets the property \ref nie_keyword "nie:keyword" set to the given \a keyword_ set.
					\sa LiveResource::setObjects
				 */
				void setKeywords(LiveNodes const &keyword_) { baseSetObjects(nie::keyword::iri(), keyword_); }
				/*!
					\fn void removeKeywords(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_keyword "nie:keyword" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeKeywords(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::keyword::iri(), object_info); }
				/*!
					\fn QString firstKeyword()
					
					
					Returns the first property \ref nie_keyword "nie:keyword". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstKeyword() { return baseFirstObject< nie::keyword >(); }
				/*!
					\fn void addKeyword(QString const &keyword_)
					
					
					Adds the given \a keyword_ to the property \ref nie_keyword "nie:keyword" set.
					\sa LiveResource::addObject
				 */
				void addKeyword(QString const &keyword_) { baseAddObject< nie::keyword >( keyword_ ); }
				/*!
					\fn void removeKeyword(QString const &keyword_)
					
					
					Removes the given \a keyword_ from the property \ref nie_keyword "nie:keyword" set.
					\sa LiveResource::removeObject
				 */
				void removeKeyword(QString const &keyword_) { baseRemoveObject< nie::keyword >(keyword_); }

				/* Property generated from nie:identifier
				 * \n rdfs:subPropertyOf=dc:identifier
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1283
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_identifier "nie:identifier" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::identifier >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_identifier "nie:identifier" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::identifier >(object_info, strategy, parent); }
				/*!
					\fn void setIdentifiers(LiveNodes const &identifier_)
					
					
					Sets the property \ref nie_identifier "nie:identifier" set to the given \a identifier_ set.
					\sa LiveResource::setObjects
				 */
				void setIdentifiers(LiveNodes const &identifier_) { baseSetObjects(nie::identifier::iri(), identifier_); }
				/*!
					\fn void removeIdentifiers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_identifier "nie:identifier" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIdentifiers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::identifier::iri(), object_info); }
				/*!
					\fn QString getIdentifier()
					
					
					Returns the property \ref nie_identifier "nie:identifier". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getIdentifier() { return baseGetObject< nie::identifier >(); }
				/*!
					\fn void setIdentifier(QString const &identifier_)
					
					
					Sets the property \ref nie_identifier "nie:identifier" to the given \a identifier.
					\sa LiveResource::setObject
				 */
				void setIdentifier(QString const &identifier_) { baseSetObject< nie::identifier >( identifier_ ); }
				/*!
					\fn QString firstIdentifier()
					
					
					Returns the first property \ref nie_identifier "nie:identifier". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstIdentifier() { return baseFirstObject< nie::identifier >(); }
				/*!
					\fn void addIdentifier(QString const &identifier_)
					
					
					Adds the given \a identifier_ to the property \ref nie_identifier "nie:identifier" set.
					\sa LiveResource::addObject
				 */
				void addIdentifier(QString const &identifier_) { baseAddObject< nie::identifier >( identifier_ ); }
				/*!
					\fn void removeIdentifier(QString const &identifier_)
					
					
					Removes the given \a identifier_ from the property \ref nie_identifier "nie:identifier" set.
					\sa LiveResource::removeObject
				 */
				void removeIdentifier(QString const &identifier_) { baseRemoveObject< nie::identifier >(identifier_); }

				/* Property generated from nie:hasPart
				 * \n rdfs:subPropertyOf=nie:relatedTo
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:weight=2
				 * \n tracker:modified=1302
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasParts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_hasPart "nie:hasPart" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasParts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::hasPart >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasParts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_hasPart "nie:hasPart" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasParts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::hasPart >(object_info, strategy, parent); }
				/*!
					\fn void setHasParts(LiveNodes const &hasPart_)
					
					
					Sets the property \ref nie_hasPart "nie:hasPart" set to the given \a hasPart_ set.
					\sa LiveResource::setObjects
				 */
				void setHasParts(LiveNodes const &hasPart_) { baseSetObjects(nie::hasPart::iri(), hasPart_); }
				/*!
					\fn void removeHasParts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_hasPart "nie:hasPart" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasParts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::hasPart::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< DataObject > firstHasPart()
					
					
					Returns the first property \ref nie_hasPart "nie:hasPart". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< DataObject > firstHasPart() { return baseFirstObject< nie::hasPart >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > addHasPart()
					
					
					Adds a new uniquely named resource to the property \ref nie_hasPart "nie:hasPart" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DataObject > addHasPart() { return baseAddObject< nie::hasPart >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > addHasPart(::SopranoLive::Live< DataObject > const &hasPart_)
					
					
					Adds the given \a hasPart_ to the property \ref nie_hasPart "nie:hasPart" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DataObject > addHasPart(::SopranoLive::Live< DataObject > const &hasPart_) { return baseAddObject< nie::hasPart >( hasPart_ ); }
				/*!
					\fn void removeHasPart(::SopranoLive::Live< DataObject > const &hasPart_)
					
					
					Removes the given \a hasPart_ from the property \ref nie_hasPart "nie:hasPart" set.
					\sa LiveResource::removeObject
				 */
				void removeHasPart(::SopranoLive::Live< DataObject > const &hasPart_) { baseRemoveObject< nie::hasPart >(hasPart_); }

				/* Property generated from nie:isLogicalPartOf
				 * \n rdfs:range=nie:InformationElement
				 * \n tracker:weight=2
				 * \n tracker:modified=1663
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveIsLogicalPartOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_isLogicalPartOf "nie:isLogicalPartOf" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsLogicalPartOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::isLogicalPartOf >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsLogicalPartOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_isLogicalPartOf "nie:isLogicalPartOf" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsLogicalPartOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::isLogicalPartOf >(object_info, strategy, parent); }
				/*!
					\fn void setIsLogicalPartOfs(LiveNodes const &isLogicalPartOf_)
					
					
					Sets the property \ref nie_isLogicalPartOf "nie:isLogicalPartOf" set to the given \a isLogicalPartOf_ set.
					\sa LiveResource::setObjects
				 */
				void setIsLogicalPartOfs(LiveNodes const &isLogicalPartOf_) { baseSetObjects(nie::isLogicalPartOf::iri(), isLogicalPartOf_); }
				/*!
					\fn void removeIsLogicalPartOfs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_isLogicalPartOf "nie:isLogicalPartOf" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsLogicalPartOfs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::isLogicalPartOf::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > firstIsLogicalPartOf()
					
					
					Returns the first property \ref nie_isLogicalPartOf "nie:isLogicalPartOf". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< InformationElement > firstIsLogicalPartOf() { return baseFirstObject< nie::isLogicalPartOf >(); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > addIsLogicalPartOf()
					
					
					Adds a new uniquely named resource to the property \ref nie_isLogicalPartOf "nie:isLogicalPartOf" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< InformationElement > addIsLogicalPartOf() { return baseAddObject< nie::isLogicalPartOf >(); }
				/*!
					\fn ::SopranoLive::Live< InformationElement > addIsLogicalPartOf(::SopranoLive::Live< InformationElement > const &isLogicalPartOf_)
					
					
					Adds the given \a isLogicalPartOf_ to the property \ref nie_isLogicalPartOf "nie:isLogicalPartOf" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< InformationElement > addIsLogicalPartOf(::SopranoLive::Live< InformationElement > const &isLogicalPartOf_) { return baseAddObject< nie::isLogicalPartOf >( isLogicalPartOf_ ); }
				/*!
					\fn void removeIsLogicalPartOf(::SopranoLive::Live< InformationElement > const &isLogicalPartOf_)
					
					
					Removes the given \a isLogicalPartOf_ from the property \ref nie_isLogicalPartOf "nie:isLogicalPartOf" set.
					\sa LiveResource::removeObject
				 */
				void removeIsLogicalPartOf(::SopranoLive::Live< InformationElement > const &isLogicalPartOf_) { baseRemoveObject< nie::isLogicalPartOf >(isLogicalPartOf_); }

				/* Property generated from maemo:relevance
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1899
				 * \n tracker:defaultValue=1000000
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMaemoRelevances(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref maemo_relevance "maemo:relevance" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMaemoRelevances(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< maemo::relevance >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMaemoRelevances(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref maemo_relevance "maemo:relevance" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMaemoRelevances(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< maemo::relevance >(object_info, strategy, parent); }
				/*!
					\fn void setMaemoRelevances(LiveNodes const &maemoRelevance_)
					
					
					Sets the property \ref maemo_relevance "maemo:relevance" set to the given \a maemoRelevance_ set.
					\sa LiveResource::setObjects
				 */
				void setMaemoRelevances(LiveNodes const &maemoRelevance_) { baseSetObjects(maemo::relevance::iri(), maemoRelevance_); }
				/*!
					\fn void removeMaemoRelevances(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref maemo_relevance "maemo:relevance" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMaemoRelevances(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(maemo::relevance::iri(), object_info); }
				/*!
					\fn double getMaemoRelevance()
					
					
					Returns the property \ref maemo_relevance "maemo:relevance". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getMaemoRelevance() { return baseGetObject< maemo::relevance >(); }
				/*!
					\fn void setMaemoRelevance(double const &maemoRelevance_)
					
					
					Sets the property \ref maemo_relevance "maemo:relevance" to the given \a maemoRelevance.
					\sa LiveResource::setObject
				 */
				void setMaemoRelevance(double const &maemoRelevance_) { baseSetObject< maemo::relevance >( maemoRelevance_ ); }
				/*!
					\fn double firstMaemoRelevance()
					
					
					Returns the first property \ref maemo_relevance "maemo:relevance". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstMaemoRelevance() { return baseFirstObject< maemo::relevance >(); }
				/*!
					\fn void addMaemoRelevance(double const &maemoRelevance_)
					
					
					Adds the given \a maemoRelevance_ to the property \ref maemo_relevance "maemo:relevance" set.
					\sa LiveResource::addObject
				 */
				void addMaemoRelevance(double const &maemoRelevance_) { baseAddObject< maemo::relevance >( maemoRelevance_ ); }
				/*!
					\fn void removeMaemoRelevance(double const &maemoRelevance_)
					
					
					Removes the given \a maemoRelevance_ from the property \ref maemo_relevance "maemo:relevance" set.
					\sa LiveResource::removeObject
				 */
				void removeMaemoRelevance(double const &maemoRelevance_) { baseRemoveObject< maemo::relevance >(maemoRelevance_); }

				/* Property generated from nie:links
				 * \n A linking relation. A piece of content links/mentions a piece of data
				 * \n rdfs:subPropertyOf=nie:relatedTo
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:domain=nie:InformationElement
				 * \n tracker:modified=1018
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLinkss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nie_links "nie:links" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLinkss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nie::links >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLinkss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nie_links "nie:links" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLinkss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nie::links >(object_info, strategy, parent); }
				/*!
					\fn void setLinkss(LiveNodes const &links_)
					
					
					Sets the property \ref nie_links "nie:links" set to the given \a links_ set.
					\sa LiveResource::setObjects
				 */
				void setLinkss(LiveNodes const &links_) { baseSetObjects(nie::links::iri(), links_); }
				/*!
					\fn void removeLinkss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nie_links "nie:links" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLinkss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nie::links::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< DataObject > getLinks()
					
					
					Returns the property \ref nie_links "nie:links". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< DataObject > getLinks() { return baseGetObject< nie::links >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > setLinks(::SopranoLive::Live< DataObject > const &links_)
					
					
					Sets the property \ref nie_links "nie:links" to the given \a links.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< DataObject > setLinks(::SopranoLive::Live< DataObject > const &links_) { return baseSetObject< nie::links >( links_ ); }
				/*!
					\fn ::SopranoLive::Live< DataObject > firstLinks()
					
					
					Returns the first property \ref nie_links "nie:links". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< DataObject > firstLinks() { return baseFirstObject< nie::links >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > addLinks()
					
					
					Adds a new uniquely named resource to the property \ref nie_links "nie:links" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DataObject > addLinks() { return baseAddObject< nie::links >(); }
				/*!
					\fn ::SopranoLive::Live< DataObject > addLinks(::SopranoLive::Live< DataObject > const &links_)
					
					
					Adds the given \a links_ to the property \ref nie_links "nie:links" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< DataObject > addLinks(::SopranoLive::Live< DataObject > const &links_) { return baseAddObject< nie::links >( links_ ); }
				/*!
					\fn void removeLinks(::SopranoLive::Live< DataObject > const &links_)
					
					
					Removes the given \a links_ from the property \ref nie_links "nie:links" set.
					\sa LiveResource::removeObject
				 */
				void removeLinks(::SopranoLive::Live< DataObject > const &links_) { baseRemoveObject< nie::links >(links_); }
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nie::DataObject::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nie::DataSource::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nie::InformationElement::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_NIE_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_NIE_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_NIE_H_POST_INCLUDES
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/slo.h>
#include <QtTracker/ontologies/mlo.h>
#include <QtTracker/ontologies/nao.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#endif
