/*
 * scal.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:26.637367
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/scal.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_SCAL_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_SCAL_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_scal_classes namespace scal class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_scal_properties namespace scal property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_scal_resources namespace scal resource definitions
		 *  @{
		 *  @}
		 */
		static const char scal_namespace_prefix[] = "http://www.tracker-project.org/temp/scal#";
		struct Ontology_scal
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(scal_namespace_prefix) + suffix;
			}
		};
		namespace scal
		{
			inline QUrl iri(QString suffix) { return Ontology_scal::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class AccessLevel;
			class AttendanceStatus;
			class Attendee;
			class AttendeeRole;
			class Calendar;
			class CalendarAlarm;
			class CalendarItem;
			class CalendarUserType;
			class Event;
			class EventStatus;
			class Journal;
			class JournalStatus;
			class RSVPValues;
			class RecurrenceRule;
			class TimePoint;
			class Todo;
			class TodoStatus;
			class TransparencyValues;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_SCAL_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_SCAL_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_SCAL_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace scal
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from scal:attendanceStatus
			 * \anchor scal_attendanceStatus
			 * \n Status of contact's assitance to the event
			 * \n rdfs:label=Attendance status
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:AttendanceStatus
			 * \n rdfs:domain=scal:Attendee
			 * \n tracker:modified=1274
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class attendanceStatus
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendanceStatus"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef AttendanceStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef AttendanceStatus RDFRange;
			};
			/*! Property generated from scal:attendeeRole
			 * \anchor scal_attendeeRole
			 * \n Property to link with an attendee role instance
			 * \n rdfs:label=Attendee role in the event
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:AttendeeRole
			 * \n rdfs:domain=scal:Attendee
			 * \n tracker:modified=1598
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class attendeeRole
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendeeRole"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef AttendeeRole Range;
				/// The full, non-localized rdf range type of this property
				typedef AttendeeRole RDFRange;
			};
			/*! Property generated from scal:attendeeContact
			 * \anchor scal_attendeeContact
			 * \n Link from the attendee to the actual contact
			 * \n rdfs:label=Link to contact
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=scal:Attendee
			 * \n tracker:modified=1252
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class attendeeContact
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendeeContact"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from scal:rsvp
			 * \anchor scal_rsvp
			 * \n Link an attendee with his rsvp status
			 * \n rdfs:label=rsvp
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:RSVPValues
			 * \n rdfs:domain=scal:Attendee
			 * \n tracker:modified=1609
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class rsvp
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#rsvp"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef RSVPValues Range;
				/// The full, non-localized rdf range type of this property
				typedef RSVPValues RDFRange;
			};
			/*! Property generated from scal:calendarUserType
			 * \anchor scal_calendarUserType
			 * \n Link an attendee instance with a cutype
			 * \n rdfs:label=Calendar user type
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:CalendarUserType
			 * \n rdfs:domain=scal:Attendee
			 * \n tracker:modified=1571
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class calendarUserType
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#calendarUserType"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef CalendarUserType Range;
				/// The full, non-localized rdf range type of this property
				typedef CalendarUserType RDFRange;
			};
			/*! Property generated from scal:member
			 * \anchor scal_member
			 * \n To specify the group or list membership of the calendar user specified by the property
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:label=Member
			 * \n tracker:modified=1759
			 * \n rdfs:domain=scal:Attendee
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class member
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#member"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from scal:delegated-to
			 * \anchor scal_delegated_to
			 * \n to indicate the calendar users that the original request was delegated to
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:label=Delegated-to
			 * \n tracker:modified=1057
			 * \n rdfs:domain=scal:Attendee
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class delegated_to
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#delegated-to"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from scal:delegated-from
			 * \anchor scal_delegated_from
			 * \n to indicate the calendar users whom the request was delegated from
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:label=Delegated-from
			 * \n tracker:modified=1136
			 * \n rdfs:domain=scal:Attendee
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class delegated_from
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#delegated-from"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from scal:sent-by
			 * \anchor scal_sent_by
			 * \n to indicate whom is acting on behalf of the ATTENDEE
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:label=Sent-by
			 * \n tracker:modified=1741
			 * \n rdfs:domain=scal:Attendee
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class sent_by
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#sent-by"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Attendee Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Attendee RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from scal:alarmOffset
			 * \anchor scal_alarmOffset
			 * \n Offset of the alarm respect to the Calendar item start time. In minutes
			 * \n rdfs:label=Alarm offset
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=scal:CalendarAlarm
			 * \n tracker:modified=1798
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class alarmOffset
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#alarmOffset"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef CalendarAlarm Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarAlarm RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from scal:alarmAttendee
			 * \anchor scal_alarmAttendee
			 * \n Alarms can have attendees. RFC has told
			 * \n rdfs:range=scal:Attendee
			 * \n rdfs:label=Alarm attendee
			 * \n tracker:modified=1927
			 * \n rdfs:domain=scal:CalendarAlarm
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class alarmAttendee
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#alarmAttendee"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef CalendarAlarm Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarAlarm RDFDomain;
				/// The localized c++ range type of this property
				typedef Attendee Range;
				/// The full, non-localized rdf range type of this property
				typedef Attendee RDFRange;
			};
			/*! Property generated from scal:belongsToCalendar
			 * \anchor scal_belongsToCalendar
			 * \n Relation between a calendar item and a calendar.
			 * \n rdfs:label=Belongs to calentar
			 * \n rdfs:subPropertyOf=nie:isLogicalPartOf
			 * \n rdfs:range=scal:Calendar
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:modified=1722
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class belongsToCalendar
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#belongsToCalendar"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef Calendar Range;
				/// The full, non-localized rdf range type of this property
				typedef Calendar RDFRange;
			};
			/*! Property generated from scal:textLocation
			 * \anchor scal_textLocation
			 * \n Textual description of location for an item. Sec. 4.8.1.7. Use better mlo:location
			 * \n rdfs:label=Text Location
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:modified=1787
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class textLocation
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#textLocation"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from scal:resources
			 * \anchor scal_resources
			 * \n Resources required for the calendar item (equipment, installations...)
			 * \n rdfs:label=Resources
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:modified=1783
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class resources
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#resources"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from scal:transparency
			 * \anchor scal_transparency
			 * \n Time transparency for the item (busy time or transparent)
			 * \n rdfs:label=Transparency
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:TransparencyValues
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:modified=1271
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class transparency
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#transparency"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef TransparencyValues Range;
				/// The full, non-localized rdf range type of this property
				typedef TransparencyValues RDFRange;
			};
			/*! Property generated from scal:attendee
			 * \anchor scal_attendee
			 * \n Link of an Calendar item with an attendee, that can have different status
			 * \n rdfs:range=scal:Attendee
			 * \n rdfs:label=Attendee
			 * \n tracker:modified=1796
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class attendee
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendee"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef Attendee Range;
				/// The full, non-localized rdf range type of this property
				typedef Attendee RDFRange;
			};
			/*! Property generated from scal:contact
			 * \anchor scal_contact
			 * \n Contact related with the Calendar Item (spec 4.8.4.2)
			 * \n rdfs:range=scal:Attendee
			 * \n rdfs:label=Contact
			 * \n tracker:modified=1075
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class contact
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#contact"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef Attendee Range;
				/// The full, non-localized rdf range type of this property
				typedef Attendee RDFRange;
			};
			/*! Property generated from scal:calendarItemAlarm
			 * \anchor scal_calendarItemAlarm
			 * \n Link between calendar item and alarm
			 * \n rdfs:label=CalendarItem-alarm link
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:CalendarAlarm
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:modified=1353
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class calendarItemAlarm
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#calendarItemAlarm"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef CalendarAlarm Range;
				/// The full, non-localized rdf range type of this property
				typedef CalendarAlarm RDFRange;
			};
			/*! Property generated from scal:access
			 * \anchor scal_access
			 * \n Access classification: public private...
			 * \n rdfs:range=scal:AccessLevel
			 * \n rdfs:label=Access
			 * \n tracker:modified=1053
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class access
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#access"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef AccessLevel Range;
				/// The full, non-localized rdf range type of this property
				typedef AccessLevel RDFRange;
			};
			/*! Property generated from scal:start
			 * \anchor scal_start
			 * \n Start time of a calendar item
			 * \n rdfs:label=start time
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:TimePoint
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:modified=1641
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class start
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#start"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef TimePoint Range;
				/// The full, non-localized rdf range type of this property
				typedef TimePoint RDFRange;
			};
			/*! Property generated from scal:end
			 * \anchor scal_end
			 * \n End time of a calendar item. Set always a value to avoid OPTIONALS
			 * \n rdfs:label=end time
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:TimePoint
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:modified=1058
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class end
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#end"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef TimePoint Range;
				/// The full, non-localized rdf range type of this property
				typedef TimePoint RDFRange;
			};
			/*! Property generated from scal:isAllDay
			 * \anchor scal_isAllDay
			 * \n True if the event applies to the whole day
			 * \n rdfs:label=Whole day calendar item
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:modified=1180
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class isAllDay
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#isAllDay"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from scal:priority
			 * \anchor scal_priority
			 * \n Relative priority of th event
			 * \n rdfs:label=Priority
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:modified=1794
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class priority
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#priority"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from scal:attachment
			 * \anchor scal_attachment
			 * \n Item attached to a calendar item
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:label=Attachment
			 * \n tracker:modified=1517
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class attachment
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attachment"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef nie::DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nie::DataObject RDFRange;
			};
			/*! Property generated from scal:rrule
			 * \anchor scal_rrule
			 * \n Repeating pattern for recurring CalendarItems
			 * \n rdfs:range=scal:RecurrenceRule
			 * \n rdfs:label=recurrence rule
			 * \n tracker:modified=1825
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class rrule
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#rrule"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef RecurrenceRule Range;
				/// The full, non-localized rdf range type of this property
				typedef RecurrenceRule RDFRange;
			};
			/*! Property generated from scal:rdate
			 * \anchor scal_rdate
			 * \n One of more concrete ocurrences of the calendar item using ';' as separator. Included for backward compatibility. Use rrule instead
			 * \n rdfs:label=Recurrence date
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:modified=1968
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class rdate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#rdate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from scal:exceptionRDate
			 * \anchor scal_exceptionRDate
			 * \n One of more concrete exceptions of the calendar item using ';' as separator. Included for backward compatibility. Use rrule with exception='true' instead
			 * \n rdfs:label=Recurrence date exception
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=scal:CalendarItem
			 * \n tracker:modified=1856
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class exceptionRDate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#exceptionRDate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef CalendarItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef CalendarItem RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from scal:eventStatus
			 * \anchor scal_eventStatus
			 * \n Link of an event with its status
			 * \n rdfs:label=event status
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:EventStatus
			 * \n rdfs:domain=scal:Event
			 * \n tracker:modified=1017
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class eventStatus
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#eventStatus"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Event Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Event RDFDomain;
				/// The localized c++ range type of this property
				typedef EventStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef EventStatus RDFRange;
			};
			/*! Property generated from scal:journalStatus
			 * \anchor scal_journalStatus
			 * \n Link of an journal with its status
			 * \n rdfs:label=journal status
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:JournalStatus
			 * \n rdfs:domain=scal:Journal
			 * \n tracker:modified=1923
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class journalStatus
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#journalStatus"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Journal Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Journal RDFDomain;
				/// The localized c++ range type of this property
				typedef JournalStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef JournalStatus RDFRange;
			};
			/*! Property generated from scal:recurrencePattern
			 * \anchor scal_recurrencePattern
			 * \n Recurrence pattern enforcing all (14) the fields in RFC2445/4.3.10, with ';' as separator: freq;until;count;interval;bysecond;byminute;byhour;byday;bymonthday;byyearday;byweekno;bymonth;bysetpos;wkst 
			 * \n rdfs:label=Recurrence pattern
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=scal:RecurrenceRule
			 * \n tracker:modified=1576
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class recurrencePattern
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#recurrencePattern"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from scal:recurrenceStartDate
			 * \anchor scal_recurrenceStartDate
			 * \n Reuse here the start-date instance of the base event for this recurrence rule. This property makes possible to retrieve all required data to expand the recurrence rule in one short query
			 * \n rdfs:label=Recurrence pattern start date
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:TimePoint
			 * \n rdfs:domain=scal:RecurrenceRule
			 * \n tracker:modified=1153
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class recurrenceStartDate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#recurrenceStartDate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef TimePoint Range;
				/// The full, non-localized rdf range type of this property
				typedef TimePoint RDFRange;
			};
			/*! Property generated from scal:exception
			 * \anchor scal_exception
			 * \n True if this recurrence rules must be interpreted as an exception
			 * \n rdfs:label=recurrence rule exception
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=scal:RecurrenceRule
			 * \n tracker:modified=1617
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class exception
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#exception"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RecurrenceRule Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RecurrenceRule RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from scal:dateTime
			 * \anchor scal_dateTime
			 * \n Date and time in UTC
			 * \n rdfs:label=Time
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=scal:TimePoint
			 * \n tracker:modified=1206
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class dateTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#dateTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef TimePoint Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TimePoint RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from scal:TimeZone
			 * \anchor scal_TimeZone
			 * \n Timezone in the OLSON DB used as reference in the time. Use 'floating' for floating times or study the convenience of a boolean 'isFloating' attribute.
			 * \n rdfs:label=Reference time zone
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=scal:TimePoint
			 * \n tracker:modified=1961
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class TimeZone
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#TimeZone"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef TimePoint Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TimePoint RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from scal:todoStatus
			 * \anchor scal_todoStatus
			 * \n Link of an todo with its status
			 * \n rdfs:label=todo status
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:TodoStatus
			 * \n rdfs:domain=scal:Todo
			 * \n tracker:modified=1833
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class todoStatus
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#todoStatus"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Todo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Todo RDFDomain;
				/// The localized c++ range type of this property
				typedef TodoStatus Range;
				/// The full, non-localized rdf range type of this property
				typedef TodoStatus RDFRange;
			};
			/*! Property generated from scal:due
			 * \anchor scal_due
			 * \n Due time for a task to be completed
			 * \n rdfs:label=Due
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:TimePoint
			 * \n rdfs:domain=scal:Todo
			 * \n tracker:modified=1692
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class due
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#due"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Todo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Todo RDFDomain;
				/// The localized c++ range type of this property
				typedef TimePoint Range;
				/// The full, non-localized rdf range type of this property
				typedef TimePoint RDFRange;
			};
			/*! Property generated from scal:completed
			 * \anchor scal_completed
			 * \n Time when the task was completed
			 * \n rdfs:label=Completed
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=scal:TimePoint
			 * \n rdfs:domain=scal:Todo
			 * \n tracker:modified=1145
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class completed
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#completed"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Todo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Todo RDFDomain;
				/// The localized c++ range type of this property
				typedef TimePoint Range;
				/// The full, non-localized rdf range type of this property
				typedef TimePoint RDFRange;
			};
			/*! Property generated from scal:percentComplete
			 * \anchor scal_percentComplete
			 * \n % of the task completed
			 * \n rdfs:label=Percentage completed
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=scal:Todo
			 * \n tracker:modified=1474
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class percentComplete
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#percentComplete"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Todo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Todo RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from scal:anniversary
			 * \anchor scal_anniversary
			 * \n links a contact with the calendar event of an anniversary. (SCAL version)
			 * \n rdfs:range=scal:Event
			 * \n rdfs:label=anniversary event
			 * \n tracker:modified=1361
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class anniversary
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#anniversary"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef nco::Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nco::Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef Event Range;
				/// The full, non-localized rdf range type of this property
				typedef Event RDFRange;
			};
			/*! Property generated from scal:birthday
			 * \anchor scal_birthday
			 * \n links a contact with the calendar event of his birthday. (SCAL version)
			 * \n rdfs:range=scal:Event
			 * \n rdfs:label=birthday event
			 * \n tracker:modified=1510
			 * \n rdfs:domain=nco:Contact
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_scal_properties
			class birthday
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#birthday"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_scal Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef nco::Contact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nco::Contact RDFDomain;
				/// The localized c++ range type of this property
				typedef Event Range;
				/// The full, non-localized rdf range type of this property
				typedef Event RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			/*! Resource generated from scal:access-level-confidential
			 * \anchor scal_access_level_confidential
			 */
			/// \ingroup onto_scal_resources
			class access_level_confidential
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#access-level-confidential"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AccessLevel ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:access-level-private
			 * \anchor scal_access_level_private
			 */
			/// \ingroup onto_scal_resources
			class access_level_private
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#access-level-private"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AccessLevel ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:access-level-public
			 * \anchor scal_access_level_public
			 */
			/// \ingroup onto_scal_resources
			class access_level_public
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#access-level-public"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AccessLevel ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:attendance-accepted
			 * \anchor scal_attendance_accepted
			 */
			/// \ingroup onto_scal_resources
			class attendance_accepted
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendance-accepted"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AttendanceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:attendance-completed
			 * \anchor scal_attendance_completed
			 */
			/// \ingroup onto_scal_resources
			class attendance_completed
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendance-completed"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AttendanceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:attendance-declined
			 * \anchor scal_attendance_declined
			 */
			/// \ingroup onto_scal_resources
			class attendance_declined
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendance-declined"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AttendanceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:attendance-delegated
			 * \anchor scal_attendance_delegated
			 */
			/// \ingroup onto_scal_resources
			class attendance_delegated
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendance-delegated"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AttendanceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:attendance-in-process
			 * \anchor scal_attendance_in_process
			 */
			/// \ingroup onto_scal_resources
			class attendance_in_process
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendance-in-process"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AttendanceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:attendance-needs-action
			 * \anchor scal_attendance_needs_action
			 */
			/// \ingroup onto_scal_resources
			class attendance_needs_action
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendance-needs-action"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AttendanceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:attendance-tentative
			 * \anchor scal_attendance_tentative
			 */
			/// \ingroup onto_scal_resources
			class attendance_tentative
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendance-tentative"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AttendanceStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:attendee-role-chair
			 * \anchor scal_attendee_role_chair
			 */
			/// \ingroup onto_scal_resources
			class attendee_role_chair
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendee-role-chair"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AttendeeRole ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:attendee-role-non-participant
			 * \anchor scal_attendee_role_non_participant
			 */
			/// \ingroup onto_scal_resources
			class attendee_role_non_participant
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendee-role-non-participant"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AttendeeRole ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:attendee-role-opt-participant
			 * \anchor scal_attendee_role_opt_participant
			 */
			/// \ingroup onto_scal_resources
			class attendee_role_opt_participant
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendee-role-opt-participant"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AttendeeRole ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:attendee-role-req-participant
			 * \anchor scal_attendee_role_req_participant
			 */
			/// \ingroup onto_scal_resources
			class attendee_role_req_participant
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#attendee-role-req-participant"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef AttendeeRole ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:cutype-group
			 * \anchor scal_cutype_group
			 */
			/// \ingroup onto_scal_resources
			class cutype_group
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#cutype-group"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef CalendarUserType ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:cutype-individual
			 * \anchor scal_cutype_individual
			 */
			/// \ingroup onto_scal_resources
			class cutype_individual
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#cutype-individual"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef CalendarUserType ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:cutype-resource
			 * \anchor scal_cutype_resource
			 */
			/// \ingroup onto_scal_resources
			class cutype_resource
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#cutype-resource"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef CalendarUserType ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:cutype-room
			 * \anchor scal_cutype_room
			 */
			/// \ingroup onto_scal_resources
			class cutype_room
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#cutype-room"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef CalendarUserType ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:cutype-unknown
			 * \anchor scal_cutype_unknown
			 */
			/// \ingroup onto_scal_resources
			class cutype_unknown
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#cutype-unknown"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef CalendarUserType ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:event-status-cancelled
			 * \anchor scal_event_status_cancelled
			 */
			/// \ingroup onto_scal_resources
			class event_status_cancelled
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#event-status-cancelled"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef EventStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:event-status-confirmed
			 * \anchor scal_event_status_confirmed
			 */
			/// \ingroup onto_scal_resources
			class event_status_confirmed
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#event-status-confirmed"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef EventStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:event-status-tentative
			 * \anchor scal_event_status_tentative
			 */
			/// \ingroup onto_scal_resources
			class event_status_tentative
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#event-status-tentative"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef EventStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:journal-status-cancelled
			 * \anchor scal_journal_status_cancelled
			 */
			/// \ingroup onto_scal_resources
			class journal_status_cancelled
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#journal-status-cancelled"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef JournalStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:journal-status-completed
			 * \anchor scal_journal_status_completed
			 */
			/// \ingroup onto_scal_resources
			class journal_status_completed
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#journal-status-completed"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef JournalStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:journal-status-in-process
			 * \anchor scal_journal_status_in_process
			 */
			/// \ingroup onto_scal_resources
			class journal_status_in_process
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#journal-status-in-process"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef JournalStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:journal-status-needs-action
			 * \anchor scal_journal_status_needs_action
			 */
			/// \ingroup onto_scal_resources
			class journal_status_needs_action
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#journal-status-needs-action"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef JournalStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:rsvp-value-false
			 * \anchor scal_rsvp_value_false
			 */
			/// \ingroup onto_scal_resources
			class rsvp_value_false
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#rsvp-value-false"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef RSVPValues ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:rsvp-value-true
			 * \anchor scal_rsvp_value_true
			 */
			/// \ingroup onto_scal_resources
			class rsvp_value_true
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#rsvp-value-true"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef RSVPValues ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:todo-status-cancelled
			 * \anchor scal_todo_status_cancelled
			 */
			/// \ingroup onto_scal_resources
			class todo_status_cancelled
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#todo-status-cancelled"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef TodoStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:todo-status-completed
			 * \anchor scal_todo_status_completed
			 */
			/// \ingroup onto_scal_resources
			class todo_status_completed
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#todo-status-completed"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef TodoStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:todo-status-in-process
			 * \anchor scal_todo_status_in_process
			 */
			/// \ingroup onto_scal_resources
			class todo_status_in_process
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#todo-status-in-process"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef TodoStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:todo-status-needs-action
			 * \anchor scal_todo_status_needs_action
			 */
			/// \ingroup onto_scal_resources
			class todo_status_needs_action
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#todo-status-needs-action"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef TodoStatus ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:transparency-opaque
			 * \anchor scal_transparency_opaque
			 */
			/// \ingroup onto_scal_resources
			class transparency_opaque
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#transparency-opaque"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef TransparencyValues ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from scal:transparency-transparent
			 * \anchor scal_transparency_transparent
			 */
			/// \ingroup onto_scal_resources
			class transparency_transparent
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#transparency-transparent"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef TransparencyValues ResourceType;
				//! The ontology of this resource
				typedef Ontology_scal Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_SCAL_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_SCAL_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_SCAL_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdfs.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace scal
		{

			using namespace rdfs;
			using namespace nie;
			using namespace rdf;
			using namespace xsd;
			using namespace nco;

			/*! Class generated from scal:AccessLevel
			 * \ingroup onto_scal_classes
			 * Access classification for a calendar item: public, private or confidential. Use the predefined instances in the ontology
			 * 
			 * rdfs:label = Access level
			 * 
			 * tracker:modified = 1201
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref scal_access_level_private "scal:access-level-private"
			 * 		\ref scal_access_level_public "scal:access-level-public"
			 * 		\ref scal_access_level_confidential "scal:access-level-confidential"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_access "scal:access"
			 */
			class AccessLevel
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#AccessLevel"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<AccessLevel> Live;
				AccessLevel() { this->attachInterfaceHelper< AccessLevel >(); }
				~AccessLevel() { this->detachInterfaceHelper< AccessLevel >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from scal:AttendanceStatus
			 * \ingroup onto_scal_classes
			 * Predefined set of instances: needs-action, accepted...
			 * 
			 * rdfs:label = Attendance status values (partstat in ical spec)
			 * 
			 * tracker:modified = 1410
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref scal_attendance_completed "scal:attendance-completed"
			 * 		\ref scal_attendance_needs_action "scal:attendance-needs-action"
			 * 		\ref scal_attendance_in_process "scal:attendance-in-process"
			 * 		\ref scal_attendance_tentative "scal:attendance-tentative"
			 * 		\ref scal_attendance_declined "scal:attendance-declined"
			 * 		\ref scal_attendance_delegated "scal:attendance-delegated"
			 * 		\ref scal_attendance_accepted "scal:attendance-accepted"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_attendanceStatus "scal:attendanceStatus"
			 */
			class AttendanceStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#AttendanceStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<AttendanceStatus> Live;
				AttendanceStatus() { this->attachInterfaceHelper< AttendanceStatus >(); }
				~AttendanceStatus() { this->detachInterfaceHelper< AttendanceStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from scal:Attendee
			 * \ingroup onto_scal_classes
			 * Contact related with a calendar item
			 * 
			 * rdfs:label = Event attendee
			 * 
			 * tracker:modified = 1629
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_alarmAttendee "scal:alarmAttendee"
			 * 		\ref scal_attendee "scal:attendee"
			 * 		\ref scal_contact "scal:contact"
			 */
			class Attendee
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#Attendee"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Attendee> Live;
				Attendee() { this->attachInterfaceHelper< Attendee >(); }
				~Attendee() { this->detachInterfaceHelper< Attendee >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from scal:delegated-to
				 * \n to indicate the calendar users that the original request was delegated to
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:label=Delegated-to
				 * \n tracker:modified=1057
				 * \n rdfs:domain=scal:Attendee
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nco::Contact Contact;
				/*!
					\fn LiveNodes liveDelegated_tos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_delegated_to "scal:delegated-to" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDelegated_tos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::delegated_to >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDelegated_tos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_delegated_to "scal:delegated-to" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDelegated_tos(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::delegated_to >(object_info, strategy, parent); }
				/*!
					\fn void setDelegated_tos(LiveNodes const &delegated_to_)
					
					
					Sets the property \ref scal_delegated_to "scal:delegated-to" set to the given \a delegated_to_ set.
					\sa LiveResource::setObjects
				 */
				void setDelegated_tos(LiveNodes const &delegated_to_) { baseSetObjects(scal::delegated_to::iri(), delegated_to_); }
				/*!
					\fn void removeDelegated_tos(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_delegated_to "scal:delegated-to" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDelegated_tos(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::delegated_to::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstDelegated_to()
					
					
					Returns the first property \ref scal_delegated_to "scal:delegated-to". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstDelegated_to() { return baseFirstObject< scal::delegated_to >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addDelegated_to()
					
					
					Adds a new uniquely named resource to the property \ref scal_delegated_to "scal:delegated-to" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addDelegated_to() { return baseAddObject< scal::delegated_to >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addDelegated_to(::SopranoLive::Live< nco::Contact > const &delegated_to_)
					
					
					Adds the given \a delegated_to_ to the property \ref scal_delegated_to "scal:delegated-to" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addDelegated_to(::SopranoLive::Live< nco::Contact > const &delegated_to_) { return baseAddObject< scal::delegated_to >( delegated_to_ ); }
				/*!
					\fn void removeDelegated_to(::SopranoLive::Live< nco::Contact > const &delegated_to_)
					
					
					Removes the given \a delegated_to_ from the property \ref scal_delegated_to "scal:delegated-to" set.
					\sa LiveResource::removeObject
				 */
				void removeDelegated_to(::SopranoLive::Live< nco::Contact > const &delegated_to_) { baseRemoveObject< scal::delegated_to >(delegated_to_); }

				/* Property generated from scal:delegated-from
				 * \n to indicate the calendar users whom the request was delegated from
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:label=Delegated-from
				 * \n tracker:modified=1136
				 * \n rdfs:domain=scal:Attendee
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDelegated_froms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_delegated_from "scal:delegated-from" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDelegated_froms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::delegated_from >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDelegated_froms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_delegated_from "scal:delegated-from" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDelegated_froms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::delegated_from >(object_info, strategy, parent); }
				/*!
					\fn void setDelegated_froms(LiveNodes const &delegated_from_)
					
					
					Sets the property \ref scal_delegated_from "scal:delegated-from" set to the given \a delegated_from_ set.
					\sa LiveResource::setObjects
				 */
				void setDelegated_froms(LiveNodes const &delegated_from_) { baseSetObjects(scal::delegated_from::iri(), delegated_from_); }
				/*!
					\fn void removeDelegated_froms(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_delegated_from "scal:delegated-from" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDelegated_froms(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::delegated_from::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstDelegated_from()
					
					
					Returns the first property \ref scal_delegated_from "scal:delegated-from". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstDelegated_from() { return baseFirstObject< scal::delegated_from >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addDelegated_from()
					
					
					Adds a new uniquely named resource to the property \ref scal_delegated_from "scal:delegated-from" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addDelegated_from() { return baseAddObject< scal::delegated_from >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addDelegated_from(::SopranoLive::Live< nco::Contact > const &delegated_from_)
					
					
					Adds the given \a delegated_from_ to the property \ref scal_delegated_from "scal:delegated-from" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addDelegated_from(::SopranoLive::Live< nco::Contact > const &delegated_from_) { return baseAddObject< scal::delegated_from >( delegated_from_ ); }
				/*!
					\fn void removeDelegated_from(::SopranoLive::Live< nco::Contact > const &delegated_from_)
					
					
					Removes the given \a delegated_from_ from the property \ref scal_delegated_from "scal:delegated-from" set.
					\sa LiveResource::removeObject
				 */
				void removeDelegated_from(::SopranoLive::Live< nco::Contact > const &delegated_from_) { baseRemoveObject< scal::delegated_from >(delegated_from_); }

				/* Property generated from scal:calendarUserType
				 * \n Link an attendee instance with a cutype
				 * \n rdfs:label=Calendar user type
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:CalendarUserType
				 * \n rdfs:domain=scal:Attendee
				 * \n tracker:modified=1571
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCalendarUserTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_calendarUserType "scal:calendarUserType" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCalendarUserTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::calendarUserType >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCalendarUserTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_calendarUserType "scal:calendarUserType" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCalendarUserTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::calendarUserType >(object_info, strategy, parent); }
				/*!
					\fn void setCalendarUserTypes(LiveNodes const &calendarUserType_)
					
					
					Sets the property \ref scal_calendarUserType "scal:calendarUserType" set to the given \a calendarUserType_ set.
					\sa LiveResource::setObjects
				 */
				void setCalendarUserTypes(LiveNodes const &calendarUserType_) { baseSetObjects(scal::calendarUserType::iri(), calendarUserType_); }
				/*!
					\fn void removeCalendarUserTypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_calendarUserType "scal:calendarUserType" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCalendarUserTypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::calendarUserType::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< CalendarUserType > getCalendarUserType()
					
					
					Returns the property \ref scal_calendarUserType "scal:calendarUserType". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< CalendarUserType > getCalendarUserType() { return baseGetObject< scal::calendarUserType >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarUserType > setCalendarUserType(::SopranoLive::Live< CalendarUserType > const &calendarUserType_)
					
					
					Sets the property \ref scal_calendarUserType "scal:calendarUserType" to the given \a calendarUserType.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< CalendarUserType > setCalendarUserType(::SopranoLive::Live< CalendarUserType > const &calendarUserType_) { return baseSetObject< scal::calendarUserType >( calendarUserType_ ); }
				/*!
					\fn ::SopranoLive::Live< CalendarUserType > firstCalendarUserType()
					
					
					Returns the first property \ref scal_calendarUserType "scal:calendarUserType". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< CalendarUserType > firstCalendarUserType() { return baseFirstObject< scal::calendarUserType >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarUserType > addCalendarUserType()
					
					
					Adds a new uniquely named resource to the property \ref scal_calendarUserType "scal:calendarUserType" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CalendarUserType > addCalendarUserType() { return baseAddObject< scal::calendarUserType >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarUserType > addCalendarUserType(::SopranoLive::Live< CalendarUserType > const &calendarUserType_)
					
					
					Adds the given \a calendarUserType_ to the property \ref scal_calendarUserType "scal:calendarUserType" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CalendarUserType > addCalendarUserType(::SopranoLive::Live< CalendarUserType > const &calendarUserType_) { return baseAddObject< scal::calendarUserType >( calendarUserType_ ); }
				/*!
					\fn void removeCalendarUserType(::SopranoLive::Live< CalendarUserType > const &calendarUserType_)
					
					
					Removes the given \a calendarUserType_ from the property \ref scal_calendarUserType "scal:calendarUserType" set.
					\sa LiveResource::removeObject
				 */
				void removeCalendarUserType(::SopranoLive::Live< CalendarUserType > const &calendarUserType_) { baseRemoveObject< scal::calendarUserType >(calendarUserType_); }

				/* Property generated from scal:member
				 * \n To specify the group or list membership of the calendar user specified by the property
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:label=Member
				 * \n tracker:modified=1759
				 * \n rdfs:domain=scal:Attendee
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMembers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_member "scal:member" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMembers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::member >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMembers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_member "scal:member" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMembers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::member >(object_info, strategy, parent); }
				/*!
					\fn void setMembers(LiveNodes const &member_)
					
					
					Sets the property \ref scal_member "scal:member" set to the given \a member_ set.
					\sa LiveResource::setObjects
				 */
				void setMembers(LiveNodes const &member_) { baseSetObjects(scal::member::iri(), member_); }
				/*!
					\fn void removeMembers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_member "scal:member" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMembers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::member::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstMember()
					
					
					Returns the first property \ref scal_member "scal:member". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstMember() { return baseFirstObject< scal::member >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addMember()
					
					
					Adds a new uniquely named resource to the property \ref scal_member "scal:member" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addMember() { return baseAddObject< scal::member >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addMember(::SopranoLive::Live< nco::Contact > const &member_)
					
					
					Adds the given \a member_ to the property \ref scal_member "scal:member" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addMember(::SopranoLive::Live< nco::Contact > const &member_) { return baseAddObject< scal::member >( member_ ); }
				/*!
					\fn void removeMember(::SopranoLive::Live< nco::Contact > const &member_)
					
					
					Removes the given \a member_ from the property \ref scal_member "scal:member" set.
					\sa LiveResource::removeObject
				 */
				void removeMember(::SopranoLive::Live< nco::Contact > const &member_) { baseRemoveObject< scal::member >(member_); }

				/* Property generated from scal:attendeeRole
				 * \n Property to link with an attendee role instance
				 * \n rdfs:label=Attendee role in the event
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:AttendeeRole
				 * \n rdfs:domain=scal:Attendee
				 * \n tracker:modified=1598
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAttendeeRoles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_attendeeRole "scal:attendeeRole" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAttendeeRoles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::attendeeRole >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAttendeeRoles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_attendeeRole "scal:attendeeRole" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAttendeeRoles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::attendeeRole >(object_info, strategy, parent); }
				/*!
					\fn void setAttendeeRoles(LiveNodes const &attendeeRole_)
					
					
					Sets the property \ref scal_attendeeRole "scal:attendeeRole" set to the given \a attendeeRole_ set.
					\sa LiveResource::setObjects
				 */
				void setAttendeeRoles(LiveNodes const &attendeeRole_) { baseSetObjects(scal::attendeeRole::iri(), attendeeRole_); }
				/*!
					\fn void removeAttendeeRoles(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_attendeeRole "scal:attendeeRole" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAttendeeRoles(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::attendeeRole::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< AttendeeRole > getAttendeeRole()
					
					
					Returns the property \ref scal_attendeeRole "scal:attendeeRole". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< AttendeeRole > getAttendeeRole() { return baseGetObject< scal::attendeeRole >(); }
				/*!
					\fn ::SopranoLive::Live< AttendeeRole > setAttendeeRole(::SopranoLive::Live< AttendeeRole > const &attendeeRole_)
					
					
					Sets the property \ref scal_attendeeRole "scal:attendeeRole" to the given \a attendeeRole.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< AttendeeRole > setAttendeeRole(::SopranoLive::Live< AttendeeRole > const &attendeeRole_) { return baseSetObject< scal::attendeeRole >( attendeeRole_ ); }
				/*!
					\fn ::SopranoLive::Live< AttendeeRole > firstAttendeeRole()
					
					
					Returns the first property \ref scal_attendeeRole "scal:attendeeRole". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< AttendeeRole > firstAttendeeRole() { return baseFirstObject< scal::attendeeRole >(); }
				/*!
					\fn ::SopranoLive::Live< AttendeeRole > addAttendeeRole()
					
					
					Adds a new uniquely named resource to the property \ref scal_attendeeRole "scal:attendeeRole" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AttendeeRole > addAttendeeRole() { return baseAddObject< scal::attendeeRole >(); }
				/*!
					\fn ::SopranoLive::Live< AttendeeRole > addAttendeeRole(::SopranoLive::Live< AttendeeRole > const &attendeeRole_)
					
					
					Adds the given \a attendeeRole_ to the property \ref scal_attendeeRole "scal:attendeeRole" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AttendeeRole > addAttendeeRole(::SopranoLive::Live< AttendeeRole > const &attendeeRole_) { return baseAddObject< scal::attendeeRole >( attendeeRole_ ); }
				/*!
					\fn void removeAttendeeRole(::SopranoLive::Live< AttendeeRole > const &attendeeRole_)
					
					
					Removes the given \a attendeeRole_ from the property \ref scal_attendeeRole "scal:attendeeRole" set.
					\sa LiveResource::removeObject
				 */
				void removeAttendeeRole(::SopranoLive::Live< AttendeeRole > const &attendeeRole_) { baseRemoveObject< scal::attendeeRole >(attendeeRole_); }

				/* Property generated from scal:sent-by
				 * \n to indicate whom is acting on behalf of the ATTENDEE
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:label=Sent-by
				 * \n tracker:modified=1741
				 * \n rdfs:domain=scal:Attendee
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSent_bys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_sent_by "scal:sent-by" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSent_bys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::sent_by >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSent_bys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_sent_by "scal:sent-by" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSent_bys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::sent_by >(object_info, strategy, parent); }
				/*!
					\fn void setSent_bys(LiveNodes const &sent_by_)
					
					
					Sets the property \ref scal_sent_by "scal:sent-by" set to the given \a sent_by_ set.
					\sa LiveResource::setObjects
				 */
				void setSent_bys(LiveNodes const &sent_by_) { baseSetObjects(scal::sent_by::iri(), sent_by_); }
				/*!
					\fn void removeSent_bys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_sent_by "scal:sent-by" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSent_bys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::sent_by::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstSent_by()
					
					
					Returns the first property \ref scal_sent_by "scal:sent-by". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstSent_by() { return baseFirstObject< scal::sent_by >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addSent_by()
					
					
					Adds a new uniquely named resource to the property \ref scal_sent_by "scal:sent-by" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addSent_by() { return baseAddObject< scal::sent_by >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addSent_by(::SopranoLive::Live< nco::Contact > const &sent_by_)
					
					
					Adds the given \a sent_by_ to the property \ref scal_sent_by "scal:sent-by" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addSent_by(::SopranoLive::Live< nco::Contact > const &sent_by_) { return baseAddObject< scal::sent_by >( sent_by_ ); }
				/*!
					\fn void removeSent_by(::SopranoLive::Live< nco::Contact > const &sent_by_)
					
					
					Removes the given \a sent_by_ from the property \ref scal_sent_by "scal:sent-by" set.
					\sa LiveResource::removeObject
				 */
				void removeSent_by(::SopranoLive::Live< nco::Contact > const &sent_by_) { baseRemoveObject< scal::sent_by >(sent_by_); }

				/* Property generated from scal:attendeeContact
				 * \n Link from the attendee to the actual contact
				 * \n rdfs:label=Link to contact
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=scal:Attendee
				 * \n tracker:modified=1252
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAttendeeContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_attendeeContact "scal:attendeeContact" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAttendeeContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::attendeeContact >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAttendeeContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_attendeeContact "scal:attendeeContact" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAttendeeContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::attendeeContact >(object_info, strategy, parent); }
				/*!
					\fn void setAttendeeContacts(LiveNodes const &attendeeContact_)
					
					
					Sets the property \ref scal_attendeeContact "scal:attendeeContact" set to the given \a attendeeContact_ set.
					\sa LiveResource::setObjects
				 */
				void setAttendeeContacts(LiveNodes const &attendeeContact_) { baseSetObjects(scal::attendeeContact::iri(), attendeeContact_); }
				/*!
					\fn void removeAttendeeContacts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_attendeeContact "scal:attendeeContact" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAttendeeContacts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::attendeeContact::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > getAttendeeContact()
					
					
					Returns the property \ref scal_attendeeContact "scal:attendeeContact". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::Contact > getAttendeeContact() { return baseGetObject< scal::attendeeContact >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > setAttendeeContact(::SopranoLive::Live< nco::Contact > const &attendeeContact_)
					
					
					Sets the property \ref scal_attendeeContact "scal:attendeeContact" to the given \a attendeeContact.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::Contact > setAttendeeContact(::SopranoLive::Live< nco::Contact > const &attendeeContact_) { return baseSetObject< scal::attendeeContact >( attendeeContact_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstAttendeeContact()
					
					
					Returns the first property \ref scal_attendeeContact "scal:attendeeContact". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstAttendeeContact() { return baseFirstObject< scal::attendeeContact >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addAttendeeContact()
					
					
					Adds a new uniquely named resource to the property \ref scal_attendeeContact "scal:attendeeContact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addAttendeeContact() { return baseAddObject< scal::attendeeContact >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addAttendeeContact(::SopranoLive::Live< nco::Contact > const &attendeeContact_)
					
					
					Adds the given \a attendeeContact_ to the property \ref scal_attendeeContact "scal:attendeeContact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addAttendeeContact(::SopranoLive::Live< nco::Contact > const &attendeeContact_) { return baseAddObject< scal::attendeeContact >( attendeeContact_ ); }
				/*!
					\fn void removeAttendeeContact(::SopranoLive::Live< nco::Contact > const &attendeeContact_)
					
					
					Removes the given \a attendeeContact_ from the property \ref scal_attendeeContact "scal:attendeeContact" set.
					\sa LiveResource::removeObject
				 */
				void removeAttendeeContact(::SopranoLive::Live< nco::Contact > const &attendeeContact_) { baseRemoveObject< scal::attendeeContact >(attendeeContact_); }

				/* Property generated from scal:attendanceStatus
				 * \n Status of contact's assitance to the event
				 * \n rdfs:label=Attendance status
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:AttendanceStatus
				 * \n rdfs:domain=scal:Attendee
				 * \n tracker:modified=1274
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAttendanceStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_attendanceStatus "scal:attendanceStatus" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAttendanceStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::attendanceStatus >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAttendanceStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_attendanceStatus "scal:attendanceStatus" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAttendanceStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::attendanceStatus >(object_info, strategy, parent); }
				/*!
					\fn void setAttendanceStatuss(LiveNodes const &attendanceStatus_)
					
					
					Sets the property \ref scal_attendanceStatus "scal:attendanceStatus" set to the given \a attendanceStatus_ set.
					\sa LiveResource::setObjects
				 */
				void setAttendanceStatuss(LiveNodes const &attendanceStatus_) { baseSetObjects(scal::attendanceStatus::iri(), attendanceStatus_); }
				/*!
					\fn void removeAttendanceStatuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_attendanceStatus "scal:attendanceStatus" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAttendanceStatuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::attendanceStatus::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< AttendanceStatus > getAttendanceStatus()
					
					
					Returns the property \ref scal_attendanceStatus "scal:attendanceStatus". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< AttendanceStatus > getAttendanceStatus() { return baseGetObject< scal::attendanceStatus >(); }
				/*!
					\fn ::SopranoLive::Live< AttendanceStatus > setAttendanceStatus(::SopranoLive::Live< AttendanceStatus > const &attendanceStatus_)
					
					
					Sets the property \ref scal_attendanceStatus "scal:attendanceStatus" to the given \a attendanceStatus.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< AttendanceStatus > setAttendanceStatus(::SopranoLive::Live< AttendanceStatus > const &attendanceStatus_) { return baseSetObject< scal::attendanceStatus >( attendanceStatus_ ); }
				/*!
					\fn ::SopranoLive::Live< AttendanceStatus > firstAttendanceStatus()
					
					
					Returns the first property \ref scal_attendanceStatus "scal:attendanceStatus". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< AttendanceStatus > firstAttendanceStatus() { return baseFirstObject< scal::attendanceStatus >(); }
				/*!
					\fn ::SopranoLive::Live< AttendanceStatus > addAttendanceStatus()
					
					
					Adds a new uniquely named resource to the property \ref scal_attendanceStatus "scal:attendanceStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AttendanceStatus > addAttendanceStatus() { return baseAddObject< scal::attendanceStatus >(); }
				/*!
					\fn ::SopranoLive::Live< AttendanceStatus > addAttendanceStatus(::SopranoLive::Live< AttendanceStatus > const &attendanceStatus_)
					
					
					Adds the given \a attendanceStatus_ to the property \ref scal_attendanceStatus "scal:attendanceStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AttendanceStatus > addAttendanceStatus(::SopranoLive::Live< AttendanceStatus > const &attendanceStatus_) { return baseAddObject< scal::attendanceStatus >( attendanceStatus_ ); }
				/*!
					\fn void removeAttendanceStatus(::SopranoLive::Live< AttendanceStatus > const &attendanceStatus_)
					
					
					Removes the given \a attendanceStatus_ from the property \ref scal_attendanceStatus "scal:attendanceStatus" set.
					\sa LiveResource::removeObject
				 */
				void removeAttendanceStatus(::SopranoLive::Live< AttendanceStatus > const &attendanceStatus_) { baseRemoveObject< scal::attendanceStatus >(attendanceStatus_); }

				/* Property generated from scal:rsvp
				 * \n Link an attendee with his rsvp status
				 * \n rdfs:label=rsvp
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:RSVPValues
				 * \n rdfs:domain=scal:Attendee
				 * \n tracker:modified=1609
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRsvps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_rsvp "scal:rsvp" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRsvps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::rsvp >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRsvps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_rsvp "scal:rsvp" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRsvps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::rsvp >(object_info, strategy, parent); }
				/*!
					\fn void setRsvps(LiveNodes const &rsvp_)
					
					
					Sets the property \ref scal_rsvp "scal:rsvp" set to the given \a rsvp_ set.
					\sa LiveResource::setObjects
				 */
				void setRsvps(LiveNodes const &rsvp_) { baseSetObjects(scal::rsvp::iri(), rsvp_); }
				/*!
					\fn void removeRsvps(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_rsvp "scal:rsvp" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRsvps(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::rsvp::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< RSVPValues > getRsvp()
					
					
					Returns the property \ref scal_rsvp "scal:rsvp". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< RSVPValues > getRsvp() { return baseGetObject< scal::rsvp >(); }
				/*!
					\fn ::SopranoLive::Live< RSVPValues > setRsvp(::SopranoLive::Live< RSVPValues > const &rsvp_)
					
					
					Sets the property \ref scal_rsvp "scal:rsvp" to the given \a rsvp.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< RSVPValues > setRsvp(::SopranoLive::Live< RSVPValues > const &rsvp_) { return baseSetObject< scal::rsvp >( rsvp_ ); }
				/*!
					\fn ::SopranoLive::Live< RSVPValues > firstRsvp()
					
					
					Returns the first property \ref scal_rsvp "scal:rsvp". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< RSVPValues > firstRsvp() { return baseFirstObject< scal::rsvp >(); }
				/*!
					\fn ::SopranoLive::Live< RSVPValues > addRsvp()
					
					
					Adds a new uniquely named resource to the property \ref scal_rsvp "scal:rsvp" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RSVPValues > addRsvp() { return baseAddObject< scal::rsvp >(); }
				/*!
					\fn ::SopranoLive::Live< RSVPValues > addRsvp(::SopranoLive::Live< RSVPValues > const &rsvp_)
					
					
					Adds the given \a rsvp_ to the property \ref scal_rsvp "scal:rsvp" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RSVPValues > addRsvp(::SopranoLive::Live< RSVPValues > const &rsvp_) { return baseAddObject< scal::rsvp >( rsvp_ ); }
				/*!
					\fn void removeRsvp(::SopranoLive::Live< RSVPValues > const &rsvp_)
					
					
					Removes the given \a rsvp_ from the property \ref scal_rsvp "scal:rsvp" set.
					\sa LiveResource::removeObject
				 */
				void removeRsvp(::SopranoLive::Live< RSVPValues > const &rsvp_) { baseRemoveObject< scal::rsvp >(rsvp_); }
				 //@}
			};

			/*! Class generated from scal:AttendeeRole
			 * \ingroup onto_scal_classes
			 * Predefined set of instances: chain, req-participant...
			 * 
			 * rdfs:label = Attendee role in the event (Role in ical spec)
			 * 
			 * tracker:modified = 1296
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref scal_attendee_role_non_participant "scal:attendee-role-non-participant"
			 * 		\ref scal_attendee_role_req_participant "scal:attendee-role-req-participant"
			 * 		\ref scal_attendee_role_opt_participant "scal:attendee-role-opt-participant"
			 * 		\ref scal_attendee_role_chair "scal:attendee-role-chair"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_attendeeRole "scal:attendeeRole"
			 */
			class AttendeeRole
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#AttendeeRole"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<AttendeeRole> Live;
				AttendeeRole() { this->attachInterfaceHelper< AttendeeRole >(); }
				~AttendeeRole() { this->detachInterfaceHelper< AttendeeRole >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from scal:Calendar
			 * \ingroup onto_scal_classes
			 * Group calendar items
			 * 
			 * rdfs:label = Calendar
			 * 
			 * tracker:modified = 1379
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_belongsToCalendar "scal:belongsToCalendar"
			 */
			class Calendar
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#Calendar"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Calendar> Live;
				Calendar() { this->attachInterfaceHelper< Calendar >(); }
				~Calendar() { this->detachInterfaceHelper< Calendar >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from scal:CalendarAlarm
			 * \ingroup onto_scal_classes
			 * An alam according to the ical definition
			 * 
			 * rdfs:label = Alarm
			 * 
			 * tracker:modified = 1266
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_calendarItemAlarm "scal:calendarItemAlarm"
			 */
			class CalendarAlarm
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#CalendarAlarm"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<CalendarAlarm> Live;
				CalendarAlarm() { this->attachInterfaceHelper< CalendarAlarm >(); }
				~CalendarAlarm() { this->detachInterfaceHelper< CalendarAlarm >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from scal:alarmAttendee
				 * \n Alarms can have attendees. RFC has told
				 * \n rdfs:range=scal:Attendee
				 * \n rdfs:label=Alarm attendee
				 * \n tracker:modified=1927
				 * \n rdfs:domain=scal:CalendarAlarm
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAlarmAttendees(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_alarmAttendee "scal:alarmAttendee" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAlarmAttendees(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::alarmAttendee >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAlarmAttendees(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_alarmAttendee "scal:alarmAttendee" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAlarmAttendees(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::alarmAttendee >(object_info, strategy, parent); }
				/*!
					\fn void setAlarmAttendees(LiveNodes const &alarmAttendee_)
					
					
					Sets the property \ref scal_alarmAttendee "scal:alarmAttendee" set to the given \a alarmAttendee_ set.
					\sa LiveResource::setObjects
				 */
				void setAlarmAttendees(LiveNodes const &alarmAttendee_) { baseSetObjects(scal::alarmAttendee::iri(), alarmAttendee_); }
				/*!
					\fn void removeAlarmAttendees(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_alarmAttendee "scal:alarmAttendee" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAlarmAttendees(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::alarmAttendee::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Attendee > firstAlarmAttendee()
					
					
					Returns the first property \ref scal_alarmAttendee "scal:alarmAttendee". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Attendee > firstAlarmAttendee() { return baseFirstObject< scal::alarmAttendee >(); }
				/*!
					\fn ::SopranoLive::Live< Attendee > addAlarmAttendee()
					
					
					Adds a new uniquely named resource to the property \ref scal_alarmAttendee "scal:alarmAttendee" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Attendee > addAlarmAttendee() { return baseAddObject< scal::alarmAttendee >(); }
				/*!
					\fn ::SopranoLive::Live< Attendee > addAlarmAttendee(::SopranoLive::Live< Attendee > const &alarmAttendee_)
					
					
					Adds the given \a alarmAttendee_ to the property \ref scal_alarmAttendee "scal:alarmAttendee" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Attendee > addAlarmAttendee(::SopranoLive::Live< Attendee > const &alarmAttendee_) { return baseAddObject< scal::alarmAttendee >( alarmAttendee_ ); }
				/*!
					\fn void removeAlarmAttendee(::SopranoLive::Live< Attendee > const &alarmAttendee_)
					
					
					Removes the given \a alarmAttendee_ from the property \ref scal_alarmAttendee "scal:alarmAttendee" set.
					\sa LiveResource::removeObject
				 */
				void removeAlarmAttendee(::SopranoLive::Live< Attendee > const &alarmAttendee_) { baseRemoveObject< scal::alarmAttendee >(alarmAttendee_); }

				/* Property generated from scal:alarmOffset
				 * \n Offset of the alarm respect to the Calendar item start time. In minutes
				 * \n rdfs:label=Alarm offset
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=scal:CalendarAlarm
				 * \n tracker:modified=1798
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAlarmOffsets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_alarmOffset "scal:alarmOffset" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAlarmOffsets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::alarmOffset >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAlarmOffsets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_alarmOffset "scal:alarmOffset" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAlarmOffsets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::alarmOffset >(object_info, strategy, parent); }
				/*!
					\fn void setAlarmOffsets(LiveNodes const &alarmOffset_)
					
					
					Sets the property \ref scal_alarmOffset "scal:alarmOffset" set to the given \a alarmOffset_ set.
					\sa LiveResource::setObjects
				 */
				void setAlarmOffsets(LiveNodes const &alarmOffset_) { baseSetObjects(scal::alarmOffset::iri(), alarmOffset_); }
				/*!
					\fn void removeAlarmOffsets(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_alarmOffset "scal:alarmOffset" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAlarmOffsets(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::alarmOffset::iri(), object_info); }
				/*!
					\fn qint64 getAlarmOffset()
					
					
					Returns the property \ref scal_alarmOffset "scal:alarmOffset". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getAlarmOffset() { return baseGetObject< scal::alarmOffset >(); }
				/*!
					\fn void setAlarmOffset(qint64 const &alarmOffset_)
					
					
					Sets the property \ref scal_alarmOffset "scal:alarmOffset" to the given \a alarmOffset.
					\sa LiveResource::setObject
				 */
				void setAlarmOffset(qint64 const &alarmOffset_) { baseSetObject< scal::alarmOffset >( alarmOffset_ ); }
				/*!
					\fn qint64 firstAlarmOffset()
					
					
					Returns the first property \ref scal_alarmOffset "scal:alarmOffset". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstAlarmOffset() { return baseFirstObject< scal::alarmOffset >(); }
				/*!
					\fn void addAlarmOffset(qint64 const &alarmOffset_)
					
					
					Adds the given \a alarmOffset_ to the property \ref scal_alarmOffset "scal:alarmOffset" set.
					\sa LiveResource::addObject
				 */
				void addAlarmOffset(qint64 const &alarmOffset_) { baseAddObject< scal::alarmOffset >( alarmOffset_ ); }
				/*!
					\fn void removeAlarmOffset(qint64 const &alarmOffset_)
					
					
					Removes the given \a alarmOffset_ from the property \ref scal_alarmOffset "scal:alarmOffset" set.
					\sa LiveResource::removeObject
				 */
				void removeAlarmOffset(qint64 const &alarmOffset_) { baseRemoveObject< scal::alarmOffset >(alarmOffset_); }
				 //@}
			};

			/*! Class generated from scal:CalendarItem
			 * \ingroup onto_scal_classes
			 * Superclass of the calendar entities
			 * 
			 * rdfs:label = Calendar item
			 * 
			 * tracker:modified = 1540
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class CalendarItem
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#CalendarItem"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<CalendarItem> Live;
				CalendarItem() { this->attachInterfaceHelper< CalendarItem >(); }
				~CalendarItem() { this->detachInterfaceHelper< CalendarItem >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from scal:rrule
				 * \n Repeating pattern for recurring CalendarItems
				 * \n rdfs:range=scal:RecurrenceRule
				 * \n rdfs:label=recurrence rule
				 * \n tracker:modified=1825
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRrules(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_rrule "scal:rrule" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRrules(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::rrule >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRrules(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_rrule "scal:rrule" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRrules(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::rrule >(object_info, strategy, parent); }
				/*!
					\fn void setRrules(LiveNodes const &rrule_)
					
					
					Sets the property \ref scal_rrule "scal:rrule" set to the given \a rrule_ set.
					\sa LiveResource::setObjects
				 */
				void setRrules(LiveNodes const &rrule_) { baseSetObjects(scal::rrule::iri(), rrule_); }
				/*!
					\fn void removeRrules(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_rrule "scal:rrule" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRrules(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::rrule::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceRule > firstRrule()
					
					
					Returns the first property \ref scal_rrule "scal:rrule". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< RecurrenceRule > firstRrule() { return baseFirstObject< scal::rrule >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceRule > addRrule()
					
					
					Adds a new uniquely named resource to the property \ref scal_rrule "scal:rrule" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RecurrenceRule > addRrule() { return baseAddObject< scal::rrule >(); }
				/*!
					\fn ::SopranoLive::Live< RecurrenceRule > addRrule(::SopranoLive::Live< RecurrenceRule > const &rrule_)
					
					
					Adds the given \a rrule_ to the property \ref scal_rrule "scal:rrule" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RecurrenceRule > addRrule(::SopranoLive::Live< RecurrenceRule > const &rrule_) { return baseAddObject< scal::rrule >( rrule_ ); }
				/*!
					\fn void removeRrule(::SopranoLive::Live< RecurrenceRule > const &rrule_)
					
					
					Removes the given \a rrule_ from the property \ref scal_rrule "scal:rrule" set.
					\sa LiveResource::removeObject
				 */
				void removeRrule(::SopranoLive::Live< RecurrenceRule > const &rrule_) { baseRemoveObject< scal::rrule >(rrule_); }

				/* Property generated from scal:rdate
				 * \n One of more concrete ocurrences of the calendar item using ';' as separator. Included for backward compatibility. Use rrule instead
				 * \n rdfs:label=Recurrence date
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:modified=1968
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRdates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_rdate "scal:rdate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRdates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::rdate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRdates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_rdate "scal:rdate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRdates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::rdate >(object_info, strategy, parent); }
				/*!
					\fn void setRdates(LiveNodes const &rdate_)
					
					
					Sets the property \ref scal_rdate "scal:rdate" set to the given \a rdate_ set.
					\sa LiveResource::setObjects
				 */
				void setRdates(LiveNodes const &rdate_) { baseSetObjects(scal::rdate::iri(), rdate_); }
				/*!
					\fn void removeRdates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_rdate "scal:rdate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRdates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::rdate::iri(), object_info); }
				/*!
					\fn qint64 getRdate()
					
					
					Returns the property \ref scal_rdate "scal:rdate". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getRdate() { return baseGetObject< scal::rdate >(); }
				/*!
					\fn void setRdate(qint64 const &rdate_)
					
					
					Sets the property \ref scal_rdate "scal:rdate" to the given \a rdate.
					\sa LiveResource::setObject
				 */
				void setRdate(qint64 const &rdate_) { baseSetObject< scal::rdate >( rdate_ ); }
				/*!
					\fn qint64 firstRdate()
					
					
					Returns the first property \ref scal_rdate "scal:rdate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstRdate() { return baseFirstObject< scal::rdate >(); }
				/*!
					\fn void addRdate(qint64 const &rdate_)
					
					
					Adds the given \a rdate_ to the property \ref scal_rdate "scal:rdate" set.
					\sa LiveResource::addObject
				 */
				void addRdate(qint64 const &rdate_) { baseAddObject< scal::rdate >( rdate_ ); }
				/*!
					\fn void removeRdate(qint64 const &rdate_)
					
					
					Removes the given \a rdate_ from the property \ref scal_rdate "scal:rdate" set.
					\sa LiveResource::removeObject
				 */
				void removeRdate(qint64 const &rdate_) { baseRemoveObject< scal::rdate >(rdate_); }

				/* Property generated from scal:textLocation
				 * \n Textual description of location for an item. Sec. 4.8.1.7. Use better mlo:location
				 * \n rdfs:label=Text Location
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:modified=1787
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTextLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_textLocation "scal:textLocation" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTextLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::textLocation >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTextLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_textLocation "scal:textLocation" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTextLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::textLocation >(object_info, strategy, parent); }
				/*!
					\fn void setTextLocations(LiveNodes const &textLocation_)
					
					
					Sets the property \ref scal_textLocation "scal:textLocation" set to the given \a textLocation_ set.
					\sa LiveResource::setObjects
				 */
				void setTextLocations(LiveNodes const &textLocation_) { baseSetObjects(scal::textLocation::iri(), textLocation_); }
				/*!
					\fn void removeTextLocations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_textLocation "scal:textLocation" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTextLocations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::textLocation::iri(), object_info); }
				/*!
					\fn qint64 getTextLocation()
					
					
					Returns the property \ref scal_textLocation "scal:textLocation". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getTextLocation() { return baseGetObject< scal::textLocation >(); }
				/*!
					\fn void setTextLocation(qint64 const &textLocation_)
					
					
					Sets the property \ref scal_textLocation "scal:textLocation" to the given \a textLocation.
					\sa LiveResource::setObject
				 */
				void setTextLocation(qint64 const &textLocation_) { baseSetObject< scal::textLocation >( textLocation_ ); }
				/*!
					\fn qint64 firstTextLocation()
					
					
					Returns the first property \ref scal_textLocation "scal:textLocation". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstTextLocation() { return baseFirstObject< scal::textLocation >(); }
				/*!
					\fn void addTextLocation(qint64 const &textLocation_)
					
					
					Adds the given \a textLocation_ to the property \ref scal_textLocation "scal:textLocation" set.
					\sa LiveResource::addObject
				 */
				void addTextLocation(qint64 const &textLocation_) { baseAddObject< scal::textLocation >( textLocation_ ); }
				/*!
					\fn void removeTextLocation(qint64 const &textLocation_)
					
					
					Removes the given \a textLocation_ from the property \ref scal_textLocation "scal:textLocation" set.
					\sa LiveResource::removeObject
				 */
				void removeTextLocation(qint64 const &textLocation_) { baseRemoveObject< scal::textLocation >(textLocation_); }

				/* Property generated from scal:start
				 * \n Start time of a calendar item
				 * \n rdfs:label=start time
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:TimePoint
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:modified=1641
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveStarts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_start "scal:start" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStarts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::start >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStarts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_start "scal:start" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStarts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::start >(object_info, strategy, parent); }
				/*!
					\fn void setStarts(LiveNodes const &start_)
					
					
					Sets the property \ref scal_start "scal:start" set to the given \a start_ set.
					\sa LiveResource::setObjects
				 */
				void setStarts(LiveNodes const &start_) { baseSetObjects(scal::start::iri(), start_); }
				/*!
					\fn void removeStarts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_start "scal:start" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStarts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::start::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > getStart()
					
					
					Returns the property \ref scal_start "scal:start". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TimePoint > getStart() { return baseGetObject< scal::start >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > setStart(::SopranoLive::Live< TimePoint > const &start_)
					
					
					Sets the property \ref scal_start "scal:start" to the given \a start.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TimePoint > setStart(::SopranoLive::Live< TimePoint > const &start_) { return baseSetObject< scal::start >( start_ ); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > firstStart()
					
					
					Returns the first property \ref scal_start "scal:start". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TimePoint > firstStart() { return baseFirstObject< scal::start >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > addStart()
					
					
					Adds a new uniquely named resource to the property \ref scal_start "scal:start" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimePoint > addStart() { return baseAddObject< scal::start >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > addStart(::SopranoLive::Live< TimePoint > const &start_)
					
					
					Adds the given \a start_ to the property \ref scal_start "scal:start" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimePoint > addStart(::SopranoLive::Live< TimePoint > const &start_) { return baseAddObject< scal::start >( start_ ); }
				/*!
					\fn void removeStart(::SopranoLive::Live< TimePoint > const &start_)
					
					
					Removes the given \a start_ from the property \ref scal_start "scal:start" set.
					\sa LiveResource::removeObject
				 */
				void removeStart(::SopranoLive::Live< TimePoint > const &start_) { baseRemoveObject< scal::start >(start_); }

				/* Property generated from scal:attachment
				 * \n Item attached to a calendar item
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:label=Attachment
				 * \n tracker:modified=1517
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nie::DataObject DataObject;
				/*!
					\fn LiveNodes liveAttachments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_attachment "scal:attachment" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAttachments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::attachment >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAttachments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_attachment "scal:attachment" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAttachments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::attachment >(object_info, strategy, parent); }
				/*!
					\fn void setAttachments(LiveNodes const &attachment_)
					
					
					Sets the property \ref scal_attachment "scal:attachment" set to the given \a attachment_ set.
					\sa LiveResource::setObjects
				 */
				void setAttachments(LiveNodes const &attachment_) { baseSetObjects(scal::attachment::iri(), attachment_); }
				/*!
					\fn void removeAttachments(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_attachment "scal:attachment" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAttachments(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::attachment::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > firstAttachment()
					
					
					Returns the first property \ref scal_attachment "scal:attachment". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nie::DataObject > firstAttachment() { return baseFirstObject< scal::attachment >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addAttachment()
					
					
					Adds a new uniquely named resource to the property \ref scal_attachment "scal:attachment" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addAttachment() { return baseAddObject< scal::attachment >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addAttachment(::SopranoLive::Live< nie::DataObject > const &attachment_)
					
					
					Adds the given \a attachment_ to the property \ref scal_attachment "scal:attachment" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addAttachment(::SopranoLive::Live< nie::DataObject > const &attachment_) { return baseAddObject< scal::attachment >( attachment_ ); }
				/*!
					\fn void removeAttachment(::SopranoLive::Live< nie::DataObject > const &attachment_)
					
					
					Removes the given \a attachment_ from the property \ref scal_attachment "scal:attachment" set.
					\sa LiveResource::removeObject
				 */
				void removeAttachment(::SopranoLive::Live< nie::DataObject > const &attachment_) { baseRemoveObject< scal::attachment >(attachment_); }

				/* Property generated from scal:contact
				 * \n Contact related with the Calendar Item (spec 4.8.4.2)
				 * \n rdfs:range=scal:Attendee
				 * \n rdfs:label=Contact
				 * \n tracker:modified=1075
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_contact "scal:contact" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::contact >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_contact "scal:contact" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::contact >(object_info, strategy, parent); }
				/*!
					\fn void setContacts(LiveNodes const &contact_)
					
					
					Sets the property \ref scal_contact "scal:contact" set to the given \a contact_ set.
					\sa LiveResource::setObjects
				 */
				void setContacts(LiveNodes const &contact_) { baseSetObjects(scal::contact::iri(), contact_); }
				/*!
					\fn void removeContacts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_contact "scal:contact" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContacts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::contact::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Attendee > firstContact()
					
					
					Returns the first property \ref scal_contact "scal:contact". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Attendee > firstContact() { return baseFirstObject< scal::contact >(); }
				/*!
					\fn ::SopranoLive::Live< Attendee > addContact()
					
					
					Adds a new uniquely named resource to the property \ref scal_contact "scal:contact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Attendee > addContact() { return baseAddObject< scal::contact >(); }
				/*!
					\fn ::SopranoLive::Live< Attendee > addContact(::SopranoLive::Live< Attendee > const &contact_)
					
					
					Adds the given \a contact_ to the property \ref scal_contact "scal:contact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Attendee > addContact(::SopranoLive::Live< Attendee > const &contact_) { return baseAddObject< scal::contact >( contact_ ); }
				/*!
					\fn void removeContact(::SopranoLive::Live< Attendee > const &contact_)
					
					
					Removes the given \a contact_ from the property \ref scal_contact "scal:contact" set.
					\sa LiveResource::removeObject
				 */
				void removeContact(::SopranoLive::Live< Attendee > const &contact_) { baseRemoveObject< scal::contact >(contact_); }

				/* Property generated from scal:access
				 * \n Access classification: public private...
				 * \n rdfs:range=scal:AccessLevel
				 * \n rdfs:label=Access
				 * \n tracker:modified=1053
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAccesss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_access "scal:access" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAccesss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::access >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAccesss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_access "scal:access" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAccesss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::access >(object_info, strategy, parent); }
				/*!
					\fn void setAccesss(LiveNodes const &access_)
					
					
					Sets the property \ref scal_access "scal:access" set to the given \a access_ set.
					\sa LiveResource::setObjects
				 */
				void setAccesss(LiveNodes const &access_) { baseSetObjects(scal::access::iri(), access_); }
				/*!
					\fn void removeAccesss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_access "scal:access" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAccesss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::access::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< AccessLevel > firstAccess()
					
					
					Returns the first property \ref scal_access "scal:access". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< AccessLevel > firstAccess() { return baseFirstObject< scal::access >(); }
				/*!
					\fn ::SopranoLive::Live< AccessLevel > addAccess()
					
					
					Adds a new uniquely named resource to the property \ref scal_access "scal:access" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AccessLevel > addAccess() { return baseAddObject< scal::access >(); }
				/*!
					\fn ::SopranoLive::Live< AccessLevel > addAccess(::SopranoLive::Live< AccessLevel > const &access_)
					
					
					Adds the given \a access_ to the property \ref scal_access "scal:access" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< AccessLevel > addAccess(::SopranoLive::Live< AccessLevel > const &access_) { return baseAddObject< scal::access >( access_ ); }
				/*!
					\fn void removeAccess(::SopranoLive::Live< AccessLevel > const &access_)
					
					
					Removes the given \a access_ from the property \ref scal_access "scal:access" set.
					\sa LiveResource::removeObject
				 */
				void removeAccess(::SopranoLive::Live< AccessLevel > const &access_) { baseRemoveObject< scal::access >(access_); }

				/* Property generated from scal:belongsToCalendar
				 * \n Relation between a calendar item and a calendar.
				 * \n rdfs:label=Belongs to calentar
				 * \n rdfs:subPropertyOf=nie:isLogicalPartOf
				 * \n rdfs:range=scal:Calendar
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:modified=1722
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBelongsToCalendars(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_belongsToCalendar "scal:belongsToCalendar" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBelongsToCalendars(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::belongsToCalendar >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBelongsToCalendars(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_belongsToCalendar "scal:belongsToCalendar" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBelongsToCalendars(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::belongsToCalendar >(object_info, strategy, parent); }
				/*!
					\fn void setBelongsToCalendars(LiveNodes const &belongsToCalendar_)
					
					
					Sets the property \ref scal_belongsToCalendar "scal:belongsToCalendar" set to the given \a belongsToCalendar_ set.
					\sa LiveResource::setObjects
				 */
				void setBelongsToCalendars(LiveNodes const &belongsToCalendar_) { baseSetObjects(scal::belongsToCalendar::iri(), belongsToCalendar_); }
				/*!
					\fn void removeBelongsToCalendars(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_belongsToCalendar "scal:belongsToCalendar" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBelongsToCalendars(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::belongsToCalendar::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Calendar > firstBelongsToCalendar()
					
					
					Returns the first property \ref scal_belongsToCalendar "scal:belongsToCalendar". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Calendar > firstBelongsToCalendar() { return baseFirstObject< scal::belongsToCalendar >(); }
				/*!
					\fn ::SopranoLive::Live< Calendar > addBelongsToCalendar()
					
					
					Adds a new uniquely named resource to the property \ref scal_belongsToCalendar "scal:belongsToCalendar" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Calendar > addBelongsToCalendar() { return baseAddObject< scal::belongsToCalendar >(); }
				/*!
					\fn ::SopranoLive::Live< Calendar > addBelongsToCalendar(::SopranoLive::Live< Calendar > const &belongsToCalendar_)
					
					
					Adds the given \a belongsToCalendar_ to the property \ref scal_belongsToCalendar "scal:belongsToCalendar" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Calendar > addBelongsToCalendar(::SopranoLive::Live< Calendar > const &belongsToCalendar_) { return baseAddObject< scal::belongsToCalendar >( belongsToCalendar_ ); }
				/*!
					\fn void removeBelongsToCalendar(::SopranoLive::Live< Calendar > const &belongsToCalendar_)
					
					
					Removes the given \a belongsToCalendar_ from the property \ref scal_belongsToCalendar "scal:belongsToCalendar" set.
					\sa LiveResource::removeObject
				 */
				void removeBelongsToCalendar(::SopranoLive::Live< Calendar > const &belongsToCalendar_) { baseRemoveObject< scal::belongsToCalendar >(belongsToCalendar_); }

				/* Property generated from scal:exceptionRDate
				 * \n One of more concrete exceptions of the calendar item using ';' as separator. Included for backward compatibility. Use rrule with exception='true' instead
				 * \n rdfs:label=Recurrence date exception
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:modified=1856
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveExceptionRDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_exceptionRDate "scal:exceptionRDate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveExceptionRDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::exceptionRDate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getExceptionRDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_exceptionRDate "scal:exceptionRDate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getExceptionRDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::exceptionRDate >(object_info, strategy, parent); }
				/*!
					\fn void setExceptionRDates(LiveNodes const &exceptionRDate_)
					
					
					Sets the property \ref scal_exceptionRDate "scal:exceptionRDate" set to the given \a exceptionRDate_ set.
					\sa LiveResource::setObjects
				 */
				void setExceptionRDates(LiveNodes const &exceptionRDate_) { baseSetObjects(scal::exceptionRDate::iri(), exceptionRDate_); }
				/*!
					\fn void removeExceptionRDates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_exceptionRDate "scal:exceptionRDate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeExceptionRDates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::exceptionRDate::iri(), object_info); }
				/*!
					\fn qint64 getExceptionRDate()
					
					
					Returns the property \ref scal_exceptionRDate "scal:exceptionRDate". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getExceptionRDate() { return baseGetObject< scal::exceptionRDate >(); }
				/*!
					\fn void setExceptionRDate(qint64 const &exceptionRDate_)
					
					
					Sets the property \ref scal_exceptionRDate "scal:exceptionRDate" to the given \a exceptionRDate.
					\sa LiveResource::setObject
				 */
				void setExceptionRDate(qint64 const &exceptionRDate_) { baseSetObject< scal::exceptionRDate >( exceptionRDate_ ); }
				/*!
					\fn qint64 firstExceptionRDate()
					
					
					Returns the first property \ref scal_exceptionRDate "scal:exceptionRDate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstExceptionRDate() { return baseFirstObject< scal::exceptionRDate >(); }
				/*!
					\fn void addExceptionRDate(qint64 const &exceptionRDate_)
					
					
					Adds the given \a exceptionRDate_ to the property \ref scal_exceptionRDate "scal:exceptionRDate" set.
					\sa LiveResource::addObject
				 */
				void addExceptionRDate(qint64 const &exceptionRDate_) { baseAddObject< scal::exceptionRDate >( exceptionRDate_ ); }
				/*!
					\fn void removeExceptionRDate(qint64 const &exceptionRDate_)
					
					
					Removes the given \a exceptionRDate_ from the property \ref scal_exceptionRDate "scal:exceptionRDate" set.
					\sa LiveResource::removeObject
				 */
				void removeExceptionRDate(qint64 const &exceptionRDate_) { baseRemoveObject< scal::exceptionRDate >(exceptionRDate_); }

				/* Property generated from scal:isAllDay
				 * \n True if the event applies to the whole day
				 * \n rdfs:label=Whole day calendar item
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:modified=1180
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveIsAllDays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_isAllDay "scal:isAllDay" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsAllDays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::isAllDay >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsAllDays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_isAllDay "scal:isAllDay" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsAllDays(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::isAllDay >(object_info, strategy, parent); }
				/*!
					\fn void setIsAllDays(LiveNodes const &isAllDay_)
					
					
					Sets the property \ref scal_isAllDay "scal:isAllDay" set to the given \a isAllDay_ set.
					\sa LiveResource::setObjects
				 */
				void setIsAllDays(LiveNodes const &isAllDay_) { baseSetObjects(scal::isAllDay::iri(), isAllDay_); }
				/*!
					\fn void removeIsAllDays(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_isAllDay "scal:isAllDay" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsAllDays(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::isAllDay::iri(), object_info); }
				/*!
					\fn bool getIsAllDay()
					
					
					Returns the property \ref scal_isAllDay "scal:isAllDay". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsAllDay() { return baseGetObject< scal::isAllDay >(); }
				/*!
					\fn void setIsAllDay(bool const &isAllDay_)
					
					
					Sets the property \ref scal_isAllDay "scal:isAllDay" to the given \a isAllDay.
					\sa LiveResource::setObject
				 */
				void setIsAllDay(bool const &isAllDay_) { baseSetObject< scal::isAllDay >( isAllDay_ ); }
				/*!
					\fn bool firstIsAllDay()
					
					
					Returns the first property \ref scal_isAllDay "scal:isAllDay". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsAllDay() { return baseFirstObject< scal::isAllDay >(); }
				/*!
					\fn void addIsAllDay(bool const &isAllDay_)
					
					
					Adds the given \a isAllDay_ to the property \ref scal_isAllDay "scal:isAllDay" set.
					\sa LiveResource::addObject
				 */
				void addIsAllDay(bool const &isAllDay_) { baseAddObject< scal::isAllDay >( isAllDay_ ); }
				/*!
					\fn void removeIsAllDay(bool const &isAllDay_)
					
					
					Removes the given \a isAllDay_ from the property \ref scal_isAllDay "scal:isAllDay" set.
					\sa LiveResource::removeObject
				 */
				void removeIsAllDay(bool const &isAllDay_) { baseRemoveObject< scal::isAllDay >(isAllDay_); }

				/* Property generated from scal:attendee
				 * \n Link of an Calendar item with an attendee, that can have different status
				 * \n rdfs:range=scal:Attendee
				 * \n rdfs:label=Attendee
				 * \n tracker:modified=1796
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAttendees(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_attendee "scal:attendee" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAttendees(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::attendee >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAttendees(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_attendee "scal:attendee" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAttendees(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::attendee >(object_info, strategy, parent); }
				/*!
					\fn void setAttendees(LiveNodes const &attendee_)
					
					
					Sets the property \ref scal_attendee "scal:attendee" set to the given \a attendee_ set.
					\sa LiveResource::setObjects
				 */
				void setAttendees(LiveNodes const &attendee_) { baseSetObjects(scal::attendee::iri(), attendee_); }
				/*!
					\fn void removeAttendees(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_attendee "scal:attendee" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAttendees(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::attendee::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Attendee > firstAttendee()
					
					
					Returns the first property \ref scal_attendee "scal:attendee". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Attendee > firstAttendee() { return baseFirstObject< scal::attendee >(); }
				/*!
					\fn ::SopranoLive::Live< Attendee > addAttendee()
					
					
					Adds a new uniquely named resource to the property \ref scal_attendee "scal:attendee" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Attendee > addAttendee() { return baseAddObject< scal::attendee >(); }
				/*!
					\fn ::SopranoLive::Live< Attendee > addAttendee(::SopranoLive::Live< Attendee > const &attendee_)
					
					
					Adds the given \a attendee_ to the property \ref scal_attendee "scal:attendee" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Attendee > addAttendee(::SopranoLive::Live< Attendee > const &attendee_) { return baseAddObject< scal::attendee >( attendee_ ); }
				/*!
					\fn void removeAttendee(::SopranoLive::Live< Attendee > const &attendee_)
					
					
					Removes the given \a attendee_ from the property \ref scal_attendee "scal:attendee" set.
					\sa LiveResource::removeObject
				 */
				void removeAttendee(::SopranoLive::Live< Attendee > const &attendee_) { baseRemoveObject< scal::attendee >(attendee_); }

				/* Property generated from scal:calendarItemAlarm
				 * \n Link between calendar item and alarm
				 * \n rdfs:label=CalendarItem-alarm link
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:CalendarAlarm
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:modified=1353
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCalendarItemAlarms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_calendarItemAlarm "scal:calendarItemAlarm" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCalendarItemAlarms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::calendarItemAlarm >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCalendarItemAlarms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_calendarItemAlarm "scal:calendarItemAlarm" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCalendarItemAlarms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::calendarItemAlarm >(object_info, strategy, parent); }
				/*!
					\fn void setCalendarItemAlarms(LiveNodes const &calendarItemAlarm_)
					
					
					Sets the property \ref scal_calendarItemAlarm "scal:calendarItemAlarm" set to the given \a calendarItemAlarm_ set.
					\sa LiveResource::setObjects
				 */
				void setCalendarItemAlarms(LiveNodes const &calendarItemAlarm_) { baseSetObjects(scal::calendarItemAlarm::iri(), calendarItemAlarm_); }
				/*!
					\fn void removeCalendarItemAlarms(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_calendarItemAlarm "scal:calendarItemAlarm" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCalendarItemAlarms(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::calendarItemAlarm::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< CalendarAlarm > getCalendarItemAlarm()
					
					
					Returns the property \ref scal_calendarItemAlarm "scal:calendarItemAlarm". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< CalendarAlarm > getCalendarItemAlarm() { return baseGetObject< scal::calendarItemAlarm >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarAlarm > setCalendarItemAlarm(::SopranoLive::Live< CalendarAlarm > const &calendarItemAlarm_)
					
					
					Sets the property \ref scal_calendarItemAlarm "scal:calendarItemAlarm" to the given \a calendarItemAlarm.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< CalendarAlarm > setCalendarItemAlarm(::SopranoLive::Live< CalendarAlarm > const &calendarItemAlarm_) { return baseSetObject< scal::calendarItemAlarm >( calendarItemAlarm_ ); }
				/*!
					\fn ::SopranoLive::Live< CalendarAlarm > firstCalendarItemAlarm()
					
					
					Returns the first property \ref scal_calendarItemAlarm "scal:calendarItemAlarm". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< CalendarAlarm > firstCalendarItemAlarm() { return baseFirstObject< scal::calendarItemAlarm >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarAlarm > addCalendarItemAlarm()
					
					
					Adds a new uniquely named resource to the property \ref scal_calendarItemAlarm "scal:calendarItemAlarm" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CalendarAlarm > addCalendarItemAlarm() { return baseAddObject< scal::calendarItemAlarm >(); }
				/*!
					\fn ::SopranoLive::Live< CalendarAlarm > addCalendarItemAlarm(::SopranoLive::Live< CalendarAlarm > const &calendarItemAlarm_)
					
					
					Adds the given \a calendarItemAlarm_ to the property \ref scal_calendarItemAlarm "scal:calendarItemAlarm" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CalendarAlarm > addCalendarItemAlarm(::SopranoLive::Live< CalendarAlarm > const &calendarItemAlarm_) { return baseAddObject< scal::calendarItemAlarm >( calendarItemAlarm_ ); }
				/*!
					\fn void removeCalendarItemAlarm(::SopranoLive::Live< CalendarAlarm > const &calendarItemAlarm_)
					
					
					Removes the given \a calendarItemAlarm_ from the property \ref scal_calendarItemAlarm "scal:calendarItemAlarm" set.
					\sa LiveResource::removeObject
				 */
				void removeCalendarItemAlarm(::SopranoLive::Live< CalendarAlarm > const &calendarItemAlarm_) { baseRemoveObject< scal::calendarItemAlarm >(calendarItemAlarm_); }

				/* Property generated from scal:priority
				 * \n Relative priority of th event
				 * \n rdfs:label=Priority
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:modified=1794
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePrioritys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_priority "scal:priority" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePrioritys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::priority >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPrioritys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_priority "scal:priority" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPrioritys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::priority >(object_info, strategy, parent); }
				/*!
					\fn void setPrioritys(LiveNodes const &priority_)
					
					
					Sets the property \ref scal_priority "scal:priority" set to the given \a priority_ set.
					\sa LiveResource::setObjects
				 */
				void setPrioritys(LiveNodes const &priority_) { baseSetObjects(scal::priority::iri(), priority_); }
				/*!
					\fn void removePrioritys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_priority "scal:priority" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePrioritys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::priority::iri(), object_info); }
				/*!
					\fn qint64 getPriority()
					
					
					Returns the property \ref scal_priority "scal:priority". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getPriority() { return baseGetObject< scal::priority >(); }
				/*!
					\fn void setPriority(qint64 const &priority_)
					
					
					Sets the property \ref scal_priority "scal:priority" to the given \a priority.
					\sa LiveResource::setObject
				 */
				void setPriority(qint64 const &priority_) { baseSetObject< scal::priority >( priority_ ); }
				/*!
					\fn qint64 firstPriority()
					
					
					Returns the first property \ref scal_priority "scal:priority". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstPriority() { return baseFirstObject< scal::priority >(); }
				/*!
					\fn void addPriority(qint64 const &priority_)
					
					
					Adds the given \a priority_ to the property \ref scal_priority "scal:priority" set.
					\sa LiveResource::addObject
				 */
				void addPriority(qint64 const &priority_) { baseAddObject< scal::priority >( priority_ ); }
				/*!
					\fn void removePriority(qint64 const &priority_)
					
					
					Removes the given \a priority_ from the property \ref scal_priority "scal:priority" set.
					\sa LiveResource::removeObject
				 */
				void removePriority(qint64 const &priority_) { baseRemoveObject< scal::priority >(priority_); }

				/* Property generated from scal:transparency
				 * \n Time transparency for the item (busy time or transparent)
				 * \n rdfs:label=Transparency
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:TransparencyValues
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:modified=1271
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTransparencys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_transparency "scal:transparency" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTransparencys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::transparency >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTransparencys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_transparency "scal:transparency" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTransparencys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::transparency >(object_info, strategy, parent); }
				/*!
					\fn void setTransparencys(LiveNodes const &transparency_)
					
					
					Sets the property \ref scal_transparency "scal:transparency" set to the given \a transparency_ set.
					\sa LiveResource::setObjects
				 */
				void setTransparencys(LiveNodes const &transparency_) { baseSetObjects(scal::transparency::iri(), transparency_); }
				/*!
					\fn void removeTransparencys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_transparency "scal:transparency" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTransparencys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::transparency::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TransparencyValues > getTransparency()
					
					
					Returns the property \ref scal_transparency "scal:transparency". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TransparencyValues > getTransparency() { return baseGetObject< scal::transparency >(); }
				/*!
					\fn ::SopranoLive::Live< TransparencyValues > setTransparency(::SopranoLive::Live< TransparencyValues > const &transparency_)
					
					
					Sets the property \ref scal_transparency "scal:transparency" to the given \a transparency.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TransparencyValues > setTransparency(::SopranoLive::Live< TransparencyValues > const &transparency_) { return baseSetObject< scal::transparency >( transparency_ ); }
				/*!
					\fn ::SopranoLive::Live< TransparencyValues > firstTransparency()
					
					
					Returns the first property \ref scal_transparency "scal:transparency". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TransparencyValues > firstTransparency() { return baseFirstObject< scal::transparency >(); }
				/*!
					\fn ::SopranoLive::Live< TransparencyValues > addTransparency()
					
					
					Adds a new uniquely named resource to the property \ref scal_transparency "scal:transparency" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TransparencyValues > addTransparency() { return baseAddObject< scal::transparency >(); }
				/*!
					\fn ::SopranoLive::Live< TransparencyValues > addTransparency(::SopranoLive::Live< TransparencyValues > const &transparency_)
					
					
					Adds the given \a transparency_ to the property \ref scal_transparency "scal:transparency" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TransparencyValues > addTransparency(::SopranoLive::Live< TransparencyValues > const &transparency_) { return baseAddObject< scal::transparency >( transparency_ ); }
				/*!
					\fn void removeTransparency(::SopranoLive::Live< TransparencyValues > const &transparency_)
					
					
					Removes the given \a transparency_ from the property \ref scal_transparency "scal:transparency" set.
					\sa LiveResource::removeObject
				 */
				void removeTransparency(::SopranoLive::Live< TransparencyValues > const &transparency_) { baseRemoveObject< scal::transparency >(transparency_); }

				/* Property generated from scal:end
				 * \n End time of a calendar item. Set always a value to avoid OPTIONALS
				 * \n rdfs:label=end time
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:TimePoint
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:modified=1058
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEnds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_end "scal:end" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEnds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::end >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEnds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_end "scal:end" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEnds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::end >(object_info, strategy, parent); }
				/*!
					\fn void setEnds(LiveNodes const &end_)
					
					
					Sets the property \ref scal_end "scal:end" set to the given \a end_ set.
					\sa LiveResource::setObjects
				 */
				void setEnds(LiveNodes const &end_) { baseSetObjects(scal::end::iri(), end_); }
				/*!
					\fn void removeEnds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_end "scal:end" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEnds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::end::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > getEnd()
					
					
					Returns the property \ref scal_end "scal:end". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TimePoint > getEnd() { return baseGetObject< scal::end >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > setEnd(::SopranoLive::Live< TimePoint > const &end_)
					
					
					Sets the property \ref scal_end "scal:end" to the given \a end.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TimePoint > setEnd(::SopranoLive::Live< TimePoint > const &end_) { return baseSetObject< scal::end >( end_ ); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > firstEnd()
					
					
					Returns the first property \ref scal_end "scal:end". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TimePoint > firstEnd() { return baseFirstObject< scal::end >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > addEnd()
					
					
					Adds a new uniquely named resource to the property \ref scal_end "scal:end" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimePoint > addEnd() { return baseAddObject< scal::end >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > addEnd(::SopranoLive::Live< TimePoint > const &end_)
					
					
					Adds the given \a end_ to the property \ref scal_end "scal:end" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimePoint > addEnd(::SopranoLive::Live< TimePoint > const &end_) { return baseAddObject< scal::end >( end_ ); }
				/*!
					\fn void removeEnd(::SopranoLive::Live< TimePoint > const &end_)
					
					
					Removes the given \a end_ from the property \ref scal_end "scal:end" set.
					\sa LiveResource::removeObject
				 */
				void removeEnd(::SopranoLive::Live< TimePoint > const &end_) { baseRemoveObject< scal::end >(end_); }

				/* Property generated from scal:resources
				 * \n Resources required for the calendar item (equipment, installations...)
				 * \n rdfs:label=Resources
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=scal:CalendarItem
				 * \n tracker:modified=1783
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveResourcess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_resources "scal:resources" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveResourcess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::resources >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getResourcess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_resources "scal:resources" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getResourcess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::resources >(object_info, strategy, parent); }
				/*!
					\fn void setResourcess(LiveNodes const &resources_)
					
					
					Sets the property \ref scal_resources "scal:resources" set to the given \a resources_ set.
					\sa LiveResource::setObjects
				 */
				void setResourcess(LiveNodes const &resources_) { baseSetObjects(scal::resources::iri(), resources_); }
				/*!
					\fn void removeResourcess(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_resources "scal:resources" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeResourcess(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::resources::iri(), object_info); }
				/*!
					\fn QString getResources()
					
					
					Returns the property \ref scal_resources "scal:resources". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getResources() { return baseGetObject< scal::resources >(); }
				/*!
					\fn void setResources(QString const &resources_)
					
					
					Sets the property \ref scal_resources "scal:resources" to the given \a resources.
					\sa LiveResource::setObject
				 */
				void setResources(QString const &resources_) { baseSetObject< scal::resources >( resources_ ); }
				/*!
					\fn QString firstResources()
					
					
					Returns the first property \ref scal_resources "scal:resources". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstResources() { return baseFirstObject< scal::resources >(); }
				/*!
					\fn void addResources(QString const &resources_)
					
					
					Adds the given \a resources_ to the property \ref scal_resources "scal:resources" set.
					\sa LiveResource::addObject
				 */
				void addResources(QString const &resources_) { baseAddObject< scal::resources >( resources_ ); }
				/*!
					\fn void removeResources(QString const &resources_)
					
					
					Removes the given \a resources_ from the property \ref scal_resources "scal:resources" set.
					\sa LiveResource::removeObject
				 */
				void removeResources(QString const &resources_) { baseRemoveObject< scal::resources >(resources_); }
				 //@}
			};

			/*! Class generated from scal:CalendarUserType
			 * \ingroup onto_scal_classes
			 * Predefined set of instance for calendar user types
			 * 
			 * rdfs:label = Calendar user type instances (CUTYPE in ical spec)
			 * 
			 * tracker:modified = 1705
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref scal_cutype_individual "scal:cutype-individual"
			 * 		\ref scal_cutype_resource "scal:cutype-resource"
			 * 		\ref scal_cutype_room "scal:cutype-room"
			 * 		\ref scal_cutype_unknown "scal:cutype-unknown"
			 * 		\ref scal_cutype_group "scal:cutype-group"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_calendarUserType "scal:calendarUserType"
			 */
			class CalendarUserType
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#CalendarUserType"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<CalendarUserType> Live;
				CalendarUserType() { this->attachInterfaceHelper< CalendarUserType >(); }
				~CalendarUserType() { this->detachInterfaceHelper< CalendarUserType >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from scal:Event
			 * \ingroup onto_scal_classes
			 * An Event according the ical definition
			 * 
			 * rdfs:label = Event
			 * 
			 * tracker:modified = 1989
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_anniversary "scal:anniversary"
			 * 		\ref scal_birthday "scal:birthday"
			 */
			class Event
				: public virtual CalendarItem

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#Event"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<CalendarItem, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Event> Live;
				Event() { this->attachInterfaceHelper< Event >(); }
				~Event() { this->detachInterfaceHelper< Event >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from scal:eventStatus
				 * \n Link of an event with its status
				 * \n rdfs:label=event status
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:EventStatus
				 * \n rdfs:domain=scal:Event
				 * \n tracker:modified=1017
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEventStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_eventStatus "scal:eventStatus" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEventStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::eventStatus >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEventStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_eventStatus "scal:eventStatus" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEventStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::eventStatus >(object_info, strategy, parent); }
				/*!
					\fn void setEventStatuss(LiveNodes const &eventStatus_)
					
					
					Sets the property \ref scal_eventStatus "scal:eventStatus" set to the given \a eventStatus_ set.
					\sa LiveResource::setObjects
				 */
				void setEventStatuss(LiveNodes const &eventStatus_) { baseSetObjects(scal::eventStatus::iri(), eventStatus_); }
				/*!
					\fn void removeEventStatuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_eventStatus "scal:eventStatus" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEventStatuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::eventStatus::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< EventStatus > getEventStatus()
					
					
					Returns the property \ref scal_eventStatus "scal:eventStatus". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< EventStatus > getEventStatus() { return baseGetObject< scal::eventStatus >(); }
				/*!
					\fn ::SopranoLive::Live< EventStatus > setEventStatus(::SopranoLive::Live< EventStatus > const &eventStatus_)
					
					
					Sets the property \ref scal_eventStatus "scal:eventStatus" to the given \a eventStatus.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< EventStatus > setEventStatus(::SopranoLive::Live< EventStatus > const &eventStatus_) { return baseSetObject< scal::eventStatus >( eventStatus_ ); }
				/*!
					\fn ::SopranoLive::Live< EventStatus > firstEventStatus()
					
					
					Returns the first property \ref scal_eventStatus "scal:eventStatus". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< EventStatus > firstEventStatus() { return baseFirstObject< scal::eventStatus >(); }
				/*!
					\fn ::SopranoLive::Live< EventStatus > addEventStatus()
					
					
					Adds a new uniquely named resource to the property \ref scal_eventStatus "scal:eventStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< EventStatus > addEventStatus() { return baseAddObject< scal::eventStatus >(); }
				/*!
					\fn ::SopranoLive::Live< EventStatus > addEventStatus(::SopranoLive::Live< EventStatus > const &eventStatus_)
					
					
					Adds the given \a eventStatus_ to the property \ref scal_eventStatus "scal:eventStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< EventStatus > addEventStatus(::SopranoLive::Live< EventStatus > const &eventStatus_) { return baseAddObject< scal::eventStatus >( eventStatus_ ); }
				/*!
					\fn void removeEventStatus(::SopranoLive::Live< EventStatus > const &eventStatus_)
					
					
					Removes the given \a eventStatus_ from the property \ref scal_eventStatus "scal:eventStatus" set.
					\sa LiveResource::removeObject
				 */
				void removeEventStatus(::SopranoLive::Live< EventStatus > const &eventStatus_) { baseRemoveObject< scal::eventStatus >(eventStatus_); }
				 //@}
			};

			/*! Class generated from scal:EventStatus
			 * \ingroup onto_scal_classes
			 * Predefined instances of status for events
			 * 
			 * rdfs:label = Calendar event status
			 * 
			 * tracker:modified = 1657
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref scal_event_status_tentative "scal:event-status-tentative"
			 * 		\ref scal_event_status_confirmed "scal:event-status-confirmed"
			 * 		\ref scal_event_status_cancelled "scal:event-status-cancelled"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_eventStatus "scal:eventStatus"
			 */
			class EventStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#EventStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<EventStatus> Live;
				EventStatus() { this->attachInterfaceHelper< EventStatus >(); }
				~EventStatus() { this->detachInterfaceHelper< EventStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from scal:Journal
			 * \ingroup onto_scal_classes
			 * A Journal entry according to the ical definition
			 * 
			 * rdfs:label = Journal
			 * 
			 * tracker:modified = 1122
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Journal
				: public virtual CalendarItem

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#Journal"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<CalendarItem, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Journal> Live;
				Journal() { this->attachInterfaceHelper< Journal >(); }
				~Journal() { this->detachInterfaceHelper< Journal >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from scal:journalStatus
				 * \n Link of an journal with its status
				 * \n rdfs:label=journal status
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:JournalStatus
				 * \n rdfs:domain=scal:Journal
				 * \n tracker:modified=1923
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveJournalStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_journalStatus "scal:journalStatus" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveJournalStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::journalStatus >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getJournalStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_journalStatus "scal:journalStatus" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getJournalStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::journalStatus >(object_info, strategy, parent); }
				/*!
					\fn void setJournalStatuss(LiveNodes const &journalStatus_)
					
					
					Sets the property \ref scal_journalStatus "scal:journalStatus" set to the given \a journalStatus_ set.
					\sa LiveResource::setObjects
				 */
				void setJournalStatuss(LiveNodes const &journalStatus_) { baseSetObjects(scal::journalStatus::iri(), journalStatus_); }
				/*!
					\fn void removeJournalStatuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_journalStatus "scal:journalStatus" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeJournalStatuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::journalStatus::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< JournalStatus > getJournalStatus()
					
					
					Returns the property \ref scal_journalStatus "scal:journalStatus". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< JournalStatus > getJournalStatus() { return baseGetObject< scal::journalStatus >(); }
				/*!
					\fn ::SopranoLive::Live< JournalStatus > setJournalStatus(::SopranoLive::Live< JournalStatus > const &journalStatus_)
					
					
					Sets the property \ref scal_journalStatus "scal:journalStatus" to the given \a journalStatus.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< JournalStatus > setJournalStatus(::SopranoLive::Live< JournalStatus > const &journalStatus_) { return baseSetObject< scal::journalStatus >( journalStatus_ ); }
				/*!
					\fn ::SopranoLive::Live< JournalStatus > firstJournalStatus()
					
					
					Returns the first property \ref scal_journalStatus "scal:journalStatus". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< JournalStatus > firstJournalStatus() { return baseFirstObject< scal::journalStatus >(); }
				/*!
					\fn ::SopranoLive::Live< JournalStatus > addJournalStatus()
					
					
					Adds a new uniquely named resource to the property \ref scal_journalStatus "scal:journalStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< JournalStatus > addJournalStatus() { return baseAddObject< scal::journalStatus >(); }
				/*!
					\fn ::SopranoLive::Live< JournalStatus > addJournalStatus(::SopranoLive::Live< JournalStatus > const &journalStatus_)
					
					
					Adds the given \a journalStatus_ to the property \ref scal_journalStatus "scal:journalStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< JournalStatus > addJournalStatus(::SopranoLive::Live< JournalStatus > const &journalStatus_) { return baseAddObject< scal::journalStatus >( journalStatus_ ); }
				/*!
					\fn void removeJournalStatus(::SopranoLive::Live< JournalStatus > const &journalStatus_)
					
					
					Removes the given \a journalStatus_ from the property \ref scal_journalStatus "scal:journalStatus" set.
					\sa LiveResource::removeObject
				 */
				void removeJournalStatus(::SopranoLive::Live< JournalStatus > const &journalStatus_) { baseRemoveObject< scal::journalStatus >(journalStatus_); }
				 //@}
			};

			/*! Class generated from scal:JournalStatus
			 * \ingroup onto_scal_classes
			 * Predefined instances of status for journals
			 * 
			 * rdfs:label = Calendar journal status
			 * 
			 * tracker:modified = 1869
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref scal_journal_status_completed "scal:journal-status-completed"
			 * 		\ref scal_journal_status_in_process "scal:journal-status-in-process"
			 * 		\ref scal_journal_status_cancelled "scal:journal-status-cancelled"
			 * 		\ref scal_journal_status_needs_action "scal:journal-status-needs-action"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_journalStatus "scal:journalStatus"
			 */
			class JournalStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#JournalStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<JournalStatus> Live;
				JournalStatus() { this->attachInterfaceHelper< JournalStatus >(); }
				~JournalStatus() { this->detachInterfaceHelper< JournalStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from scal:RSVPValues
			 * \ingroup onto_scal_classes
			 * Predefined set of instances: Yes/No (not boolean to allow undefined values)
			 * 
			 * rdfs:label = RSVP Values
			 * 
			 * tracker:modified = 1061
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref scal_rsvp_value_true "scal:rsvp-value-true"
			 * 		\ref scal_rsvp_value_false "scal:rsvp-value-false"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_rsvp "scal:rsvp"
			 */
			class RSVPValues
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#RSVPValues"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<RSVPValues> Live;
				RSVPValues() { this->attachInterfaceHelper< RSVPValues >(); }
				~RSVPValues() { this->detachInterfaceHelper< RSVPValues >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from scal:RecurrenceRule
			 * \ingroup onto_scal_classes
			 * Representation of repeating patterns
			 * 
			 * rdfs:label = Recurrence rule
			 * 
			 * tracker:modified = 1212
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_rrule "scal:rrule"
			 */
			class RecurrenceRule
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#RecurrenceRule"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<RecurrenceRule> Live;
				RecurrenceRule() { this->attachInterfaceHelper< RecurrenceRule >(); }
				~RecurrenceRule() { this->detachInterfaceHelper< RecurrenceRule >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from scal:recurrencePattern
				 * \n Recurrence pattern enforcing all (14) the fields in RFC2445/4.3.10, with ';' as separator: freq;until;count;interval;bysecond;byminute;byhour;byday;bymonthday;byyearday;byweekno;bymonth;bysetpos;wkst 
				 * \n rdfs:label=Recurrence pattern
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=scal:RecurrenceRule
				 * \n tracker:modified=1576
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRecurrencePatterns(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_recurrencePattern "scal:recurrencePattern" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRecurrencePatterns(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::recurrencePattern >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRecurrencePatterns(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_recurrencePattern "scal:recurrencePattern" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRecurrencePatterns(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::recurrencePattern >(object_info, strategy, parent); }
				/*!
					\fn void setRecurrencePatterns(LiveNodes const &recurrencePattern_)
					
					
					Sets the property \ref scal_recurrencePattern "scal:recurrencePattern" set to the given \a recurrencePattern_ set.
					\sa LiveResource::setObjects
				 */
				void setRecurrencePatterns(LiveNodes const &recurrencePattern_) { baseSetObjects(scal::recurrencePattern::iri(), recurrencePattern_); }
				/*!
					\fn void removeRecurrencePatterns(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_recurrencePattern "scal:recurrencePattern" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRecurrencePatterns(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::recurrencePattern::iri(), object_info); }
				/*!
					\fn QString getRecurrencePattern()
					
					
					Returns the property \ref scal_recurrencePattern "scal:recurrencePattern". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getRecurrencePattern() { return baseGetObject< scal::recurrencePattern >(); }
				/*!
					\fn void setRecurrencePattern(QString const &recurrencePattern_)
					
					
					Sets the property \ref scal_recurrencePattern "scal:recurrencePattern" to the given \a recurrencePattern.
					\sa LiveResource::setObject
				 */
				void setRecurrencePattern(QString const &recurrencePattern_) { baseSetObject< scal::recurrencePattern >( recurrencePattern_ ); }
				/*!
					\fn QString firstRecurrencePattern()
					
					
					Returns the first property \ref scal_recurrencePattern "scal:recurrencePattern". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstRecurrencePattern() { return baseFirstObject< scal::recurrencePattern >(); }
				/*!
					\fn void addRecurrencePattern(QString const &recurrencePattern_)
					
					
					Adds the given \a recurrencePattern_ to the property \ref scal_recurrencePattern "scal:recurrencePattern" set.
					\sa LiveResource::addObject
				 */
				void addRecurrencePattern(QString const &recurrencePattern_) { baseAddObject< scal::recurrencePattern >( recurrencePattern_ ); }
				/*!
					\fn void removeRecurrencePattern(QString const &recurrencePattern_)
					
					
					Removes the given \a recurrencePattern_ from the property \ref scal_recurrencePattern "scal:recurrencePattern" set.
					\sa LiveResource::removeObject
				 */
				void removeRecurrencePattern(QString const &recurrencePattern_) { baseRemoveObject< scal::recurrencePattern >(recurrencePattern_); }

				/* Property generated from scal:recurrenceStartDate
				 * \n Reuse here the start-date instance of the base event for this recurrence rule. This property makes possible to retrieve all required data to expand the recurrence rule in one short query
				 * \n rdfs:label=Recurrence pattern start date
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:TimePoint
				 * \n rdfs:domain=scal:RecurrenceRule
				 * \n tracker:modified=1153
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRecurrenceStartDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_recurrenceStartDate "scal:recurrenceStartDate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRecurrenceStartDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::recurrenceStartDate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRecurrenceStartDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_recurrenceStartDate "scal:recurrenceStartDate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRecurrenceStartDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::recurrenceStartDate >(object_info, strategy, parent); }
				/*!
					\fn void setRecurrenceStartDates(LiveNodes const &recurrenceStartDate_)
					
					
					Sets the property \ref scal_recurrenceStartDate "scal:recurrenceStartDate" set to the given \a recurrenceStartDate_ set.
					\sa LiveResource::setObjects
				 */
				void setRecurrenceStartDates(LiveNodes const &recurrenceStartDate_) { baseSetObjects(scal::recurrenceStartDate::iri(), recurrenceStartDate_); }
				/*!
					\fn void removeRecurrenceStartDates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_recurrenceStartDate "scal:recurrenceStartDate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRecurrenceStartDates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::recurrenceStartDate::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > getRecurrenceStartDate()
					
					
					Returns the property \ref scal_recurrenceStartDate "scal:recurrenceStartDate". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TimePoint > getRecurrenceStartDate() { return baseGetObject< scal::recurrenceStartDate >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > setRecurrenceStartDate(::SopranoLive::Live< TimePoint > const &recurrenceStartDate_)
					
					
					Sets the property \ref scal_recurrenceStartDate "scal:recurrenceStartDate" to the given \a recurrenceStartDate.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TimePoint > setRecurrenceStartDate(::SopranoLive::Live< TimePoint > const &recurrenceStartDate_) { return baseSetObject< scal::recurrenceStartDate >( recurrenceStartDate_ ); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > firstRecurrenceStartDate()
					
					
					Returns the first property \ref scal_recurrenceStartDate "scal:recurrenceStartDate". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TimePoint > firstRecurrenceStartDate() { return baseFirstObject< scal::recurrenceStartDate >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > addRecurrenceStartDate()
					
					
					Adds a new uniquely named resource to the property \ref scal_recurrenceStartDate "scal:recurrenceStartDate" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimePoint > addRecurrenceStartDate() { return baseAddObject< scal::recurrenceStartDate >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > addRecurrenceStartDate(::SopranoLive::Live< TimePoint > const &recurrenceStartDate_)
					
					
					Adds the given \a recurrenceStartDate_ to the property \ref scal_recurrenceStartDate "scal:recurrenceStartDate" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimePoint > addRecurrenceStartDate(::SopranoLive::Live< TimePoint > const &recurrenceStartDate_) { return baseAddObject< scal::recurrenceStartDate >( recurrenceStartDate_ ); }
				/*!
					\fn void removeRecurrenceStartDate(::SopranoLive::Live< TimePoint > const &recurrenceStartDate_)
					
					
					Removes the given \a recurrenceStartDate_ from the property \ref scal_recurrenceStartDate "scal:recurrenceStartDate" set.
					\sa LiveResource::removeObject
				 */
				void removeRecurrenceStartDate(::SopranoLive::Live< TimePoint > const &recurrenceStartDate_) { baseRemoveObject< scal::recurrenceStartDate >(recurrenceStartDate_); }

				/* Property generated from scal:exception
				 * \n True if this recurrence rules must be interpreted as an exception
				 * \n rdfs:label=recurrence rule exception
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=scal:RecurrenceRule
				 * \n tracker:modified=1617
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveExceptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_exception "scal:exception" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveExceptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::exception >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getExceptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_exception "scal:exception" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getExceptions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::exception >(object_info, strategy, parent); }
				/*!
					\fn void setExceptions(LiveNodes const &exception_)
					
					
					Sets the property \ref scal_exception "scal:exception" set to the given \a exception_ set.
					\sa LiveResource::setObjects
				 */
				void setExceptions(LiveNodes const &exception_) { baseSetObjects(scal::exception::iri(), exception_); }
				/*!
					\fn void removeExceptions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_exception "scal:exception" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeExceptions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::exception::iri(), object_info); }
				/*!
					\fn bool getException()
					
					
					Returns the property \ref scal_exception "scal:exception". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getException() { return baseGetObject< scal::exception >(); }
				/*!
					\fn void setException(bool const &exception_)
					
					
					Sets the property \ref scal_exception "scal:exception" to the given \a exception.
					\sa LiveResource::setObject
				 */
				void setException(bool const &exception_) { baseSetObject< scal::exception >( exception_ ); }
				/*!
					\fn bool firstException()
					
					
					Returns the first property \ref scal_exception "scal:exception". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstException() { return baseFirstObject< scal::exception >(); }
				/*!
					\fn void addException(bool const &exception_)
					
					
					Adds the given \a exception_ to the property \ref scal_exception "scal:exception" set.
					\sa LiveResource::addObject
				 */
				void addException(bool const &exception_) { baseAddObject< scal::exception >( exception_ ); }
				/*!
					\fn void removeException(bool const &exception_)
					
					
					Removes the given \a exception_ from the property \ref scal_exception "scal:exception" set.
					\sa LiveResource::removeObject
				 */
				void removeException(bool const &exception_) { baseRemoveObject< scal::exception >(exception_); }
				 //@}
			};

			/*! Class generated from scal:TimePoint
			 * \ingroup onto_scal_classes
			 * Point in time
			 * 
			 * rdfs:label = Time item
			 * 
			 * tracker:modified = 1531
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_due "scal:due"
			 * 		\ref scal_end "scal:end"
			 * 		\ref scal_start "scal:start"
			 * 		\ref scal_completed "scal:completed"
			 * 		\ref scal_recurrenceStartDate "scal:recurrenceStartDate"
			 */
			class TimePoint
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#TimePoint"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<TimePoint> Live;
				TimePoint() { this->attachInterfaceHelper< TimePoint >(); }
				~TimePoint() { this->detachInterfaceHelper< TimePoint >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from scal:dateTime
				 * \n Date and time in UTC
				 * \n rdfs:label=Time
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=scal:TimePoint
				 * \n tracker:modified=1206
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_dateTime "scal:dateTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::dateTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_dateTime "scal:dateTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDateTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::dateTime >(object_info, strategy, parent); }
				/*!
					\fn void setDateTimes(LiveNodes const &dateTime_)
					
					
					Sets the property \ref scal_dateTime "scal:dateTime" set to the given \a dateTime_ set.
					\sa LiveResource::setObjects
				 */
				void setDateTimes(LiveNodes const &dateTime_) { baseSetObjects(scal::dateTime::iri(), dateTime_); }
				/*!
					\fn void removeDateTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_dateTime "scal:dateTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDateTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::dateTime::iri(), object_info); }
				/*!
					\fn QDateTime getDateTime()
					
					
					Returns the property \ref scal_dateTime "scal:dateTime". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getDateTime() { return baseGetObject< scal::dateTime >(); }
				/*!
					\fn void setDateTime(QDateTime const &dateTime_)
					
					
					Sets the property \ref scal_dateTime "scal:dateTime" to the given \a dateTime.
					\sa LiveResource::setObject
				 */
				void setDateTime(QDateTime const &dateTime_) { baseSetObject< scal::dateTime >( dateTime_ ); }
				/*!
					\fn QDateTime firstDateTime()
					
					
					Returns the first property \ref scal_dateTime "scal:dateTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstDateTime() { return baseFirstObject< scal::dateTime >(); }
				/*!
					\fn void addDateTime(QDateTime const &dateTime_)
					
					
					Adds the given \a dateTime_ to the property \ref scal_dateTime "scal:dateTime" set.
					\sa LiveResource::addObject
				 */
				void addDateTime(QDateTime const &dateTime_) { baseAddObject< scal::dateTime >( dateTime_ ); }
				/*!
					\fn void removeDateTime(QDateTime const &dateTime_)
					
					
					Removes the given \a dateTime_ from the property \ref scal_dateTime "scal:dateTime" set.
					\sa LiveResource::removeObject
				 */
				void removeDateTime(QDateTime const &dateTime_) { baseRemoveObject< scal::dateTime >(dateTime_); }

				/* Property generated from scal:TimeZone
				 * \n Timezone in the OLSON DB used as reference in the time. Use 'floating' for floating times or study the convenience of a boolean 'isFloating' attribute.
				 * \n rdfs:label=Reference time zone
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=scal:TimePoint
				 * \n tracker:modified=1961
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTimeZones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_TimeZone "scal:TimeZone" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTimeZones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::TimeZone >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTimeZones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_TimeZone "scal:TimeZone" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTimeZones(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::TimeZone >(object_info, strategy, parent); }
				/*!
					\fn void setTimeZones(LiveNodes const &timeZone_)
					
					
					Sets the property \ref scal_TimeZone "scal:TimeZone" set to the given \a timeZone_ set.
					\sa LiveResource::setObjects
				 */
				void setTimeZones(LiveNodes const &timeZone_) { baseSetObjects(scal::TimeZone::iri(), timeZone_); }
				/*!
					\fn void removeTimeZones(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_TimeZone "scal:TimeZone" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTimeZones(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::TimeZone::iri(), object_info); }
				/*!
					\fn QString getTimeZone()
					
					
					Returns the property \ref scal_TimeZone "scal:TimeZone". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getTimeZone() { return baseGetObject< scal::TimeZone >(); }
				/*!
					\fn void setTimeZone(QString const &timeZone_)
					
					
					Sets the property \ref scal_TimeZone "scal:TimeZone" to the given \a timeZone.
					\sa LiveResource::setObject
				 */
				void setTimeZone(QString const &timeZone_) { baseSetObject< scal::TimeZone >( timeZone_ ); }
				/*!
					\fn QString firstTimeZone()
					
					
					Returns the first property \ref scal_TimeZone "scal:TimeZone". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTimeZone() { return baseFirstObject< scal::TimeZone >(); }
				/*!
					\fn void addTimeZone(QString const &timeZone_)
					
					
					Adds the given \a timeZone_ to the property \ref scal_TimeZone "scal:TimeZone" set.
					\sa LiveResource::addObject
				 */
				void addTimeZone(QString const &timeZone_) { baseAddObject< scal::TimeZone >( timeZone_ ); }
				/*!
					\fn void removeTimeZone(QString const &timeZone_)
					
					
					Removes the given \a timeZone_ from the property \ref scal_TimeZone "scal:TimeZone" set.
					\sa LiveResource::removeObject
				 */
				void removeTimeZone(QString const &timeZone_) { baseRemoveObject< scal::TimeZone >(timeZone_); }
				 //@}
			};

			/*! Class generated from scal:Todo
			 * \ingroup onto_scal_classes
			 * A ToDo according the ical definition
			 * 
			 * rdfs:label = Todo
			 * 
			 * tracker:modified = 1133
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Todo
				: public virtual CalendarItem

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#Todo"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<CalendarItem, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Todo> Live;
				Todo() { this->attachInterfaceHelper< Todo >(); }
				~Todo() { this->detachInterfaceHelper< Todo >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from scal:due
				 * \n Due time for a task to be completed
				 * \n rdfs:label=Due
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:TimePoint
				 * \n rdfs:domain=scal:Todo
				 * \n tracker:modified=1692
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_due "scal:due" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::due >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_due "scal:due" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::due >(object_info, strategy, parent); }
				/*!
					\fn void setDues(LiveNodes const &due_)
					
					
					Sets the property \ref scal_due "scal:due" set to the given \a due_ set.
					\sa LiveResource::setObjects
				 */
				void setDues(LiveNodes const &due_) { baseSetObjects(scal::due::iri(), due_); }
				/*!
					\fn void removeDues(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_due "scal:due" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDues(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::due::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > getDue()
					
					
					Returns the property \ref scal_due "scal:due". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TimePoint > getDue() { return baseGetObject< scal::due >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > setDue(::SopranoLive::Live< TimePoint > const &due_)
					
					
					Sets the property \ref scal_due "scal:due" to the given \a due.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TimePoint > setDue(::SopranoLive::Live< TimePoint > const &due_) { return baseSetObject< scal::due >( due_ ); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > firstDue()
					
					
					Returns the first property \ref scal_due "scal:due". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TimePoint > firstDue() { return baseFirstObject< scal::due >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > addDue()
					
					
					Adds a new uniquely named resource to the property \ref scal_due "scal:due" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimePoint > addDue() { return baseAddObject< scal::due >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > addDue(::SopranoLive::Live< TimePoint > const &due_)
					
					
					Adds the given \a due_ to the property \ref scal_due "scal:due" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimePoint > addDue(::SopranoLive::Live< TimePoint > const &due_) { return baseAddObject< scal::due >( due_ ); }
				/*!
					\fn void removeDue(::SopranoLive::Live< TimePoint > const &due_)
					
					
					Removes the given \a due_ from the property \ref scal_due "scal:due" set.
					\sa LiveResource::removeObject
				 */
				void removeDue(::SopranoLive::Live< TimePoint > const &due_) { baseRemoveObject< scal::due >(due_); }

				/* Property generated from scal:todoStatus
				 * \n Link of an todo with its status
				 * \n rdfs:label=todo status
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:TodoStatus
				 * \n rdfs:domain=scal:Todo
				 * \n tracker:modified=1833
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTodoStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_todoStatus "scal:todoStatus" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTodoStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::todoStatus >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTodoStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_todoStatus "scal:todoStatus" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTodoStatuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::todoStatus >(object_info, strategy, parent); }
				/*!
					\fn void setTodoStatuss(LiveNodes const &todoStatus_)
					
					
					Sets the property \ref scal_todoStatus "scal:todoStatus" set to the given \a todoStatus_ set.
					\sa LiveResource::setObjects
				 */
				void setTodoStatuss(LiveNodes const &todoStatus_) { baseSetObjects(scal::todoStatus::iri(), todoStatus_); }
				/*!
					\fn void removeTodoStatuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_todoStatus "scal:todoStatus" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTodoStatuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::todoStatus::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TodoStatus > getTodoStatus()
					
					
					Returns the property \ref scal_todoStatus "scal:todoStatus". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TodoStatus > getTodoStatus() { return baseGetObject< scal::todoStatus >(); }
				/*!
					\fn ::SopranoLive::Live< TodoStatus > setTodoStatus(::SopranoLive::Live< TodoStatus > const &todoStatus_)
					
					
					Sets the property \ref scal_todoStatus "scal:todoStatus" to the given \a todoStatus.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TodoStatus > setTodoStatus(::SopranoLive::Live< TodoStatus > const &todoStatus_) { return baseSetObject< scal::todoStatus >( todoStatus_ ); }
				/*!
					\fn ::SopranoLive::Live< TodoStatus > firstTodoStatus()
					
					
					Returns the first property \ref scal_todoStatus "scal:todoStatus". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TodoStatus > firstTodoStatus() { return baseFirstObject< scal::todoStatus >(); }
				/*!
					\fn ::SopranoLive::Live< TodoStatus > addTodoStatus()
					
					
					Adds a new uniquely named resource to the property \ref scal_todoStatus "scal:todoStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TodoStatus > addTodoStatus() { return baseAddObject< scal::todoStatus >(); }
				/*!
					\fn ::SopranoLive::Live< TodoStatus > addTodoStatus(::SopranoLive::Live< TodoStatus > const &todoStatus_)
					
					
					Adds the given \a todoStatus_ to the property \ref scal_todoStatus "scal:todoStatus" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TodoStatus > addTodoStatus(::SopranoLive::Live< TodoStatus > const &todoStatus_) { return baseAddObject< scal::todoStatus >( todoStatus_ ); }
				/*!
					\fn void removeTodoStatus(::SopranoLive::Live< TodoStatus > const &todoStatus_)
					
					
					Removes the given \a todoStatus_ from the property \ref scal_todoStatus "scal:todoStatus" set.
					\sa LiveResource::removeObject
				 */
				void removeTodoStatus(::SopranoLive::Live< TodoStatus > const &todoStatus_) { baseRemoveObject< scal::todoStatus >(todoStatus_); }

				/* Property generated from scal:percentComplete
				 * \n % of the task completed
				 * \n rdfs:label=Percentage completed
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=scal:Todo
				 * \n tracker:modified=1474
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePercentCompletes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_percentComplete "scal:percentComplete" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePercentCompletes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::percentComplete >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPercentCompletes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_percentComplete "scal:percentComplete" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPercentCompletes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::percentComplete >(object_info, strategy, parent); }
				/*!
					\fn void setPercentCompletes(LiveNodes const &percentComplete_)
					
					
					Sets the property \ref scal_percentComplete "scal:percentComplete" set to the given \a percentComplete_ set.
					\sa LiveResource::setObjects
				 */
				void setPercentCompletes(LiveNodes const &percentComplete_) { baseSetObjects(scal::percentComplete::iri(), percentComplete_); }
				/*!
					\fn void removePercentCompletes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_percentComplete "scal:percentComplete" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePercentCompletes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::percentComplete::iri(), object_info); }
				/*!
					\fn qint64 getPercentComplete()
					
					
					Returns the property \ref scal_percentComplete "scal:percentComplete". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getPercentComplete() { return baseGetObject< scal::percentComplete >(); }
				/*!
					\fn void setPercentComplete(qint64 const &percentComplete_)
					
					
					Sets the property \ref scal_percentComplete "scal:percentComplete" to the given \a percentComplete.
					\sa LiveResource::setObject
				 */
				void setPercentComplete(qint64 const &percentComplete_) { baseSetObject< scal::percentComplete >( percentComplete_ ); }
				/*!
					\fn qint64 firstPercentComplete()
					
					
					Returns the first property \ref scal_percentComplete "scal:percentComplete". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstPercentComplete() { return baseFirstObject< scal::percentComplete >(); }
				/*!
					\fn void addPercentComplete(qint64 const &percentComplete_)
					
					
					Adds the given \a percentComplete_ to the property \ref scal_percentComplete "scal:percentComplete" set.
					\sa LiveResource::addObject
				 */
				void addPercentComplete(qint64 const &percentComplete_) { baseAddObject< scal::percentComplete >( percentComplete_ ); }
				/*!
					\fn void removePercentComplete(qint64 const &percentComplete_)
					
					
					Removes the given \a percentComplete_ from the property \ref scal_percentComplete "scal:percentComplete" set.
					\sa LiveResource::removeObject
				 */
				void removePercentComplete(qint64 const &percentComplete_) { baseRemoveObject< scal::percentComplete >(percentComplete_); }

				/* Property generated from scal:completed
				 * \n Time when the task was completed
				 * \n rdfs:label=Completed
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=scal:TimePoint
				 * \n rdfs:domain=scal:Todo
				 * \n tracker:modified=1145
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCompleteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref scal_completed "scal:completed" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCompleteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< scal::completed >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCompleteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref scal_completed "scal:completed" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCompleteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< scal::completed >(object_info, strategy, parent); }
				/*!
					\fn void setCompleteds(LiveNodes const &completed_)
					
					
					Sets the property \ref scal_completed "scal:completed" set to the given \a completed_ set.
					\sa LiveResource::setObjects
				 */
				void setCompleteds(LiveNodes const &completed_) { baseSetObjects(scal::completed::iri(), completed_); }
				/*!
					\fn void removeCompleteds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref scal_completed "scal:completed" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCompleteds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(scal::completed::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > getCompleted()
					
					
					Returns the property \ref scal_completed "scal:completed". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TimePoint > getCompleted() { return baseGetObject< scal::completed >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > setCompleted(::SopranoLive::Live< TimePoint > const &completed_)
					
					
					Sets the property \ref scal_completed "scal:completed" to the given \a completed.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TimePoint > setCompleted(::SopranoLive::Live< TimePoint > const &completed_) { return baseSetObject< scal::completed >( completed_ ); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > firstCompleted()
					
					
					Returns the first property \ref scal_completed "scal:completed". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TimePoint > firstCompleted() { return baseFirstObject< scal::completed >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > addCompleted()
					
					
					Adds a new uniquely named resource to the property \ref scal_completed "scal:completed" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimePoint > addCompleted() { return baseAddObject< scal::completed >(); }
				/*!
					\fn ::SopranoLive::Live< TimePoint > addCompleted(::SopranoLive::Live< TimePoint > const &completed_)
					
					
					Adds the given \a completed_ to the property \ref scal_completed "scal:completed" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TimePoint > addCompleted(::SopranoLive::Live< TimePoint > const &completed_) { return baseAddObject< scal::completed >( completed_ ); }
				/*!
					\fn void removeCompleted(::SopranoLive::Live< TimePoint > const &completed_)
					
					
					Removes the given \a completed_ from the property \ref scal_completed "scal:completed" set.
					\sa LiveResource::removeObject
				 */
				void removeCompleted(::SopranoLive::Live< TimePoint > const &completed_) { baseRemoveObject< scal::completed >(completed_); }
				 //@}
			};

			/*! Class generated from scal:TodoStatus
			 * \ingroup onto_scal_classes
			 * Predefined instances of status for todos
			 * 
			 * rdfs:label = Calendar todo status
			 * 
			 * tracker:modified = 1056
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref scal_todo_status_cancelled "scal:todo-status-cancelled"
			 * 		\ref scal_todo_status_completed "scal:todo-status-completed"
			 * 		\ref scal_todo_status_in_process "scal:todo-status-in-process"
			 * 		\ref scal_todo_status_needs_action "scal:todo-status-needs-action"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_todoStatus "scal:todoStatus"
			 */
			class TodoStatus
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#TodoStatus"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<TodoStatus> Live;
				TodoStatus() { this->attachInterfaceHelper< TodoStatus >(); }
				~TodoStatus() { this->detachInterfaceHelper< TodoStatus >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from scal:TransparencyValues
			 * \ingroup onto_scal_classes
			 * Predefined instances of time transparency for the calendar items
			 * 
			 * rdfs:label = Transparency values
			 * 
			 * tracker:modified = 1606
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref scal_transparency_opaque "scal:transparency-opaque"
			 * 		\ref scal_transparency_transparent "scal:transparency-transparent"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref scal_transparency "scal:transparency"
			 */
			class TransparencyValues
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/scal#TransparencyValues"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_scal Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<TransparencyValues> Live;
				TransparencyValues() { this->attachInterfaceHelper< TransparencyValues >(); }
				~TransparencyValues() { this->detachInterfaceHelper< TransparencyValues >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::AccessLevel::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::AttendanceStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::Attendee::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::AttendeeRole::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::Calendar::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::CalendarAlarm::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::CalendarItem::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::CalendarUserType::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::Event::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::EventStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::Journal::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::JournalStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::RSVPValues::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::RecurrenceRule::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::TimePoint::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::Todo::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::TodoStatus::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::scal::TransparencyValues::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_SCAL_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_SCAL_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_SCAL_H_POST_INCLUDES
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#endif
