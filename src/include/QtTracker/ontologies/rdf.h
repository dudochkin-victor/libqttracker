/*
 * rdf.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:26.408795
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/rdf.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_RDF_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_RDF_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_rdf_classes namespace rdf class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_rdf_properties namespace rdf property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_rdf_resources namespace rdf resource definitions
		 *  @{
		 *  @}
		 */
		static const char rdf_namespace_prefix[] = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
		struct Ontology_rdf
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(rdf_namespace_prefix) + suffix;
			}
		};
		namespace rdf
		{
			inline QUrl iri(QString suffix) { return Ontology_rdf::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class Property;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_RDF_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_RDF_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_RDF_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nrl.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdfs.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nrl.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nrl.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace rdf
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from rdf:type
			 * \anchor rdf_type
			 * \n rdfs:range=rdfs:Class
			 * \n tracker:modified=1397
			 * \n rdfs:domain=rdfs:Resource
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_rdf_properties
			class type
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_rdf Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef rdfs::Resource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef rdfs::Resource RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Class Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Class RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_RDF_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_RDF_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_RDF_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nrl.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nrl.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace rdf
		{

			using namespace xsd;
			using namespace rdfs;

			/*! Class generated from rdf:Property
			 * \ingroup onto_rdf_classes
			 * 
			 * rdfs:label = Property
			 * 
			 * tracker:modified = 1962
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref rdfs_subPropertyOf "rdfs:subPropertyOf"
			 * 		\ref tracker_secondaryIndex "tracker:secondaryIndex"
			 */
			class Property
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_rdf Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Property> Live;
				Property() { this->attachInterfaceHelper< Property >(); }
				~Property() { this->detachInterfaceHelper< Property >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from rdfs:subPropertyOf
				 * \n rdfs:range=rdf:Property
				 * \n tracker:modified=1500
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRdfsSubPropertyOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref rdfs_subPropertyOf "rdfs:subPropertyOf" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRdfsSubPropertyOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< rdfs::subPropertyOf >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRdfsSubPropertyOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref rdfs_subPropertyOf "rdfs:subPropertyOf" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRdfsSubPropertyOfs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< rdfs::subPropertyOf >(object_info, strategy, parent); }
				/*!
					\fn void setRdfsSubPropertyOfs(LiveNodes const &rdfsSubPropertyOf_)
					
					
					Sets the property \ref rdfs_subPropertyOf "rdfs:subPropertyOf" set to the given \a rdfsSubPropertyOf_ set.
					\sa LiveResource::setObjects
				 */
				void setRdfsSubPropertyOfs(LiveNodes const &rdfsSubPropertyOf_) { baseSetObjects(rdfs::subPropertyOf::iri(), rdfsSubPropertyOf_); }
				/*!
					\fn void removeRdfsSubPropertyOfs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref rdfs_subPropertyOf "rdfs:subPropertyOf" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRdfsSubPropertyOfs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(rdfs::subPropertyOf::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Property > firstRdfsSubPropertyOf()
					
					
					Returns the first property \ref rdfs_subPropertyOf "rdfs:subPropertyOf". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Property > firstRdfsSubPropertyOf() { return baseFirstObject< rdfs::subPropertyOf >(); }
				/*!
					\fn ::SopranoLive::Live< Property > addRdfsSubPropertyOf()
					
					
					Adds a new uniquely named resource to the property \ref rdfs_subPropertyOf "rdfs:subPropertyOf" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Property > addRdfsSubPropertyOf() { return baseAddObject< rdfs::subPropertyOf >(); }
				/*!
					\fn ::SopranoLive::Live< Property > addRdfsSubPropertyOf(::SopranoLive::Live< Property > const &rdfsSubPropertyOf_)
					
					
					Adds the given \a rdfsSubPropertyOf_ to the property \ref rdfs_subPropertyOf "rdfs:subPropertyOf" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Property > addRdfsSubPropertyOf(::SopranoLive::Live< Property > const &rdfsSubPropertyOf_) { return baseAddObject< rdfs::subPropertyOf >( rdfsSubPropertyOf_ ); }
				/*!
					\fn void removeRdfsSubPropertyOf(::SopranoLive::Live< Property > const &rdfsSubPropertyOf_)
					
					
					Removes the given \a rdfsSubPropertyOf_ from the property \ref rdfs_subPropertyOf "rdfs:subPropertyOf" set.
					\sa LiveResource::removeObject
				 */
				void removeRdfsSubPropertyOf(::SopranoLive::Live< Property > const &rdfsSubPropertyOf_) { baseRemoveObject< rdfs::subPropertyOf >(rdfsSubPropertyOf_); }

				/* Property generated from tracker:secondaryIndex
				 * \n rdfs:range=rdf:Property
				 * \n tracker:modified=1852
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveTrackerSecondaryIndexs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_secondaryIndex "tracker:secondaryIndex" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerSecondaryIndexs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::secondaryIndex >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerSecondaryIndexs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_secondaryIndex "tracker:secondaryIndex" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerSecondaryIndexs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::secondaryIndex >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerSecondaryIndexs(LiveNodes const &trackerSecondaryIndex_)
					
					
					Sets the property \ref tracker_secondaryIndex "tracker:secondaryIndex" set to the given \a trackerSecondaryIndex_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerSecondaryIndexs(LiveNodes const &trackerSecondaryIndex_) { baseSetObjects(tracker::secondaryIndex::iri(), trackerSecondaryIndex_); }
				/*!
					\fn void removeTrackerSecondaryIndexs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_secondaryIndex "tracker:secondaryIndex" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerSecondaryIndexs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::secondaryIndex::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Property > getTrackerSecondaryIndex()
					
					
					Returns the property \ref tracker_secondaryIndex "tracker:secondaryIndex". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Property > getTrackerSecondaryIndex() { return baseGetObject< tracker::secondaryIndex >(); }
				/*!
					\fn ::SopranoLive::Live< Property > setTrackerSecondaryIndex(::SopranoLive::Live< Property > const &trackerSecondaryIndex_)
					
					
					Sets the property \ref tracker_secondaryIndex "tracker:secondaryIndex" to the given \a trackerSecondaryIndex.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Property > setTrackerSecondaryIndex(::SopranoLive::Live< Property > const &trackerSecondaryIndex_) { return baseSetObject< tracker::secondaryIndex >( trackerSecondaryIndex_ ); }
				/*!
					\fn ::SopranoLive::Live< Property > firstTrackerSecondaryIndex()
					
					
					Returns the first property \ref tracker_secondaryIndex "tracker:secondaryIndex". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Property > firstTrackerSecondaryIndex() { return baseFirstObject< tracker::secondaryIndex >(); }
				/*!
					\fn ::SopranoLive::Live< Property > addTrackerSecondaryIndex()
					
					
					Adds a new uniquely named resource to the property \ref tracker_secondaryIndex "tracker:secondaryIndex" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Property > addTrackerSecondaryIndex() { return baseAddObject< tracker::secondaryIndex >(); }
				/*!
					\fn ::SopranoLive::Live< Property > addTrackerSecondaryIndex(::SopranoLive::Live< Property > const &trackerSecondaryIndex_)
					
					
					Adds the given \a trackerSecondaryIndex_ to the property \ref tracker_secondaryIndex "tracker:secondaryIndex" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Property > addTrackerSecondaryIndex(::SopranoLive::Live< Property > const &trackerSecondaryIndex_) { return baseAddObject< tracker::secondaryIndex >( trackerSecondaryIndex_ ); }
				/*!
					\fn void removeTrackerSecondaryIndex(::SopranoLive::Live< Property > const &trackerSecondaryIndex_)
					
					
					Removes the given \a trackerSecondaryIndex_ from the property \ref tracker_secondaryIndex "tracker:secondaryIndex" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerSecondaryIndex(::SopranoLive::Live< Property > const &trackerSecondaryIndex_) { baseRemoveObject< tracker::secondaryIndex >(trackerSecondaryIndex_); }

				/* Property generated from tracker:writeback
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1111
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveTrackerWritebacks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_writeback "tracker:writeback" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerWritebacks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::writeback >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerWritebacks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_writeback "tracker:writeback" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerWritebacks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::writeback >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerWritebacks(LiveNodes const &trackerWriteback_)
					
					
					Sets the property \ref tracker_writeback "tracker:writeback" set to the given \a trackerWriteback_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerWritebacks(LiveNodes const &trackerWriteback_) { baseSetObjects(tracker::writeback::iri(), trackerWriteback_); }
				/*!
					\fn void removeTrackerWritebacks(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_writeback "tracker:writeback" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerWritebacks(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::writeback::iri(), object_info); }
				/*!
					\fn bool getTrackerWriteback()
					
					
					Returns the property \ref tracker_writeback "tracker:writeback". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getTrackerWriteback() { return baseGetObject< tracker::writeback >(); }
				/*!
					\fn void setTrackerWriteback(bool const &trackerWriteback_)
					
					
					Sets the property \ref tracker_writeback "tracker:writeback" to the given \a trackerWriteback.
					\sa LiveResource::setObject
				 */
				void setTrackerWriteback(bool const &trackerWriteback_) { baseSetObject< tracker::writeback >( trackerWriteback_ ); }
				/*!
					\fn bool firstTrackerWriteback()
					
					
					Returns the first property \ref tracker_writeback "tracker:writeback". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstTrackerWriteback() { return baseFirstObject< tracker::writeback >(); }
				/*!
					\fn void addTrackerWriteback(bool const &trackerWriteback_)
					
					
					Adds the given \a trackerWriteback_ to the property \ref tracker_writeback "tracker:writeback" set.
					\sa LiveResource::addObject
				 */
				void addTrackerWriteback(bool const &trackerWriteback_) { baseAddObject< tracker::writeback >( trackerWriteback_ ); }
				/*!
					\fn void removeTrackerWriteback(bool const &trackerWriteback_)
					
					
					Removes the given \a trackerWriteback_ from the property \ref tracker_writeback "tracker:writeback" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerWriteback(bool const &trackerWriteback_) { baseRemoveObject< tracker::writeback >(trackerWriteback_); }

				/* Property generated from tracker:fulltextNoLimit
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1917
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveTrackerFulltextNoLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_fulltextNoLimit "tracker:fulltextNoLimit" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerFulltextNoLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::fulltextNoLimit >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerFulltextNoLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_fulltextNoLimit "tracker:fulltextNoLimit" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerFulltextNoLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::fulltextNoLimit >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerFulltextNoLimits(LiveNodes const &trackerFulltextNoLimit_)
					
					
					Sets the property \ref tracker_fulltextNoLimit "tracker:fulltextNoLimit" set to the given \a trackerFulltextNoLimit_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerFulltextNoLimits(LiveNodes const &trackerFulltextNoLimit_) { baseSetObjects(tracker::fulltextNoLimit::iri(), trackerFulltextNoLimit_); }
				/*!
					\fn void removeTrackerFulltextNoLimits(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_fulltextNoLimit "tracker:fulltextNoLimit" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerFulltextNoLimits(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::fulltextNoLimit::iri(), object_info); }
				/*!
					\fn bool getTrackerFulltextNoLimit()
					
					
					Returns the property \ref tracker_fulltextNoLimit "tracker:fulltextNoLimit". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getTrackerFulltextNoLimit() { return baseGetObject< tracker::fulltextNoLimit >(); }
				/*!
					\fn void setTrackerFulltextNoLimit(bool const &trackerFulltextNoLimit_)
					
					
					Sets the property \ref tracker_fulltextNoLimit "tracker:fulltextNoLimit" to the given \a trackerFulltextNoLimit.
					\sa LiveResource::setObject
				 */
				void setTrackerFulltextNoLimit(bool const &trackerFulltextNoLimit_) { baseSetObject< tracker::fulltextNoLimit >( trackerFulltextNoLimit_ ); }
				/*!
					\fn bool firstTrackerFulltextNoLimit()
					
					
					Returns the first property \ref tracker_fulltextNoLimit "tracker:fulltextNoLimit". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstTrackerFulltextNoLimit() { return baseFirstObject< tracker::fulltextNoLimit >(); }
				/*!
					\fn void addTrackerFulltextNoLimit(bool const &trackerFulltextNoLimit_)
					
					
					Adds the given \a trackerFulltextNoLimit_ to the property \ref tracker_fulltextNoLimit "tracker:fulltextNoLimit" set.
					\sa LiveResource::addObject
				 */
				void addTrackerFulltextNoLimit(bool const &trackerFulltextNoLimit_) { baseAddObject< tracker::fulltextNoLimit >( trackerFulltextNoLimit_ ); }
				/*!
					\fn void removeTrackerFulltextNoLimit(bool const &trackerFulltextNoLimit_)
					
					
					Removes the given \a trackerFulltextNoLimit_ from the property \ref tracker_fulltextNoLimit "tracker:fulltextNoLimit" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerFulltextNoLimit(bool const &trackerFulltextNoLimit_) { baseRemoveObject< tracker::fulltextNoLimit >(trackerFulltextNoLimit_); }

				/* Property generated from nrl:maxCardinality
				 * \n rdfs:range=xsd:integer
				 * \n tracker:modified=1427
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveNrlMaxCardinalitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nrl_maxCardinality "nrl:maxCardinality" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNrlMaxCardinalitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nrl::maxCardinality >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNrlMaxCardinalitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nrl_maxCardinality "nrl:maxCardinality" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNrlMaxCardinalitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nrl::maxCardinality >(object_info, strategy, parent); }
				/*!
					\fn void setNrlMaxCardinalitys(LiveNodes const &nrlMaxCardinality_)
					
					
					Sets the property \ref nrl_maxCardinality "nrl:maxCardinality" set to the given \a nrlMaxCardinality_ set.
					\sa LiveResource::setObjects
				 */
				void setNrlMaxCardinalitys(LiveNodes const &nrlMaxCardinality_) { baseSetObjects(nrl::maxCardinality::iri(), nrlMaxCardinality_); }
				/*!
					\fn void removeNrlMaxCardinalitys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nrl_maxCardinality "nrl:maxCardinality" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNrlMaxCardinalitys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nrl::maxCardinality::iri(), object_info); }
				/*!
					\fn qint64 getNrlMaxCardinality()
					
					
					Returns the property \ref nrl_maxCardinality "nrl:maxCardinality". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getNrlMaxCardinality() { return baseGetObject< nrl::maxCardinality >(); }
				/*!
					\fn void setNrlMaxCardinality(qint64 const &nrlMaxCardinality_)
					
					
					Sets the property \ref nrl_maxCardinality "nrl:maxCardinality" to the given \a nrlMaxCardinality.
					\sa LiveResource::setObject
				 */
				void setNrlMaxCardinality(qint64 const &nrlMaxCardinality_) { baseSetObject< nrl::maxCardinality >( nrlMaxCardinality_ ); }
				/*!
					\fn qint64 firstNrlMaxCardinality()
					
					
					Returns the first property \ref nrl_maxCardinality "nrl:maxCardinality". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstNrlMaxCardinality() { return baseFirstObject< nrl::maxCardinality >(); }
				/*!
					\fn void addNrlMaxCardinality(qint64 const &nrlMaxCardinality_)
					
					
					Adds the given \a nrlMaxCardinality_ to the property \ref nrl_maxCardinality "nrl:maxCardinality" set.
					\sa LiveResource::addObject
				 */
				void addNrlMaxCardinality(qint64 const &nrlMaxCardinality_) { baseAddObject< nrl::maxCardinality >( nrlMaxCardinality_ ); }
				/*!
					\fn void removeNrlMaxCardinality(qint64 const &nrlMaxCardinality_)
					
					
					Removes the given \a nrlMaxCardinality_ from the property \ref nrl_maxCardinality "nrl:maxCardinality" set.
					\sa LiveResource::removeObject
				 */
				void removeNrlMaxCardinality(qint64 const &nrlMaxCardinality_) { baseRemoveObject< nrl::maxCardinality >(nrlMaxCardinality_); }

				/* Property generated from tracker:weight
				 * \n rdfs:range=xsd:integer
				 * \n tracker:modified=1820
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveTrackerWeights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_weight "tracker:weight" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerWeights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::weight >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerWeights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_weight "tracker:weight" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerWeights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::weight >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerWeights(LiveNodes const &trackerWeight_)
					
					
					Sets the property \ref tracker_weight "tracker:weight" set to the given \a trackerWeight_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerWeights(LiveNodes const &trackerWeight_) { baseSetObjects(tracker::weight::iri(), trackerWeight_); }
				/*!
					\fn void removeTrackerWeights(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_weight "tracker:weight" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerWeights(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::weight::iri(), object_info); }
				/*!
					\fn qint64 getTrackerWeight()
					
					
					Returns the property \ref tracker_weight "tracker:weight". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getTrackerWeight() { return baseGetObject< tracker::weight >(); }
				/*!
					\fn void setTrackerWeight(qint64 const &trackerWeight_)
					
					
					Sets the property \ref tracker_weight "tracker:weight" to the given \a trackerWeight.
					\sa LiveResource::setObject
				 */
				void setTrackerWeight(qint64 const &trackerWeight_) { baseSetObject< tracker::weight >( trackerWeight_ ); }
				/*!
					\fn qint64 firstTrackerWeight()
					
					
					Returns the first property \ref tracker_weight "tracker:weight". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstTrackerWeight() { return baseFirstObject< tracker::weight >(); }
				/*!
					\fn void addTrackerWeight(qint64 const &trackerWeight_)
					
					
					Adds the given \a trackerWeight_ to the property \ref tracker_weight "tracker:weight" set.
					\sa LiveResource::addObject
				 */
				void addTrackerWeight(qint64 const &trackerWeight_) { baseAddObject< tracker::weight >( trackerWeight_ ); }
				/*!
					\fn void removeTrackerWeight(qint64 const &trackerWeight_)
					
					
					Removes the given \a trackerWeight_ from the property \ref tracker_weight "tracker:weight" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerWeight(qint64 const &trackerWeight_) { baseRemoveObject< tracker::weight >(trackerWeight_); }

				/* Property generated from tracker:transient
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1791
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveTrackerTransients(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_transient "tracker:transient" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerTransients(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::transient >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerTransients(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_transient "tracker:transient" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerTransients(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::transient >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerTransients(LiveNodes const &trackerTransient_)
					
					
					Sets the property \ref tracker_transient "tracker:transient" set to the given \a trackerTransient_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerTransients(LiveNodes const &trackerTransient_) { baseSetObjects(tracker::transient::iri(), trackerTransient_); }
				/*!
					\fn void removeTrackerTransients(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_transient "tracker:transient" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerTransients(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::transient::iri(), object_info); }
				/*!
					\fn bool getTrackerTransient()
					
					
					Returns the property \ref tracker_transient "tracker:transient". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getTrackerTransient() { return baseGetObject< tracker::transient >(); }
				/*!
					\fn void setTrackerTransient(bool const &trackerTransient_)
					
					
					Sets the property \ref tracker_transient "tracker:transient" to the given \a trackerTransient.
					\sa LiveResource::setObject
				 */
				void setTrackerTransient(bool const &trackerTransient_) { baseSetObject< tracker::transient >( trackerTransient_ ); }
				/*!
					\fn bool firstTrackerTransient()
					
					
					Returns the first property \ref tracker_transient "tracker:transient". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstTrackerTransient() { return baseFirstObject< tracker::transient >(); }
				/*!
					\fn void addTrackerTransient(bool const &trackerTransient_)
					
					
					Adds the given \a trackerTransient_ to the property \ref tracker_transient "tracker:transient" set.
					\sa LiveResource::addObject
				 */
				void addTrackerTransient(bool const &trackerTransient_) { baseAddObject< tracker::transient >( trackerTransient_ ); }
				/*!
					\fn void removeTrackerTransient(bool const &trackerTransient_)
					
					
					Removes the given \a trackerTransient_ from the property \ref tracker_transient "tracker:transient" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerTransient(bool const &trackerTransient_) { baseRemoveObject< tracker::transient >(trackerTransient_); }

				/* Property generated from tracker:defaultValue
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1880
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveTrackerDefaultValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_defaultValue "tracker:defaultValue" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerDefaultValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::defaultValue >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerDefaultValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_defaultValue "tracker:defaultValue" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerDefaultValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::defaultValue >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerDefaultValues(LiveNodes const &trackerDefaultValue_)
					
					
					Sets the property \ref tracker_defaultValue "tracker:defaultValue" set to the given \a trackerDefaultValue_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerDefaultValues(LiveNodes const &trackerDefaultValue_) { baseSetObjects(tracker::defaultValue::iri(), trackerDefaultValue_); }
				/*!
					\fn void removeTrackerDefaultValues(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_defaultValue "tracker:defaultValue" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerDefaultValues(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::defaultValue::iri(), object_info); }
				/*!
					\fn QString getTrackerDefaultValue()
					
					
					Returns the property \ref tracker_defaultValue "tracker:defaultValue". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getTrackerDefaultValue() { return baseGetObject< tracker::defaultValue >(); }
				/*!
					\fn void setTrackerDefaultValue(QString const &trackerDefaultValue_)
					
					
					Sets the property \ref tracker_defaultValue "tracker:defaultValue" to the given \a trackerDefaultValue.
					\sa LiveResource::setObject
				 */
				void setTrackerDefaultValue(QString const &trackerDefaultValue_) { baseSetObject< tracker::defaultValue >( trackerDefaultValue_ ); }
				/*!
					\fn QString firstTrackerDefaultValue()
					
					
					Returns the first property \ref tracker_defaultValue "tracker:defaultValue". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTrackerDefaultValue() { return baseFirstObject< tracker::defaultValue >(); }
				/*!
					\fn void addTrackerDefaultValue(QString const &trackerDefaultValue_)
					
					
					Adds the given \a trackerDefaultValue_ to the property \ref tracker_defaultValue "tracker:defaultValue" set.
					\sa LiveResource::addObject
				 */
				void addTrackerDefaultValue(QString const &trackerDefaultValue_) { baseAddObject< tracker::defaultValue >( trackerDefaultValue_ ); }
				/*!
					\fn void removeTrackerDefaultValue(QString const &trackerDefaultValue_)
					
					
					Removes the given \a trackerDefaultValue_ from the property \ref tracker_defaultValue "tracker:defaultValue" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerDefaultValue(QString const &trackerDefaultValue_) { baseRemoveObject< tracker::defaultValue >(trackerDefaultValue_); }

				/* Property generated from tracker:isAnnotation
				 * \n The property is never embedded on physical files
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1098
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveTrackerIsAnnotations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_isAnnotation "tracker:isAnnotation" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerIsAnnotations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::isAnnotation >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerIsAnnotations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_isAnnotation "tracker:isAnnotation" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerIsAnnotations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::isAnnotation >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerIsAnnotations(LiveNodes const &trackerIsAnnotation_)
					
					
					Sets the property \ref tracker_isAnnotation "tracker:isAnnotation" set to the given \a trackerIsAnnotation_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerIsAnnotations(LiveNodes const &trackerIsAnnotation_) { baseSetObjects(tracker::isAnnotation::iri(), trackerIsAnnotation_); }
				/*!
					\fn void removeTrackerIsAnnotations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_isAnnotation "tracker:isAnnotation" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerIsAnnotations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::isAnnotation::iri(), object_info); }
				/*!
					\fn bool getTrackerIsAnnotation()
					
					
					Returns the property \ref tracker_isAnnotation "tracker:isAnnotation". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getTrackerIsAnnotation() { return baseGetObject< tracker::isAnnotation >(); }
				/*!
					\fn void setTrackerIsAnnotation(bool const &trackerIsAnnotation_)
					
					
					Sets the property \ref tracker_isAnnotation "tracker:isAnnotation" to the given \a trackerIsAnnotation.
					\sa LiveResource::setObject
				 */
				void setTrackerIsAnnotation(bool const &trackerIsAnnotation_) { baseSetObject< tracker::isAnnotation >( trackerIsAnnotation_ ); }
				/*!
					\fn bool firstTrackerIsAnnotation()
					
					
					Returns the first property \ref tracker_isAnnotation "tracker:isAnnotation". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstTrackerIsAnnotation() { return baseFirstObject< tracker::isAnnotation >(); }
				/*!
					\fn void addTrackerIsAnnotation(bool const &trackerIsAnnotation_)
					
					
					Adds the given \a trackerIsAnnotation_ to the property \ref tracker_isAnnotation "tracker:isAnnotation" set.
					\sa LiveResource::addObject
				 */
				void addTrackerIsAnnotation(bool const &trackerIsAnnotation_) { baseAddObject< tracker::isAnnotation >( trackerIsAnnotation_ ); }
				/*!
					\fn void removeTrackerIsAnnotation(bool const &trackerIsAnnotation_)
					
					
					Removes the given \a trackerIsAnnotation_ from the property \ref tracker_isAnnotation "tracker:isAnnotation" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerIsAnnotation(bool const &trackerIsAnnotation_) { baseRemoveObject< tracker::isAnnotation >(trackerIsAnnotation_); }

				/* Property generated from tracker:indexed
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1615
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveTrackerIndexeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_indexed "tracker:indexed" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerIndexeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::indexed >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerIndexeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_indexed "tracker:indexed" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerIndexeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::indexed >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerIndexeds(LiveNodes const &trackerIndexed_)
					
					
					Sets the property \ref tracker_indexed "tracker:indexed" set to the given \a trackerIndexed_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerIndexeds(LiveNodes const &trackerIndexed_) { baseSetObjects(tracker::indexed::iri(), trackerIndexed_); }
				/*!
					\fn void removeTrackerIndexeds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_indexed "tracker:indexed" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerIndexeds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::indexed::iri(), object_info); }
				/*!
					\fn bool getTrackerIndexed()
					
					
					Returns the property \ref tracker_indexed "tracker:indexed". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getTrackerIndexed() { return baseGetObject< tracker::indexed >(); }
				/*!
					\fn void setTrackerIndexed(bool const &trackerIndexed_)
					
					
					Sets the property \ref tracker_indexed "tracker:indexed" to the given \a trackerIndexed.
					\sa LiveResource::setObject
				 */
				void setTrackerIndexed(bool const &trackerIndexed_) { baseSetObject< tracker::indexed >( trackerIndexed_ ); }
				/*!
					\fn bool firstTrackerIndexed()
					
					
					Returns the first property \ref tracker_indexed "tracker:indexed". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstTrackerIndexed() { return baseFirstObject< tracker::indexed >(); }
				/*!
					\fn void addTrackerIndexed(bool const &trackerIndexed_)
					
					
					Adds the given \a trackerIndexed_ to the property \ref tracker_indexed "tracker:indexed" set.
					\sa LiveResource::addObject
				 */
				void addTrackerIndexed(bool const &trackerIndexed_) { baseAddObject< tracker::indexed >( trackerIndexed_ ); }
				/*!
					\fn void removeTrackerIndexed(bool const &trackerIndexed_)
					
					
					Removes the given \a trackerIndexed_ from the property \ref tracker_indexed "tracker:indexed" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerIndexed(bool const &trackerIndexed_) { baseRemoveObject< tracker::indexed >(trackerIndexed_); }

				/* Property generated from rdfs:range
				 * \n rdfs:range=rdfs:Class
				 * \n tracker:modified=1969
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
// property api changing 			typedef rdfs::Class Class;
				/*!
					\fn LiveNodes liveRdfsRanges(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref rdfs_range "rdfs:range" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRdfsRanges(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< rdfs::range >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRdfsRanges(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref rdfs_range "rdfs:range" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRdfsRanges(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< rdfs::range >(object_info, strategy, parent); }
				/*!
					\fn void setRdfsRanges(LiveNodes const &rdfsRange_)
					
					
					Sets the property \ref rdfs_range "rdfs:range" set to the given \a rdfsRange_ set.
					\sa LiveResource::setObjects
				 */
				void setRdfsRanges(LiveNodes const &rdfsRange_) { baseSetObjects(rdfs::range::iri(), rdfsRange_); }
				/*!
					\fn void removeRdfsRanges(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref rdfs_range "rdfs:range" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRdfsRanges(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(rdfs::range::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Class > getRdfsRange()
					
					
					Returns the property \ref rdfs_range "rdfs:range". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Class > getRdfsRange() { return baseGetObject< rdfs::range >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Class > setRdfsRange(::SopranoLive::Live< rdfs::Class > const &rdfsRange_)
					
					
					Sets the property \ref rdfs_range "rdfs:range" to the given \a rdfsRange.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Class > setRdfsRange(::SopranoLive::Live< rdfs::Class > const &rdfsRange_) { return baseSetObject< rdfs::range >( rdfsRange_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Class > firstRdfsRange()
					
					
					Returns the first property \ref rdfs_range "rdfs:range". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Class > firstRdfsRange() { return baseFirstObject< rdfs::range >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Class > addRdfsRange()
					
					
					Adds a new uniquely named resource to the property \ref rdfs_range "rdfs:range" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Class > addRdfsRange() { return baseAddObject< rdfs::range >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Class > addRdfsRange(::SopranoLive::Live< rdfs::Class > const &rdfsRange_)
					
					
					Adds the given \a rdfsRange_ to the property \ref rdfs_range "rdfs:range" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Class > addRdfsRange(::SopranoLive::Live< rdfs::Class > const &rdfsRange_) { return baseAddObject< rdfs::range >( rdfsRange_ ); }
				/*!
					\fn void removeRdfsRange(::SopranoLive::Live< rdfs::Class > const &rdfsRange_)
					
					
					Removes the given \a rdfsRange_ from the property \ref rdfs_range "rdfs:range" set.
					\sa LiveResource::removeObject
				 */
				void removeRdfsRange(::SopranoLive::Live< rdfs::Class > const &rdfsRange_) { baseRemoveObject< rdfs::range >(rdfsRange_); }

				/* Property generated from rdfs:domain
				 * \n rdfs:range=rdfs:Resource
				 * \n tracker:modified=1452
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveRdfsDomains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref rdfs_domain "rdfs:domain" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRdfsDomains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< rdfs::domain >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRdfsDomains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref rdfs_domain "rdfs:domain" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRdfsDomains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< rdfs::domain >(object_info, strategy, parent); }
				/*!
					\fn void setRdfsDomains(LiveNodes const &rdfsDomain_)
					
					
					Sets the property \ref rdfs_domain "rdfs:domain" set to the given \a rdfsDomain_ set.
					\sa LiveResource::setObjects
				 */
				void setRdfsDomains(LiveNodes const &rdfsDomain_) { baseSetObjects(rdfs::domain::iri(), rdfsDomain_); }
				/*!
					\fn void removeRdfsDomains(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref rdfs_domain "rdfs:domain" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRdfsDomains(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(rdfs::domain::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getRdfsDomain()
					
					
					Returns the property \ref rdfs_domain "rdfs:domain". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getRdfsDomain() { return baseGetObject< rdfs::domain >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setRdfsDomain(::SopranoLive::Live< rdfs::Resource > const &rdfsDomain_)
					
					
					Sets the property \ref rdfs_domain "rdfs:domain" to the given \a rdfsDomain.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setRdfsDomain(::SopranoLive::Live< rdfs::Resource > const &rdfsDomain_) { return baseSetObject< rdfs::domain >( rdfsDomain_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstRdfsDomain()
					
					
					Returns the first property \ref rdfs_domain "rdfs:domain". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstRdfsDomain() { return baseFirstObject< rdfs::domain >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addRdfsDomain()
					
					
					Adds a new uniquely named resource to the property \ref rdfs_domain "rdfs:domain" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addRdfsDomain() { return baseAddObject< rdfs::domain >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addRdfsDomain(::SopranoLive::Live< rdfs::Resource > const &rdfsDomain_)
					
					
					Adds the given \a rdfsDomain_ to the property \ref rdfs_domain "rdfs:domain" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addRdfsDomain(::SopranoLive::Live< rdfs::Resource > const &rdfsDomain_) { return baseAddObject< rdfs::domain >( rdfsDomain_ ); }
				/*!
					\fn void removeRdfsDomain(::SopranoLive::Live< rdfs::Resource > const &rdfsDomain_)
					
					
					Removes the given \a rdfsDomain_ from the property \ref rdfs_domain "rdfs:domain" set.
					\sa LiveResource::removeObject
				 */
				void removeRdfsDomain(::SopranoLive::Live< rdfs::Resource > const &rdfsDomain_) { baseRemoveObject< rdfs::domain >(rdfsDomain_); }

				/* Property generated from tracker:fulltextIndexed
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1832
				 * \n rdfs:domain=rdf:Property
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveTrackerFulltextIndexeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref tracker_fulltextIndexed "tracker:fulltextIndexed" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackerFulltextIndexeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< tracker::fulltextIndexed >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackerFulltextIndexeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref tracker_fulltextIndexed "tracker:fulltextIndexed" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackerFulltextIndexeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< tracker::fulltextIndexed >(object_info, strategy, parent); }
				/*!
					\fn void setTrackerFulltextIndexeds(LiveNodes const &trackerFulltextIndexed_)
					
					
					Sets the property \ref tracker_fulltextIndexed "tracker:fulltextIndexed" set to the given \a trackerFulltextIndexed_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackerFulltextIndexeds(LiveNodes const &trackerFulltextIndexed_) { baseSetObjects(tracker::fulltextIndexed::iri(), trackerFulltextIndexed_); }
				/*!
					\fn void removeTrackerFulltextIndexeds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref tracker_fulltextIndexed "tracker:fulltextIndexed" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackerFulltextIndexeds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(tracker::fulltextIndexed::iri(), object_info); }
				/*!
					\fn bool getTrackerFulltextIndexed()
					
					
					Returns the property \ref tracker_fulltextIndexed "tracker:fulltextIndexed". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getTrackerFulltextIndexed() { return baseGetObject< tracker::fulltextIndexed >(); }
				/*!
					\fn void setTrackerFulltextIndexed(bool const &trackerFulltextIndexed_)
					
					
					Sets the property \ref tracker_fulltextIndexed "tracker:fulltextIndexed" to the given \a trackerFulltextIndexed.
					\sa LiveResource::setObject
				 */
				void setTrackerFulltextIndexed(bool const &trackerFulltextIndexed_) { baseSetObject< tracker::fulltextIndexed >( trackerFulltextIndexed_ ); }
				/*!
					\fn bool firstTrackerFulltextIndexed()
					
					
					Returns the first property \ref tracker_fulltextIndexed "tracker:fulltextIndexed". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstTrackerFulltextIndexed() { return baseFirstObject< tracker::fulltextIndexed >(); }
				/*!
					\fn void addTrackerFulltextIndexed(bool const &trackerFulltextIndexed_)
					
					
					Adds the given \a trackerFulltextIndexed_ to the property \ref tracker_fulltextIndexed "tracker:fulltextIndexed" set.
					\sa LiveResource::addObject
				 */
				void addTrackerFulltextIndexed(bool const &trackerFulltextIndexed_) { baseAddObject< tracker::fulltextIndexed >( trackerFulltextIndexed_ ); }
				/*!
					\fn void removeTrackerFulltextIndexed(bool const &trackerFulltextIndexed_)
					
					
					Removes the given \a trackerFulltextIndexed_ from the property \ref tracker_fulltextIndexed "tracker:fulltextIndexed" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackerFulltextIndexed(bool const &trackerFulltextIndexed_) { baseRemoveObject< tracker::fulltextIndexed >(trackerFulltextIndexed_); }
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::rdf::Property::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_RDF_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_RDF_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_RDF_H_POST_INCLUDES
#include <QtTracker/ontologies/nrl.h>
#include <QtTracker/ontologies/tracker.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdfs.h>
#endif
