/*
 * mlo.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:24.477706
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/mlo.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_MLO_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_MLO_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_mlo_classes namespace mlo class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_mlo_properties namespace mlo property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_mlo_resources namespace mlo resource definitions
		 *  @{
		 *  @}
		 */
		static const char mlo_namespace_prefix[] = "http://www.tracker-project.org/temp/mlo#";
		struct Ontology_mlo
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(mlo_namespace_prefix) + suffix;
			}
		};
		namespace mlo
		{
			inline QUrl iri(QString suffix) { return Ontology_mlo::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class GeoBoundingBox;
			class GeoLocation;
			class GeoPoint;
			class GeoSphere;
			class Landmark;
			class LandmarkCategory;
			class LocationBoundingBox;
			class PointOfInterest;
			class Route;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_MLO_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_MLO_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_MLO_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nco.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nie.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nco.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nie.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nco.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nie.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace mlo
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from mlo:bbNorthWest
			 * \anchor mlo_bbNorthWest
			 * \n North west corner of a bounding box. The GeoPoint is interpreted in 2D
			 * \n rdfs:range=mlo:GeoPoint
			 * \n rdfs:label=North west corner
			 * \n tracker:modified=1117
			 * \n rdfs:domain=mlo:GeoBoundingBox
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class bbNorthWest
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#bbNorthWest"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef GeoBoundingBox Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoBoundingBox RDFDomain;
				/// The localized c++ range type of this property
				typedef GeoPoint Range;
				/// The full, non-localized rdf range type of this property
				typedef GeoPoint RDFRange;
			};
			/*! Property generated from mlo:bbSouthEast
			 * \anchor mlo_bbSouthEast
			 * \n South east corner of a bounding box. The GeoPoint is interpreted in 2D
			 * \n rdfs:range=mlo:GeoPoint
			 * \n rdfs:label=South east corner
			 * \n tracker:modified=1064
			 * \n rdfs:domain=mlo:GeoBoundingBox
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class bbSouthEast
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#bbSouthEast"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef GeoBoundingBox Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoBoundingBox RDFDomain;
				/// The localized c++ range type of this property
				typedef GeoPoint Range;
				/// The full, non-localized rdf range type of this property
				typedef GeoPoint RDFRange;
			};
			/*! Property generated from mlo:asBoundingBox
			 * \anchor mlo_asBoundingBox
			 * \n Representation of the location as bounding box
			 * \n rdfs:label=As bounding box
			 * \n rdfs:range=mlo:GeoBoundingBox
			 * \n rdfs:domain=mlo:GeoLocation
			 * \n tracker:indexed=true
			 * \n tracker:modified=1580
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class asBoundingBox
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#asBoundingBox"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef GeoBoundingBox Range;
				/// The full, non-localized rdf range type of this property
				typedef GeoBoundingBox RDFRange;
			};
			/*! Property generated from mlo:asGeoPoint
			 * \anchor mlo_asGeoPoint
			 * \n Representation of the location as geo point
			 * \n rdfs:label=As geo point
			 * \n rdfs:range=mlo:GeoPoint
			 * \n rdfs:domain=mlo:GeoLocation
			 * \n tracker:indexed=true
			 * \n tracker:modified=1999
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class asGeoPoint
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#asGeoPoint"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef GeoPoint Range;
				/// The full, non-localized rdf range type of this property
				typedef GeoPoint RDFRange;
			};
			/*! Property generated from mlo:asPostalAddress
			 * \anchor mlo_asPostalAddress
			 * \n Representation of the location as text address
			 * \n rdfs:label=As postal address
			 * \n rdfs:range=nco:PostalAddress
			 * \n rdfs:domain=mlo:GeoLocation
			 * \n tracker:indexed=true
			 * \n tracker:modified=1369
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class asPostalAddress
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#asPostalAddress"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::PostalAddress Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::PostalAddress RDFRange;
			};
			/*! Property generated from mlo:latitude
			 * \anchor mlo_latitude
			 * \n Positive values for the north hemisphere, negative for the south
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Latitude
			 * \n tracker:modified=1925
			 * \n rdfs:domain=mlo:GeoPoint
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class latitude
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#latitude"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoPoint Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoPoint RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from mlo:longitude
			 * \anchor mlo_longitude
			 * \n Positive to the East of the Greenwich meridian, negative to the West (following WGS-84)
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Longitude
			 * \n tracker:modified=1228
			 * \n rdfs:domain=mlo:GeoPoint
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class longitude
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#longitude"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoPoint Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoPoint RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from mlo:altitude
			 * \anchor mlo_altitude
			 * \n Altitude following WGS 84 reference
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Altitude
			 * \n tracker:modified=1776
			 * \n rdfs:domain=mlo:GeoPoint
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class altitude
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#altitude"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoPoint Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoPoint RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from mlo:timestamp
			 * \anchor mlo_timestamp
			 * \n Timestamp when the geopoint is referenced. Create subproperties for certain use cases
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:label=Timestamp
			 * \n tracker:modified=1888
			 * \n rdfs:domain=mlo:GeoPoint
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class timestamp
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#timestamp"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoPoint Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoPoint RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from mlo:city
			 * \anchor mlo_city
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=City
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=mlo:GeoPoint
			 * \n tracker:writeback=true
			 * \n tracker:modified=1321
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class city
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#city"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoPoint Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoPoint RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from mlo:country
			 * \anchor mlo_country
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=Country
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=mlo:GeoPoint
			 * \n tracker:writeback=true
			 * \n tracker:modified=2000
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class country
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#country"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoPoint Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoPoint RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from mlo:state
			 * \anchor mlo_state
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=State
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=mlo:GeoPoint
			 * \n tracker:writeback=true
			 * \n tracker:modified=1905
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class state
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#state"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoPoint Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoPoint RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from mlo:address
			 * \anchor mlo_address
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=Address
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=mlo:GeoPoint
			 * \n tracker:writeback=true
			 * \n tracker:modified=1348
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class address
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#address"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoPoint Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoPoint RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from mlo:radius
			 * \anchor mlo_radius
			 * \n Radius from the center to define an area. Some applications can use it in 2D sense, making then a circle instead of a sphere
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Radius
			 * \n tracker:modified=1693
			 * \n rdfs:domain=mlo:GeoSphere
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class radius
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#radius"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoSphere Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoSphere RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from mlo:belongsToCategory
			 * \anchor mlo_belongsToCategory
			 * \n Relation of a landmark with a landmark category
			 * \n rdfs:range=mlo:LandmarkCategory
			 * \n rdfs:label=Belongs to category
			 * \n tracker:modified=1215
			 * \n rdfs:domain=mlo:Landmark
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class belongsToCategory
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#belongsToCategory"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Landmark Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Landmark RDFDomain;
				/// The localized c++ range type of this property
				typedef LandmarkCategory Range;
				/// The full, non-localized rdf range type of this property
				typedef LandmarkCategory RDFRange;
			};
			/*! Property generated from mlo:poiLocation
			 * \anchor mlo_poiLocation
			 * \n Coordinates of the point (Use the mlo:location property inherited from IE
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:range=mlo:GeoPoint
			 * \n rdfs:label=POI Location
			 * \n tracker:modified=1368
			 * \n rdfs:domain=mlo:Landmark
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class poiLocation
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#poiLocation"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Landmark Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Landmark RDFDomain;
				/// The localized c++ range type of this property
				typedef GeoPoint Range;
				/// The full, non-localized rdf range type of this property
				typedef GeoPoint RDFRange;
			};
			/*! Property generated from mlo:isRemovable
			 * \anchor mlo_isRemovable
			 * \n Flag to indicate if this instance is removable. This restriction is not enforced by tracker; it is API responsability to honor the value
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:label=Is removable
			 * \n tracker:modified=1743
			 * \n rdfs:domain=mlo:LandmarkCategory
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class isRemovable
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#isRemovable"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef LandmarkCategory Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef LandmarkCategory RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from mlo:boxSouthWestCorner
			 * \anchor mlo_boxSouthWestCorner
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:range=mlo:GeoPoint
			 * \n rdfs:label=South-west corner of the bounding box
			 * \n tracker:modified=1930
			 * \n rdfs:domain=mlo:LocationBoundingBox
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class boxSouthWestCorner
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#boxSouthWestCorner"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef LocationBoundingBox Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef LocationBoundingBox RDFDomain;
				/// The localized c++ range type of this property
				typedef GeoPoint Range;
				/// The full, non-localized rdf range type of this property
				typedef GeoPoint RDFRange;
			};
			/*! Property generated from mlo:boxEastLimit
			 * \anchor mlo_boxEastLimit
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:range=mlo:GeoPoint
			 * \n rdfs:label=Length of the box in the East direction
			 * \n tracker:modified=1096
			 * \n rdfs:domain=mlo:LocationBoundingBox
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class boxEastLimit
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#boxEastLimit"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef LocationBoundingBox Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef LocationBoundingBox RDFDomain;
				/// The localized c++ range type of this property
				typedef GeoPoint Range;
				/// The full, non-localized rdf range type of this property
				typedef GeoPoint RDFRange;
			};
			/*! Property generated from mlo:boxVerticalLimit
			 * \anchor mlo_boxVerticalLimit
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:range=mlo:GeoPoint
			 * \n rdfs:label=Length of the box in the Up direction (height)
			 * \n tracker:modified=1298
			 * \n rdfs:domain=mlo:LocationBoundingBox
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class boxVerticalLimit
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#boxVerticalLimit"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef LocationBoundingBox Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef LocationBoundingBox RDFDomain;
				/// The localized c++ range type of this property
				typedef GeoPoint Range;
				/// The full, non-localized rdf range type of this property
				typedef GeoPoint RDFRange;
			};
			/*! Property generated from mlo:boxNorthLimit
			 * \anchor mlo_boxNorthLimit
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:range=mlo:GeoPoint
			 * \n rdfs:label=Length of the box in the North direction
			 * \n tracker:modified=1160
			 * \n rdfs:domain=mlo:LocationBoundingBox
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class boxNorthLimit
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#boxNorthLimit"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef LocationBoundingBox Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef LocationBoundingBox RDFDomain;
				/// The localized c++ range type of this property
				typedef GeoPoint Range;
				/// The full, non-localized rdf range type of this property
				typedef GeoPoint RDFRange;
			};
			/*! Property generated from mlo:startTime
			 * \anchor mlo_startTime
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:label=Time when the first point in the route was saved
			 * \n tracker:modified=1772
			 * \n rdfs:domain=mlo:Route
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class startTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#startTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Route Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Route RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from mlo:endTime
			 * \anchor mlo_endTime
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:label=Time when the last point in the route was saved
			 * \n tracker:modified=1665
			 * \n rdfs:domain=mlo:Route
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class endTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#endTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Route Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Route RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from mlo:routeDetails
			 * \anchor mlo_routeDetails
			 * \n FIXME Domain can be resource if we handle map-files correctly in the ontology
			 * \n rdfs:range=xsd:string
			 * \n rdfs:label=Pointer to a file containing route details (e.g. KML file).
			 * \n tracker:modified=1106
			 * \n rdfs:domain=mlo:Route
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class routeDetails
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#routeDetails"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Route Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Route RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from mlo:location
			 * \anchor mlo_location
			 * \n This can be subclassed to add semantics
			 * \n rdfs:label=Property linking something to a location
			 * \n rdfs:range=mlo:GeoLocation
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:writeback=true
			 * \n tracker:indexed=true
			 * \n tracker:modified=1386
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mlo_properties
			class location
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#location"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mlo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef nie::InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nie::InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef GeoLocation Range;
				/// The full, non-localized rdf range type of this property
				typedef GeoLocation RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			/*! Resource generated from mlo:predefined-landmark-category-accommodation
			 * \anchor mlo_predefined_landmark_category_accommodation
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_accommodation
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-accommodation"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-business
			 * \anchor mlo_predefined_landmark_category_business
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_business
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-business"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-communication
			 * \anchor mlo_predefined_landmark_category_communication
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_communication
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-communication"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-educational-institute
			 * \anchor mlo_predefined_landmark_category_educational_institute
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_educational_institute
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-educational-institute"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-entertainment
			 * \anchor mlo_predefined_landmark_category_entertainment
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_entertainment
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-entertainment"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-food-beverage
			 * \anchor mlo_predefined_landmark_category_food_beverage
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_food_beverage
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-food-beverage"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-geographical-area
			 * \anchor mlo_predefined_landmark_category_geographical_area
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_geographical_area
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-geographical-area"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-outdoor-activities
			 * \anchor mlo_predefined_landmark_category_outdoor_activities
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_outdoor_activities
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-outdoor-activities"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-people
			 * \anchor mlo_predefined_landmark_category_people
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_people
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-people"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-public-service
			 * \anchor mlo_predefined_landmark_category_public_service
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_public_service
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-public-service"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-religious-places
			 * \anchor mlo_predefined_landmark_category_religious_places
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_religious_places
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-religious-places"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-shopping
			 * \anchor mlo_predefined_landmark_category_shopping
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_shopping
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-shopping"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-sightseeing
			 * \anchor mlo_predefined_landmark_category_sightseeing
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_sightseeing
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-sightseeing"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-sports
			 * \anchor mlo_predefined_landmark_category_sports
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_sports
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-sports"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mlo:predefined-landmark-category-transport
			 * \anchor mlo_predefined_landmark_category_transport
			 */
			/// \ingroup onto_mlo_resources
			class predefined_landmark_category_transport
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#predefined-landmark-category-transport"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_mlo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_MLO_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_MLO_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_MLO_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nco.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nie.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nco.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nie.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace mlo
		{

			using namespace nco;
			using namespace rdf;
			using namespace xsd;
			using namespace nie;

			/*! Class generated from mlo:GeoBoundingBox
			 * \ingroup onto_mlo_classes
			 * Bounding box for a region in the space, defined with 2 points in 2D. We assume that the box is always aligned with parallels and meridians.
			 * 
			 * rdfs:label = Bounding box
			 * 
			 * tracker:modified = 1574
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref mlo_asBoundingBox "mlo:asBoundingBox"
			 */
			class GeoBoundingBox
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#GeoBoundingBox"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mlo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<GeoBoundingBox> Live;
				GeoBoundingBox() { this->attachInterfaceHelper< GeoBoundingBox >(); }
				~GeoBoundingBox() { this->detachInterfaceHelper< GeoBoundingBox >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mlo:bbSouthEast
				 * \n South east corner of a bounding box. The GeoPoint is interpreted in 2D
				 * \n rdfs:range=mlo:GeoPoint
				 * \n rdfs:label=South east corner
				 * \n tracker:modified=1064
				 * \n rdfs:domain=mlo:GeoBoundingBox
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBbSouthEasts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_bbSouthEast "mlo:bbSouthEast" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBbSouthEasts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::bbSouthEast >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBbSouthEasts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_bbSouthEast "mlo:bbSouthEast" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBbSouthEasts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::bbSouthEast >(object_info, strategy, parent); }
				/*!
					\fn void setBbSouthEasts(LiveNodes const &bbSouthEast_)
					
					
					Sets the property \ref mlo_bbSouthEast "mlo:bbSouthEast" set to the given \a bbSouthEast_ set.
					\sa LiveResource::setObjects
				 */
				void setBbSouthEasts(LiveNodes const &bbSouthEast_) { baseSetObjects(mlo::bbSouthEast::iri(), bbSouthEast_); }
				/*!
					\fn void removeBbSouthEasts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_bbSouthEast "mlo:bbSouthEast" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBbSouthEasts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::bbSouthEast::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > firstBbSouthEast()
					
					
					Returns the first property \ref mlo_bbSouthEast "mlo:bbSouthEast". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< GeoPoint > firstBbSouthEast() { return baseFirstObject< mlo::bbSouthEast >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addBbSouthEast()
					
					
					Adds a new uniquely named resource to the property \ref mlo_bbSouthEast "mlo:bbSouthEast" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< GeoPoint > addBbSouthEast() { return baseAddObject< mlo::bbSouthEast >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addBbSouthEast(::SopranoLive::Live< GeoPoint > const &bbSouthEast_)
					
					
					Adds the given \a bbSouthEast_ to the property \ref mlo_bbSouthEast "mlo:bbSouthEast" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< GeoPoint > addBbSouthEast(::SopranoLive::Live< GeoPoint > const &bbSouthEast_) { return baseAddObject< mlo::bbSouthEast >( bbSouthEast_ ); }
				/*!
					\fn void removeBbSouthEast(::SopranoLive::Live< GeoPoint > const &bbSouthEast_)
					
					
					Removes the given \a bbSouthEast_ from the property \ref mlo_bbSouthEast "mlo:bbSouthEast" set.
					\sa LiveResource::removeObject
				 */
				void removeBbSouthEast(::SopranoLive::Live< GeoPoint > const &bbSouthEast_) { baseRemoveObject< mlo::bbSouthEast >(bbSouthEast_); }

				/* Property generated from mlo:bbNorthWest
				 * \n North west corner of a bounding box. The GeoPoint is interpreted in 2D
				 * \n rdfs:range=mlo:GeoPoint
				 * \n rdfs:label=North west corner
				 * \n tracker:modified=1117
				 * \n rdfs:domain=mlo:GeoBoundingBox
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBbNorthWests(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_bbNorthWest "mlo:bbNorthWest" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBbNorthWests(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::bbNorthWest >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBbNorthWests(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_bbNorthWest "mlo:bbNorthWest" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBbNorthWests(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::bbNorthWest >(object_info, strategy, parent); }
				/*!
					\fn void setBbNorthWests(LiveNodes const &bbNorthWest_)
					
					
					Sets the property \ref mlo_bbNorthWest "mlo:bbNorthWest" set to the given \a bbNorthWest_ set.
					\sa LiveResource::setObjects
				 */
				void setBbNorthWests(LiveNodes const &bbNorthWest_) { baseSetObjects(mlo::bbNorthWest::iri(), bbNorthWest_); }
				/*!
					\fn void removeBbNorthWests(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_bbNorthWest "mlo:bbNorthWest" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBbNorthWests(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::bbNorthWest::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > firstBbNorthWest()
					
					
					Returns the first property \ref mlo_bbNorthWest "mlo:bbNorthWest". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< GeoPoint > firstBbNorthWest() { return baseFirstObject< mlo::bbNorthWest >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addBbNorthWest()
					
					
					Adds a new uniquely named resource to the property \ref mlo_bbNorthWest "mlo:bbNorthWest" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< GeoPoint > addBbNorthWest() { return baseAddObject< mlo::bbNorthWest >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addBbNorthWest(::SopranoLive::Live< GeoPoint > const &bbNorthWest_)
					
					
					Adds the given \a bbNorthWest_ to the property \ref mlo_bbNorthWest "mlo:bbNorthWest" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< GeoPoint > addBbNorthWest(::SopranoLive::Live< GeoPoint > const &bbNorthWest_) { return baseAddObject< mlo::bbNorthWest >( bbNorthWest_ ); }
				/*!
					\fn void removeBbNorthWest(::SopranoLive::Live< GeoPoint > const &bbNorthWest_)
					
					
					Removes the given \a bbNorthWest_ from the property \ref mlo_bbNorthWest "mlo:bbNorthWest" set.
					\sa LiveResource::removeObject
				 */
				void removeBbNorthWest(::SopranoLive::Live< GeoPoint > const &bbNorthWest_) { baseRemoveObject< mlo::bbNorthWest >(bbNorthWest_); }
				 //@}
			};

			/*! Class generated from mlo:GeoLocation
			 * \ingroup onto_mlo_classes
			 * A place in the space, can be defined by coordinates, text or box
			 * 
			 * rdfs:label = Location
			 * 
			 * tracker:modified = 1484
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref mlo_location "mlo:location"
			 */
			class GeoLocation
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#GeoLocation"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mlo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<GeoLocation> Live;
				GeoLocation() { this->attachInterfaceHelper< GeoLocation >(); }
				~GeoLocation() { this->detachInterfaceHelper< GeoLocation >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mlo:asBoundingBox
				 * \n Representation of the location as bounding box
				 * \n rdfs:label=As bounding box
				 * \n rdfs:range=mlo:GeoBoundingBox
				 * \n rdfs:domain=mlo:GeoLocation
				 * \n tracker:indexed=true
				 * \n tracker:modified=1580
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAsBoundingBoxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_asBoundingBox "mlo:asBoundingBox" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAsBoundingBoxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::asBoundingBox >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAsBoundingBoxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_asBoundingBox "mlo:asBoundingBox" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAsBoundingBoxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::asBoundingBox >(object_info, strategy, parent); }
				/*!
					\fn void setAsBoundingBoxs(LiveNodes const &asBoundingBox_)
					
					
					Sets the property \ref mlo_asBoundingBox "mlo:asBoundingBox" set to the given \a asBoundingBox_ set.
					\sa LiveResource::setObjects
				 */
				void setAsBoundingBoxs(LiveNodes const &asBoundingBox_) { baseSetObjects(mlo::asBoundingBox::iri(), asBoundingBox_); }
				/*!
					\fn void removeAsBoundingBoxs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_asBoundingBox "mlo:asBoundingBox" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAsBoundingBoxs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::asBoundingBox::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< GeoBoundingBox > firstAsBoundingBox()
					
					
					Returns the first property \ref mlo_asBoundingBox "mlo:asBoundingBox". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< GeoBoundingBox > firstAsBoundingBox() { return baseFirstObject< mlo::asBoundingBox >(); }
				/*!
					\fn ::SopranoLive::Live< GeoBoundingBox > addAsBoundingBox()
					
					
					Adds a new uniquely named resource to the property \ref mlo_asBoundingBox "mlo:asBoundingBox" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< GeoBoundingBox > addAsBoundingBox() { return baseAddObject< mlo::asBoundingBox >(); }
				/*!
					\fn ::SopranoLive::Live< GeoBoundingBox > addAsBoundingBox(::SopranoLive::Live< GeoBoundingBox > const &asBoundingBox_)
					
					
					Adds the given \a asBoundingBox_ to the property \ref mlo_asBoundingBox "mlo:asBoundingBox" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< GeoBoundingBox > addAsBoundingBox(::SopranoLive::Live< GeoBoundingBox > const &asBoundingBox_) { return baseAddObject< mlo::asBoundingBox >( asBoundingBox_ ); }
				/*!
					\fn void removeAsBoundingBox(::SopranoLive::Live< GeoBoundingBox > const &asBoundingBox_)
					
					
					Removes the given \a asBoundingBox_ from the property \ref mlo_asBoundingBox "mlo:asBoundingBox" set.
					\sa LiveResource::removeObject
				 */
				void removeAsBoundingBox(::SopranoLive::Live< GeoBoundingBox > const &asBoundingBox_) { baseRemoveObject< mlo::asBoundingBox >(asBoundingBox_); }

				/* Property generated from mlo:asPostalAddress
				 * \n Representation of the location as text address
				 * \n rdfs:label=As postal address
				 * \n rdfs:range=nco:PostalAddress
				 * \n rdfs:domain=mlo:GeoLocation
				 * \n tracker:indexed=true
				 * \n tracker:modified=1369
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nco::PostalAddress PostalAddress;
				/*!
					\fn LiveNodes liveAsPostalAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_asPostalAddress "mlo:asPostalAddress" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAsPostalAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::asPostalAddress >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAsPostalAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_asPostalAddress "mlo:asPostalAddress" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAsPostalAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::asPostalAddress >(object_info, strategy, parent); }
				/*!
					\fn void setAsPostalAddresss(LiveNodes const &asPostalAddress_)
					
					
					Sets the property \ref mlo_asPostalAddress "mlo:asPostalAddress" set to the given \a asPostalAddress_ set.
					\sa LiveResource::setObjects
				 */
				void setAsPostalAddresss(LiveNodes const &asPostalAddress_) { baseSetObjects(mlo::asPostalAddress::iri(), asPostalAddress_); }
				/*!
					\fn void removeAsPostalAddresss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_asPostalAddress "mlo:asPostalAddress" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAsPostalAddresss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::asPostalAddress::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::PostalAddress > firstAsPostalAddress()
					
					
					Returns the first property \ref mlo_asPostalAddress "mlo:asPostalAddress". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::PostalAddress > firstAsPostalAddress() { return baseFirstObject< mlo::asPostalAddress >(); }
				/*!
					\fn ::SopranoLive::Live< nco::PostalAddress > addAsPostalAddress()
					
					
					Adds a new uniquely named resource to the property \ref mlo_asPostalAddress "mlo:asPostalAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::PostalAddress > addAsPostalAddress() { return baseAddObject< mlo::asPostalAddress >(); }
				/*!
					\fn ::SopranoLive::Live< nco::PostalAddress > addAsPostalAddress(::SopranoLive::Live< nco::PostalAddress > const &asPostalAddress_)
					
					
					Adds the given \a asPostalAddress_ to the property \ref mlo_asPostalAddress "mlo:asPostalAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::PostalAddress > addAsPostalAddress(::SopranoLive::Live< nco::PostalAddress > const &asPostalAddress_) { return baseAddObject< mlo::asPostalAddress >( asPostalAddress_ ); }
				/*!
					\fn void removeAsPostalAddress(::SopranoLive::Live< nco::PostalAddress > const &asPostalAddress_)
					
					
					Removes the given \a asPostalAddress_ from the property \ref mlo_asPostalAddress "mlo:asPostalAddress" set.
					\sa LiveResource::removeObject
				 */
				void removeAsPostalAddress(::SopranoLive::Live< nco::PostalAddress > const &asPostalAddress_) { baseRemoveObject< mlo::asPostalAddress >(asPostalAddress_); }

				/* Property generated from mlo:asGeoPoint
				 * \n Representation of the location as geo point
				 * \n rdfs:label=As geo point
				 * \n rdfs:range=mlo:GeoPoint
				 * \n rdfs:domain=mlo:GeoLocation
				 * \n tracker:indexed=true
				 * \n tracker:modified=1999
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAsGeoPoints(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_asGeoPoint "mlo:asGeoPoint" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAsGeoPoints(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::asGeoPoint >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAsGeoPoints(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_asGeoPoint "mlo:asGeoPoint" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAsGeoPoints(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::asGeoPoint >(object_info, strategy, parent); }
				/*!
					\fn void setAsGeoPoints(LiveNodes const &asGeoPoint_)
					
					
					Sets the property \ref mlo_asGeoPoint "mlo:asGeoPoint" set to the given \a asGeoPoint_ set.
					\sa LiveResource::setObjects
				 */
				void setAsGeoPoints(LiveNodes const &asGeoPoint_) { baseSetObjects(mlo::asGeoPoint::iri(), asGeoPoint_); }
				/*!
					\fn void removeAsGeoPoints(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_asGeoPoint "mlo:asGeoPoint" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAsGeoPoints(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::asGeoPoint::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > firstAsGeoPoint()
					
					
					Returns the first property \ref mlo_asGeoPoint "mlo:asGeoPoint". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< GeoPoint > firstAsGeoPoint() { return baseFirstObject< mlo::asGeoPoint >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addAsGeoPoint()
					
					
					Adds a new uniquely named resource to the property \ref mlo_asGeoPoint "mlo:asGeoPoint" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< GeoPoint > addAsGeoPoint() { return baseAddObject< mlo::asGeoPoint >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addAsGeoPoint(::SopranoLive::Live< GeoPoint > const &asGeoPoint_)
					
					
					Adds the given \a asGeoPoint_ to the property \ref mlo_asGeoPoint "mlo:asGeoPoint" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< GeoPoint > addAsGeoPoint(::SopranoLive::Live< GeoPoint > const &asGeoPoint_) { return baseAddObject< mlo::asGeoPoint >( asGeoPoint_ ); }
				/*!
					\fn void removeAsGeoPoint(::SopranoLive::Live< GeoPoint > const &asGeoPoint_)
					
					
					Removes the given \a asGeoPoint_ from the property \ref mlo_asGeoPoint "mlo:asGeoPoint" set.
					\sa LiveResource::removeObject
				 */
				void removeAsGeoPoint(::SopranoLive::Live< GeoPoint > const &asGeoPoint_) { baseRemoveObject< mlo::asGeoPoint >(asGeoPoint_); }
				 //@}
			};

			/*! Class generated from mlo:GeoPoint
			 * \ingroup onto_mlo_classes
			 * The inherited properties from InformationElement can be used to add details.
			 * 
			 * rdfs:label = Point on the earth
			 * 
			 * tracker:modified = 1631
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref mlo_boxSouthWestCorner "mlo:boxSouthWestCorner"
			 * 		\ref mlo_bbSouthEast "mlo:bbSouthEast"
			 * 		\ref mlo_boxEastLimit "mlo:boxEastLimit"
			 * 		\ref mlo_boxVerticalLimit "mlo:boxVerticalLimit"
			 * 		\ref mlo_boxNorthLimit "mlo:boxNorthLimit"
			 * 		\ref mlo_bbNorthWest "mlo:bbNorthWest"
			 * 		\ref mlo_poiLocation "mlo:poiLocation"
			 * 		\ref mlo_asGeoPoint "mlo:asGeoPoint"
			 */
			class GeoPoint
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#GeoPoint"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mlo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<GeoPoint> Live;
				GeoPoint() { this->attachInterfaceHelper< GeoPoint >(); }
				~GeoPoint() { this->detachInterfaceHelper< GeoPoint >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mlo:state
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=State
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=mlo:GeoPoint
				 * \n tracker:writeback=true
				 * \n tracker:modified=1905
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveStates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::state for replacement
					Returns a live model of property \ref mlo_state "mlo:state" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveStates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::state >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::state for replacement
					Returns all current values of property \ref mlo_state "mlo:state" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getStates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::state >(object_info, strategy, parent); }
				/*!
					\fn void setStates(LiveNodes const &state_)
					
					\deprecated See \ref mlo::state for replacement
					Sets the property \ref mlo_state "mlo:state" set to the given \a state_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setStates(LiveNodes const &state_) { baseSetObjects(mlo::state::iri(), state_); }
				/*!
					\fn void removeStates(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref mlo::state for replacement
					Removes the properties from property \ref mlo_state "mlo:state" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeStates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::state::iri(), object_info); }
				/*!
					\fn QString firstState()
					
					\deprecated See \ref mlo::state for replacement
					Returns the first property \ref mlo_state "mlo:state". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED QString firstState() { return baseFirstObject< mlo::state >(); }
				/*!
					\fn void addState(QString const &state_)
					
					\deprecated See \ref mlo::state for replacement
					Adds the given \a state_ to the property \ref mlo_state "mlo:state" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addState(QString const &state_) { baseAddObject< mlo::state >( state_ ); }
				/*!
					\fn void removeState(QString const &state_)
					
					\deprecated See \ref mlo::state for replacement
					Removes the given \a state_ from the property \ref mlo_state "mlo:state" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeState(QString const &state_) { baseRemoveObject< mlo::state >(state_); }

				/* Property generated from mlo:address
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=Address
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=mlo:GeoPoint
				 * \n tracker:writeback=true
				 * \n tracker:modified=1348
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::address for replacement
					Returns a live model of property \ref mlo_address "mlo:address" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::address >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::address for replacement
					Returns all current values of property \ref mlo_address "mlo:address" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::address >(object_info, strategy, parent); }
				/*!
					\fn void setAddresss(LiveNodes const &address_)
					
					\deprecated See \ref mlo::address for replacement
					Sets the property \ref mlo_address "mlo:address" set to the given \a address_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setAddresss(LiveNodes const &address_) { baseSetObjects(mlo::address::iri(), address_); }
				/*!
					\fn void removeAddresss(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref mlo::address for replacement
					Removes the properties from property \ref mlo_address "mlo:address" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeAddresss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::address::iri(), object_info); }
				/*!
					\fn QString firstAddress()
					
					\deprecated See \ref mlo::address for replacement
					Returns the first property \ref mlo_address "mlo:address". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED QString firstAddress() { return baseFirstObject< mlo::address >(); }
				/*!
					\fn void addAddress(QString const &address_)
					
					\deprecated See \ref mlo::address for replacement
					Adds the given \a address_ to the property \ref mlo_address "mlo:address" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addAddress(QString const &address_) { baseAddObject< mlo::address >( address_ ); }
				/*!
					\fn void removeAddress(QString const &address_)
					
					\deprecated See \ref mlo::address for replacement
					Removes the given \a address_ from the property \ref mlo_address "mlo:address" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeAddress(QString const &address_) { baseRemoveObject< mlo::address >(address_); }

				/* Property generated from mlo:latitude
				 * \n Positive values for the north hemisphere, negative for the south
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Latitude
				 * \n tracker:modified=1925
				 * \n rdfs:domain=mlo:GeoPoint
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLatitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_latitude "mlo:latitude" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLatitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::latitude >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLatitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_latitude "mlo:latitude" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLatitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::latitude >(object_info, strategy, parent); }
				/*!
					\fn void setLatitudes(LiveNodes const &latitude_)
					
					
					Sets the property \ref mlo_latitude "mlo:latitude" set to the given \a latitude_ set.
					\sa LiveResource::setObjects
				 */
				void setLatitudes(LiveNodes const &latitude_) { baseSetObjects(mlo::latitude::iri(), latitude_); }
				/*!
					\fn void removeLatitudes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_latitude "mlo:latitude" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLatitudes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::latitude::iri(), object_info); }
				/*!
					\fn double firstLatitude()
					
					
					Returns the first property \ref mlo_latitude "mlo:latitude". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstLatitude() { return baseFirstObject< mlo::latitude >(); }
				/*!
					\fn void addLatitude(double const &latitude_)
					
					
					Adds the given \a latitude_ to the property \ref mlo_latitude "mlo:latitude" set.
					\sa LiveResource::addObject
				 */
				void addLatitude(double const &latitude_) { baseAddObject< mlo::latitude >( latitude_ ); }
				/*!
					\fn void removeLatitude(double const &latitude_)
					
					
					Removes the given \a latitude_ from the property \ref mlo_latitude "mlo:latitude" set.
					\sa LiveResource::removeObject
				 */
				void removeLatitude(double const &latitude_) { baseRemoveObject< mlo::latitude >(latitude_); }

				/* Property generated from mlo:timestamp
				 * \n Timestamp when the geopoint is referenced. Create subproperties for certain use cases
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:label=Timestamp
				 * \n tracker:modified=1888
				 * \n rdfs:domain=mlo:GeoPoint
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTimestamps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_timestamp "mlo:timestamp" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTimestamps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::timestamp >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTimestamps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_timestamp "mlo:timestamp" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTimestamps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::timestamp >(object_info, strategy, parent); }
				/*!
					\fn void setTimestamps(LiveNodes const &timestamp_)
					
					
					Sets the property \ref mlo_timestamp "mlo:timestamp" set to the given \a timestamp_ set.
					\sa LiveResource::setObjects
				 */
				void setTimestamps(LiveNodes const &timestamp_) { baseSetObjects(mlo::timestamp::iri(), timestamp_); }
				/*!
					\fn void removeTimestamps(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_timestamp "mlo:timestamp" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTimestamps(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::timestamp::iri(), object_info); }
				/*!
					\fn QDateTime firstTimestamp()
					
					
					Returns the first property \ref mlo_timestamp "mlo:timestamp". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstTimestamp() { return baseFirstObject< mlo::timestamp >(); }
				/*!
					\fn void addTimestamp(QDateTime const &timestamp_)
					
					
					Adds the given \a timestamp_ to the property \ref mlo_timestamp "mlo:timestamp" set.
					\sa LiveResource::addObject
				 */
				void addTimestamp(QDateTime const &timestamp_) { baseAddObject< mlo::timestamp >( timestamp_ ); }
				/*!
					\fn void removeTimestamp(QDateTime const &timestamp_)
					
					
					Removes the given \a timestamp_ from the property \ref mlo_timestamp "mlo:timestamp" set.
					\sa LiveResource::removeObject
				 */
				void removeTimestamp(QDateTime const &timestamp_) { baseRemoveObject< mlo::timestamp >(timestamp_); }

				/* Property generated from mlo:altitude
				 * \n Altitude following WGS 84 reference
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Altitude
				 * \n tracker:modified=1776
				 * \n rdfs:domain=mlo:GeoPoint
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAltitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_altitude "mlo:altitude" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAltitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::altitude >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAltitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_altitude "mlo:altitude" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAltitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::altitude >(object_info, strategy, parent); }
				/*!
					\fn void setAltitudes(LiveNodes const &altitude_)
					
					
					Sets the property \ref mlo_altitude "mlo:altitude" set to the given \a altitude_ set.
					\sa LiveResource::setObjects
				 */
				void setAltitudes(LiveNodes const &altitude_) { baseSetObjects(mlo::altitude::iri(), altitude_); }
				/*!
					\fn void removeAltitudes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_altitude "mlo:altitude" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAltitudes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::altitude::iri(), object_info); }
				/*!
					\fn double firstAltitude()
					
					
					Returns the first property \ref mlo_altitude "mlo:altitude". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstAltitude() { return baseFirstObject< mlo::altitude >(); }
				/*!
					\fn void addAltitude(double const &altitude_)
					
					
					Adds the given \a altitude_ to the property \ref mlo_altitude "mlo:altitude" set.
					\sa LiveResource::addObject
				 */
				void addAltitude(double const &altitude_) { baseAddObject< mlo::altitude >( altitude_ ); }
				/*!
					\fn void removeAltitude(double const &altitude_)
					
					
					Removes the given \a altitude_ from the property \ref mlo_altitude "mlo:altitude" set.
					\sa LiveResource::removeObject
				 */
				void removeAltitude(double const &altitude_) { baseRemoveObject< mlo::altitude >(altitude_); }

				/* Property generated from mlo:country
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=Country
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=mlo:GeoPoint
				 * \n tracker:writeback=true
				 * \n tracker:modified=2000
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCountrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::country for replacement
					Returns a live model of property \ref mlo_country "mlo:country" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveCountrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::country >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCountrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::country for replacement
					Returns all current values of property \ref mlo_country "mlo:country" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getCountrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::country >(object_info, strategy, parent); }
				/*!
					\fn void setCountrys(LiveNodes const &country_)
					
					\deprecated See \ref mlo::country for replacement
					Sets the property \ref mlo_country "mlo:country" set to the given \a country_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setCountrys(LiveNodes const &country_) { baseSetObjects(mlo::country::iri(), country_); }
				/*!
					\fn void removeCountrys(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref mlo::country for replacement
					Removes the properties from property \ref mlo_country "mlo:country" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeCountrys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::country::iri(), object_info); }
				/*!
					\fn QString firstCountry()
					
					\deprecated See \ref mlo::country for replacement
					Returns the first property \ref mlo_country "mlo:country". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED QString firstCountry() { return baseFirstObject< mlo::country >(); }
				/*!
					\fn void addCountry(QString const &country_)
					
					\deprecated See \ref mlo::country for replacement
					Adds the given \a country_ to the property \ref mlo_country "mlo:country" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addCountry(QString const &country_) { baseAddObject< mlo::country >( country_ ); }
				/*!
					\fn void removeCountry(QString const &country_)
					
					\deprecated See \ref mlo::country for replacement
					Removes the given \a country_ from the property \ref mlo_country "mlo:country" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeCountry(QString const &country_) { baseRemoveObject< mlo::country >(country_); }

				/* Property generated from mlo:city
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=City
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=mlo:GeoPoint
				 * \n tracker:writeback=true
				 * \n tracker:modified=1321
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::city for replacement
					Returns a live model of property \ref mlo_city "mlo:city" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveCitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::city >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::city for replacement
					Returns all current values of property \ref mlo_city "mlo:city" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getCitys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::city >(object_info, strategy, parent); }
				/*!
					\fn void setCitys(LiveNodes const &city_)
					
					\deprecated See \ref mlo::city for replacement
					Sets the property \ref mlo_city "mlo:city" set to the given \a city_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setCitys(LiveNodes const &city_) { baseSetObjects(mlo::city::iri(), city_); }
				/*!
					\fn void removeCitys(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref mlo::city for replacement
					Removes the properties from property \ref mlo_city "mlo:city" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeCitys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::city::iri(), object_info); }
				/*!
					\fn QString firstCity()
					
					\deprecated See \ref mlo::city for replacement
					Returns the first property \ref mlo_city "mlo:city". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED QString firstCity() { return baseFirstObject< mlo::city >(); }
				/*!
					\fn void addCity(QString const &city_)
					
					\deprecated See \ref mlo::city for replacement
					Adds the given \a city_ to the property \ref mlo_city "mlo:city" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addCity(QString const &city_) { baseAddObject< mlo::city >( city_ ); }
				/*!
					\fn void removeCity(QString const &city_)
					
					\deprecated See \ref mlo::city for replacement
					Removes the given \a city_ from the property \ref mlo_city "mlo:city" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeCity(QString const &city_) { baseRemoveObject< mlo::city >(city_); }

				/* Property generated from mlo:longitude
				 * \n Positive to the East of the Greenwich meridian, negative to the West (following WGS-84)
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Longitude
				 * \n tracker:modified=1228
				 * \n rdfs:domain=mlo:GeoPoint
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLongitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_longitude "mlo:longitude" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLongitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::longitude >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLongitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_longitude "mlo:longitude" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLongitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::longitude >(object_info, strategy, parent); }
				/*!
					\fn void setLongitudes(LiveNodes const &longitude_)
					
					
					Sets the property \ref mlo_longitude "mlo:longitude" set to the given \a longitude_ set.
					\sa LiveResource::setObjects
				 */
				void setLongitudes(LiveNodes const &longitude_) { baseSetObjects(mlo::longitude::iri(), longitude_); }
				/*!
					\fn void removeLongitudes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_longitude "mlo:longitude" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLongitudes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::longitude::iri(), object_info); }
				/*!
					\fn double firstLongitude()
					
					
					Returns the first property \ref mlo_longitude "mlo:longitude". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstLongitude() { return baseFirstObject< mlo::longitude >(); }
				/*!
					\fn void addLongitude(double const &longitude_)
					
					
					Adds the given \a longitude_ to the property \ref mlo_longitude "mlo:longitude" set.
					\sa LiveResource::addObject
				 */
				void addLongitude(double const &longitude_) { baseAddObject< mlo::longitude >( longitude_ ); }
				/*!
					\fn void removeLongitude(double const &longitude_)
					
					
					Removes the given \a longitude_ from the property \ref mlo_longitude "mlo:longitude" set.
					\sa LiveResource::removeObject
				 */
				void removeLongitude(double const &longitude_) { baseRemoveObject< mlo::longitude >(longitude_); }
				 //@}
			};

			/*! Class generated from mlo:GeoSphere
			 * \ingroup onto_mlo_classes
			 * Point and radius to define an area in the space
			 * 
			 * rdfs:label = Spherical space
			 * 
			 * tracker:modified = 1614
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class GeoSphere
				: public virtual GeoPoint

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#GeoSphere"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<GeoPoint, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mlo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<GeoSphere> Live;
				GeoSphere() { this->attachInterfaceHelper< GeoSphere >(); }
				~GeoSphere() { this->detachInterfaceHelper< GeoSphere >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mlo:radius
				 * \n Radius from the center to define an area. Some applications can use it in 2D sense, making then a circle instead of a sphere
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Radius
				 * \n tracker:modified=1693
				 * \n rdfs:domain=mlo:GeoSphere
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRadiuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_radius "mlo:radius" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRadiuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::radius >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRadiuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_radius "mlo:radius" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRadiuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::radius >(object_info, strategy, parent); }
				/*!
					\fn void setRadiuss(LiveNodes const &radius_)
					
					
					Sets the property \ref mlo_radius "mlo:radius" set to the given \a radius_ set.
					\sa LiveResource::setObjects
				 */
				void setRadiuss(LiveNodes const &radius_) { baseSetObjects(mlo::radius::iri(), radius_); }
				/*!
					\fn void removeRadiuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_radius "mlo:radius" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRadiuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::radius::iri(), object_info); }
				/*!
					\fn double firstRadius()
					
					
					Returns the first property \ref mlo_radius "mlo:radius". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstRadius() { return baseFirstObject< mlo::radius >(); }
				/*!
					\fn void addRadius(double const &radius_)
					
					
					Adds the given \a radius_ to the property \ref mlo_radius "mlo:radius" set.
					\sa LiveResource::addObject
				 */
				void addRadius(double const &radius_) { baseAddObject< mlo::radius >( radius_ ); }
				/*!
					\fn void removeRadius(double const &radius_)
					
					
					Removes the given \a radius_ from the property \ref mlo_radius "mlo:radius" set.
					\sa LiveResource::removeObject
				 */
				void removeRadius(double const &radius_) { baseRemoveObject< mlo::radius >(radius_); }
				 //@}
			};

			/*! Class generated from mlo:Landmark
			 * \ingroup onto_mlo_classes
			 * Use the nie title, description, ... properties
			 * 
			 * rdfs:label = Point with special relevance for the user
			 * 
			 * tracker:modified = 1953
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Landmark
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#Landmark"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mlo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Landmark> Live;
				Landmark() { this->attachInterfaceHelper< Landmark >(); }
				~Landmark() { this->detachInterfaceHelper< Landmark >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mlo:poiLocation
				 * \n Coordinates of the point (Use the mlo:location property inherited from IE
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:range=mlo:GeoPoint
				 * \n rdfs:label=POI Location
				 * \n tracker:modified=1368
				 * \n rdfs:domain=mlo:Landmark
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePoiLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::poiLocation for replacement
					Returns a live model of property \ref mlo_poiLocation "mlo:poiLocation" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes livePoiLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::poiLocation >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPoiLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::poiLocation for replacement
					Returns all current values of property \ref mlo_poiLocation "mlo:poiLocation" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getPoiLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::poiLocation >(object_info, strategy, parent); }
				/*!
					\fn void setPoiLocations(LiveNodes const &poiLocation_)
					
					\deprecated See \ref mlo::poiLocation for replacement
					Sets the property \ref mlo_poiLocation "mlo:poiLocation" set to the given \a poiLocation_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setPoiLocations(LiveNodes const &poiLocation_) { baseSetObjects(mlo::poiLocation::iri(), poiLocation_); }
				/*!
					\fn void removePoiLocations(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref mlo::poiLocation for replacement
					Removes the properties from property \ref mlo_poiLocation "mlo:poiLocation" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removePoiLocations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::poiLocation::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > firstPoiLocation()
					
					\deprecated See \ref mlo::poiLocation for replacement
					Returns the first property \ref mlo_poiLocation "mlo:poiLocation". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > firstPoiLocation() { return baseFirstObject< mlo::poiLocation >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addPoiLocation()
					
					\deprecated See \ref mlo::poiLocation for replacement
					Adds a new uniquely named resource to the property \ref mlo_poiLocation "mlo:poiLocation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > addPoiLocation() { return baseAddObject< mlo::poiLocation >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addPoiLocation(::SopranoLive::Live< GeoPoint > const &poiLocation_)
					
					\deprecated See \ref mlo::poiLocation for replacement
					Adds the given \a poiLocation_ to the property \ref mlo_poiLocation "mlo:poiLocation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > addPoiLocation(::SopranoLive::Live< GeoPoint > const &poiLocation_) { return baseAddObject< mlo::poiLocation >( poiLocation_ ); }
				/*!
					\fn void removePoiLocation(::SopranoLive::Live< GeoPoint > const &poiLocation_)
					
					\deprecated See \ref mlo::poiLocation for replacement
					Removes the given \a poiLocation_ from the property \ref mlo_poiLocation "mlo:poiLocation" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removePoiLocation(::SopranoLive::Live< GeoPoint > const &poiLocation_) { baseRemoveObject< mlo::poiLocation >(poiLocation_); }

				/* Property generated from mlo:belongsToCategory
				 * \n Relation of a landmark with a landmark category
				 * \n rdfs:range=mlo:LandmarkCategory
				 * \n rdfs:label=Belongs to category
				 * \n tracker:modified=1215
				 * \n rdfs:domain=mlo:Landmark
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBelongsToCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_belongsToCategory "mlo:belongsToCategory" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBelongsToCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::belongsToCategory >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBelongsToCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_belongsToCategory "mlo:belongsToCategory" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBelongsToCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::belongsToCategory >(object_info, strategy, parent); }
				/*!
					\fn void setBelongsToCategorys(LiveNodes const &belongsToCategory_)
					
					
					Sets the property \ref mlo_belongsToCategory "mlo:belongsToCategory" set to the given \a belongsToCategory_ set.
					\sa LiveResource::setObjects
				 */
				void setBelongsToCategorys(LiveNodes const &belongsToCategory_) { baseSetObjects(mlo::belongsToCategory::iri(), belongsToCategory_); }
				/*!
					\fn void removeBelongsToCategorys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_belongsToCategory "mlo:belongsToCategory" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBelongsToCategorys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::belongsToCategory::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< LandmarkCategory > firstBelongsToCategory()
					
					
					Returns the first property \ref mlo_belongsToCategory "mlo:belongsToCategory". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< LandmarkCategory > firstBelongsToCategory() { return baseFirstObject< mlo::belongsToCategory >(); }
				/*!
					\fn ::SopranoLive::Live< LandmarkCategory > addBelongsToCategory()
					
					
					Adds a new uniquely named resource to the property \ref mlo_belongsToCategory "mlo:belongsToCategory" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< LandmarkCategory > addBelongsToCategory() { return baseAddObject< mlo::belongsToCategory >(); }
				/*!
					\fn ::SopranoLive::Live< LandmarkCategory > addBelongsToCategory(::SopranoLive::Live< LandmarkCategory > const &belongsToCategory_)
					
					
					Adds the given \a belongsToCategory_ to the property \ref mlo_belongsToCategory "mlo:belongsToCategory" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< LandmarkCategory > addBelongsToCategory(::SopranoLive::Live< LandmarkCategory > const &belongsToCategory_) { return baseAddObject< mlo::belongsToCategory >( belongsToCategory_ ); }
				/*!
					\fn void removeBelongsToCategory(::SopranoLive::Live< LandmarkCategory > const &belongsToCategory_)
					
					
					Removes the given \a belongsToCategory_ from the property \ref mlo_belongsToCategory "mlo:belongsToCategory" set.
					\sa LiveResource::removeObject
				 */
				void removeBelongsToCategory(::SopranoLive::Live< LandmarkCategory > const &belongsToCategory_) { baseRemoveObject< mlo::belongsToCategory >(belongsToCategory_); }
				 //@}
			};

			/*! Class generated from mlo:LandmarkCategory
			 * \ingroup onto_mlo_classes
			 * Predefined set of instances for categories of landmarks
			 * 
			 * rdfs:label = Landmark category
			 * 
			 * tracker:modified = 1872
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref mlo_predefined_landmark_category_sports "mlo:predefined-landmark-category-sports"
			 * 		\ref mlo_predefined_landmark_category_transport "mlo:predefined-landmark-category-transport"
			 * 		\ref mlo_predefined_landmark_category_entertainment "mlo:predefined-landmark-category-entertainment"
			 * 		\ref mlo_predefined_landmark_category_communication "mlo:predefined-landmark-category-communication"
			 * 		\ref mlo_predefined_landmark_category_religious_places "mlo:predefined-landmark-category-religious-places"
			 * 		\ref mlo_predefined_landmark_category_geographical_area "mlo:predefined-landmark-category-geographical-area"
			 * 		\ref mlo_predefined_landmark_category_business "mlo:predefined-landmark-category-business"
			 * 		\ref mlo_predefined_landmark_category_sightseeing "mlo:predefined-landmark-category-sightseeing"
			 * 		\ref mlo_predefined_landmark_category_outdoor_activities "mlo:predefined-landmark-category-outdoor-activities"
			 * 		\ref mlo_predefined_landmark_category_public_service "mlo:predefined-landmark-category-public-service"
			 * 		\ref mlo_predefined_landmark_category_food_beverage "mlo:predefined-landmark-category-food-beverage"
			 * 		\ref mlo_predefined_landmark_category_educational_institute "mlo:predefined-landmark-category-educational-institute"
			 * 		\ref mlo_predefined_landmark_category_people "mlo:predefined-landmark-category-people"
			 * 		\ref mlo_predefined_landmark_category_shopping "mlo:predefined-landmark-category-shopping"
			 * 		\ref mlo_predefined_landmark_category_accommodation "mlo:predefined-landmark-category-accommodation"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref mlo_belongsToCategory "mlo:belongsToCategory"
			 */
			class LandmarkCategory
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#LandmarkCategory"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mlo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<LandmarkCategory> Live;
				LandmarkCategory() { this->attachInterfaceHelper< LandmarkCategory >(); }
				~LandmarkCategory() { this->detachInterfaceHelper< LandmarkCategory >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mlo:isRemovable
				 * \n Flag to indicate if this instance is removable. This restriction is not enforced by tracker; it is API responsability to honor the value
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:label=Is removable
				 * \n tracker:modified=1743
				 * \n rdfs:domain=mlo:LandmarkCategory
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveIsRemovables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_isRemovable "mlo:isRemovable" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsRemovables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::isRemovable >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsRemovables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_isRemovable "mlo:isRemovable" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsRemovables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::isRemovable >(object_info, strategy, parent); }
				/*!
					\fn void setIsRemovables(LiveNodes const &isRemovable_)
					
					
					Sets the property \ref mlo_isRemovable "mlo:isRemovable" set to the given \a isRemovable_ set.
					\sa LiveResource::setObjects
				 */
				void setIsRemovables(LiveNodes const &isRemovable_) { baseSetObjects(mlo::isRemovable::iri(), isRemovable_); }
				/*!
					\fn void removeIsRemovables(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_isRemovable "mlo:isRemovable" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsRemovables(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::isRemovable::iri(), object_info); }
				/*!
					\fn bool firstIsRemovable()
					
					
					Returns the first property \ref mlo_isRemovable "mlo:isRemovable". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsRemovable() { return baseFirstObject< mlo::isRemovable >(); }
				/*!
					\fn void addIsRemovable(bool const &isRemovable_)
					
					
					Adds the given \a isRemovable_ to the property \ref mlo_isRemovable "mlo:isRemovable" set.
					\sa LiveResource::addObject
				 */
				void addIsRemovable(bool const &isRemovable_) { baseAddObject< mlo::isRemovable >( isRemovable_ ); }
				/*!
					\fn void removeIsRemovable(bool const &isRemovable_)
					
					
					Removes the given \a isRemovable_ from the property \ref mlo_isRemovable "mlo:isRemovable" set.
					\sa LiveResource::removeObject
				 */
				void removeIsRemovable(bool const &isRemovable_) { baseRemoveObject< mlo::isRemovable >(isRemovable_); }
				 //@}
			};

			/*! Class generated from mlo:LocationBoundingBox
			 * \ingroup onto_mlo_classes
			 * This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * 
			 * rdfs:label = Box containing a relevant location (places that cannot be described in one concrete point)
			 * 
			 * tracker:modified = 1859
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class LocationBoundingBox
				: public virtual GeoBoundingBox

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#LocationBoundingBox"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<GeoBoundingBox, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mlo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<LocationBoundingBox> Live;
				LocationBoundingBox() { this->attachInterfaceHelper< LocationBoundingBox >(); }
				~LocationBoundingBox() { this->detachInterfaceHelper< LocationBoundingBox >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mlo:boxSouthWestCorner
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:range=mlo:GeoPoint
				 * \n rdfs:label=South-west corner of the bounding box
				 * \n tracker:modified=1930
				 * \n rdfs:domain=mlo:LocationBoundingBox
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBoxSouthWestCorners(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::boxSouthWestCorner for replacement
					Returns a live model of property \ref mlo_boxSouthWestCorner "mlo:boxSouthWestCorner" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveBoxSouthWestCorners(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::boxSouthWestCorner >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBoxSouthWestCorners(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::boxSouthWestCorner for replacement
					Returns all current values of property \ref mlo_boxSouthWestCorner "mlo:boxSouthWestCorner" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getBoxSouthWestCorners(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::boxSouthWestCorner >(object_info, strategy, parent); }
				/*!
					\fn void setBoxSouthWestCorners(LiveNodes const &boxSouthWestCorner_)
					
					\deprecated See \ref mlo::boxSouthWestCorner for replacement
					Sets the property \ref mlo_boxSouthWestCorner "mlo:boxSouthWestCorner" set to the given \a boxSouthWestCorner_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setBoxSouthWestCorners(LiveNodes const &boxSouthWestCorner_) { baseSetObjects(mlo::boxSouthWestCorner::iri(), boxSouthWestCorner_); }
				/*!
					\fn void removeBoxSouthWestCorners(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref mlo::boxSouthWestCorner for replacement
					Removes the properties from property \ref mlo_boxSouthWestCorner "mlo:boxSouthWestCorner" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeBoxSouthWestCorners(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::boxSouthWestCorner::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > firstBoxSouthWestCorner()
					
					\deprecated See \ref mlo::boxSouthWestCorner for replacement
					Returns the first property \ref mlo_boxSouthWestCorner "mlo:boxSouthWestCorner". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > firstBoxSouthWestCorner() { return baseFirstObject< mlo::boxSouthWestCorner >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addBoxSouthWestCorner()
					
					\deprecated See \ref mlo::boxSouthWestCorner for replacement
					Adds a new uniquely named resource to the property \ref mlo_boxSouthWestCorner "mlo:boxSouthWestCorner" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > addBoxSouthWestCorner() { return baseAddObject< mlo::boxSouthWestCorner >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addBoxSouthWestCorner(::SopranoLive::Live< GeoPoint > const &boxSouthWestCorner_)
					
					\deprecated See \ref mlo::boxSouthWestCorner for replacement
					Adds the given \a boxSouthWestCorner_ to the property \ref mlo_boxSouthWestCorner "mlo:boxSouthWestCorner" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > addBoxSouthWestCorner(::SopranoLive::Live< GeoPoint > const &boxSouthWestCorner_) { return baseAddObject< mlo::boxSouthWestCorner >( boxSouthWestCorner_ ); }
				/*!
					\fn void removeBoxSouthWestCorner(::SopranoLive::Live< GeoPoint > const &boxSouthWestCorner_)
					
					\deprecated See \ref mlo::boxSouthWestCorner for replacement
					Removes the given \a boxSouthWestCorner_ from the property \ref mlo_boxSouthWestCorner "mlo:boxSouthWestCorner" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeBoxSouthWestCorner(::SopranoLive::Live< GeoPoint > const &boxSouthWestCorner_) { baseRemoveObject< mlo::boxSouthWestCorner >(boxSouthWestCorner_); }

				/* Property generated from mlo:boxVerticalLimit
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:range=mlo:GeoPoint
				 * \n rdfs:label=Length of the box in the Up direction (height)
				 * \n tracker:modified=1298
				 * \n rdfs:domain=mlo:LocationBoundingBox
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBoxVerticalLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::boxVerticalLimit for replacement
					Returns a live model of property \ref mlo_boxVerticalLimit "mlo:boxVerticalLimit" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveBoxVerticalLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::boxVerticalLimit >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBoxVerticalLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::boxVerticalLimit for replacement
					Returns all current values of property \ref mlo_boxVerticalLimit "mlo:boxVerticalLimit" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getBoxVerticalLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::boxVerticalLimit >(object_info, strategy, parent); }
				/*!
					\fn void setBoxVerticalLimits(LiveNodes const &boxVerticalLimit_)
					
					\deprecated See \ref mlo::boxVerticalLimit for replacement
					Sets the property \ref mlo_boxVerticalLimit "mlo:boxVerticalLimit" set to the given \a boxVerticalLimit_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setBoxVerticalLimits(LiveNodes const &boxVerticalLimit_) { baseSetObjects(mlo::boxVerticalLimit::iri(), boxVerticalLimit_); }
				/*!
					\fn void removeBoxVerticalLimits(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref mlo::boxVerticalLimit for replacement
					Removes the properties from property \ref mlo_boxVerticalLimit "mlo:boxVerticalLimit" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeBoxVerticalLimits(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::boxVerticalLimit::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > firstBoxVerticalLimit()
					
					\deprecated See \ref mlo::boxVerticalLimit for replacement
					Returns the first property \ref mlo_boxVerticalLimit "mlo:boxVerticalLimit". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > firstBoxVerticalLimit() { return baseFirstObject< mlo::boxVerticalLimit >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addBoxVerticalLimit()
					
					\deprecated See \ref mlo::boxVerticalLimit for replacement
					Adds a new uniquely named resource to the property \ref mlo_boxVerticalLimit "mlo:boxVerticalLimit" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > addBoxVerticalLimit() { return baseAddObject< mlo::boxVerticalLimit >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addBoxVerticalLimit(::SopranoLive::Live< GeoPoint > const &boxVerticalLimit_)
					
					\deprecated See \ref mlo::boxVerticalLimit for replacement
					Adds the given \a boxVerticalLimit_ to the property \ref mlo_boxVerticalLimit "mlo:boxVerticalLimit" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > addBoxVerticalLimit(::SopranoLive::Live< GeoPoint > const &boxVerticalLimit_) { return baseAddObject< mlo::boxVerticalLimit >( boxVerticalLimit_ ); }
				/*!
					\fn void removeBoxVerticalLimit(::SopranoLive::Live< GeoPoint > const &boxVerticalLimit_)
					
					\deprecated See \ref mlo::boxVerticalLimit for replacement
					Removes the given \a boxVerticalLimit_ from the property \ref mlo_boxVerticalLimit "mlo:boxVerticalLimit" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeBoxVerticalLimit(::SopranoLive::Live< GeoPoint > const &boxVerticalLimit_) { baseRemoveObject< mlo::boxVerticalLimit >(boxVerticalLimit_); }

				/* Property generated from mlo:boxNorthLimit
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:range=mlo:GeoPoint
				 * \n rdfs:label=Length of the box in the North direction
				 * \n tracker:modified=1160
				 * \n rdfs:domain=mlo:LocationBoundingBox
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBoxNorthLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::boxNorthLimit for replacement
					Returns a live model of property \ref mlo_boxNorthLimit "mlo:boxNorthLimit" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveBoxNorthLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::boxNorthLimit >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBoxNorthLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::boxNorthLimit for replacement
					Returns all current values of property \ref mlo_boxNorthLimit "mlo:boxNorthLimit" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getBoxNorthLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::boxNorthLimit >(object_info, strategy, parent); }
				/*!
					\fn void setBoxNorthLimits(LiveNodes const &boxNorthLimit_)
					
					\deprecated See \ref mlo::boxNorthLimit for replacement
					Sets the property \ref mlo_boxNorthLimit "mlo:boxNorthLimit" set to the given \a boxNorthLimit_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setBoxNorthLimits(LiveNodes const &boxNorthLimit_) { baseSetObjects(mlo::boxNorthLimit::iri(), boxNorthLimit_); }
				/*!
					\fn void removeBoxNorthLimits(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref mlo::boxNorthLimit for replacement
					Removes the properties from property \ref mlo_boxNorthLimit "mlo:boxNorthLimit" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeBoxNorthLimits(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::boxNorthLimit::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > firstBoxNorthLimit()
					
					\deprecated See \ref mlo::boxNorthLimit for replacement
					Returns the first property \ref mlo_boxNorthLimit "mlo:boxNorthLimit". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > firstBoxNorthLimit() { return baseFirstObject< mlo::boxNorthLimit >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addBoxNorthLimit()
					
					\deprecated See \ref mlo::boxNorthLimit for replacement
					Adds a new uniquely named resource to the property \ref mlo_boxNorthLimit "mlo:boxNorthLimit" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > addBoxNorthLimit() { return baseAddObject< mlo::boxNorthLimit >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addBoxNorthLimit(::SopranoLive::Live< GeoPoint > const &boxNorthLimit_)
					
					\deprecated See \ref mlo::boxNorthLimit for replacement
					Adds the given \a boxNorthLimit_ to the property \ref mlo_boxNorthLimit "mlo:boxNorthLimit" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > addBoxNorthLimit(::SopranoLive::Live< GeoPoint > const &boxNorthLimit_) { return baseAddObject< mlo::boxNorthLimit >( boxNorthLimit_ ); }
				/*!
					\fn void removeBoxNorthLimit(::SopranoLive::Live< GeoPoint > const &boxNorthLimit_)
					
					\deprecated See \ref mlo::boxNorthLimit for replacement
					Removes the given \a boxNorthLimit_ from the property \ref mlo_boxNorthLimit "mlo:boxNorthLimit" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeBoxNorthLimit(::SopranoLive::Live< GeoPoint > const &boxNorthLimit_) { baseRemoveObject< mlo::boxNorthLimit >(boxNorthLimit_); }

				/* Property generated from mlo:boxEastLimit
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:range=mlo:GeoPoint
				 * \n rdfs:label=Length of the box in the East direction
				 * \n tracker:modified=1096
				 * \n rdfs:domain=mlo:LocationBoundingBox
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBoxEastLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::boxEastLimit for replacement
					Returns a live model of property \ref mlo_boxEastLimit "mlo:boxEastLimit" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveBoxEastLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::boxEastLimit >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBoxEastLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref mlo::boxEastLimit for replacement
					Returns all current values of property \ref mlo_boxEastLimit "mlo:boxEastLimit" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getBoxEastLimits(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::boxEastLimit >(object_info, strategy, parent); }
				/*!
					\fn void setBoxEastLimits(LiveNodes const &boxEastLimit_)
					
					\deprecated See \ref mlo::boxEastLimit for replacement
					Sets the property \ref mlo_boxEastLimit "mlo:boxEastLimit" set to the given \a boxEastLimit_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setBoxEastLimits(LiveNodes const &boxEastLimit_) { baseSetObjects(mlo::boxEastLimit::iri(), boxEastLimit_); }
				/*!
					\fn void removeBoxEastLimits(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref mlo::boxEastLimit for replacement
					Removes the properties from property \ref mlo_boxEastLimit "mlo:boxEastLimit" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeBoxEastLimits(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::boxEastLimit::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > firstBoxEastLimit()
					
					\deprecated See \ref mlo::boxEastLimit for replacement
					Returns the first property \ref mlo_boxEastLimit "mlo:boxEastLimit". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > firstBoxEastLimit() { return baseFirstObject< mlo::boxEastLimit >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addBoxEastLimit()
					
					\deprecated See \ref mlo::boxEastLimit for replacement
					Adds a new uniquely named resource to the property \ref mlo_boxEastLimit "mlo:boxEastLimit" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > addBoxEastLimit() { return baseAddObject< mlo::boxEastLimit >(); }
				/*!
					\fn ::SopranoLive::Live< GeoPoint > addBoxEastLimit(::SopranoLive::Live< GeoPoint > const &boxEastLimit_)
					
					\deprecated See \ref mlo::boxEastLimit for replacement
					Adds the given \a boxEastLimit_ to the property \ref mlo_boxEastLimit "mlo:boxEastLimit" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< GeoPoint > addBoxEastLimit(::SopranoLive::Live< GeoPoint > const &boxEastLimit_) { return baseAddObject< mlo::boxEastLimit >( boxEastLimit_ ); }
				/*!
					\fn void removeBoxEastLimit(::SopranoLive::Live< GeoPoint > const &boxEastLimit_)
					
					\deprecated See \ref mlo::boxEastLimit for replacement
					Removes the given \a boxEastLimit_ from the property \ref mlo_boxEastLimit "mlo:boxEastLimit" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeBoxEastLimit(::SopranoLive::Live< GeoPoint > const &boxEastLimit_) { baseRemoveObject< mlo::boxEastLimit >(boxEastLimit_); }
				 //@}
			};

			/*! Class generated from mlo:PointOfInterest
			 * \ingroup onto_mlo_classes
			 * Use the nie title, description, ...  properties
			 * This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * 
			 * rdfs:label = Use mlo:Landmark instead
			 * 
			 * tracker:modified = 1827
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class PointOfInterest
				: public virtual Landmark

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#PointOfInterest"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Landmark, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mlo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<PointOfInterest> Live;
				PointOfInterest() { this->attachInterfaceHelper< PointOfInterest >(); }
				~PointOfInterest() { this->detachInterfaceHelper< PointOfInterest >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from mlo:Route
			 * \ingroup onto_mlo_classes
			 * 
			 * rdfs:label = Minimum box containing all the points traversed in sequence.
			 * 
			 * tracker:modified = 1637
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Route
				: public virtual GeoBoundingBox

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mlo#Route"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<GeoBoundingBox, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mlo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Route> Live;
				Route() { this->attachInterfaceHelper< Route >(); }
				~Route() { this->detachInterfaceHelper< Route >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mlo:startTime
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:label=Time when the first point in the route was saved
				 * \n tracker:modified=1772
				 * \n rdfs:domain=mlo:Route
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveStartTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_startTime "mlo:startTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStartTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::startTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStartTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_startTime "mlo:startTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStartTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::startTime >(object_info, strategy, parent); }
				/*!
					\fn void setStartTimes(LiveNodes const &startTime_)
					
					
					Sets the property \ref mlo_startTime "mlo:startTime" set to the given \a startTime_ set.
					\sa LiveResource::setObjects
				 */
				void setStartTimes(LiveNodes const &startTime_) { baseSetObjects(mlo::startTime::iri(), startTime_); }
				/*!
					\fn void removeStartTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_startTime "mlo:startTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStartTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::startTime::iri(), object_info); }
				/*!
					\fn QDateTime firstStartTime()
					
					
					Returns the first property \ref mlo_startTime "mlo:startTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstStartTime() { return baseFirstObject< mlo::startTime >(); }
				/*!
					\fn void addStartTime(QDateTime const &startTime_)
					
					
					Adds the given \a startTime_ to the property \ref mlo_startTime "mlo:startTime" set.
					\sa LiveResource::addObject
				 */
				void addStartTime(QDateTime const &startTime_) { baseAddObject< mlo::startTime >( startTime_ ); }
				/*!
					\fn void removeStartTime(QDateTime const &startTime_)
					
					
					Removes the given \a startTime_ from the property \ref mlo_startTime "mlo:startTime" set.
					\sa LiveResource::removeObject
				 */
				void removeStartTime(QDateTime const &startTime_) { baseRemoveObject< mlo::startTime >(startTime_); }

				/* Property generated from mlo:endTime
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:label=Time when the last point in the route was saved
				 * \n tracker:modified=1665
				 * \n rdfs:domain=mlo:Route
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEndTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_endTime "mlo:endTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEndTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::endTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEndTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_endTime "mlo:endTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEndTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::endTime >(object_info, strategy, parent); }
				/*!
					\fn void setEndTimes(LiveNodes const &endTime_)
					
					
					Sets the property \ref mlo_endTime "mlo:endTime" set to the given \a endTime_ set.
					\sa LiveResource::setObjects
				 */
				void setEndTimes(LiveNodes const &endTime_) { baseSetObjects(mlo::endTime::iri(), endTime_); }
				/*!
					\fn void removeEndTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_endTime "mlo:endTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEndTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::endTime::iri(), object_info); }
				/*!
					\fn QDateTime firstEndTime()
					
					
					Returns the first property \ref mlo_endTime "mlo:endTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstEndTime() { return baseFirstObject< mlo::endTime >(); }
				/*!
					\fn void addEndTime(QDateTime const &endTime_)
					
					
					Adds the given \a endTime_ to the property \ref mlo_endTime "mlo:endTime" set.
					\sa LiveResource::addObject
				 */
				void addEndTime(QDateTime const &endTime_) { baseAddObject< mlo::endTime >( endTime_ ); }
				/*!
					\fn void removeEndTime(QDateTime const &endTime_)
					
					
					Removes the given \a endTime_ from the property \ref mlo_endTime "mlo:endTime" set.
					\sa LiveResource::removeObject
				 */
				void removeEndTime(QDateTime const &endTime_) { baseRemoveObject< mlo::endTime >(endTime_); }

				/* Property generated from mlo:routeDetails
				 * \n FIXME Domain can be resource if we handle map-files correctly in the ontology
				 * \n rdfs:range=xsd:string
				 * \n rdfs:label=Pointer to a file containing route details (e.g. KML file).
				 * \n tracker:modified=1106
				 * \n rdfs:domain=mlo:Route
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRouteDetailss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mlo_routeDetails "mlo:routeDetails" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRouteDetailss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mlo::routeDetails >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRouteDetailss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mlo_routeDetails "mlo:routeDetails" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRouteDetailss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mlo::routeDetails >(object_info, strategy, parent); }
				/*!
					\fn void setRouteDetailss(LiveNodes const &routeDetails_)
					
					
					Sets the property \ref mlo_routeDetails "mlo:routeDetails" set to the given \a routeDetails_ set.
					\sa LiveResource::setObjects
				 */
				void setRouteDetailss(LiveNodes const &routeDetails_) { baseSetObjects(mlo::routeDetails::iri(), routeDetails_); }
				/*!
					\fn void removeRouteDetailss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mlo_routeDetails "mlo:routeDetails" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRouteDetailss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mlo::routeDetails::iri(), object_info); }
				/*!
					\fn QString firstRouteDetails()
					
					
					Returns the first property \ref mlo_routeDetails "mlo:routeDetails". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstRouteDetails() { return baseFirstObject< mlo::routeDetails >(); }
				/*!
					\fn void addRouteDetails(QString const &routeDetails_)
					
					
					Adds the given \a routeDetails_ to the property \ref mlo_routeDetails "mlo:routeDetails" set.
					\sa LiveResource::addObject
				 */
				void addRouteDetails(QString const &routeDetails_) { baseAddObject< mlo::routeDetails >( routeDetails_ ); }
				/*!
					\fn void removeRouteDetails(QString const &routeDetails_)
					
					
					Removes the given \a routeDetails_ from the property \ref mlo_routeDetails "mlo:routeDetails" set.
					\sa LiveResource::removeObject
				 */
				void removeRouteDetails(QString const &routeDetails_) { baseRemoveObject< mlo::routeDetails >(routeDetails_); }
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mlo::GeoBoundingBox::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mlo::GeoLocation::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mlo::GeoPoint::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mlo::GeoSphere::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mlo::Landmark::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mlo::LandmarkCategory::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mlo::LocationBoundingBox::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mlo::PointOfInterest::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mlo::Route::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_MLO_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_MLO_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_MLO_H_POST_INCLUDES
#include <QtTracker/ontologies/nco.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nie.h>
#endif
