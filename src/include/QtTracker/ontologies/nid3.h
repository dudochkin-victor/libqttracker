/*
 * nid3.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:25.650800
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/nid3.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_NID3_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_NID3_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_nid3_classes namespace nid3 class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nid3_properties namespace nid3 property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nid3_resources namespace nid3 resource definitions
		 *  @{
		 *  @}
		 */
		static const char nid3_namespace_prefix[] = "http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#";
		struct Ontology_nid3
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(nid3_namespace_prefix) + suffix;
			}
		};
		namespace nid3
		{
			inline QUrl iri(QString suffix) { return Ontology_nid3::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class ID3Audio;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NID3_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NID3_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NID3_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nid3
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from nid3:title
			 * \anchor nid3_title
			 * \n Track title
			 * \n rdfs:label=Title
			 * \n rdfs:subPropertyOf=nie:title
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nid3:ID3Audio
			 * \n tracker:weight=10
			 * \n tracker:modified=1330
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nid3_properties
			class title
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#title"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nid3 Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef ID3Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ID3Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nid3:leadArtist
			 * \anchor nid3_leadArtist
			 * \n Track artist
			 * \n rdfs:label=Artist
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=nid3:ID3Audio
			 * \n tracker:weight=6
			 * \n tracker:modified=1573
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nid3_properties
			class leadArtist
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#leadArtist"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nid3 Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef ID3Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ID3Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from nid3:albumTitle
			 * \anchor nid3_albumTitle
			 * \n Track title
			 * \n rdfs:label=Title
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nid3:ID3Audio
			 * \n tracker:weight=10
			 * \n tracker:modified=1027
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nid3_properties
			class albumTitle
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#albumTitle"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nid3 Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef ID3Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ID3Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nid3:contentType
			 * \anchor nid3_contentType
			 * \n The type or genre of the music track
			 * \n rdfs:label=Genre
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nid3:ID3Audio
			 * \n tracker:weight=5
			 * \n tracker:modified=1362
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nid3_properties
			class contentType
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#contentType"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nid3 Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef ID3Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ID3Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nid3:length
			 * \anchor nid3_length
			 * \n The length in seconds of the music track
			 * \n rdfs:label=Duration
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nid3:ID3Audio
			 * \n tracker:weight=4
			 * \n tracker:modified=1046
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nid3_properties
			class length
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#length"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nid3 Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef ID3Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ID3Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nid3:recordingYear
			 * \anchor nid3_recordingYear
			 * \n The date the track was released
			 * \n rdfs:label=Release date
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nid3:ID3Audio
			 * \n tracker:modified=1560
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nid3_properties
			class recordingYear
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#recordingYear"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nid3 Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef ID3Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ID3Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nid3:trackNumber
			 * \anchor nid3_trackNumber
			 * \n The position of the track relative to the others
			 * \n rdfs:label=Track number
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nid3:ID3Audio
			 * \n tracker:modified=1987
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nid3_properties
			class trackNumber
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#trackNumber"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nid3 Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef ID3Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ID3Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nid3:partOfSet
			 * \anchor nid3_partOfSet
			 * \n On which disc the track is located
			 * \n rdfs:label=Disc number
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nid3:ID3Audio
			 * \n tracker:modified=1196
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nid3_properties
			class partOfSet
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#partOfSet"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nid3 Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef ID3Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ID3Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nid3:comments
			 * \anchor nid3_comments
			 * \n General purpose comments
			 * \n rdfs:label=Comments
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nid3:ID3Audio
			 * \n tracker:weight=3
			 * \n tracker:modified=1123
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nid3_properties
			class comments
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#comments"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nid3 Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef ID3Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ID3Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NID3_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NID3_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NID3_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nid3
		{

			using namespace nfo;
			using namespace rdf;
			using namespace xsd;
			using namespace nco;

			/*! Class generated from nid3:ID3Audio
			 * \ingroup onto_nid3_classes
			 * 
			 * tracker:modified = 1060
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class ID3Audio
				: public virtual nfo::Audio

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#ID3Audio"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::Audio, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nid3 Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<ID3Audio> Live;
				ID3Audio() { this->attachInterfaceHelper< ID3Audio >(); }
				~ID3Audio() { this->detachInterfaceHelper< ID3Audio >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nid3:albumTitle
				 * \n Track title
				 * \n rdfs:label=Title
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nid3:ID3Audio
				 * \n tracker:weight=10
				 * \n tracker:modified=1027
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAlbumTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nid3_albumTitle "nid3:albumTitle" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAlbumTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nid3::albumTitle >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAlbumTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nid3_albumTitle "nid3:albumTitle" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAlbumTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nid3::albumTitle >(object_info, strategy, parent); }
				/*!
					\fn void setAlbumTitles(LiveNodes const &albumTitle_)
					
					
					Sets the property \ref nid3_albumTitle "nid3:albumTitle" set to the given \a albumTitle_ set.
					\sa LiveResource::setObjects
				 */
				void setAlbumTitles(LiveNodes const &albumTitle_) { baseSetObjects(nid3::albumTitle::iri(), albumTitle_); }
				/*!
					\fn void removeAlbumTitles(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nid3_albumTitle "nid3:albumTitle" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAlbumTitles(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nid3::albumTitle::iri(), object_info); }
				/*!
					\fn QString getAlbumTitle()
					
					
					Returns the property \ref nid3_albumTitle "nid3:albumTitle". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getAlbumTitle() { return baseGetObject< nid3::albumTitle >(); }
				/*!
					\fn void setAlbumTitle(QString const &albumTitle_)
					
					
					Sets the property \ref nid3_albumTitle "nid3:albumTitle" to the given \a albumTitle.
					\sa LiveResource::setObject
				 */
				void setAlbumTitle(QString const &albumTitle_) { baseSetObject< nid3::albumTitle >( albumTitle_ ); }
				/*!
					\fn QString firstAlbumTitle()
					
					
					Returns the first property \ref nid3_albumTitle "nid3:albumTitle". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstAlbumTitle() { return baseFirstObject< nid3::albumTitle >(); }
				/*!
					\fn void addAlbumTitle(QString const &albumTitle_)
					
					
					Adds the given \a albumTitle_ to the property \ref nid3_albumTitle "nid3:albumTitle" set.
					\sa LiveResource::addObject
				 */
				void addAlbumTitle(QString const &albumTitle_) { baseAddObject< nid3::albumTitle >( albumTitle_ ); }
				/*!
					\fn void removeAlbumTitle(QString const &albumTitle_)
					
					
					Removes the given \a albumTitle_ from the property \ref nid3_albumTitle "nid3:albumTitle" set.
					\sa LiveResource::removeObject
				 */
				void removeAlbumTitle(QString const &albumTitle_) { baseRemoveObject< nid3::albumTitle >(albumTitle_); }

				/* Property generated from nid3:trackNumber
				 * \n The position of the track relative to the others
				 * \n rdfs:label=Track number
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nid3:ID3Audio
				 * \n tracker:modified=1987
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTrackNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nid3_trackNumber "nid3:trackNumber" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nid3::trackNumber >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nid3_trackNumber "nid3:trackNumber" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nid3::trackNumber >(object_info, strategy, parent); }
				/*!
					\fn void setTrackNumbers(LiveNodes const &trackNumber_)
					
					
					Sets the property \ref nid3_trackNumber "nid3:trackNumber" set to the given \a trackNumber_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackNumbers(LiveNodes const &trackNumber_) { baseSetObjects(nid3::trackNumber::iri(), trackNumber_); }
				/*!
					\fn void removeTrackNumbers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nid3_trackNumber "nid3:trackNumber" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackNumbers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nid3::trackNumber::iri(), object_info); }
				/*!
					\fn QString getTrackNumber()
					
					
					Returns the property \ref nid3_trackNumber "nid3:trackNumber". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getTrackNumber() { return baseGetObject< nid3::trackNumber >(); }
				/*!
					\fn void setTrackNumber(QString const &trackNumber_)
					
					
					Sets the property \ref nid3_trackNumber "nid3:trackNumber" to the given \a trackNumber.
					\sa LiveResource::setObject
				 */
				void setTrackNumber(QString const &trackNumber_) { baseSetObject< nid3::trackNumber >( trackNumber_ ); }
				/*!
					\fn QString firstTrackNumber()
					
					
					Returns the first property \ref nid3_trackNumber "nid3:trackNumber". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTrackNumber() { return baseFirstObject< nid3::trackNumber >(); }
				/*!
					\fn void addTrackNumber(QString const &trackNumber_)
					
					
					Adds the given \a trackNumber_ to the property \ref nid3_trackNumber "nid3:trackNumber" set.
					\sa LiveResource::addObject
				 */
				void addTrackNumber(QString const &trackNumber_) { baseAddObject< nid3::trackNumber >( trackNumber_ ); }
				/*!
					\fn void removeTrackNumber(QString const &trackNumber_)
					
					
					Removes the given \a trackNumber_ from the property \ref nid3_trackNumber "nid3:trackNumber" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackNumber(QString const &trackNumber_) { baseRemoveObject< nid3::trackNumber >(trackNumber_); }

				/* Property generated from nid3:partOfSet
				 * \n On which disc the track is located
				 * \n rdfs:label=Disc number
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nid3:ID3Audio
				 * \n tracker:modified=1196
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePartOfSets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nid3_partOfSet "nid3:partOfSet" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePartOfSets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nid3::partOfSet >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPartOfSets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nid3_partOfSet "nid3:partOfSet" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPartOfSets(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nid3::partOfSet >(object_info, strategy, parent); }
				/*!
					\fn void setPartOfSets(LiveNodes const &partOfSet_)
					
					
					Sets the property \ref nid3_partOfSet "nid3:partOfSet" set to the given \a partOfSet_ set.
					\sa LiveResource::setObjects
				 */
				void setPartOfSets(LiveNodes const &partOfSet_) { baseSetObjects(nid3::partOfSet::iri(), partOfSet_); }
				/*!
					\fn void removePartOfSets(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nid3_partOfSet "nid3:partOfSet" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePartOfSets(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nid3::partOfSet::iri(), object_info); }
				/*!
					\fn QString getPartOfSet()
					
					
					Returns the property \ref nid3_partOfSet "nid3:partOfSet". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getPartOfSet() { return baseGetObject< nid3::partOfSet >(); }
				/*!
					\fn void setPartOfSet(QString const &partOfSet_)
					
					
					Sets the property \ref nid3_partOfSet "nid3:partOfSet" to the given \a partOfSet.
					\sa LiveResource::setObject
				 */
				void setPartOfSet(QString const &partOfSet_) { baseSetObject< nid3::partOfSet >( partOfSet_ ); }
				/*!
					\fn QString firstPartOfSet()
					
					
					Returns the first property \ref nid3_partOfSet "nid3:partOfSet". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstPartOfSet() { return baseFirstObject< nid3::partOfSet >(); }
				/*!
					\fn void addPartOfSet(QString const &partOfSet_)
					
					
					Adds the given \a partOfSet_ to the property \ref nid3_partOfSet "nid3:partOfSet" set.
					\sa LiveResource::addObject
				 */
				void addPartOfSet(QString const &partOfSet_) { baseAddObject< nid3::partOfSet >( partOfSet_ ); }
				/*!
					\fn void removePartOfSet(QString const &partOfSet_)
					
					
					Removes the given \a partOfSet_ from the property \ref nid3_partOfSet "nid3:partOfSet" set.
					\sa LiveResource::removeObject
				 */
				void removePartOfSet(QString const &partOfSet_) { baseRemoveObject< nid3::partOfSet >(partOfSet_); }

				/* Property generated from nid3:leadArtist
				 * \n Track artist
				 * \n rdfs:label=Artist
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=nid3:ID3Audio
				 * \n tracker:weight=6
				 * \n tracker:modified=1573
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nco::Contact Contact;
				/*!
					\fn LiveNodes liveLeadArtists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nid3_leadArtist "nid3:leadArtist" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLeadArtists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nid3::leadArtist >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLeadArtists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nid3_leadArtist "nid3:leadArtist" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLeadArtists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nid3::leadArtist >(object_info, strategy, parent); }
				/*!
					\fn void setLeadArtists(LiveNodes const &leadArtist_)
					
					
					Sets the property \ref nid3_leadArtist "nid3:leadArtist" set to the given \a leadArtist_ set.
					\sa LiveResource::setObjects
				 */
				void setLeadArtists(LiveNodes const &leadArtist_) { baseSetObjects(nid3::leadArtist::iri(), leadArtist_); }
				/*!
					\fn void removeLeadArtists(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nid3_leadArtist "nid3:leadArtist" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLeadArtists(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nid3::leadArtist::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstLeadArtist()
					
					
					Returns the first property \ref nid3_leadArtist "nid3:leadArtist". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstLeadArtist() { return baseFirstObject< nid3::leadArtist >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addLeadArtist()
					
					
					Adds a new uniquely named resource to the property \ref nid3_leadArtist "nid3:leadArtist" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addLeadArtist() { return baseAddObject< nid3::leadArtist >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addLeadArtist(::SopranoLive::Live< nco::Contact > const &leadArtist_)
					
					
					Adds the given \a leadArtist_ to the property \ref nid3_leadArtist "nid3:leadArtist" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addLeadArtist(::SopranoLive::Live< nco::Contact > const &leadArtist_) { return baseAddObject< nid3::leadArtist >( leadArtist_ ); }
				/*!
					\fn void removeLeadArtist(::SopranoLive::Live< nco::Contact > const &leadArtist_)
					
					
					Removes the given \a leadArtist_ from the property \ref nid3_leadArtist "nid3:leadArtist" set.
					\sa LiveResource::removeObject
				 */
				void removeLeadArtist(::SopranoLive::Live< nco::Contact > const &leadArtist_) { baseRemoveObject< nid3::leadArtist >(leadArtist_); }

				/* Property generated from nid3:title
				 * \n Track title
				 * \n rdfs:label=Title
				 * \n rdfs:subPropertyOf=nie:title
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nid3:ID3Audio
				 * \n tracker:weight=10
				 * \n tracker:modified=1330
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nid3_title "nid3:title" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nid3::title >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nid3_title "nid3:title" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nid3::title >(object_info, strategy, parent); }
				/*!
					\fn void setTitles(LiveNodes const &title_)
					
					
					Sets the property \ref nid3_title "nid3:title" set to the given \a title_ set.
					\sa LiveResource::setObjects
				 */
				void setTitles(LiveNodes const &title_) { baseSetObjects(nid3::title::iri(), title_); }
				/*!
					\fn void removeTitles(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nid3_title "nid3:title" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTitles(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nid3::title::iri(), object_info); }
				/*!
					\fn QString getTitle()
					
					
					Returns the property \ref nid3_title "nid3:title". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getTitle() { return baseGetObject< nid3::title >(); }
				/*!
					\fn void setTitle(QString const &title_)
					
					
					Sets the property \ref nid3_title "nid3:title" to the given \a title.
					\sa LiveResource::setObject
				 */
				void setTitle(QString const &title_) { baseSetObject< nid3::title >( title_ ); }
				/*!
					\fn QString firstTitle()
					
					
					Returns the first property \ref nid3_title "nid3:title". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTitle() { return baseFirstObject< nid3::title >(); }
				/*!
					\fn void addTitle(QString const &title_)
					
					
					Adds the given \a title_ to the property \ref nid3_title "nid3:title" set.
					\sa LiveResource::addObject
				 */
				void addTitle(QString const &title_) { baseAddObject< nid3::title >( title_ ); }
				/*!
					\fn void removeTitle(QString const &title_)
					
					
					Removes the given \a title_ from the property \ref nid3_title "nid3:title" set.
					\sa LiveResource::removeObject
				 */
				void removeTitle(QString const &title_) { baseRemoveObject< nid3::title >(title_); }

				/* Property generated from nid3:contentType
				 * \n The type or genre of the music track
				 * \n rdfs:label=Genre
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nid3:ID3Audio
				 * \n tracker:weight=5
				 * \n tracker:modified=1362
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContentTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nid3_contentType "nid3:contentType" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContentTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nid3::contentType >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContentTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nid3_contentType "nid3:contentType" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContentTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nid3::contentType >(object_info, strategy, parent); }
				/*!
					\fn void setContentTypes(LiveNodes const &contentType_)
					
					
					Sets the property \ref nid3_contentType "nid3:contentType" set to the given \a contentType_ set.
					\sa LiveResource::setObjects
				 */
				void setContentTypes(LiveNodes const &contentType_) { baseSetObjects(nid3::contentType::iri(), contentType_); }
				/*!
					\fn void removeContentTypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nid3_contentType "nid3:contentType" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContentTypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nid3::contentType::iri(), object_info); }
				/*!
					\fn QString getContentType()
					
					
					Returns the property \ref nid3_contentType "nid3:contentType". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getContentType() { return baseGetObject< nid3::contentType >(); }
				/*!
					\fn void setContentType(QString const &contentType_)
					
					
					Sets the property \ref nid3_contentType "nid3:contentType" to the given \a contentType.
					\sa LiveResource::setObject
				 */
				void setContentType(QString const &contentType_) { baseSetObject< nid3::contentType >( contentType_ ); }
				/*!
					\fn QString firstContentType()
					
					
					Returns the first property \ref nid3_contentType "nid3:contentType". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstContentType() { return baseFirstObject< nid3::contentType >(); }
				/*!
					\fn void addContentType(QString const &contentType_)
					
					
					Adds the given \a contentType_ to the property \ref nid3_contentType "nid3:contentType" set.
					\sa LiveResource::addObject
				 */
				void addContentType(QString const &contentType_) { baseAddObject< nid3::contentType >( contentType_ ); }
				/*!
					\fn void removeContentType(QString const &contentType_)
					
					
					Removes the given \a contentType_ from the property \ref nid3_contentType "nid3:contentType" set.
					\sa LiveResource::removeObject
				 */
				void removeContentType(QString const &contentType_) { baseRemoveObject< nid3::contentType >(contentType_); }

				/* Property generated from nid3:comments
				 * \n General purpose comments
				 * \n rdfs:label=Comments
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nid3:ID3Audio
				 * \n tracker:weight=3
				 * \n tracker:modified=1123
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCommentss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nid3_comments "nid3:comments" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCommentss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nid3::comments >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCommentss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nid3_comments "nid3:comments" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCommentss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nid3::comments >(object_info, strategy, parent); }
				/*!
					\fn void setCommentss(LiveNodes const &comments_)
					
					
					Sets the property \ref nid3_comments "nid3:comments" set to the given \a comments_ set.
					\sa LiveResource::setObjects
				 */
				void setCommentss(LiveNodes const &comments_) { baseSetObjects(nid3::comments::iri(), comments_); }
				/*!
					\fn void removeCommentss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nid3_comments "nid3:comments" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCommentss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nid3::comments::iri(), object_info); }
				/*!
					\fn QString getComments()
					
					
					Returns the property \ref nid3_comments "nid3:comments". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getComments() { return baseGetObject< nid3::comments >(); }
				/*!
					\fn void setComments(QString const &comments_)
					
					
					Sets the property \ref nid3_comments "nid3:comments" to the given \a comments.
					\sa LiveResource::setObject
				 */
				void setComments(QString const &comments_) { baseSetObject< nid3::comments >( comments_ ); }
				/*!
					\fn QString firstComments()
					
					
					Returns the first property \ref nid3_comments "nid3:comments". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstComments() { return baseFirstObject< nid3::comments >(); }
				/*!
					\fn void addComments(QString const &comments_)
					
					
					Adds the given \a comments_ to the property \ref nid3_comments "nid3:comments" set.
					\sa LiveResource::addObject
				 */
				void addComments(QString const &comments_) { baseAddObject< nid3::comments >( comments_ ); }
				/*!
					\fn void removeComments(QString const &comments_)
					
					
					Removes the given \a comments_ from the property \ref nid3_comments "nid3:comments" set.
					\sa LiveResource::removeObject
				 */
				void removeComments(QString const &comments_) { baseRemoveObject< nid3::comments >(comments_); }

				/* Property generated from nid3:recordingYear
				 * \n The date the track was released
				 * \n rdfs:label=Release date
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nid3:ID3Audio
				 * \n tracker:modified=1560
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRecordingYears(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nid3_recordingYear "nid3:recordingYear" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRecordingYears(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nid3::recordingYear >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRecordingYears(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nid3_recordingYear "nid3:recordingYear" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRecordingYears(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nid3::recordingYear >(object_info, strategy, parent); }
				/*!
					\fn void setRecordingYears(LiveNodes const &recordingYear_)
					
					
					Sets the property \ref nid3_recordingYear "nid3:recordingYear" set to the given \a recordingYear_ set.
					\sa LiveResource::setObjects
				 */
				void setRecordingYears(LiveNodes const &recordingYear_) { baseSetObjects(nid3::recordingYear::iri(), recordingYear_); }
				/*!
					\fn void removeRecordingYears(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nid3_recordingYear "nid3:recordingYear" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRecordingYears(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nid3::recordingYear::iri(), object_info); }
				/*!
					\fn qint64 getRecordingYear()
					
					
					Returns the property \ref nid3_recordingYear "nid3:recordingYear". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getRecordingYear() { return baseGetObject< nid3::recordingYear >(); }
				/*!
					\fn void setRecordingYear(qint64 const &recordingYear_)
					
					
					Sets the property \ref nid3_recordingYear "nid3:recordingYear" to the given \a recordingYear.
					\sa LiveResource::setObject
				 */
				void setRecordingYear(qint64 const &recordingYear_) { baseSetObject< nid3::recordingYear >( recordingYear_ ); }
				/*!
					\fn qint64 firstRecordingYear()
					
					
					Returns the first property \ref nid3_recordingYear "nid3:recordingYear". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstRecordingYear() { return baseFirstObject< nid3::recordingYear >(); }
				/*!
					\fn void addRecordingYear(qint64 const &recordingYear_)
					
					
					Adds the given \a recordingYear_ to the property \ref nid3_recordingYear "nid3:recordingYear" set.
					\sa LiveResource::addObject
				 */
				void addRecordingYear(qint64 const &recordingYear_) { baseAddObject< nid3::recordingYear >( recordingYear_ ); }
				/*!
					\fn void removeRecordingYear(qint64 const &recordingYear_)
					
					
					Removes the given \a recordingYear_ from the property \ref nid3_recordingYear "nid3:recordingYear" set.
					\sa LiveResource::removeObject
				 */
				void removeRecordingYear(qint64 const &recordingYear_) { baseRemoveObject< nid3::recordingYear >(recordingYear_); }

				/* Property generated from nid3:length
				 * \n The length in seconds of the music track
				 * \n rdfs:label=Duration
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nid3:ID3Audio
				 * \n tracker:weight=4
				 * \n tracker:modified=1046
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLengths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nid3_length "nid3:length" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLengths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nid3::length >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLengths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nid3_length "nid3:length" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLengths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nid3::length >(object_info, strategy, parent); }
				/*!
					\fn void setLengths(LiveNodes const &length_)
					
					
					Sets the property \ref nid3_length "nid3:length" set to the given \a length_ set.
					\sa LiveResource::setObjects
				 */
				void setLengths(LiveNodes const &length_) { baseSetObjects(nid3::length::iri(), length_); }
				/*!
					\fn void removeLengths(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nid3_length "nid3:length" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLengths(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nid3::length::iri(), object_info); }
				/*!
					\fn qint64 getLength()
					
					
					Returns the property \ref nid3_length "nid3:length". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getLength() { return baseGetObject< nid3::length >(); }
				/*!
					\fn void setLength(qint64 const &length_)
					
					
					Sets the property \ref nid3_length "nid3:length" to the given \a length.
					\sa LiveResource::setObject
				 */
				void setLength(qint64 const &length_) { baseSetObject< nid3::length >( length_ ); }
				/*!
					\fn qint64 firstLength()
					
					
					Returns the first property \ref nid3_length "nid3:length". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstLength() { return baseFirstObject< nid3::length >(); }
				/*!
					\fn void addLength(qint64 const &length_)
					
					
					Adds the given \a length_ to the property \ref nid3_length "nid3:length" set.
					\sa LiveResource::addObject
				 */
				void addLength(qint64 const &length_) { baseAddObject< nid3::length >( length_ ); }
				/*!
					\fn void removeLength(qint64 const &length_)
					
					
					Removes the given \a length_ from the property \ref nid3_length "nid3:length" set.
					\sa LiveResource::removeObject
				 */
				void removeLength(qint64 const &length_) { baseRemoveObject< nid3::length >(length_); }
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nid3::ID3Audio::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_NID3_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_NID3_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_NID3_H_POST_INCLUDES
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#endif
