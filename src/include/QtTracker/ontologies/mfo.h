/*
 * mfo.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:24.382947
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/mfo.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_MFO_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_MFO_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_mfo_classes namespace mfo class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_mfo_properties namespace mfo property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_mfo_resources namespace mfo resource definitions
		 *  @{
		 *  @}
		 */
		static const char mfo_namespace_prefix[] = "http://www.tracker-project.org/temp/mfo#";
		struct Ontology_mfo
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(mfo_namespace_prefix) + suffix;
			}
		};
		namespace mfo
		{
			inline QUrl iri(QString suffix) { return Ontology_mfo::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class Action;
			class Enclosure;
			class FeedChannel;
			class FeedElement;
			class FeedMessage;
			class FeedSettings;
			class FeedType;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_MFO_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_MFO_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_MFO_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace mfo
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from mfo:remoteLink
			 * \anchor mfo_remoteLink
			 * \n Used to store remote URL of enclosure
			 * \n rdfs:label=Enclosure link
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:RemoteDataObject
			 * \n rdfs:domain=mfo:Enclosure
			 * \n tracker:modified=1222
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class remoteLink
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#remoteLink"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Enclosure Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Enclosure RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::RemoteDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::RemoteDataObject RDFRange;
			};
			/*! Property generated from mfo:groupDefault
			 * \anchor mfo_groupDefault
			 * \n Different enclosures can represent the same resource in different formats/resolutions. This representations are grouped using the nie:identifier property and this property identify the default between them.
			 * \n rdfs:label=Default in group
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=mfo:Enclosure
			 * \n tracker:modified=1765
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class groupDefault
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#groupDefault"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Enclosure Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Enclosure RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from mfo:localLink
			 * \anchor mfo_localLink
			 * \n Downloaded copy of the enclosure
			 * \n rdfs:label=Local link
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:FileDataObject
			 * \n rdfs:domain=mfo:Enclosure
			 * \n tracker:modified=1447
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class localLink
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#localLink"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Enclosure Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Enclosure RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::FileDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::FileDataObject RDFRange;
			};
			/*! Property generated from mfo:optional
			 * \anchor mfo_optional
			 * \n The enclosure is mandatory to download or only optional
			 * \n rdfs:label=Optional
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=mfo:Enclosure
			 * \n tracker:modified=1038
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class optional
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#optional"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Enclosure Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Enclosure RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from mfo:updatedTime
			 * \anchor mfo_updatedTime
			 * \n Captures the updated date and time when the channel is updated
			 * \n rdfs:label=Updated
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=mfo:FeedChannel
			 * \n tracker:modified=1202
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class updatedTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#updatedTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FeedChannel Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedChannel RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from mfo:unreadCount
			 * \anchor mfo_unreadCount
			 * \n Unread messages count within a channel
			 * \n rdfs:label= Unread count
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=mfo:FeedChannel
			 * \n tracker:modified=1002
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class unreadCount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#unreadCount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FeedChannel Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedChannel RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from mfo:totalCount
			 * \anchor mfo_totalCount
			 * \n Total messages count within a channel
			 * \n rdfs:label= Total count
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=mfo:FeedChannel
			 * \n tracker:modified=1652
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class totalCount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#totalCount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FeedChannel Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedChannel RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from mfo:action
			 * \anchor mfo_action
			 * \n Captures the current action for the channel: Refresh Now
			 * \n rdfs:label=Action
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=mfo:Action
			 * \n rdfs:domain=mfo:FeedChannel
			 * \n tracker:modified=1644
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class action
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#action"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef FeedChannel Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedChannel RDFDomain;
				/// The localized c++ range type of this property
				typedef Action Range;
				/// The full, non-localized rdf range type of this property
				typedef Action RDFRange;
			};
			/*! Property generated from mfo:type
			 * \anchor mfo_type
			 * \n  Feeds format type which is mapped to plugin used in engine: flickr,rss-atom 
			 * \n rdfs:label=Feed formats type
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=mfo:FeedType
			 * \n rdfs:domain=mfo:FeedChannel
			 * \n tracker:modified=1685
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class type
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#type"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef FeedChannel Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedChannel RDFDomain;
				/// The localized c++ range type of this property
				typedef FeedType Range;
				/// The full, non-localized rdf range type of this property
				typedef FeedType RDFRange;
			};
			/*! Property generated from mfo:image
			 * \anchor mfo_image
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1506
			 * \n rdfs:domain=mfo:FeedElement
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_mfo_properties
			class image
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#image"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FeedElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from mfo:feedSettings
			 * \anchor mfo_feedSettings
			 * \n Settings 
			 * \n rdfs:label=Feed element settings
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=mfo:FeedSettings
			 * \n rdfs:domain=mfo:FeedElement
			 * \n tracker:modified=1445
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class feedSettings
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#feedSettings"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef FeedElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedElement RDFDomain;
				/// The localized c++ range type of this property
				typedef FeedSettings Range;
				/// The full, non-localized rdf range type of this property
				typedef FeedSettings RDFRange;
			};
			/*! Property generated from mfo:downloadedTime
			 * \anchor mfo_downloadedTime
			 * \n Captures the time stamp when message was downloaded
			 * \n rdfs:label=Downloaded
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=mfo:FeedMessage
			 * \n tracker:modified=1708
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class downloadedTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#downloadedTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FeedMessage Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedMessage RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from mfo:enclosureList
			 * \anchor mfo_enclosureList
			 * \n A list of enclosures
			 * \n rdfs:range=mfo:Enclosure
			 * \n rdfs:label=Enclosure List
			 * \n tracker:modified=1334
			 * \n rdfs:domain=mfo:FeedMessage
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class enclosureList
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#enclosureList"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef FeedMessage Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedMessage RDFDomain;
				/// The localized c++ range type of this property
				typedef Enclosure Range;
				/// The full, non-localized rdf range type of this property
				typedef Enclosure RDFRange;
			};
			/*! Property generated from mfo:updateInterval
			 * \anchor mfo_updateInterval
			 * \n Update interval for a feed channel to get updated or refreshed. Interpreted as minutes
			 * \n rdfs:label=Update Interval
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=mfo:FeedSettings
			 * \n tracker:modified=1284
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class updateInterval
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#updateInterval"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FeedSettings Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedSettings RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from mfo:expiryInterval
			 * \anchor mfo_expiryInterval
			 * \n Expiry interval for feed channel, it tells time that a message in a channel can live. Interpreted as minutes
			 * \n rdfs:label=Expiry Interval
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=mfo:FeedSettings
			 * \n tracker:modified=1847
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class expiryInterval
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#expiryInterval"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FeedSettings Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedSettings RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from mfo:downloadPath
			 * \anchor mfo_downloadPath
			 * \n Download path for enclosures in a message
			 * \n rdfs:label=Download path
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=mfo:FeedSettings
			 * \n tracker:modified=1730
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class downloadPath
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#downloadPath"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FeedSettings Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedSettings RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from mfo:downloadFlag
			 * \anchor mfo_downloadFlag
			 * \n To indicate whether enclosures will be downloaded or not
			 * \n rdfs:label=Download
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=mfo:FeedSettings
			 * \n tracker:modified=1521
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class downloadFlag
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#downloadFlag"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FeedSettings Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedSettings RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from mfo:maxSize
			 * \anchor mfo_maxSize
			 * \n Maximum size of enclosure that can be downloaded. Interpreted as KBs 
			 * \n rdfs:label=Size
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=mfo:FeedSettings
			 * \n tracker:modified=1208
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class maxSize
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#maxSize"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FeedSettings Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedSettings RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from mfo:name
			 * \anchor mfo_name
			 * \n Feed format name like rss-atom,flickr,facebook
			 * \n rdfs:label=Feed type name or plugin name
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=mfo:FeedType
			 * \n tracker:modified=1668
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mfo_properties
			class name
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#name"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FeedType Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FeedType RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			/*! Resource generated from mfo:refresh-now
			 * \anchor mfo_refresh_now
			 */
			/// \ingroup onto_mfo_resources
			class refresh_now
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#refresh-now"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Action ResourceType;
				//! The ontology of this resource
				typedef Ontology_mfo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_MFO_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_MFO_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_MFO_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nmo.h>
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nie.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nmo.h>
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nie.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace mfo
		{

			using namespace rdfs;
			using namespace nfo;
			using namespace nie;
			using namespace rdf;
			using namespace xsd;
			using namespace nmo;

			/*! Class generated from mfo:Action
			 * \ingroup onto_mfo_classes
			 * class with a restricted set of actions
			 * 
			 * rdfs:label = Action Requests
			 * 
			 * tracker:modified = 1384
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref mfo_refresh_now "mfo:refresh-now"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref mfo_action "mfo:action"
			 */
			class Action
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#Action"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Action> Live;
				Action() { this->attachInterfaceHelper< Action >(); }
				~Action() { this->detachInterfaceHelper< Action >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from mfo:FeedElement
			 * \ingroup onto_mfo_classes
			 * Superclass for all elements related with feeds, to provide common configuration options
			 * 
			 * rdfs:label = Feed element
			 * 
			 * tracker:modified = 1197
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class FeedElement
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#FeedElement"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<FeedElement> Live;
				FeedElement() { this->attachInterfaceHelper< FeedElement >(); }
				~FeedElement() { this->detachInterfaceHelper< FeedElement >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mfo:image
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1506
				 * \n rdfs:domain=mfo:FeedElement
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveImages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_image "mfo:image" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveImages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::image >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getImages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_image "mfo:image" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getImages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::image >(object_info, strategy, parent); }
				/*!
					\fn void setImages(LiveNodes const &image_)
					
					
					Sets the property \ref mfo_image "mfo:image" set to the given \a image_ set.
					\sa LiveResource::setObjects
				 */
				void setImages(LiveNodes const &image_) { baseSetObjects(mfo::image::iri(), image_); }
				/*!
					\fn void removeImages(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_image "mfo:image" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeImages(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::image::iri(), object_info); }
				/*!
					\fn QString getImage()
					
					
					Returns the property \ref mfo_image "mfo:image". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getImage() { return baseGetObject< mfo::image >(); }
				/*!
					\fn void setImage(QString const &image_)
					
					
					Sets the property \ref mfo_image "mfo:image" to the given \a image.
					\sa LiveResource::setObject
				 */
				void setImage(QString const &image_) { baseSetObject< mfo::image >( image_ ); }
				/*!
					\fn QString firstImage()
					
					
					Returns the first property \ref mfo_image "mfo:image". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstImage() { return baseFirstObject< mfo::image >(); }
				/*!
					\fn void addImage(QString const &image_)
					
					
					Adds the given \a image_ to the property \ref mfo_image "mfo:image" set.
					\sa LiveResource::addObject
				 */
				void addImage(QString const &image_) { baseAddObject< mfo::image >( image_ ); }
				/*!
					\fn void removeImage(QString const &image_)
					
					
					Removes the given \a image_ from the property \ref mfo_image "mfo:image" set.
					\sa LiveResource::removeObject
				 */
				void removeImage(QString const &image_) { baseRemoveObject< mfo::image >(image_); }

				/* Property generated from mfo:feedSettings
				 * \n Settings 
				 * \n rdfs:label=Feed element settings
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=mfo:FeedSettings
				 * \n rdfs:domain=mfo:FeedElement
				 * \n tracker:modified=1445
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFeedSettingss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_feedSettings "mfo:feedSettings" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFeedSettingss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::feedSettings >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFeedSettingss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_feedSettings "mfo:feedSettings" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFeedSettingss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::feedSettings >(object_info, strategy, parent); }
				/*!
					\fn void setFeedSettingss(LiveNodes const &feedSettings_)
					
					
					Sets the property \ref mfo_feedSettings "mfo:feedSettings" set to the given \a feedSettings_ set.
					\sa LiveResource::setObjects
				 */
				void setFeedSettingss(LiveNodes const &feedSettings_) { baseSetObjects(mfo::feedSettings::iri(), feedSettings_); }
				/*!
					\fn void removeFeedSettingss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_feedSettings "mfo:feedSettings" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFeedSettingss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::feedSettings::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< FeedSettings > getFeedSettings()
					
					
					Returns the property \ref mfo_feedSettings "mfo:feedSettings". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< FeedSettings > getFeedSettings() { return baseGetObject< mfo::feedSettings >(); }
				/*!
					\fn ::SopranoLive::Live< FeedSettings > setFeedSettings(::SopranoLive::Live< FeedSettings > const &feedSettings_)
					
					
					Sets the property \ref mfo_feedSettings "mfo:feedSettings" to the given \a feedSettings.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< FeedSettings > setFeedSettings(::SopranoLive::Live< FeedSettings > const &feedSettings_) { return baseSetObject< mfo::feedSettings >( feedSettings_ ); }
				/*!
					\fn ::SopranoLive::Live< FeedSettings > firstFeedSettings()
					
					
					Returns the first property \ref mfo_feedSettings "mfo:feedSettings". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< FeedSettings > firstFeedSettings() { return baseFirstObject< mfo::feedSettings >(); }
				/*!
					\fn ::SopranoLive::Live< FeedSettings > addFeedSettings()
					
					
					Adds a new uniquely named resource to the property \ref mfo_feedSettings "mfo:feedSettings" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< FeedSettings > addFeedSettings() { return baseAddObject< mfo::feedSettings >(); }
				/*!
					\fn ::SopranoLive::Live< FeedSettings > addFeedSettings(::SopranoLive::Live< FeedSettings > const &feedSettings_)
					
					
					Adds the given \a feedSettings_ to the property \ref mfo_feedSettings "mfo:feedSettings" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< FeedSettings > addFeedSettings(::SopranoLive::Live< FeedSettings > const &feedSettings_) { return baseAddObject< mfo::feedSettings >( feedSettings_ ); }
				/*!
					\fn void removeFeedSettings(::SopranoLive::Live< FeedSettings > const &feedSettings_)
					
					
					Removes the given \a feedSettings_ from the property \ref mfo_feedSettings "mfo:feedSettings" set.
					\sa LiveResource::removeObject
				 */
				void removeFeedSettings(::SopranoLive::Live< FeedSettings > const &feedSettings_) { baseRemoveObject< mfo::feedSettings >(feedSettings_); }
				 //@}
			};

			/*! Class generated from mfo:Enclosure
			 * \ingroup onto_mfo_classes
			 * Represents an enclosure of a feed message
			 * 
			 * rdfs:label = Message enclosure
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1844
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref mfo_enclosureList "mfo:enclosureList"
			 */
			class Enclosure
				: public virtual FeedElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#Enclosure"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<FeedElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Enclosure> Live;
				Enclosure() { this->attachInterfaceHelper< Enclosure >(); }
				~Enclosure() { this->detachInterfaceHelper< Enclosure >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mfo:remoteLink
				 * \n Used to store remote URL of enclosure
				 * \n rdfs:label=Enclosure link
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:RemoteDataObject
				 * \n rdfs:domain=mfo:Enclosure
				 * \n tracker:modified=1222
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nfo::RemoteDataObject RemoteDataObject;
				/*!
					\fn LiveNodes liveRemoteLinks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_remoteLink "mfo:remoteLink" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRemoteLinks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::remoteLink >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRemoteLinks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_remoteLink "mfo:remoteLink" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRemoteLinks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::remoteLink >(object_info, strategy, parent); }
				/*!
					\fn void setRemoteLinks(LiveNodes const &remoteLink_)
					
					
					Sets the property \ref mfo_remoteLink "mfo:remoteLink" set to the given \a remoteLink_ set.
					\sa LiveResource::setObjects
				 */
				void setRemoteLinks(LiveNodes const &remoteLink_) { baseSetObjects(mfo::remoteLink::iri(), remoteLink_); }
				/*!
					\fn void removeRemoteLinks(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_remoteLink "mfo:remoteLink" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRemoteLinks(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::remoteLink::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::RemoteDataObject > getRemoteLink()
					
					
					Returns the property \ref mfo_remoteLink "mfo:remoteLink". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::RemoteDataObject > getRemoteLink() { return baseGetObject< mfo::remoteLink >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::RemoteDataObject > setRemoteLink(::SopranoLive::Live< nfo::RemoteDataObject > const &remoteLink_)
					
					
					Sets the property \ref mfo_remoteLink "mfo:remoteLink" to the given \a remoteLink.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::RemoteDataObject > setRemoteLink(::SopranoLive::Live< nfo::RemoteDataObject > const &remoteLink_) { return baseSetObject< mfo::remoteLink >( remoteLink_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::RemoteDataObject > firstRemoteLink()
					
					
					Returns the first property \ref mfo_remoteLink "mfo:remoteLink". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::RemoteDataObject > firstRemoteLink() { return baseFirstObject< mfo::remoteLink >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::RemoteDataObject > addRemoteLink()
					
					
					Adds a new uniquely named resource to the property \ref mfo_remoteLink "mfo:remoteLink" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::RemoteDataObject > addRemoteLink() { return baseAddObject< mfo::remoteLink >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::RemoteDataObject > addRemoteLink(::SopranoLive::Live< nfo::RemoteDataObject > const &remoteLink_)
					
					
					Adds the given \a remoteLink_ to the property \ref mfo_remoteLink "mfo:remoteLink" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::RemoteDataObject > addRemoteLink(::SopranoLive::Live< nfo::RemoteDataObject > const &remoteLink_) { return baseAddObject< mfo::remoteLink >( remoteLink_ ); }
				/*!
					\fn void removeRemoteLink(::SopranoLive::Live< nfo::RemoteDataObject > const &remoteLink_)
					
					
					Removes the given \a remoteLink_ from the property \ref mfo_remoteLink "mfo:remoteLink" set.
					\sa LiveResource::removeObject
				 */
				void removeRemoteLink(::SopranoLive::Live< nfo::RemoteDataObject > const &remoteLink_) { baseRemoveObject< mfo::remoteLink >(remoteLink_); }

				/* Property generated from mfo:groupDefault
				 * \n Different enclosures can represent the same resource in different formats/resolutions. This representations are grouped using the nie:identifier property and this property identify the default between them.
				 * \n rdfs:label=Default in group
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=mfo:Enclosure
				 * \n tracker:modified=1765
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveGroupDefaults(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_groupDefault "mfo:groupDefault" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveGroupDefaults(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::groupDefault >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getGroupDefaults(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_groupDefault "mfo:groupDefault" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getGroupDefaults(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::groupDefault >(object_info, strategy, parent); }
				/*!
					\fn void setGroupDefaults(LiveNodes const &groupDefault_)
					
					
					Sets the property \ref mfo_groupDefault "mfo:groupDefault" set to the given \a groupDefault_ set.
					\sa LiveResource::setObjects
				 */
				void setGroupDefaults(LiveNodes const &groupDefault_) { baseSetObjects(mfo::groupDefault::iri(), groupDefault_); }
				/*!
					\fn void removeGroupDefaults(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_groupDefault "mfo:groupDefault" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeGroupDefaults(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::groupDefault::iri(), object_info); }
				/*!
					\fn bool getGroupDefault()
					
					
					Returns the property \ref mfo_groupDefault "mfo:groupDefault". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getGroupDefault() { return baseGetObject< mfo::groupDefault >(); }
				/*!
					\fn void setGroupDefault(bool const &groupDefault_)
					
					
					Sets the property \ref mfo_groupDefault "mfo:groupDefault" to the given \a groupDefault.
					\sa LiveResource::setObject
				 */
				void setGroupDefault(bool const &groupDefault_) { baseSetObject< mfo::groupDefault >( groupDefault_ ); }
				/*!
					\fn bool firstGroupDefault()
					
					
					Returns the first property \ref mfo_groupDefault "mfo:groupDefault". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstGroupDefault() { return baseFirstObject< mfo::groupDefault >(); }
				/*!
					\fn void addGroupDefault(bool const &groupDefault_)
					
					
					Adds the given \a groupDefault_ to the property \ref mfo_groupDefault "mfo:groupDefault" set.
					\sa LiveResource::addObject
				 */
				void addGroupDefault(bool const &groupDefault_) { baseAddObject< mfo::groupDefault >( groupDefault_ ); }
				/*!
					\fn void removeGroupDefault(bool const &groupDefault_)
					
					
					Removes the given \a groupDefault_ from the property \ref mfo_groupDefault "mfo:groupDefault" set.
					\sa LiveResource::removeObject
				 */
				void removeGroupDefault(bool const &groupDefault_) { baseRemoveObject< mfo::groupDefault >(groupDefault_); }

				/* Property generated from mfo:optional
				 * \n The enclosure is mandatory to download or only optional
				 * \n rdfs:label=Optional
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=mfo:Enclosure
				 * \n tracker:modified=1038
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveOptionals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_optional "mfo:optional" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveOptionals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::optional >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getOptionals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_optional "mfo:optional" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getOptionals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::optional >(object_info, strategy, parent); }
				/*!
					\fn void setOptionals(LiveNodes const &optional_)
					
					
					Sets the property \ref mfo_optional "mfo:optional" set to the given \a optional_ set.
					\sa LiveResource::setObjects
				 */
				void setOptionals(LiveNodes const &optional_) { baseSetObjects(mfo::optional::iri(), optional_); }
				/*!
					\fn void removeOptionals(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_optional "mfo:optional" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeOptionals(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::optional::iri(), object_info); }
				/*!
					\fn bool getOptional()
					
					
					Returns the property \ref mfo_optional "mfo:optional". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getOptional() { return baseGetObject< mfo::optional >(); }
				/*!
					\fn void setOptional(bool const &optional_)
					
					
					Sets the property \ref mfo_optional "mfo:optional" to the given \a optional.
					\sa LiveResource::setObject
				 */
				void setOptional(bool const &optional_) { baseSetObject< mfo::optional >( optional_ ); }
				/*!
					\fn bool firstOptional()
					
					
					Returns the first property \ref mfo_optional "mfo:optional". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstOptional() { return baseFirstObject< mfo::optional >(); }
				/*!
					\fn void addOptional(bool const &optional_)
					
					
					Adds the given \a optional_ to the property \ref mfo_optional "mfo:optional" set.
					\sa LiveResource::addObject
				 */
				void addOptional(bool const &optional_) { baseAddObject< mfo::optional >( optional_ ); }
				/*!
					\fn void removeOptional(bool const &optional_)
					
					
					Removes the given \a optional_ from the property \ref mfo_optional "mfo:optional" set.
					\sa LiveResource::removeObject
				 */
				void removeOptional(bool const &optional_) { baseRemoveObject< mfo::optional >(optional_); }

				/* Property generated from mfo:localLink
				 * \n Downloaded copy of the enclosure
				 * \n rdfs:label=Local link
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:FileDataObject
				 * \n rdfs:domain=mfo:Enclosure
				 * \n tracker:modified=1447
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nfo::FileDataObject FileDataObject;
				/*!
					\fn LiveNodes liveLocalLinks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_localLink "mfo:localLink" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLocalLinks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::localLink >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLocalLinks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_localLink "mfo:localLink" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLocalLinks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::localLink >(object_info, strategy, parent); }
				/*!
					\fn void setLocalLinks(LiveNodes const &localLink_)
					
					
					Sets the property \ref mfo_localLink "mfo:localLink" set to the given \a localLink_ set.
					\sa LiveResource::setObjects
				 */
				void setLocalLinks(LiveNodes const &localLink_) { baseSetObjects(mfo::localLink::iri(), localLink_); }
				/*!
					\fn void removeLocalLinks(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_localLink "mfo:localLink" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLocalLinks(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::localLink::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > getLocalLink()
					
					
					Returns the property \ref mfo_localLink "mfo:localLink". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > getLocalLink() { return baseGetObject< mfo::localLink >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > setLocalLink(::SopranoLive::Live< nfo::FileDataObject > const &localLink_)
					
					
					Sets the property \ref mfo_localLink "mfo:localLink" to the given \a localLink.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > setLocalLink(::SopranoLive::Live< nfo::FileDataObject > const &localLink_) { return baseSetObject< mfo::localLink >( localLink_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > firstLocalLink()
					
					
					Returns the first property \ref mfo_localLink "mfo:localLink". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > firstLocalLink() { return baseFirstObject< mfo::localLink >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addLocalLink()
					
					
					Adds a new uniquely named resource to the property \ref mfo_localLink "mfo:localLink" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addLocalLink() { return baseAddObject< mfo::localLink >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::FileDataObject > addLocalLink(::SopranoLive::Live< nfo::FileDataObject > const &localLink_)
					
					
					Adds the given \a localLink_ to the property \ref mfo_localLink "mfo:localLink" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::FileDataObject > addLocalLink(::SopranoLive::Live< nfo::FileDataObject > const &localLink_) { return baseAddObject< mfo::localLink >( localLink_ ); }
				/*!
					\fn void removeLocalLink(::SopranoLive::Live< nfo::FileDataObject > const &localLink_)
					
					
					Removes the given \a localLink_ from the property \ref mfo_localLink "mfo:localLink" set.
					\sa LiveResource::removeObject
				 */
				void removeLocalLink(::SopranoLive::Live< nfo::FileDataObject > const &localLink_) { baseRemoveObject< mfo::localLink >(localLink_); }
				 //@}
			};

			/*! Class generated from mfo:FeedChannel
			 * \ingroup onto_mfo_classes
			 * Represents feed channel transfer, typically a download of RSS or ATOM. It is also a communication channel of Nepomuk Messaging Ontology so that feed sources could be treated as message sources
			 * 
			 * rdfs:label = Feed channel
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1390
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class FeedChannel
				: public virtual nmo::CommunicationChannel, public virtual FeedElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#FeedChannel"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nmo::CommunicationChannel, QPair<FeedElement, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<FeedChannel> Live;
				FeedChannel() { this->attachInterfaceHelper< FeedChannel >(); }
				~FeedChannel() { this->detachInterfaceHelper< FeedChannel >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mfo:action
				 * \n Captures the current action for the channel: Refresh Now
				 * \n rdfs:label=Action
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=mfo:Action
				 * \n rdfs:domain=mfo:FeedChannel
				 * \n tracker:modified=1644
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveActions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_action "mfo:action" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveActions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::action >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getActions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_action "mfo:action" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getActions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::action >(object_info, strategy, parent); }
				/*!
					\fn void setActions(LiveNodes const &action_)
					
					
					Sets the property \ref mfo_action "mfo:action" set to the given \a action_ set.
					\sa LiveResource::setObjects
				 */
				void setActions(LiveNodes const &action_) { baseSetObjects(mfo::action::iri(), action_); }
				/*!
					\fn void removeActions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_action "mfo:action" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeActions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::action::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Action > getAction()
					
					
					Returns the property \ref mfo_action "mfo:action". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Action > getAction() { return baseGetObject< mfo::action >(); }
				/*!
					\fn ::SopranoLive::Live< Action > setAction(::SopranoLive::Live< Action > const &action_)
					
					
					Sets the property \ref mfo_action "mfo:action" to the given \a action.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Action > setAction(::SopranoLive::Live< Action > const &action_) { return baseSetObject< mfo::action >( action_ ); }
				/*!
					\fn ::SopranoLive::Live< Action > firstAction()
					
					
					Returns the first property \ref mfo_action "mfo:action". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Action > firstAction() { return baseFirstObject< mfo::action >(); }
				/*!
					\fn ::SopranoLive::Live< Action > addAction()
					
					
					Adds a new uniquely named resource to the property \ref mfo_action "mfo:action" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Action > addAction() { return baseAddObject< mfo::action >(); }
				/*!
					\fn ::SopranoLive::Live< Action > addAction(::SopranoLive::Live< Action > const &action_)
					
					
					Adds the given \a action_ to the property \ref mfo_action "mfo:action" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Action > addAction(::SopranoLive::Live< Action > const &action_) { return baseAddObject< mfo::action >( action_ ); }
				/*!
					\fn void removeAction(::SopranoLive::Live< Action > const &action_)
					
					
					Removes the given \a action_ from the property \ref mfo_action "mfo:action" set.
					\sa LiveResource::removeObject
				 */
				void removeAction(::SopranoLive::Live< Action > const &action_) { baseRemoveObject< mfo::action >(action_); }

				/* Property generated from mfo:updatedTime
				 * \n Captures the updated date and time when the channel is updated
				 * \n rdfs:label=Updated
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=mfo:FeedChannel
				 * \n tracker:modified=1202
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveUpdatedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_updatedTime "mfo:updatedTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveUpdatedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::updatedTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getUpdatedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_updatedTime "mfo:updatedTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getUpdatedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::updatedTime >(object_info, strategy, parent); }
				/*!
					\fn void setUpdatedTimes(LiveNodes const &updatedTime_)
					
					
					Sets the property \ref mfo_updatedTime "mfo:updatedTime" set to the given \a updatedTime_ set.
					\sa LiveResource::setObjects
				 */
				void setUpdatedTimes(LiveNodes const &updatedTime_) { baseSetObjects(mfo::updatedTime::iri(), updatedTime_); }
				/*!
					\fn void removeUpdatedTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_updatedTime "mfo:updatedTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeUpdatedTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::updatedTime::iri(), object_info); }
				/*!
					\fn QDateTime getUpdatedTime()
					
					
					Returns the property \ref mfo_updatedTime "mfo:updatedTime". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getUpdatedTime() { return baseGetObject< mfo::updatedTime >(); }
				/*!
					\fn void setUpdatedTime(QDateTime const &updatedTime_)
					
					
					Sets the property \ref mfo_updatedTime "mfo:updatedTime" to the given \a updatedTime.
					\sa LiveResource::setObject
				 */
				void setUpdatedTime(QDateTime const &updatedTime_) { baseSetObject< mfo::updatedTime >( updatedTime_ ); }
				/*!
					\fn QDateTime firstUpdatedTime()
					
					
					Returns the first property \ref mfo_updatedTime "mfo:updatedTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstUpdatedTime() { return baseFirstObject< mfo::updatedTime >(); }
				/*!
					\fn void addUpdatedTime(QDateTime const &updatedTime_)
					
					
					Adds the given \a updatedTime_ to the property \ref mfo_updatedTime "mfo:updatedTime" set.
					\sa LiveResource::addObject
				 */
				void addUpdatedTime(QDateTime const &updatedTime_) { baseAddObject< mfo::updatedTime >( updatedTime_ ); }
				/*!
					\fn void removeUpdatedTime(QDateTime const &updatedTime_)
					
					
					Removes the given \a updatedTime_ from the property \ref mfo_updatedTime "mfo:updatedTime" set.
					\sa LiveResource::removeObject
				 */
				void removeUpdatedTime(QDateTime const &updatedTime_) { baseRemoveObject< mfo::updatedTime >(updatedTime_); }

				/* Property generated from mfo:totalCount
				 * \n Total messages count within a channel
				 * \n rdfs:label= Total count
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=mfo:FeedChannel
				 * \n tracker:modified=1652
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTotalCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_totalCount "mfo:totalCount" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTotalCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::totalCount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTotalCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_totalCount "mfo:totalCount" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTotalCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::totalCount >(object_info, strategy, parent); }
				/*!
					\fn void setTotalCounts(LiveNodes const &totalCount_)
					
					
					Sets the property \ref mfo_totalCount "mfo:totalCount" set to the given \a totalCount_ set.
					\sa LiveResource::setObjects
				 */
				void setTotalCounts(LiveNodes const &totalCount_) { baseSetObjects(mfo::totalCount::iri(), totalCount_); }
				/*!
					\fn void removeTotalCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_totalCount "mfo:totalCount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTotalCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::totalCount::iri(), object_info); }
				/*!
					\fn qint64 getTotalCount()
					
					
					Returns the property \ref mfo_totalCount "mfo:totalCount". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getTotalCount() { return baseGetObject< mfo::totalCount >(); }
				/*!
					\fn void setTotalCount(qint64 const &totalCount_)
					
					
					Sets the property \ref mfo_totalCount "mfo:totalCount" to the given \a totalCount.
					\sa LiveResource::setObject
				 */
				void setTotalCount(qint64 const &totalCount_) { baseSetObject< mfo::totalCount >( totalCount_ ); }
				/*!
					\fn qint64 firstTotalCount()
					
					
					Returns the first property \ref mfo_totalCount "mfo:totalCount". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstTotalCount() { return baseFirstObject< mfo::totalCount >(); }
				/*!
					\fn void addTotalCount(qint64 const &totalCount_)
					
					
					Adds the given \a totalCount_ to the property \ref mfo_totalCount "mfo:totalCount" set.
					\sa LiveResource::addObject
				 */
				void addTotalCount(qint64 const &totalCount_) { baseAddObject< mfo::totalCount >( totalCount_ ); }
				/*!
					\fn void removeTotalCount(qint64 const &totalCount_)
					
					
					Removes the given \a totalCount_ from the property \ref mfo_totalCount "mfo:totalCount" set.
					\sa LiveResource::removeObject
				 */
				void removeTotalCount(qint64 const &totalCount_) { baseRemoveObject< mfo::totalCount >(totalCount_); }

				/* Property generated from mfo:type
				 * \n  Feeds format type which is mapped to plugin used in engine: flickr,rss-atom 
				 * \n rdfs:label=Feed formats type
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=mfo:FeedType
				 * \n rdfs:domain=mfo:FeedChannel
				 * \n tracker:modified=1685
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_type "mfo:type" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::type >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_type "mfo:type" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::type >(object_info, strategy, parent); }
				/*!
					\fn void setTypes(LiveNodes const &type_)
					
					
					Sets the property \ref mfo_type "mfo:type" set to the given \a type_ set.
					\sa LiveResource::setObjects
				 */
				void setTypes(LiveNodes const &type_) { baseSetObjects(mfo::type::iri(), type_); }
				/*!
					\fn void removeTypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_type "mfo:type" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::type::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< FeedType > getType()
					
					
					Returns the property \ref mfo_type "mfo:type". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< FeedType > getType() { return baseGetObject< mfo::type >(); }
				/*!
					\fn ::SopranoLive::Live< FeedType > setType(::SopranoLive::Live< FeedType > const &type_)
					
					
					Sets the property \ref mfo_type "mfo:type" to the given \a type.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< FeedType > setType(::SopranoLive::Live< FeedType > const &type_) { return baseSetObject< mfo::type >( type_ ); }
				/*!
					\fn ::SopranoLive::Live< FeedType > firstType()
					
					
					Returns the first property \ref mfo_type "mfo:type". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< FeedType > firstType() { return baseFirstObject< mfo::type >(); }
				/*!
					\fn ::SopranoLive::Live< FeedType > addType()
					
					
					Adds a new uniquely named resource to the property \ref mfo_type "mfo:type" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< FeedType > addType() { return baseAddObject< mfo::type >(); }
				/*!
					\fn ::SopranoLive::Live< FeedType > addType(::SopranoLive::Live< FeedType > const &type_)
					
					
					Adds the given \a type_ to the property \ref mfo_type "mfo:type" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< FeedType > addType(::SopranoLive::Live< FeedType > const &type_) { return baseAddObject< mfo::type >( type_ ); }
				/*!
					\fn void removeType(::SopranoLive::Live< FeedType > const &type_)
					
					
					Removes the given \a type_ from the property \ref mfo_type "mfo:type" set.
					\sa LiveResource::removeObject
				 */
				void removeType(::SopranoLive::Live< FeedType > const &type_) { baseRemoveObject< mfo::type >(type_); }

				/* Property generated from mfo:unreadCount
				 * \n Unread messages count within a channel
				 * \n rdfs:label= Unread count
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=mfo:FeedChannel
				 * \n tracker:modified=1002
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveUnreadCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_unreadCount "mfo:unreadCount" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveUnreadCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::unreadCount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getUnreadCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_unreadCount "mfo:unreadCount" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getUnreadCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::unreadCount >(object_info, strategy, parent); }
				/*!
					\fn void setUnreadCounts(LiveNodes const &unreadCount_)
					
					
					Sets the property \ref mfo_unreadCount "mfo:unreadCount" set to the given \a unreadCount_ set.
					\sa LiveResource::setObjects
				 */
				void setUnreadCounts(LiveNodes const &unreadCount_) { baseSetObjects(mfo::unreadCount::iri(), unreadCount_); }
				/*!
					\fn void removeUnreadCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_unreadCount "mfo:unreadCount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeUnreadCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::unreadCount::iri(), object_info); }
				/*!
					\fn qint64 getUnreadCount()
					
					
					Returns the property \ref mfo_unreadCount "mfo:unreadCount". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getUnreadCount() { return baseGetObject< mfo::unreadCount >(); }
				/*!
					\fn void setUnreadCount(qint64 const &unreadCount_)
					
					
					Sets the property \ref mfo_unreadCount "mfo:unreadCount" to the given \a unreadCount.
					\sa LiveResource::setObject
				 */
				void setUnreadCount(qint64 const &unreadCount_) { baseSetObject< mfo::unreadCount >( unreadCount_ ); }
				/*!
					\fn qint64 firstUnreadCount()
					
					
					Returns the first property \ref mfo_unreadCount "mfo:unreadCount". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstUnreadCount() { return baseFirstObject< mfo::unreadCount >(); }
				/*!
					\fn void addUnreadCount(qint64 const &unreadCount_)
					
					
					Adds the given \a unreadCount_ to the property \ref mfo_unreadCount "mfo:unreadCount" set.
					\sa LiveResource::addObject
				 */
				void addUnreadCount(qint64 const &unreadCount_) { baseAddObject< mfo::unreadCount >( unreadCount_ ); }
				/*!
					\fn void removeUnreadCount(qint64 const &unreadCount_)
					
					
					Removes the given \a unreadCount_ from the property \ref mfo_unreadCount "mfo:unreadCount" set.
					\sa LiveResource::removeObject
				 */
				void removeUnreadCount(qint64 const &unreadCount_) { baseRemoveObject< mfo::unreadCount >(unreadCount_); }
				 //@}
			};

			/*! Class generated from mfo:FeedMessage
			 * \ingroup onto_mfo_classes
			 * Represents feed entry on top of Nepomuk Messaging Ontology's message. May have enclosures attached and certain settings that allow deviation from feed channel's setup
			 * 
			 * rdfs:label = Feed entry
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1239
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class FeedMessage
				: public virtual nmo::Message, public virtual FeedElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#FeedMessage"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nmo::Message, QPair<FeedElement, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<FeedMessage> Live;
				FeedMessage() { this->attachInterfaceHelper< FeedMessage >(); }
				~FeedMessage() { this->detachInterfaceHelper< FeedMessage >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mfo:enclosureList
				 * \n A list of enclosures
				 * \n rdfs:range=mfo:Enclosure
				 * \n rdfs:label=Enclosure List
				 * \n tracker:modified=1334
				 * \n rdfs:domain=mfo:FeedMessage
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEnclosureLists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_enclosureList "mfo:enclosureList" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEnclosureLists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::enclosureList >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEnclosureLists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_enclosureList "mfo:enclosureList" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEnclosureLists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::enclosureList >(object_info, strategy, parent); }
				/*!
					\fn void setEnclosureLists(LiveNodes const &enclosureList_)
					
					
					Sets the property \ref mfo_enclosureList "mfo:enclosureList" set to the given \a enclosureList_ set.
					\sa LiveResource::setObjects
				 */
				void setEnclosureLists(LiveNodes const &enclosureList_) { baseSetObjects(mfo::enclosureList::iri(), enclosureList_); }
				/*!
					\fn void removeEnclosureLists(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_enclosureList "mfo:enclosureList" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEnclosureLists(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::enclosureList::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Enclosure > firstEnclosureList()
					
					
					Returns the first property \ref mfo_enclosureList "mfo:enclosureList". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Enclosure > firstEnclosureList() { return baseFirstObject< mfo::enclosureList >(); }
				/*!
					\fn ::SopranoLive::Live< Enclosure > addEnclosureList()
					
					
					Adds a new uniquely named resource to the property \ref mfo_enclosureList "mfo:enclosureList" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Enclosure > addEnclosureList() { return baseAddObject< mfo::enclosureList >(); }
				/*!
					\fn ::SopranoLive::Live< Enclosure > addEnclosureList(::SopranoLive::Live< Enclosure > const &enclosureList_)
					
					
					Adds the given \a enclosureList_ to the property \ref mfo_enclosureList "mfo:enclosureList" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Enclosure > addEnclosureList(::SopranoLive::Live< Enclosure > const &enclosureList_) { return baseAddObject< mfo::enclosureList >( enclosureList_ ); }
				/*!
					\fn void removeEnclosureList(::SopranoLive::Live< Enclosure > const &enclosureList_)
					
					
					Removes the given \a enclosureList_ from the property \ref mfo_enclosureList "mfo:enclosureList" set.
					\sa LiveResource::removeObject
				 */
				void removeEnclosureList(::SopranoLive::Live< Enclosure > const &enclosureList_) { baseRemoveObject< mfo::enclosureList >(enclosureList_); }

				/* Property generated from mfo:downloadedTime
				 * \n Captures the time stamp when message was downloaded
				 * \n rdfs:label=Downloaded
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=mfo:FeedMessage
				 * \n tracker:modified=1708
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDownloadedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_downloadedTime "mfo:downloadedTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDownloadedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::downloadedTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDownloadedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_downloadedTime "mfo:downloadedTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDownloadedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::downloadedTime >(object_info, strategy, parent); }
				/*!
					\fn void setDownloadedTimes(LiveNodes const &downloadedTime_)
					
					
					Sets the property \ref mfo_downloadedTime "mfo:downloadedTime" set to the given \a downloadedTime_ set.
					\sa LiveResource::setObjects
				 */
				void setDownloadedTimes(LiveNodes const &downloadedTime_) { baseSetObjects(mfo::downloadedTime::iri(), downloadedTime_); }
				/*!
					\fn void removeDownloadedTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_downloadedTime "mfo:downloadedTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDownloadedTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::downloadedTime::iri(), object_info); }
				/*!
					\fn QDateTime getDownloadedTime()
					
					
					Returns the property \ref mfo_downloadedTime "mfo:downloadedTime". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getDownloadedTime() { return baseGetObject< mfo::downloadedTime >(); }
				/*!
					\fn void setDownloadedTime(QDateTime const &downloadedTime_)
					
					
					Sets the property \ref mfo_downloadedTime "mfo:downloadedTime" to the given \a downloadedTime.
					\sa LiveResource::setObject
				 */
				void setDownloadedTime(QDateTime const &downloadedTime_) { baseSetObject< mfo::downloadedTime >( downloadedTime_ ); }
				/*!
					\fn QDateTime firstDownloadedTime()
					
					
					Returns the first property \ref mfo_downloadedTime "mfo:downloadedTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstDownloadedTime() { return baseFirstObject< mfo::downloadedTime >(); }
				/*!
					\fn void addDownloadedTime(QDateTime const &downloadedTime_)
					
					
					Adds the given \a downloadedTime_ to the property \ref mfo_downloadedTime "mfo:downloadedTime" set.
					\sa LiveResource::addObject
				 */
				void addDownloadedTime(QDateTime const &downloadedTime_) { baseAddObject< mfo::downloadedTime >( downloadedTime_ ); }
				/*!
					\fn void removeDownloadedTime(QDateTime const &downloadedTime_)
					
					
					Removes the given \a downloadedTime_ from the property \ref mfo_downloadedTime "mfo:downloadedTime" set.
					\sa LiveResource::removeObject
				 */
				void removeDownloadedTime(QDateTime const &downloadedTime_) { baseRemoveObject< mfo::downloadedTime >(downloadedTime_); }
				 //@}
			};

			/*! Class generated from mfo:FeedSettings
			 * \ingroup onto_mfo_classes
			 * Represents settings applied to a feed channel or a feed entry. How often it is updated, through which connection type it is delivered, when data expires and so on
			 * 
			 * rdfs:label = Resource settings
			 * 
			 * tracker:modified = 1065
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref mfo_feedSettings "mfo:feedSettings"
			 */
			class FeedSettings
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#FeedSettings"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<FeedSettings> Live;
				FeedSettings() { this->attachInterfaceHelper< FeedSettings >(); }
				~FeedSettings() { this->detachInterfaceHelper< FeedSettings >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mfo:expiryInterval
				 * \n Expiry interval for feed channel, it tells time that a message in a channel can live. Interpreted as minutes
				 * \n rdfs:label=Expiry Interval
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=mfo:FeedSettings
				 * \n tracker:modified=1847
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveExpiryIntervals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_expiryInterval "mfo:expiryInterval" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveExpiryIntervals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::expiryInterval >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getExpiryIntervals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_expiryInterval "mfo:expiryInterval" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getExpiryIntervals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::expiryInterval >(object_info, strategy, parent); }
				/*!
					\fn void setExpiryIntervals(LiveNodes const &expiryInterval_)
					
					
					Sets the property \ref mfo_expiryInterval "mfo:expiryInterval" set to the given \a expiryInterval_ set.
					\sa LiveResource::setObjects
				 */
				void setExpiryIntervals(LiveNodes const &expiryInterval_) { baseSetObjects(mfo::expiryInterval::iri(), expiryInterval_); }
				/*!
					\fn void removeExpiryIntervals(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_expiryInterval "mfo:expiryInterval" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeExpiryIntervals(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::expiryInterval::iri(), object_info); }
				/*!
					\fn qint64 getExpiryInterval()
					
					
					Returns the property \ref mfo_expiryInterval "mfo:expiryInterval". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getExpiryInterval() { return baseGetObject< mfo::expiryInterval >(); }
				/*!
					\fn void setExpiryInterval(qint64 const &expiryInterval_)
					
					
					Sets the property \ref mfo_expiryInterval "mfo:expiryInterval" to the given \a expiryInterval.
					\sa LiveResource::setObject
				 */
				void setExpiryInterval(qint64 const &expiryInterval_) { baseSetObject< mfo::expiryInterval >( expiryInterval_ ); }
				/*!
					\fn qint64 firstExpiryInterval()
					
					
					Returns the first property \ref mfo_expiryInterval "mfo:expiryInterval". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstExpiryInterval() { return baseFirstObject< mfo::expiryInterval >(); }
				/*!
					\fn void addExpiryInterval(qint64 const &expiryInterval_)
					
					
					Adds the given \a expiryInterval_ to the property \ref mfo_expiryInterval "mfo:expiryInterval" set.
					\sa LiveResource::addObject
				 */
				void addExpiryInterval(qint64 const &expiryInterval_) { baseAddObject< mfo::expiryInterval >( expiryInterval_ ); }
				/*!
					\fn void removeExpiryInterval(qint64 const &expiryInterval_)
					
					
					Removes the given \a expiryInterval_ from the property \ref mfo_expiryInterval "mfo:expiryInterval" set.
					\sa LiveResource::removeObject
				 */
				void removeExpiryInterval(qint64 const &expiryInterval_) { baseRemoveObject< mfo::expiryInterval >(expiryInterval_); }

				/* Property generated from mfo:downloadPath
				 * \n Download path for enclosures in a message
				 * \n rdfs:label=Download path
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=mfo:FeedSettings
				 * \n tracker:modified=1730
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDownloadPaths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_downloadPath "mfo:downloadPath" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDownloadPaths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::downloadPath >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDownloadPaths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_downloadPath "mfo:downloadPath" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDownloadPaths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::downloadPath >(object_info, strategy, parent); }
				/*!
					\fn void setDownloadPaths(LiveNodes const &downloadPath_)
					
					
					Sets the property \ref mfo_downloadPath "mfo:downloadPath" set to the given \a downloadPath_ set.
					\sa LiveResource::setObjects
				 */
				void setDownloadPaths(LiveNodes const &downloadPath_) { baseSetObjects(mfo::downloadPath::iri(), downloadPath_); }
				/*!
					\fn void removeDownloadPaths(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_downloadPath "mfo:downloadPath" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDownloadPaths(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::downloadPath::iri(), object_info); }
				/*!
					\fn QString getDownloadPath()
					
					
					Returns the property \ref mfo_downloadPath "mfo:downloadPath". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDownloadPath() { return baseGetObject< mfo::downloadPath >(); }
				/*!
					\fn void setDownloadPath(QString const &downloadPath_)
					
					
					Sets the property \ref mfo_downloadPath "mfo:downloadPath" to the given \a downloadPath.
					\sa LiveResource::setObject
				 */
				void setDownloadPath(QString const &downloadPath_) { baseSetObject< mfo::downloadPath >( downloadPath_ ); }
				/*!
					\fn QString firstDownloadPath()
					
					
					Returns the first property \ref mfo_downloadPath "mfo:downloadPath". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDownloadPath() { return baseFirstObject< mfo::downloadPath >(); }
				/*!
					\fn void addDownloadPath(QString const &downloadPath_)
					
					
					Adds the given \a downloadPath_ to the property \ref mfo_downloadPath "mfo:downloadPath" set.
					\sa LiveResource::addObject
				 */
				void addDownloadPath(QString const &downloadPath_) { baseAddObject< mfo::downloadPath >( downloadPath_ ); }
				/*!
					\fn void removeDownloadPath(QString const &downloadPath_)
					
					
					Removes the given \a downloadPath_ from the property \ref mfo_downloadPath "mfo:downloadPath" set.
					\sa LiveResource::removeObject
				 */
				void removeDownloadPath(QString const &downloadPath_) { baseRemoveObject< mfo::downloadPath >(downloadPath_); }

				/* Property generated from mfo:updateInterval
				 * \n Update interval for a feed channel to get updated or refreshed. Interpreted as minutes
				 * \n rdfs:label=Update Interval
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=mfo:FeedSettings
				 * \n tracker:modified=1284
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveUpdateIntervals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_updateInterval "mfo:updateInterval" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveUpdateIntervals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::updateInterval >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getUpdateIntervals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_updateInterval "mfo:updateInterval" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getUpdateIntervals(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::updateInterval >(object_info, strategy, parent); }
				/*!
					\fn void setUpdateIntervals(LiveNodes const &updateInterval_)
					
					
					Sets the property \ref mfo_updateInterval "mfo:updateInterval" set to the given \a updateInterval_ set.
					\sa LiveResource::setObjects
				 */
				void setUpdateIntervals(LiveNodes const &updateInterval_) { baseSetObjects(mfo::updateInterval::iri(), updateInterval_); }
				/*!
					\fn void removeUpdateIntervals(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_updateInterval "mfo:updateInterval" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeUpdateIntervals(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::updateInterval::iri(), object_info); }
				/*!
					\fn qint64 getUpdateInterval()
					
					
					Returns the property \ref mfo_updateInterval "mfo:updateInterval". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getUpdateInterval() { return baseGetObject< mfo::updateInterval >(); }
				/*!
					\fn void setUpdateInterval(qint64 const &updateInterval_)
					
					
					Sets the property \ref mfo_updateInterval "mfo:updateInterval" to the given \a updateInterval.
					\sa LiveResource::setObject
				 */
				void setUpdateInterval(qint64 const &updateInterval_) { baseSetObject< mfo::updateInterval >( updateInterval_ ); }
				/*!
					\fn qint64 firstUpdateInterval()
					
					
					Returns the first property \ref mfo_updateInterval "mfo:updateInterval". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstUpdateInterval() { return baseFirstObject< mfo::updateInterval >(); }
				/*!
					\fn void addUpdateInterval(qint64 const &updateInterval_)
					
					
					Adds the given \a updateInterval_ to the property \ref mfo_updateInterval "mfo:updateInterval" set.
					\sa LiveResource::addObject
				 */
				void addUpdateInterval(qint64 const &updateInterval_) { baseAddObject< mfo::updateInterval >( updateInterval_ ); }
				/*!
					\fn void removeUpdateInterval(qint64 const &updateInterval_)
					
					
					Removes the given \a updateInterval_ from the property \ref mfo_updateInterval "mfo:updateInterval" set.
					\sa LiveResource::removeObject
				 */
				void removeUpdateInterval(qint64 const &updateInterval_) { baseRemoveObject< mfo::updateInterval >(updateInterval_); }

				/* Property generated from mfo:downloadFlag
				 * \n To indicate whether enclosures will be downloaded or not
				 * \n rdfs:label=Download
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=mfo:FeedSettings
				 * \n tracker:modified=1521
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDownloadFlags(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_downloadFlag "mfo:downloadFlag" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDownloadFlags(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::downloadFlag >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDownloadFlags(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_downloadFlag "mfo:downloadFlag" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDownloadFlags(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::downloadFlag >(object_info, strategy, parent); }
				/*!
					\fn void setDownloadFlags(LiveNodes const &downloadFlag_)
					
					
					Sets the property \ref mfo_downloadFlag "mfo:downloadFlag" set to the given \a downloadFlag_ set.
					\sa LiveResource::setObjects
				 */
				void setDownloadFlags(LiveNodes const &downloadFlag_) { baseSetObjects(mfo::downloadFlag::iri(), downloadFlag_); }
				/*!
					\fn void removeDownloadFlags(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_downloadFlag "mfo:downloadFlag" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDownloadFlags(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::downloadFlag::iri(), object_info); }
				/*!
					\fn bool getDownloadFlag()
					
					
					Returns the property \ref mfo_downloadFlag "mfo:downloadFlag". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getDownloadFlag() { return baseGetObject< mfo::downloadFlag >(); }
				/*!
					\fn void setDownloadFlag(bool const &downloadFlag_)
					
					
					Sets the property \ref mfo_downloadFlag "mfo:downloadFlag" to the given \a downloadFlag.
					\sa LiveResource::setObject
				 */
				void setDownloadFlag(bool const &downloadFlag_) { baseSetObject< mfo::downloadFlag >( downloadFlag_ ); }
				/*!
					\fn bool firstDownloadFlag()
					
					
					Returns the first property \ref mfo_downloadFlag "mfo:downloadFlag". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstDownloadFlag() { return baseFirstObject< mfo::downloadFlag >(); }
				/*!
					\fn void addDownloadFlag(bool const &downloadFlag_)
					
					
					Adds the given \a downloadFlag_ to the property \ref mfo_downloadFlag "mfo:downloadFlag" set.
					\sa LiveResource::addObject
				 */
				void addDownloadFlag(bool const &downloadFlag_) { baseAddObject< mfo::downloadFlag >( downloadFlag_ ); }
				/*!
					\fn void removeDownloadFlag(bool const &downloadFlag_)
					
					
					Removes the given \a downloadFlag_ from the property \ref mfo_downloadFlag "mfo:downloadFlag" set.
					\sa LiveResource::removeObject
				 */
				void removeDownloadFlag(bool const &downloadFlag_) { baseRemoveObject< mfo::downloadFlag >(downloadFlag_); }

				/* Property generated from mfo:maxSize
				 * \n Maximum size of enclosure that can be downloaded. Interpreted as KBs 
				 * \n rdfs:label=Size
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=mfo:FeedSettings
				 * \n tracker:modified=1208
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMaxSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_maxSize "mfo:maxSize" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMaxSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::maxSize >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMaxSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_maxSize "mfo:maxSize" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMaxSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::maxSize >(object_info, strategy, parent); }
				/*!
					\fn void setMaxSizes(LiveNodes const &maxSize_)
					
					
					Sets the property \ref mfo_maxSize "mfo:maxSize" set to the given \a maxSize_ set.
					\sa LiveResource::setObjects
				 */
				void setMaxSizes(LiveNodes const &maxSize_) { baseSetObjects(mfo::maxSize::iri(), maxSize_); }
				/*!
					\fn void removeMaxSizes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_maxSize "mfo:maxSize" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMaxSizes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::maxSize::iri(), object_info); }
				/*!
					\fn qint64 getMaxSize()
					
					
					Returns the property \ref mfo_maxSize "mfo:maxSize". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getMaxSize() { return baseGetObject< mfo::maxSize >(); }
				/*!
					\fn void setMaxSize(qint64 const &maxSize_)
					
					
					Sets the property \ref mfo_maxSize "mfo:maxSize" to the given \a maxSize.
					\sa LiveResource::setObject
				 */
				void setMaxSize(qint64 const &maxSize_) { baseSetObject< mfo::maxSize >( maxSize_ ); }
				/*!
					\fn qint64 firstMaxSize()
					
					
					Returns the first property \ref mfo_maxSize "mfo:maxSize". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstMaxSize() { return baseFirstObject< mfo::maxSize >(); }
				/*!
					\fn void addMaxSize(qint64 const &maxSize_)
					
					
					Adds the given \a maxSize_ to the property \ref mfo_maxSize "mfo:maxSize" set.
					\sa LiveResource::addObject
				 */
				void addMaxSize(qint64 const &maxSize_) { baseAddObject< mfo::maxSize >( maxSize_ ); }
				/*!
					\fn void removeMaxSize(qint64 const &maxSize_)
					
					
					Removes the given \a maxSize_ from the property \ref mfo_maxSize "mfo:maxSize" set.
					\sa LiveResource::removeObject
				 */
				void removeMaxSize(qint64 const &maxSize_) { baseRemoveObject< mfo::maxSize >(maxSize_); }
				 //@}
			};

			/*! Class generated from mfo:FeedType
			 * \ingroup onto_mfo_classes
			 * class with a restricted set of feed types
			 * 
			 * rdfs:label = Feed fomat type 
			 * 
			 * tracker:modified = 1455
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref mfo_type "mfo:type"
			 */
			class FeedType
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mfo#FeedType"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<FeedType> Live;
				FeedType() { this->attachInterfaceHelper< FeedType >(); }
				~FeedType() { this->detachInterfaceHelper< FeedType >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mfo:name
				 * \n Feed format name like rss-atom,flickr,facebook
				 * \n rdfs:label=Feed type name or plugin name
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=mfo:FeedType
				 * \n tracker:modified=1668
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mfo_name "mfo:name" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mfo::name >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mfo_name "mfo:name" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mfo::name >(object_info, strategy, parent); }
				/*!
					\fn void setNames(LiveNodes const &name_)
					
					
					Sets the property \ref mfo_name "mfo:name" set to the given \a name_ set.
					\sa LiveResource::setObjects
				 */
				void setNames(LiveNodes const &name_) { baseSetObjects(mfo::name::iri(), name_); }
				/*!
					\fn void removeNames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mfo_name "mfo:name" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mfo::name::iri(), object_info); }
				/*!
					\fn QString getName()
					
					
					Returns the property \ref mfo_name "mfo:name". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getName() { return baseGetObject< mfo::name >(); }
				/*!
					\fn void setName(QString const &name_)
					
					
					Sets the property \ref mfo_name "mfo:name" to the given \a name.
					\sa LiveResource::setObject
				 */
				void setName(QString const &name_) { baseSetObject< mfo::name >( name_ ); }
				/*!
					\fn QString firstName()
					
					
					Returns the first property \ref mfo_name "mfo:name". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstName() { return baseFirstObject< mfo::name >(); }
				/*!
					\fn void addName(QString const &name_)
					
					
					Adds the given \a name_ to the property \ref mfo_name "mfo:name" set.
					\sa LiveResource::addObject
				 */
				void addName(QString const &name_) { baseAddObject< mfo::name >( name_ ); }
				/*!
					\fn void removeName(QString const &name_)
					
					
					Removes the given \a name_ from the property \ref mfo_name "mfo:name" set.
					\sa LiveResource::removeObject
				 */
				void removeName(QString const &name_) { baseRemoveObject< mfo::name >(name_); }
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mfo::Action::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mfo::Enclosure::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mfo::FeedChannel::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mfo::FeedElement::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mfo::FeedMessage::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mfo::FeedSettings::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mfo::FeedType::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_MFO_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_MFO_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_MFO_H_POST_INCLUDES
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#endif
