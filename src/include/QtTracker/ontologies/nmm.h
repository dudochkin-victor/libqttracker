/*
 * nmm.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:25.936536
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/nmm.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_NMM_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_NMM_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_nmm_classes namespace nmm class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nmm_properties namespace nmm property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nmm_resources namespace nmm resource definitions
		 *  @{
		 *  @}
		 */
		static const char nmm_namespace_prefix[] = "http://www.tracker-project.org/temp/nmm#";
		struct Ontology_nmm
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(nmm_namespace_prefix) + suffix;
			}
		};
		namespace nmm
		{
			inline QUrl iri(QString suffix) { return Ontology_nmm::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class AnalogRadio;
			class Artist;
			class DigitalRadio;
			class Flash;
			class ImageList;
			class MeteringMode;
			class MusicAlbum;
			class MusicPiece;
			class Photo;
			class Playlist;
			class RadioModulation;
			class RadioStation;
			class SynchronizedText;
			class Video;
			class WhiteBalance;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NMM_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NMM_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NMM_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/mtp.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdf.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/mtp.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdf.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/mtp.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdf.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nmm
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from nmm:modulation
			 * \anchor nmm_modulation
			 * \n Modulation used in the frequency (AM or FM)
			 * \n rdfs:label=Signal modulation
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmm:RadioModulation
			 * \n rdfs:domain=nmm:AnalogRadio
			 * \n tracker:modified=1411
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class modulation
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#modulation"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef AnalogRadio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef AnalogRadio RDFDomain;
				/// The localized c++ range type of this property
				typedef RadioModulation Range;
				/// The full, non-localized rdf range type of this property
				typedef RadioModulation RDFRange;
			};
			/*! Property generated from nmm:frequency
			 * \anchor nmm_frequency
			 * \n Frequency in the Radio spectrum in Khz (note that usually FM frequencies are in MHz)
			 * \n rdfs:label=Frequency
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:AnalogRadio
			 * \n tracker:modified=1406
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class frequency
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#frequency"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef AnalogRadio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef AnalogRadio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:artistName
			 * \anchor nmm_artistName
			 * \n Name of the artist
			 * \n rdfs:label=fullname
			 * \n rdfs:subPropertyOf=dc:title
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmm:Artist
			 * \n tracker:weight=6
			 * \n tracker:indexed=true
			 * \n tracker:modified=1528
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n tracker:fulltextNoLimit=true
			 */
			/// \ingroup onto_nmm_properties
			class artistName
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#artistName"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Artist Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Artist RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmm:streamingBitrate
			 * \anchor nmm_streamingBitrate
			 * \n Bitrate indicating the quality of the stream in Kbits (usual values 32, 64, 128...)
			 * \n rdfs:label=Streaming bitrate
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:DigitalRadio
			 * \n tracker:modified=1559
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class streamingBitrate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#streamingBitrate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef DigitalRadio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef DigitalRadio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:encoding
			 * \anchor nmm_encoding
			 * \n Encoding of the radio. It is a property of the streaming, that it is known before hand, so the applications can choose the encoding they understand.
			 * \n rdfs:label=Encoding of the radio
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmm:DigitalRadio
			 * \n tracker:modified=1090
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class encoding
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#encoding"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef DigitalRadio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef DigitalRadio RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmm:protocol
			 * \anchor nmm_protocol
			 * \n Protocol used for the streaming (HTTP, RTSP)
			 * \n rdfs:label=Protocol
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmm:DigitalRadio
			 * \n tracker:modified=1954
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class protocol
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#protocol"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef DigitalRadio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef DigitalRadio RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmm:albumArtist
			 * \anchor nmm_albumArtist
			 * \n main artists of the album
			 * \n rdfs:label=artist
			 * \n rdfs:range=nmm:Artist
			 * \n rdfs:domain=nmm:MusicAlbum
			 * \n tracker:weight=6
			 * \n tracker:modified=1978
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class albumArtist
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#albumArtist"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef MusicAlbum Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicAlbum RDFDomain;
				/// The localized c++ range type of this property
				typedef Artist Range;
				/// The full, non-localized rdf range type of this property
				typedef Artist RDFRange;
			};
			/*! Property generated from nmm:musicCDIdentifier
			 * \anchor nmm_musicCDIdentifier
			 * \n Music CD identifier to for databases like FreeDB.org. This frame is intended for music that comes from a CD, so that the CD can be identified in databases such as the CDDB. The frame consists of a binary dump of the Table Of Contents, TOC, from the CD, which is a header of 4 bytes and then 8 bytes/track on the CD plus 8 bytes for the 'lead out' making a maximum of 804 bytes. The offset to the beginning of every track on the CD should be described with a four bytes absolute CD-frame address per track, and not with absolute time.
			 * \n rdfs:label=Music CD identifier
			 * \n rdfs:subPropertyOf=nie:identifier
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmm:MusicAlbum
			 * \n tracker:modified=1221
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class musicCDIdentifier
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#musicCDIdentifier"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MusicAlbum Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicAlbum RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmm:internationalStandardRecordingCode
			 * \anchor nmm_internationalStandardRecordingCode
			 * \n ISRC ID. Format: 'CC-XXX-YY-NNNNN'
			 * \n rdfs:label=International Standard Recording Code
			 * \n rdfs:subPropertyOf=nie:identifier
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmm:MusicAlbum
			 * \n tracker:modified=1924
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class internationalStandardRecordingCode
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#internationalStandardRecordingCode"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MusicAlbum Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicAlbum RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmm:albumTrackCount
			 * \anchor nmm_albumTrackCount
			 * \n Track count of album
			 * \n rdfs:label=Track count
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:MusicAlbum
			 * \n tracker:modified=1029
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class albumTrackCount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#albumTrackCount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MusicAlbum Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicAlbum RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:albumTitle
			 * \anchor nmm_albumTitle
			 * \n nmm:albumTitle is deprecated, use nie:title instead, extractors still need updating
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=Title
			 * \n rdfs:subPropertyOf=nie:title
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmm:MusicAlbum
			 * \n tracker:weight=6
			 * \n tracker:modified=1850
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n tracker:fulltextNoLimit=true
			 */
			/// \ingroup onto_nmm_properties
			class albumTitle
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#albumTitle"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MusicAlbum Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicAlbum RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmm:albumDuration
			 * \anchor nmm_albumDuration
			 * \n Duration of the album
			 * \n rdfs:label=Album duration
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:MusicAlbum
			 * \n tracker:modified=1311
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class albumDuration
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#albumDuration"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MusicAlbum Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicAlbum RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:albumGain
			 * \anchor nmm_albumGain
			 * \n Gain of album
			 * \n rdfs:label=Gain
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:MusicAlbum
			 * \n tracker:modified=1267
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class albumGain
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#albumGain"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MusicAlbum Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicAlbum RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:albumPeakGain
			 * \anchor nmm_albumPeakGain
			 * \n Peak Gain of album
			 * \n rdfs:label=Peak Gain
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:MusicAlbum
			 * \n tracker:modified=1947
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class albumPeakGain
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#albumPeakGain"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MusicAlbum Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicAlbum RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:setNumber
			 * \anchor nmm_setNumber
			 * \n Disk number of album
			 * \n rdfs:label=Disk number
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:MusicAlbum
			 * \n tracker:modified=1405
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class setNumber
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#setNumber"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MusicAlbum Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicAlbum RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:musicAlbum
			 * \anchor nmm_musicAlbum
			 * \n album the music belongs to
			 * \n rdfs:label=album
			 * \n rdfs:subPropertyOf=nie:isLogicalPartOf
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmm:MusicAlbum
			 * \n rdfs:domain=nmm:MusicPiece
			 * \n tracker:writeback=true
			 * \n tracker:weight=6
			 * \n tracker:indexed=true
			 * \n tracker:modified=1599
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class musicAlbum
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#musicAlbum"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef MusicPiece Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicPiece RDFDomain;
				/// The localized c++ range type of this property
				typedef MusicAlbum Range;
				/// The full, non-localized rdf range type of this property
				typedef MusicAlbum RDFRange;
			};
			/*! Property generated from nmm:beatsPerMinute
			 * \anchor nmm_beatsPerMinute
			 * \n beats per minute
			 * \n rdfs:label=Beats per minute
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:MusicPiece
			 * \n tracker:modified=1511
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class beatsPerMinute
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#beatsPerMinute"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MusicPiece Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicPiece RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:performer
			 * \anchor nmm_performer
			 * \n Performer
			 * \n rdfs:label=Performer
			 * \n rdfs:subPropertyOf=nco:contributor
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmm:Artist
			 * \n rdfs:domain=nmm:MusicPiece
			 * \n tracker:writeback=true
			 * \n tracker:weight=4
			 * \n tracker:indexed=true
			 * \n tracker:modified=1572
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class performer
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#performer"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef MusicPiece Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicPiece RDFDomain;
				/// The localized c++ range type of this property
				typedef Artist Range;
				/// The full, non-localized rdf range type of this property
				typedef Artist RDFRange;
			};
			/*! Property generated from nmm:length
			 * \anchor nmm_length
			 * \n Length or duration (in seconds)
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=Length
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:MusicPiece
			 * \n tracker:modified=1971
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class length
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#length"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MusicPiece Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicPiece RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:composer
			 * \anchor nmm_composer
			 * \n Composer
			 * \n rdfs:label=Composer
			 * \n rdfs:subPropertyOf=nco:contributor
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmm:Artist
			 * \n rdfs:domain=nmm:MusicPiece
			 * \n tracker:weight=4
			 * \n tracker:modified=1459
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class composer
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#composer"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef MusicPiece Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicPiece RDFDomain;
				/// The localized c++ range type of this property
				typedef Artist Range;
				/// The full, non-localized rdf range type of this property
				typedef Artist RDFRange;
			};
			/*! Property generated from nmm:lyricist
			 * \anchor nmm_lyricist
			 * \n Lyricist
			 * \n rdfs:label=Lyricist
			 * \n rdfs:subPropertyOf=nco:contributor
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmm:Artist
			 * \n rdfs:domain=nmm:MusicPiece
			 * \n tracker:weight=4
			 * \n tracker:modified=1857
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class lyricist
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#lyricist"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef MusicPiece Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicPiece RDFDomain;
				/// The localized c++ range type of this property
				typedef Artist Range;
				/// The full, non-localized rdf range type of this property
				typedef Artist RDFRange;
			};
			/*! Property generated from nmm:lyrics
			 * \anchor nmm_lyrics
			 * \n rdfs:range=nmm:SynchronizedText
			 * \n rdfs:label=File with the lyrics for the music piece
			 * \n tracker:modified=1676
			 * \n rdfs:domain=nmm:MusicPiece
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class lyrics
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#lyrics"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef MusicPiece Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicPiece RDFDomain;
				/// The localized c++ range type of this property
				typedef SynchronizedText Range;
				/// The full, non-localized rdf range type of this property
				typedef SynchronizedText RDFRange;
			};
			/*! Property generated from nmm:trackNumber
			 * \anchor nmm_trackNumber
			 * \n Track number of the music in its album
			 * \n rdfs:label=Track number
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:MusicPiece
			 * \n tracker:modified=1031
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class trackNumber
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#trackNumber"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MusicPiece Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MusicPiece RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:camera
			 * \anchor nmm_camera
			 * \n The maker and model of the camera used to take the photograph. DEPRECATED (check nfo:device)
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=Camera
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmm:Photo
			 * \n tracker:writeback=true
			 * \n tracker:weight=3
			 * \n tracker:modified=1649
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class camera
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#camera"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Photo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Photo RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmm:exposureTime
			 * \anchor nmm_exposureTime
			 * \n Exposure time of the photo
			 * \n rdfs:label=Exposure time
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nmm:Photo
			 * \n tracker:writeback=true
			 * \n tracker:modified=1069
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class exposureTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#exposureTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Photo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Photo RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nmm:flash
			 * \anchor nmm_flash
			 * \n Specifies whether flash was used
			 * \n rdfs:label=Flash
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmm:Flash
			 * \n rdfs:domain=nmm:Photo
			 * \n tracker:writeback=true
			 * \n tracker:modified=1435
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class flash
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#flash"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Photo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Photo RDFDomain;
				/// The localized c++ range type of this property
				typedef Flash Range;
				/// The full, non-localized rdf range type of this property
				typedef Flash RDFRange;
			};
			/*! Property generated from nmm:fnumber
			 * \anchor nmm_fnumber
			 * \n The diameter of the entrance pupil in terms of the focal length of the lens
			 * \n rdfs:label=F number
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nmm:Photo
			 * \n tracker:writeback=true
			 * \n tracker:modified=1147
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class fnumber
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#fnumber"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Photo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Photo RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nmm:focalLength
			 * \anchor nmm_focalLength
			 * \n A measure of how strongly the lens converges light
			 * \n rdfs:label=Focal length
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nmm:Photo
			 * \n tracker:writeback=true
			 * \n tracker:modified=1205
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class focalLength
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#focalLength"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Photo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Photo RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nmm:isoSpeed
			 * \anchor nmm_isoSpeed
			 * \n Measure of a photographic film's sensitivity to light as ISO value
			 * \n rdfs:label=ISO speed
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nmm:Photo
			 * \n tracker:writeback=true
			 * \n tracker:modified=1805
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class isoSpeed
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#isoSpeed"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Photo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Photo RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nmm:meteringMode
			 * \anchor nmm_meteringMode
			 * \n Metering mode refers to the way in which a camera determines the exposure.
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmm:MeteringMode
			 * \n rdfs:domain=nmm:Photo
			 * \n tracker:writeback=true
			 * \n tracker:modified=1495
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class meteringMode
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#meteringMode"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Photo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Photo RDFDomain;
				/// The localized c++ range type of this property
				typedef MeteringMode Range;
				/// The full, non-localized rdf range type of this property
				typedef MeteringMode RDFRange;
			};
			/*! Property generated from nmm:whiteBalance
			 * \anchor nmm_whiteBalance
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmm:WhiteBalance
			 * \n rdfs:domain=nmm:Photo
			 * \n tracker:writeback=true
			 * \n tracker:modified=1007
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class whiteBalance
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#whiteBalance"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Photo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Photo RDFDomain;
				/// The localized c++ range type of this property
				typedef WhiteBalance Range;
				/// The full, non-localized rdf range type of this property
				typedef WhiteBalance RDFRange;
			};
			/*! Property generated from nmm:isCropped
			 * \anchor nmm_isCropped
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1216
			 * \n rdfs:domain=nmm:Photo
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmm_properties
			class isCropped
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#isCropped"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Photo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Photo RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmm:isColorCorrected
			 * \anchor nmm_isColorCorrected
			 * \n rdfs:range=xsd:boolean
			 * \n tracker:modified=1530
			 * \n rdfs:domain=nmm:Photo
			 * \n tracker:added=2010-11-30T13:24:06Z
			 * \n nrl:maxCardinality=1
			 */
			/// \ingroup onto_nmm_properties
			class isColorCorrected
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#isColorCorrected"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Photo Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Photo RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmm:radioIcon
			 * \anchor nmm_radioIcon
			 * \n Image used as logo for a radio station
			 * \n rdfs:label=Radio station icon
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:Image
			 * \n rdfs:domain=nmm:RadioStation
			 * \n tracker:modified=1702
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class radioIcon
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#radioIcon"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef RadioStation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RadioStation RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::Image Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::Image RDFRange;
			};
			/*! Property generated from nmm:radioPTY
			 * \anchor nmm_radioPTY
			 * \n PTY Code (content description) as integer. RDS specs define the translations into human readable descriptions for various languages
			 * \n rdfs:label=PTY
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:RadioStation
			 * \n tracker:modified=1504
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class radioPTY
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#radioPTY"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef RadioStation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RadioStation RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:carrier
			 * \anchor nmm_carrier
			 * \n Signal where a radio can be tuned in. There can be more than one.
			 * \n rdfs:range=nfo:MediaStream
			 * \n rdfs:label=Carrier
			 * \n tracker:modified=1677
			 * \n rdfs:domain=nmm:RadioStation
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class carrier
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#carrier"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef RadioStation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef RadioStation RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::MediaStream Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::MediaStream RDFRange;
			};
			/*! Property generated from nmm:isForHearingImpaired
			 * \anchor nmm_isForHearingImpaired
			 * \n Does text stream contain helper tags for hearing-impaired such as &lt;steps in hallway&gt;
			 * \n rdfs:label=Is for hearing-impaired
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nmm:SynchronizedText
			 * \n tracker:modified=1383
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class isForHearingImpaired
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#isForHearingImpaired"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef SynchronizedText Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef SynchronizedText RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmm:videoAlbum
			 * \anchor nmm_videoAlbum
			 * \n rdfs:label=Album
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:MediaList
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:modified=1758
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class videoAlbum
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#videoAlbum"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::MediaList Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::MediaList RDFRange;
			};
			/*! Property generated from nmm:isSeries
			 * \anchor nmm_isSeries
			 * \n rdfs:label=Is series
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:modified=1478
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class isSeries
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#isSeries"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmm:season
			 * \anchor nmm_season
			 * \n rdfs:label=Season
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:modified=1073
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class season
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#season"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:episodeNumber
			 * \anchor nmm_episodeNumber
			 * \n rdfs:label=Episode number
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:modified=1232
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class episodeNumber
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#episodeNumber"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:runTime
			 * \anchor nmm_runTime
			 * \n rdfs:label=Run time
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:modified=1176
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class runTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#runTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:synopsis
			 * \anchor nmm_synopsis
			 * \n rdfs:label=Synopsis
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:modified=1256
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class synopsis
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#synopsis"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmm:MPAARating
			 * \anchor nmm_MPAARating
			 * \n rdfs:label=MPAA Rating
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:modified=1217
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class MPAARating
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#MPAARating"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmm:category
			 * \anchor nmm_category
			 * \n rdfs:label=Category
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:weight=4
			 * \n tracker:modified=1829
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class category
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#category"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmm:director
			 * \anchor nmm_director
			 * \n rdfs:label=Director
			 * \n rdfs:range=nmm:Artist
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:weight=4
			 * \n tracker:modified=1062
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class director
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#director"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef Artist Range;
				/// The full, non-localized rdf range type of this property
				typedef Artist RDFRange;
			};
			/*! Property generated from nmm:producedBy
			 * \anchor nmm_producedBy
			 * \n rdfs:label=Produced by
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nmm:Artist
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:weight=3
			 * \n tracker:modified=1072
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class producedBy
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#producedBy"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef Artist Range;
				/// The full, non-localized rdf range type of this property
				typedef Artist RDFRange;
			};
			/*! Property generated from nmm:leadActor
			 * \anchor nmm_leadActor
			 * \n rdfs:label=Lead actor
			 * \n rdfs:range=nmm:Artist
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:weight=4
			 * \n tracker:modified=1250
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class leadActor
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#leadActor"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef Artist Range;
				/// The full, non-localized rdf range type of this property
				typedef Artist RDFRange;
			};
			/*! Property generated from nmm:hasSubtitle
			 * \anchor nmm_hasSubtitle
			 * \n rdfs:label=Has subtitle
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:modified=1021
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class hasSubtitle
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#hasSubtitle"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmm:subtitle
			 * \anchor nmm_subtitle
			 * \n rdfs:label=Subtitle file relevant for the video
			 * \n rdfs:range=nmm:SynchronizedText
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:weight=5
			 * \n tracker:modified=1666
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class subtitle
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#subtitle"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef SynchronizedText Range;
				/// The full, non-localized rdf range type of this property
				typedef SynchronizedText RDFRange;
			};
			/*! Property generated from nmm:isContentEncrypted
			 * \anchor nmm_isContentEncrypted
			 * \n rdfs:label=Is content encrypted FIXME: defined already in IE in this ontology!
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nmm:Video
			 * \n tracker:modified=1350
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class isContentEncrypted
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#isContentEncrypted"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nmm:alternativeMedia
			 * \anchor nmm_alternativeMedia
			 * \n Link between to different version of the same media. This is used for instances in uPnp where the server can provide the same video in different resolutions and codecs
			 * \n rdfs:range=nfo:Media
			 * \n rdfs:label=Alternative media
			 * \n tracker:modified=1078
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class alternativeMedia
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#alternativeMedia"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef nfo::Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nfo::Media RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::Media Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::Media RDFRange;
			};
			/*! Property generated from nmm:dlnaProfile
			 * \anchor nmm_dlnaProfile
			 * \n DLNA profile of the content, like MP3, MPEG_TS_HD_US, LPCM etc
			 * \n rdfs:label=DLNA profile
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1300
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class dlnaProfile
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#dlnaProfile"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef nfo::Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nfo::Media RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmm:genre
			 * \anchor nmm_genre
			 * \n rdfs:label=Genre
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:weight=4
			 * \n tracker:modified=1179
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class genre
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#genre"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef nfo::Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nfo::Media RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nmm:skipCounter
			 * \anchor nmm_skipCounter
			 * \n rdfs:label=Increase if the media is skip while playing
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1191
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class skipCounter
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#skipCounter"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef nfo::Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nfo::Media RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nmm:uPnPShared
			 * \anchor nmm_uPnPShared
			 * \n Tells the uPnP MediaServer (e.g. Rygel) whether to export/share the resource or not
			 * \n rdfs:label=uPnP shared
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1633
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nmm_properties
			class uPnPShared
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#uPnPShared"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nmm Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef nfo::Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nfo::Media RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			/*! Resource generated from nmm:flash-off
			 * \anchor nmm_flash_off
			 */
			/// \ingroup onto_nmm_resources
			class flash_off
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#flash-off"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Flash ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmm:flash-on
			 * \anchor nmm_flash_on
			 */
			/// \ingroup onto_nmm_resources
			class flash_on
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#flash-on"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Flash ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmm:metering-mode-average
			 * \anchor nmm_metering_mode_average
			 */
			/// \ingroup onto_nmm_resources
			class metering_mode_average
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#metering-mode-average"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef MeteringMode ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmm:metering-mode-center-weighted-average
			 * \anchor nmm_metering_mode_center_weighted_average
			 */
			/// \ingroup onto_nmm_resources
			class metering_mode_center_weighted_average
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#metering-mode-center-weighted-average"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef MeteringMode ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmm:metering-mode-multispot
			 * \anchor nmm_metering_mode_multispot
			 */
			/// \ingroup onto_nmm_resources
			class metering_mode_multispot
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#metering-mode-multispot"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef MeteringMode ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmm:metering-mode-other
			 * \anchor nmm_metering_mode_other
			 */
			/// \ingroup onto_nmm_resources
			class metering_mode_other
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#metering-mode-other"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef MeteringMode ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmm:metering-mode-partial
			 * \anchor nmm_metering_mode_partial
			 */
			/// \ingroup onto_nmm_resources
			class metering_mode_partial
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#metering-mode-partial"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef MeteringMode ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmm:metering-mode-pattern
			 * \anchor nmm_metering_mode_pattern
			 */
			/// \ingroup onto_nmm_resources
			class metering_mode_pattern
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#metering-mode-pattern"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef MeteringMode ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmm:metering-mode-spot
			 * \anchor nmm_metering_mode_spot
			 */
			/// \ingroup onto_nmm_resources
			class metering_mode_spot
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#metering-mode-spot"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef MeteringMode ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmm:radio-modulation-am
			 * \anchor nmm_radio_modulation_am
			 */
			/// \ingroup onto_nmm_resources
			class radio_modulation_am
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#radio-modulation-am"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef RadioModulation ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmm:radio-modulation-fm
			 * \anchor nmm_radio_modulation_fm
			 */
			/// \ingroup onto_nmm_resources
			class radio_modulation_fm
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#radio-modulation-fm"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef RadioModulation ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmm:white-balance-auto
			 * \anchor nmm_white_balance_auto
			 */
			/// \ingroup onto_nmm_resources
			class white_balance_auto
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#white-balance-auto"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef WhiteBalance ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nmm:white-balance-manual
			 * \anchor nmm_white_balance_manual
			 */
			/// \ingroup onto_nmm_resources
			class white_balance_manual
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#white-balance-manual"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef WhiteBalance ResourceType;
				//! The ontology of this resource
				typedef Ontology_nmm Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NMM_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NMM_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NMM_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/mtp.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdf.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/nco.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/mtp.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdf.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nmm
		{

			using namespace rdfs;
			using namespace nfo;
			using namespace mtp;
			using namespace nie;
			using namespace rdf;
			using namespace xsd;
			using namespace nco;

			/*! Class generated from nmm:AnalogRadio
			 * \ingroup onto_nmm_classes
			 * FM Radio carrier signal data. Basically the frequency
			 * 
			 * rdfs:label = AM/FM Radio carrier signal
			 * 
			 * tracker:modified = 1993
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class AnalogRadio
				: public virtual nfo::MediaStream

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#AnalogRadio"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::MediaStream, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<AnalogRadio> Live;
				AnalogRadio() { this->attachInterfaceHelper< AnalogRadio >(); }
				~AnalogRadio() { this->detachInterfaceHelper< AnalogRadio >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmm:modulation
				 * \n Modulation used in the frequency (AM or FM)
				 * \n rdfs:label=Signal modulation
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmm:RadioModulation
				 * \n rdfs:domain=nmm:AnalogRadio
				 * \n tracker:modified=1411
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveModulations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_modulation "nmm:modulation" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveModulations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::modulation >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getModulations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_modulation "nmm:modulation" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getModulations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::modulation >(object_info, strategy, parent); }
				/*!
					\fn void setModulations(LiveNodes const &modulation_)
					
					
					Sets the property \ref nmm_modulation "nmm:modulation" set to the given \a modulation_ set.
					\sa LiveResource::setObjects
				 */
				void setModulations(LiveNodes const &modulation_) { baseSetObjects(nmm::modulation::iri(), modulation_); }
				/*!
					\fn void removeModulations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_modulation "nmm:modulation" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeModulations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::modulation::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< RadioModulation > getModulation()
					
					
					Returns the property \ref nmm_modulation "nmm:modulation". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< RadioModulation > getModulation() { return baseGetObject< nmm::modulation >(); }
				/*!
					\fn ::SopranoLive::Live< RadioModulation > setModulation(::SopranoLive::Live< RadioModulation > const &modulation_)
					
					
					Sets the property \ref nmm_modulation "nmm:modulation" to the given \a modulation.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< RadioModulation > setModulation(::SopranoLive::Live< RadioModulation > const &modulation_) { return baseSetObject< nmm::modulation >( modulation_ ); }
				/*!
					\fn ::SopranoLive::Live< RadioModulation > firstModulation()
					
					
					Returns the first property \ref nmm_modulation "nmm:modulation". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< RadioModulation > firstModulation() { return baseFirstObject< nmm::modulation >(); }
				/*!
					\fn ::SopranoLive::Live< RadioModulation > addModulation()
					
					
					Adds a new uniquely named resource to the property \ref nmm_modulation "nmm:modulation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RadioModulation > addModulation() { return baseAddObject< nmm::modulation >(); }
				/*!
					\fn ::SopranoLive::Live< RadioModulation > addModulation(::SopranoLive::Live< RadioModulation > const &modulation_)
					
					
					Adds the given \a modulation_ to the property \ref nmm_modulation "nmm:modulation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< RadioModulation > addModulation(::SopranoLive::Live< RadioModulation > const &modulation_) { return baseAddObject< nmm::modulation >( modulation_ ); }
				/*!
					\fn void removeModulation(::SopranoLive::Live< RadioModulation > const &modulation_)
					
					
					Removes the given \a modulation_ from the property \ref nmm_modulation "nmm:modulation" set.
					\sa LiveResource::removeObject
				 */
				void removeModulation(::SopranoLive::Live< RadioModulation > const &modulation_) { baseRemoveObject< nmm::modulation >(modulation_); }

				/* Property generated from nmm:frequency
				 * \n Frequency in the Radio spectrum in Khz (note that usually FM frequencies are in MHz)
				 * \n rdfs:label=Frequency
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:AnalogRadio
				 * \n tracker:modified=1406
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFrequencys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_frequency "nmm:frequency" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFrequencys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::frequency >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFrequencys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_frequency "nmm:frequency" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFrequencys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::frequency >(object_info, strategy, parent); }
				/*!
					\fn void setFrequencys(LiveNodes const &frequency_)
					
					
					Sets the property \ref nmm_frequency "nmm:frequency" set to the given \a frequency_ set.
					\sa LiveResource::setObjects
				 */
				void setFrequencys(LiveNodes const &frequency_) { baseSetObjects(nmm::frequency::iri(), frequency_); }
				/*!
					\fn void removeFrequencys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_frequency "nmm:frequency" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFrequencys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::frequency::iri(), object_info); }
				/*!
					\fn qint64 getFrequency()
					
					
					Returns the property \ref nmm_frequency "nmm:frequency". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getFrequency() { return baseGetObject< nmm::frequency >(); }
				/*!
					\fn void setFrequency(qint64 const &frequency_)
					
					
					Sets the property \ref nmm_frequency "nmm:frequency" to the given \a frequency.
					\sa LiveResource::setObject
				 */
				void setFrequency(qint64 const &frequency_) { baseSetObject< nmm::frequency >( frequency_ ); }
				/*!
					\fn qint64 firstFrequency()
					
					
					Returns the first property \ref nmm_frequency "nmm:frequency". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstFrequency() { return baseFirstObject< nmm::frequency >(); }
				/*!
					\fn void addFrequency(qint64 const &frequency_)
					
					
					Adds the given \a frequency_ to the property \ref nmm_frequency "nmm:frequency" set.
					\sa LiveResource::addObject
				 */
				void addFrequency(qint64 const &frequency_) { baseAddObject< nmm::frequency >( frequency_ ); }
				/*!
					\fn void removeFrequency(qint64 const &frequency_)
					
					
					Removes the given \a frequency_ from the property \ref nmm_frequency "nmm:frequency" set.
					\sa LiveResource::removeObject
				 */
				void removeFrequency(qint64 const &frequency_) { baseRemoveObject< nmm::frequency >(frequency_); }
				 //@}
			};

			/*! Class generated from nmm:Artist
			 * \ingroup onto_nmm_classes
			 * An artist.
			 * 
			 * rdfs:label = Artist
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1770
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmm_lyricist "nmm:lyricist"
			 * 		\ref nmm_leadActor "nmm:leadActor"
			 * 		\ref nmm_director "nmm:director"
			 * 		\ref nmm_albumArtist "nmm:albumArtist"
			 * 		\ref nmm_producedBy "nmm:producedBy"
			 * 		\ref nmm_composer "nmm:composer"
			 * 		\ref nmm_performer "nmm:performer"
			 */
			class Artist
				: public virtual nie::InformationElement, public virtual nco::Role

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#Artist"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, QPair<nco::Role, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Artist> Live;
				Artist() { this->attachInterfaceHelper< Artist >(); }
				~Artist() { this->detachInterfaceHelper< Artist >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmm:artistName
				 * \n Name of the artist
				 * \n rdfs:label=fullname
				 * \n rdfs:subPropertyOf=dc:title
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmm:Artist
				 * \n tracker:weight=6
				 * \n tracker:indexed=true
				 * \n tracker:modified=1528
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n tracker:fulltextNoLimit=true
				 */
				/*!
					\fn LiveNodes liveArtistNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_artistName "nmm:artistName" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveArtistNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::artistName >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getArtistNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_artistName "nmm:artistName" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getArtistNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::artistName >(object_info, strategy, parent); }
				/*!
					\fn void setArtistNames(LiveNodes const &artistName_)
					
					
					Sets the property \ref nmm_artistName "nmm:artistName" set to the given \a artistName_ set.
					\sa LiveResource::setObjects
				 */
				void setArtistNames(LiveNodes const &artistName_) { baseSetObjects(nmm::artistName::iri(), artistName_); }
				/*!
					\fn void removeArtistNames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_artistName "nmm:artistName" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeArtistNames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::artistName::iri(), object_info); }
				/*!
					\fn QString getArtistName()
					
					
					Returns the property \ref nmm_artistName "nmm:artistName". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getArtistName() { return baseGetObject< nmm::artistName >(); }
				/*!
					\fn void setArtistName(QString const &artistName_)
					
					
					Sets the property \ref nmm_artistName "nmm:artistName" to the given \a artistName.
					\sa LiveResource::setObject
				 */
				void setArtistName(QString const &artistName_) { baseSetObject< nmm::artistName >( artistName_ ); }
				/*!
					\fn QString firstArtistName()
					
					
					Returns the first property \ref nmm_artistName "nmm:artistName". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstArtistName() { return baseFirstObject< nmm::artistName >(); }
				/*!
					\fn void addArtistName(QString const &artistName_)
					
					
					Adds the given \a artistName_ to the property \ref nmm_artistName "nmm:artistName" set.
					\sa LiveResource::addObject
				 */
				void addArtistName(QString const &artistName_) { baseAddObject< nmm::artistName >( artistName_ ); }
				/*!
					\fn void removeArtistName(QString const &artistName_)
					
					
					Removes the given \a artistName_ from the property \ref nmm_artistName "nmm:artistName" set.
					\sa LiveResource::removeObject
				 */
				void removeArtistName(QString const &artistName_) { baseRemoveObject< nmm::artistName >(artistName_); }
				 //@}
			};

			/*! Class generated from nmm:DigitalRadio
			 * \ingroup onto_nmm_classes
			 * Online Radio Stream data object (i.e. as a raw flow of bytes)
			 * 
			 * rdfs:label = Online Radio Stream
			 * 
			 * tracker:modified = 1659
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class DigitalRadio
				: public virtual nfo::MediaStream

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#DigitalRadio"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::MediaStream, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<DigitalRadio> Live;
				DigitalRadio() { this->attachInterfaceHelper< DigitalRadio >(); }
				~DigitalRadio() { this->detachInterfaceHelper< DigitalRadio >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmm:protocol
				 * \n Protocol used for the streaming (HTTP, RTSP)
				 * \n rdfs:label=Protocol
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmm:DigitalRadio
				 * \n tracker:modified=1954
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveProtocols(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_protocol "nmm:protocol" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveProtocols(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::protocol >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getProtocols(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_protocol "nmm:protocol" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getProtocols(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::protocol >(object_info, strategy, parent); }
				/*!
					\fn void setProtocols(LiveNodes const &protocol_)
					
					
					Sets the property \ref nmm_protocol "nmm:protocol" set to the given \a protocol_ set.
					\sa LiveResource::setObjects
				 */
				void setProtocols(LiveNodes const &protocol_) { baseSetObjects(nmm::protocol::iri(), protocol_); }
				/*!
					\fn void removeProtocols(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_protocol "nmm:protocol" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeProtocols(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::protocol::iri(), object_info); }
				/*!
					\fn QString getProtocol()
					
					
					Returns the property \ref nmm_protocol "nmm:protocol". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getProtocol() { return baseGetObject< nmm::protocol >(); }
				/*!
					\fn void setProtocol(QString const &protocol_)
					
					
					Sets the property \ref nmm_protocol "nmm:protocol" to the given \a protocol.
					\sa LiveResource::setObject
				 */
				void setProtocol(QString const &protocol_) { baseSetObject< nmm::protocol >( protocol_ ); }
				/*!
					\fn QString firstProtocol()
					
					
					Returns the first property \ref nmm_protocol "nmm:protocol". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstProtocol() { return baseFirstObject< nmm::protocol >(); }
				/*!
					\fn void addProtocol(QString const &protocol_)
					
					
					Adds the given \a protocol_ to the property \ref nmm_protocol "nmm:protocol" set.
					\sa LiveResource::addObject
				 */
				void addProtocol(QString const &protocol_) { baseAddObject< nmm::protocol >( protocol_ ); }
				/*!
					\fn void removeProtocol(QString const &protocol_)
					
					
					Removes the given \a protocol_ from the property \ref nmm_protocol "nmm:protocol" set.
					\sa LiveResource::removeObject
				 */
				void removeProtocol(QString const &protocol_) { baseRemoveObject< nmm::protocol >(protocol_); }

				/* Property generated from nmm:encoding
				 * \n Encoding of the radio. It is a property of the streaming, that it is known before hand, so the applications can choose the encoding they understand.
				 * \n rdfs:label=Encoding of the radio
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmm:DigitalRadio
				 * \n tracker:modified=1090
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_encoding "nmm:encoding" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::encoding >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_encoding "nmm:encoding" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::encoding >(object_info, strategy, parent); }
				/*!
					\fn void setEncodings(LiveNodes const &encoding_)
					
					
					Sets the property \ref nmm_encoding "nmm:encoding" set to the given \a encoding_ set.
					\sa LiveResource::setObjects
				 */
				void setEncodings(LiveNodes const &encoding_) { baseSetObjects(nmm::encoding::iri(), encoding_); }
				/*!
					\fn void removeEncodings(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_encoding "nmm:encoding" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEncodings(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::encoding::iri(), object_info); }
				/*!
					\fn QString getEncoding()
					
					
					Returns the property \ref nmm_encoding "nmm:encoding". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getEncoding() { return baseGetObject< nmm::encoding >(); }
				/*!
					\fn void setEncoding(QString const &encoding_)
					
					
					Sets the property \ref nmm_encoding "nmm:encoding" to the given \a encoding.
					\sa LiveResource::setObject
				 */
				void setEncoding(QString const &encoding_) { baseSetObject< nmm::encoding >( encoding_ ); }
				/*!
					\fn QString firstEncoding()
					
					
					Returns the first property \ref nmm_encoding "nmm:encoding". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstEncoding() { return baseFirstObject< nmm::encoding >(); }
				/*!
					\fn void addEncoding(QString const &encoding_)
					
					
					Adds the given \a encoding_ to the property \ref nmm_encoding "nmm:encoding" set.
					\sa LiveResource::addObject
				 */
				void addEncoding(QString const &encoding_) { baseAddObject< nmm::encoding >( encoding_ ); }
				/*!
					\fn void removeEncoding(QString const &encoding_)
					
					
					Removes the given \a encoding_ from the property \ref nmm_encoding "nmm:encoding" set.
					\sa LiveResource::removeObject
				 */
				void removeEncoding(QString const &encoding_) { baseRemoveObject< nmm::encoding >(encoding_); }

				/* Property generated from nmm:streamingBitrate
				 * \n Bitrate indicating the quality of the stream in Kbits (usual values 32, 64, 128...)
				 * \n rdfs:label=Streaming bitrate
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:DigitalRadio
				 * \n tracker:modified=1559
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveStreamingBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_streamingBitrate "nmm:streamingBitrate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStreamingBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::streamingBitrate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStreamingBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_streamingBitrate "nmm:streamingBitrate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStreamingBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::streamingBitrate >(object_info, strategy, parent); }
				/*!
					\fn void setStreamingBitrates(LiveNodes const &streamingBitrate_)
					
					
					Sets the property \ref nmm_streamingBitrate "nmm:streamingBitrate" set to the given \a streamingBitrate_ set.
					\sa LiveResource::setObjects
				 */
				void setStreamingBitrates(LiveNodes const &streamingBitrate_) { baseSetObjects(nmm::streamingBitrate::iri(), streamingBitrate_); }
				/*!
					\fn void removeStreamingBitrates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_streamingBitrate "nmm:streamingBitrate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStreamingBitrates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::streamingBitrate::iri(), object_info); }
				/*!
					\fn qint64 getStreamingBitrate()
					
					
					Returns the property \ref nmm_streamingBitrate "nmm:streamingBitrate". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getStreamingBitrate() { return baseGetObject< nmm::streamingBitrate >(); }
				/*!
					\fn void setStreamingBitrate(qint64 const &streamingBitrate_)
					
					
					Sets the property \ref nmm_streamingBitrate "nmm:streamingBitrate" to the given \a streamingBitrate.
					\sa LiveResource::setObject
				 */
				void setStreamingBitrate(qint64 const &streamingBitrate_) { baseSetObject< nmm::streamingBitrate >( streamingBitrate_ ); }
				/*!
					\fn qint64 firstStreamingBitrate()
					
					
					Returns the first property \ref nmm_streamingBitrate "nmm:streamingBitrate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstStreamingBitrate() { return baseFirstObject< nmm::streamingBitrate >(); }
				/*!
					\fn void addStreamingBitrate(qint64 const &streamingBitrate_)
					
					
					Adds the given \a streamingBitrate_ to the property \ref nmm_streamingBitrate "nmm:streamingBitrate" set.
					\sa LiveResource::addObject
				 */
				void addStreamingBitrate(qint64 const &streamingBitrate_) { baseAddObject< nmm::streamingBitrate >( streamingBitrate_ ); }
				/*!
					\fn void removeStreamingBitrate(qint64 const &streamingBitrate_)
					
					
					Removes the given \a streamingBitrate_ from the property \ref nmm_streamingBitrate "nmm:streamingBitrate" set.
					\sa LiveResource::removeObject
				 */
				void removeStreamingBitrate(qint64 const &streamingBitrate_) { baseRemoveObject< nmm::streamingBitrate >(streamingBitrate_); }
				 //@}
			};

			/*! Class generated from nmm:Flash
			 * \ingroup onto_nmm_classes
			 * Enumeration of the possible values of flash property
			 * 
			 * rdfs:label = Flash values
			 * 
			 * tracker:modified = 1691
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nmm_flash_off "nmm:flash-off"
			 * 		\ref nmm_flash_on "nmm:flash-on"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmm_flash "nmm:flash"
			 */
			class Flash
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#Flash"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Flash> Live;
				Flash() { this->attachInterfaceHelper< Flash >(); }
				~Flash() { this->detachInterfaceHelper< Flash >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmm:ImageList
			 * \ingroup onto_nmm_classes
			 * An album of images
			 * 
			 * rdfs:label = Image album
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1553
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class ImageList
				: public virtual nfo::MediaList

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#ImageList"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::MediaList, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<ImageList> Live;
				ImageList() { this->attachInterfaceHelper< ImageList >(); }
				~ImageList() { this->detachInterfaceHelper< ImageList >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmm:MeteringMode
			 * \ingroup onto_nmm_classes
			 * Enumeration of different ways a camera determines exposure.
			 * 
			 * rdfs:label = Metering mode values
			 * 
			 * tracker:modified = 1155
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nmm_metering_mode_center_weighted_average "nmm:metering-mode-center-weighted-average"
			 * 		\ref nmm_metering_mode_spot "nmm:metering-mode-spot"
			 * 		\ref nmm_metering_mode_other "nmm:metering-mode-other"
			 * 		\ref nmm_metering_mode_partial "nmm:metering-mode-partial"
			 * 		\ref nmm_metering_mode_multispot "nmm:metering-mode-multispot"
			 * 		\ref nmm_metering_mode_pattern "nmm:metering-mode-pattern"
			 * 		\ref nmm_metering_mode_average "nmm:metering-mode-average"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmm_meteringMode "nmm:meteringMode"
			 */
			class MeteringMode
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#MeteringMode"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MeteringMode> Live;
				MeteringMode() { this->attachInterfaceHelper< MeteringMode >(); }
				~MeteringMode() { this->detachInterfaceHelper< MeteringMode >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmm:MusicAlbum
			 * \ingroup onto_nmm_classes
			 * 
			 * rdfs:label = Music album
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1514
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 * 
			 * tracker:domainIndex = Unknown text
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmm_musicAlbum "nmm:musicAlbum"
			 */
			class MusicAlbum
				: public virtual nfo::MediaList

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#MusicAlbum"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::MediaList, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MusicAlbum> Live;
				MusicAlbum() { this->attachInterfaceHelper< MusicAlbum >(); }
				~MusicAlbum() { this->detachInterfaceHelper< MusicAlbum >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmm:musicCDIdentifier
				 * \n Music CD identifier to for databases like FreeDB.org. This frame is intended for music that comes from a CD, so that the CD can be identified in databases such as the CDDB. The frame consists of a binary dump of the Table Of Contents, TOC, from the CD, which is a header of 4 bytes and then 8 bytes/track on the CD plus 8 bytes for the 'lead out' making a maximum of 804 bytes. The offset to the beginning of every track on the CD should be described with a four bytes absolute CD-frame address per track, and not with absolute time.
				 * \n rdfs:label=Music CD identifier
				 * \n rdfs:subPropertyOf=nie:identifier
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmm:MusicAlbum
				 * \n tracker:modified=1221
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMusicCDIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_musicCDIdentifier "nmm:musicCDIdentifier" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMusicCDIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::musicCDIdentifier >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMusicCDIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_musicCDIdentifier "nmm:musicCDIdentifier" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMusicCDIdentifiers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::musicCDIdentifier >(object_info, strategy, parent); }
				/*!
					\fn void setMusicCDIdentifiers(LiveNodes const &musicCDIdentifier_)
					
					
					Sets the property \ref nmm_musicCDIdentifier "nmm:musicCDIdentifier" set to the given \a musicCDIdentifier_ set.
					\sa LiveResource::setObjects
				 */
				void setMusicCDIdentifiers(LiveNodes const &musicCDIdentifier_) { baseSetObjects(nmm::musicCDIdentifier::iri(), musicCDIdentifier_); }
				/*!
					\fn void removeMusicCDIdentifiers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_musicCDIdentifier "nmm:musicCDIdentifier" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMusicCDIdentifiers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::musicCDIdentifier::iri(), object_info); }
				/*!
					\fn QString getMusicCDIdentifier()
					
					
					Returns the property \ref nmm_musicCDIdentifier "nmm:musicCDIdentifier". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getMusicCDIdentifier() { return baseGetObject< nmm::musicCDIdentifier >(); }
				/*!
					\fn void setMusicCDIdentifier(QString const &musicCDIdentifier_)
					
					
					Sets the property \ref nmm_musicCDIdentifier "nmm:musicCDIdentifier" to the given \a musicCDIdentifier.
					\sa LiveResource::setObject
				 */
				void setMusicCDIdentifier(QString const &musicCDIdentifier_) { baseSetObject< nmm::musicCDIdentifier >( musicCDIdentifier_ ); }
				/*!
					\fn QString firstMusicCDIdentifier()
					
					
					Returns the first property \ref nmm_musicCDIdentifier "nmm:musicCDIdentifier". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMusicCDIdentifier() { return baseFirstObject< nmm::musicCDIdentifier >(); }
				/*!
					\fn void addMusicCDIdentifier(QString const &musicCDIdentifier_)
					
					
					Adds the given \a musicCDIdentifier_ to the property \ref nmm_musicCDIdentifier "nmm:musicCDIdentifier" set.
					\sa LiveResource::addObject
				 */
				void addMusicCDIdentifier(QString const &musicCDIdentifier_) { baseAddObject< nmm::musicCDIdentifier >( musicCDIdentifier_ ); }
				/*!
					\fn void removeMusicCDIdentifier(QString const &musicCDIdentifier_)
					
					
					Removes the given \a musicCDIdentifier_ from the property \ref nmm_musicCDIdentifier "nmm:musicCDIdentifier" set.
					\sa LiveResource::removeObject
				 */
				void removeMusicCDIdentifier(QString const &musicCDIdentifier_) { baseRemoveObject< nmm::musicCDIdentifier >(musicCDIdentifier_); }

				/* Property generated from nmm:albumDuration
				 * \n Duration of the album
				 * \n rdfs:label=Album duration
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:MusicAlbum
				 * \n tracker:modified=1311
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAlbumDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_albumDuration "nmm:albumDuration" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAlbumDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::albumDuration >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAlbumDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_albumDuration "nmm:albumDuration" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAlbumDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::albumDuration >(object_info, strategy, parent); }
				/*!
					\fn void setAlbumDurations(LiveNodes const &albumDuration_)
					
					
					Sets the property \ref nmm_albumDuration "nmm:albumDuration" set to the given \a albumDuration_ set.
					\sa LiveResource::setObjects
				 */
				void setAlbumDurations(LiveNodes const &albumDuration_) { baseSetObjects(nmm::albumDuration::iri(), albumDuration_); }
				/*!
					\fn void removeAlbumDurations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_albumDuration "nmm:albumDuration" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAlbumDurations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::albumDuration::iri(), object_info); }
				/*!
					\fn qint64 getAlbumDuration()
					
					
					Returns the property \ref nmm_albumDuration "nmm:albumDuration". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getAlbumDuration() { return baseGetObject< nmm::albumDuration >(); }
				/*!
					\fn void setAlbumDuration(qint64 const &albumDuration_)
					
					
					Sets the property \ref nmm_albumDuration "nmm:albumDuration" to the given \a albumDuration.
					\sa LiveResource::setObject
				 */
				void setAlbumDuration(qint64 const &albumDuration_) { baseSetObject< nmm::albumDuration >( albumDuration_ ); }
				/*!
					\fn qint64 firstAlbumDuration()
					
					
					Returns the first property \ref nmm_albumDuration "nmm:albumDuration". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstAlbumDuration() { return baseFirstObject< nmm::albumDuration >(); }
				/*!
					\fn void addAlbumDuration(qint64 const &albumDuration_)
					
					
					Adds the given \a albumDuration_ to the property \ref nmm_albumDuration "nmm:albumDuration" set.
					\sa LiveResource::addObject
				 */
				void addAlbumDuration(qint64 const &albumDuration_) { baseAddObject< nmm::albumDuration >( albumDuration_ ); }
				/*!
					\fn void removeAlbumDuration(qint64 const &albumDuration_)
					
					
					Removes the given \a albumDuration_ from the property \ref nmm_albumDuration "nmm:albumDuration" set.
					\sa LiveResource::removeObject
				 */
				void removeAlbumDuration(qint64 const &albumDuration_) { baseRemoveObject< nmm::albumDuration >(albumDuration_); }

				/* Property generated from nmm:internationalStandardRecordingCode
				 * \n ISRC ID. Format: 'CC-XXX-YY-NNNNN'
				 * \n rdfs:label=International Standard Recording Code
				 * \n rdfs:subPropertyOf=nie:identifier
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmm:MusicAlbum
				 * \n tracker:modified=1924
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveInternationalStandardRecordingCodes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_internationalStandardRecordingCode "nmm:internationalStandardRecordingCode" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveInternationalStandardRecordingCodes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::internationalStandardRecordingCode >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getInternationalStandardRecordingCodes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_internationalStandardRecordingCode "nmm:internationalStandardRecordingCode" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getInternationalStandardRecordingCodes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::internationalStandardRecordingCode >(object_info, strategy, parent); }
				/*!
					\fn void setInternationalStandardRecordingCodes(LiveNodes const &internationalStandardRecordingCode_)
					
					
					Sets the property \ref nmm_internationalStandardRecordingCode "nmm:internationalStandardRecordingCode" set to the given \a internationalStandardRecordingCode_ set.
					\sa LiveResource::setObjects
				 */
				void setInternationalStandardRecordingCodes(LiveNodes const &internationalStandardRecordingCode_) { baseSetObjects(nmm::internationalStandardRecordingCode::iri(), internationalStandardRecordingCode_); }
				/*!
					\fn void removeInternationalStandardRecordingCodes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_internationalStandardRecordingCode "nmm:internationalStandardRecordingCode" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeInternationalStandardRecordingCodes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::internationalStandardRecordingCode::iri(), object_info); }
				/*!
					\fn QString getInternationalStandardRecordingCode()
					
					
					Returns the property \ref nmm_internationalStandardRecordingCode "nmm:internationalStandardRecordingCode". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getInternationalStandardRecordingCode() { return baseGetObject< nmm::internationalStandardRecordingCode >(); }
				/*!
					\fn void setInternationalStandardRecordingCode(QString const &internationalStandardRecordingCode_)
					
					
					Sets the property \ref nmm_internationalStandardRecordingCode "nmm:internationalStandardRecordingCode" to the given \a internationalStandardRecordingCode.
					\sa LiveResource::setObject
				 */
				void setInternationalStandardRecordingCode(QString const &internationalStandardRecordingCode_) { baseSetObject< nmm::internationalStandardRecordingCode >( internationalStandardRecordingCode_ ); }
				/*!
					\fn QString firstInternationalStandardRecordingCode()
					
					
					Returns the first property \ref nmm_internationalStandardRecordingCode "nmm:internationalStandardRecordingCode". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstInternationalStandardRecordingCode() { return baseFirstObject< nmm::internationalStandardRecordingCode >(); }
				/*!
					\fn void addInternationalStandardRecordingCode(QString const &internationalStandardRecordingCode_)
					
					
					Adds the given \a internationalStandardRecordingCode_ to the property \ref nmm_internationalStandardRecordingCode "nmm:internationalStandardRecordingCode" set.
					\sa LiveResource::addObject
				 */
				void addInternationalStandardRecordingCode(QString const &internationalStandardRecordingCode_) { baseAddObject< nmm::internationalStandardRecordingCode >( internationalStandardRecordingCode_ ); }
				/*!
					\fn void removeInternationalStandardRecordingCode(QString const &internationalStandardRecordingCode_)
					
					
					Removes the given \a internationalStandardRecordingCode_ from the property \ref nmm_internationalStandardRecordingCode "nmm:internationalStandardRecordingCode" set.
					\sa LiveResource::removeObject
				 */
				void removeInternationalStandardRecordingCode(QString const &internationalStandardRecordingCode_) { baseRemoveObject< nmm::internationalStandardRecordingCode >(internationalStandardRecordingCode_); }

				/* Property generated from nmm:albumTitle
				 * \n nmm:albumTitle is deprecated, use nie:title instead, extractors still need updating
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=Title
				 * \n rdfs:subPropertyOf=nie:title
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmm:MusicAlbum
				 * \n tracker:weight=6
				 * \n tracker:modified=1850
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n tracker:fulltextNoLimit=true
				 */
				/*!
					\fn LiveNodes liveAlbumTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmm::albumTitle for replacement
					Returns a live model of property \ref nmm_albumTitle "nmm:albumTitle" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveAlbumTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::albumTitle >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAlbumTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmm::albumTitle for replacement
					Returns all current values of property \ref nmm_albumTitle "nmm:albumTitle" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getAlbumTitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::albumTitle >(object_info, strategy, parent); }
				/*!
					\fn void setAlbumTitles(LiveNodes const &albumTitle_)
					
					\deprecated See \ref nmm::albumTitle for replacement
					Sets the property \ref nmm_albumTitle "nmm:albumTitle" set to the given \a albumTitle_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setAlbumTitles(LiveNodes const &albumTitle_) { baseSetObjects(nmm::albumTitle::iri(), albumTitle_); }
				/*!
					\fn void removeAlbumTitles(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nmm::albumTitle for replacement
					Removes the properties from property \ref nmm_albumTitle "nmm:albumTitle" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeAlbumTitles(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::albumTitle::iri(), object_info); }
				/*!
					\fn QString getAlbumTitle()
					
					\deprecated See \ref nmm::albumTitle for replacement
					Returns the property \ref nmm_albumTitle "nmm:albumTitle". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED QString getAlbumTitle() { return baseGetObject< nmm::albumTitle >(); }
				/*!
					\fn void setAlbumTitle(QString const &albumTitle_)
					
					\deprecated See \ref nmm::albumTitle for replacement
					Sets the property \ref nmm_albumTitle "nmm:albumTitle" to the given \a albumTitle.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED void setAlbumTitle(QString const &albumTitle_) { baseSetObject< nmm::albumTitle >( albumTitle_ ); }
				/*!
					\fn QString firstAlbumTitle()
					
					\deprecated See \ref nmm::albumTitle for replacement
					Returns the first property \ref nmm_albumTitle "nmm:albumTitle". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED QString firstAlbumTitle() { return baseFirstObject< nmm::albumTitle >(); }
				/*!
					\fn void addAlbumTitle(QString const &albumTitle_)
					
					\deprecated See \ref nmm::albumTitle for replacement
					Adds the given \a albumTitle_ to the property \ref nmm_albumTitle "nmm:albumTitle" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addAlbumTitle(QString const &albumTitle_) { baseAddObject< nmm::albumTitle >( albumTitle_ ); }
				/*!
					\fn void removeAlbumTitle(QString const &albumTitle_)
					
					\deprecated See \ref nmm::albumTitle for replacement
					Removes the given \a albumTitle_ from the property \ref nmm_albumTitle "nmm:albumTitle" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeAlbumTitle(QString const &albumTitle_) { baseRemoveObject< nmm::albumTitle >(albumTitle_); }

				/* Property generated from nmm:albumTrackCount
				 * \n Track count of album
				 * \n rdfs:label=Track count
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:MusicAlbum
				 * \n tracker:modified=1029
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAlbumTrackCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_albumTrackCount "nmm:albumTrackCount" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAlbumTrackCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::albumTrackCount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAlbumTrackCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_albumTrackCount "nmm:albumTrackCount" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAlbumTrackCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::albumTrackCount >(object_info, strategy, parent); }
				/*!
					\fn void setAlbumTrackCounts(LiveNodes const &albumTrackCount_)
					
					
					Sets the property \ref nmm_albumTrackCount "nmm:albumTrackCount" set to the given \a albumTrackCount_ set.
					\sa LiveResource::setObjects
				 */
				void setAlbumTrackCounts(LiveNodes const &albumTrackCount_) { baseSetObjects(nmm::albumTrackCount::iri(), albumTrackCount_); }
				/*!
					\fn void removeAlbumTrackCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_albumTrackCount "nmm:albumTrackCount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAlbumTrackCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::albumTrackCount::iri(), object_info); }
				/*!
					\fn qint64 getAlbumTrackCount()
					
					
					Returns the property \ref nmm_albumTrackCount "nmm:albumTrackCount". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getAlbumTrackCount() { return baseGetObject< nmm::albumTrackCount >(); }
				/*!
					\fn void setAlbumTrackCount(qint64 const &albumTrackCount_)
					
					
					Sets the property \ref nmm_albumTrackCount "nmm:albumTrackCount" to the given \a albumTrackCount.
					\sa LiveResource::setObject
				 */
				void setAlbumTrackCount(qint64 const &albumTrackCount_) { baseSetObject< nmm::albumTrackCount >( albumTrackCount_ ); }
				/*!
					\fn qint64 firstAlbumTrackCount()
					
					
					Returns the first property \ref nmm_albumTrackCount "nmm:albumTrackCount". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstAlbumTrackCount() { return baseFirstObject< nmm::albumTrackCount >(); }
				/*!
					\fn void addAlbumTrackCount(qint64 const &albumTrackCount_)
					
					
					Adds the given \a albumTrackCount_ to the property \ref nmm_albumTrackCount "nmm:albumTrackCount" set.
					\sa LiveResource::addObject
				 */
				void addAlbumTrackCount(qint64 const &albumTrackCount_) { baseAddObject< nmm::albumTrackCount >( albumTrackCount_ ); }
				/*!
					\fn void removeAlbumTrackCount(qint64 const &albumTrackCount_)
					
					
					Removes the given \a albumTrackCount_ from the property \ref nmm_albumTrackCount "nmm:albumTrackCount" set.
					\sa LiveResource::removeObject
				 */
				void removeAlbumTrackCount(qint64 const &albumTrackCount_) { baseRemoveObject< nmm::albumTrackCount >(albumTrackCount_); }

				/* Property generated from nmm:albumGain
				 * \n Gain of album
				 * \n rdfs:label=Gain
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:MusicAlbum
				 * \n tracker:modified=1267
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAlbumGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_albumGain "nmm:albumGain" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAlbumGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::albumGain >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAlbumGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_albumGain "nmm:albumGain" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAlbumGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::albumGain >(object_info, strategy, parent); }
				/*!
					\fn void setAlbumGains(LiveNodes const &albumGain_)
					
					
					Sets the property \ref nmm_albumGain "nmm:albumGain" set to the given \a albumGain_ set.
					\sa LiveResource::setObjects
				 */
				void setAlbumGains(LiveNodes const &albumGain_) { baseSetObjects(nmm::albumGain::iri(), albumGain_); }
				/*!
					\fn void removeAlbumGains(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_albumGain "nmm:albumGain" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAlbumGains(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::albumGain::iri(), object_info); }
				/*!
					\fn qint64 getAlbumGain()
					
					
					Returns the property \ref nmm_albumGain "nmm:albumGain". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getAlbumGain() { return baseGetObject< nmm::albumGain >(); }
				/*!
					\fn void setAlbumGain(qint64 const &albumGain_)
					
					
					Sets the property \ref nmm_albumGain "nmm:albumGain" to the given \a albumGain.
					\sa LiveResource::setObject
				 */
				void setAlbumGain(qint64 const &albumGain_) { baseSetObject< nmm::albumGain >( albumGain_ ); }
				/*!
					\fn qint64 firstAlbumGain()
					
					
					Returns the first property \ref nmm_albumGain "nmm:albumGain". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstAlbumGain() { return baseFirstObject< nmm::albumGain >(); }
				/*!
					\fn void addAlbumGain(qint64 const &albumGain_)
					
					
					Adds the given \a albumGain_ to the property \ref nmm_albumGain "nmm:albumGain" set.
					\sa LiveResource::addObject
				 */
				void addAlbumGain(qint64 const &albumGain_) { baseAddObject< nmm::albumGain >( albumGain_ ); }
				/*!
					\fn void removeAlbumGain(qint64 const &albumGain_)
					
					
					Removes the given \a albumGain_ from the property \ref nmm_albumGain "nmm:albumGain" set.
					\sa LiveResource::removeObject
				 */
				void removeAlbumGain(qint64 const &albumGain_) { baseRemoveObject< nmm::albumGain >(albumGain_); }

				/* Property generated from nmm:albumArtist
				 * \n main artists of the album
				 * \n rdfs:label=artist
				 * \n rdfs:range=nmm:Artist
				 * \n rdfs:domain=nmm:MusicAlbum
				 * \n tracker:weight=6
				 * \n tracker:modified=1978
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAlbumArtists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_albumArtist "nmm:albumArtist" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAlbumArtists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::albumArtist >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAlbumArtists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_albumArtist "nmm:albumArtist" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAlbumArtists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::albumArtist >(object_info, strategy, parent); }
				/*!
					\fn void setAlbumArtists(LiveNodes const &albumArtist_)
					
					
					Sets the property \ref nmm_albumArtist "nmm:albumArtist" set to the given \a albumArtist_ set.
					\sa LiveResource::setObjects
				 */
				void setAlbumArtists(LiveNodes const &albumArtist_) { baseSetObjects(nmm::albumArtist::iri(), albumArtist_); }
				/*!
					\fn void removeAlbumArtists(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_albumArtist "nmm:albumArtist" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAlbumArtists(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::albumArtist::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Artist > firstAlbumArtist()
					
					
					Returns the first property \ref nmm_albumArtist "nmm:albumArtist". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Artist > firstAlbumArtist() { return baseFirstObject< nmm::albumArtist >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addAlbumArtist()
					
					
					Adds a new uniquely named resource to the property \ref nmm_albumArtist "nmm:albumArtist" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addAlbumArtist() { return baseAddObject< nmm::albumArtist >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addAlbumArtist(::SopranoLive::Live< Artist > const &albumArtist_)
					
					
					Adds the given \a albumArtist_ to the property \ref nmm_albumArtist "nmm:albumArtist" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addAlbumArtist(::SopranoLive::Live< Artist > const &albumArtist_) { return baseAddObject< nmm::albumArtist >( albumArtist_ ); }
				/*!
					\fn void removeAlbumArtist(::SopranoLive::Live< Artist > const &albumArtist_)
					
					
					Removes the given \a albumArtist_ from the property \ref nmm_albumArtist "nmm:albumArtist" set.
					\sa LiveResource::removeObject
				 */
				void removeAlbumArtist(::SopranoLive::Live< Artist > const &albumArtist_) { baseRemoveObject< nmm::albumArtist >(albumArtist_); }

				/* Property generated from nmm:setNumber
				 * \n Disk number of album
				 * \n rdfs:label=Disk number
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:MusicAlbum
				 * \n tracker:modified=1405
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSetNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_setNumber "nmm:setNumber" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSetNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::setNumber >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSetNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_setNumber "nmm:setNumber" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSetNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::setNumber >(object_info, strategy, parent); }
				/*!
					\fn void setSetNumbers(LiveNodes const &setNumber_)
					
					
					Sets the property \ref nmm_setNumber "nmm:setNumber" set to the given \a setNumber_ set.
					\sa LiveResource::setObjects
				 */
				void setSetNumbers(LiveNodes const &setNumber_) { baseSetObjects(nmm::setNumber::iri(), setNumber_); }
				/*!
					\fn void removeSetNumbers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_setNumber "nmm:setNumber" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSetNumbers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::setNumber::iri(), object_info); }
				/*!
					\fn qint64 getSetNumber()
					
					
					Returns the property \ref nmm_setNumber "nmm:setNumber". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getSetNumber() { return baseGetObject< nmm::setNumber >(); }
				/*!
					\fn void setSetNumber(qint64 const &setNumber_)
					
					
					Sets the property \ref nmm_setNumber "nmm:setNumber" to the given \a setNumber.
					\sa LiveResource::setObject
				 */
				void setSetNumber(qint64 const &setNumber_) { baseSetObject< nmm::setNumber >( setNumber_ ); }
				/*!
					\fn qint64 firstSetNumber()
					
					
					Returns the first property \ref nmm_setNumber "nmm:setNumber". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstSetNumber() { return baseFirstObject< nmm::setNumber >(); }
				/*!
					\fn void addSetNumber(qint64 const &setNumber_)
					
					
					Adds the given \a setNumber_ to the property \ref nmm_setNumber "nmm:setNumber" set.
					\sa LiveResource::addObject
				 */
				void addSetNumber(qint64 const &setNumber_) { baseAddObject< nmm::setNumber >( setNumber_ ); }
				/*!
					\fn void removeSetNumber(qint64 const &setNumber_)
					
					
					Removes the given \a setNumber_ from the property \ref nmm_setNumber "nmm:setNumber" set.
					\sa LiveResource::removeObject
				 */
				void removeSetNumber(qint64 const &setNumber_) { baseRemoveObject< nmm::setNumber >(setNumber_); }

				/* Property generated from nmm:albumPeakGain
				 * \n Peak Gain of album
				 * \n rdfs:label=Peak Gain
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:MusicAlbum
				 * \n tracker:modified=1947
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAlbumPeakGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_albumPeakGain "nmm:albumPeakGain" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAlbumPeakGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::albumPeakGain >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAlbumPeakGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_albumPeakGain "nmm:albumPeakGain" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAlbumPeakGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::albumPeakGain >(object_info, strategy, parent); }
				/*!
					\fn void setAlbumPeakGains(LiveNodes const &albumPeakGain_)
					
					
					Sets the property \ref nmm_albumPeakGain "nmm:albumPeakGain" set to the given \a albumPeakGain_ set.
					\sa LiveResource::setObjects
				 */
				void setAlbumPeakGains(LiveNodes const &albumPeakGain_) { baseSetObjects(nmm::albumPeakGain::iri(), albumPeakGain_); }
				/*!
					\fn void removeAlbumPeakGains(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_albumPeakGain "nmm:albumPeakGain" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAlbumPeakGains(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::albumPeakGain::iri(), object_info); }
				/*!
					\fn qint64 getAlbumPeakGain()
					
					
					Returns the property \ref nmm_albumPeakGain "nmm:albumPeakGain". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getAlbumPeakGain() { return baseGetObject< nmm::albumPeakGain >(); }
				/*!
					\fn void setAlbumPeakGain(qint64 const &albumPeakGain_)
					
					
					Sets the property \ref nmm_albumPeakGain "nmm:albumPeakGain" to the given \a albumPeakGain.
					\sa LiveResource::setObject
				 */
				void setAlbumPeakGain(qint64 const &albumPeakGain_) { baseSetObject< nmm::albumPeakGain >( albumPeakGain_ ); }
				/*!
					\fn qint64 firstAlbumPeakGain()
					
					
					Returns the first property \ref nmm_albumPeakGain "nmm:albumPeakGain". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstAlbumPeakGain() { return baseFirstObject< nmm::albumPeakGain >(); }
				/*!
					\fn void addAlbumPeakGain(qint64 const &albumPeakGain_)
					
					
					Adds the given \a albumPeakGain_ to the property \ref nmm_albumPeakGain "nmm:albumPeakGain" set.
					\sa LiveResource::addObject
				 */
				void addAlbumPeakGain(qint64 const &albumPeakGain_) { baseAddObject< nmm::albumPeakGain >( albumPeakGain_ ); }
				/*!
					\fn void removeAlbumPeakGain(qint64 const &albumPeakGain_)
					
					
					Removes the given \a albumPeakGain_ from the property \ref nmm_albumPeakGain "nmm:albumPeakGain" set.
					\sa LiveResource::removeObject
				 */
				void removeAlbumPeakGain(qint64 const &albumPeakGain_) { baseRemoveObject< nmm::albumPeakGain >(albumPeakGain_); }
				 //@}
			};

			/*! Class generated from nmm:MusicPiece
			 * \ingroup onto_nmm_classes
			 * 
			 * rdfs:label = Music
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1737
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 * 
			 * tracker:domainIndex = Unknown text
			 */
			class MusicPiece
				: public virtual nfo::Media

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#MusicPiece"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::Media, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MusicPiece> Live;
				MusicPiece() { this->attachInterfaceHelper< MusicPiece >(); }
				~MusicPiece() { this->detachInterfaceHelper< MusicPiece >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmm:lyricist
				 * \n Lyricist
				 * \n rdfs:label=Lyricist
				 * \n rdfs:subPropertyOf=nco:contributor
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmm:Artist
				 * \n rdfs:domain=nmm:MusicPiece
				 * \n tracker:weight=4
				 * \n tracker:modified=1857
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLyricists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_lyricist "nmm:lyricist" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLyricists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::lyricist >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLyricists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_lyricist "nmm:lyricist" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLyricists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::lyricist >(object_info, strategy, parent); }
				/*!
					\fn void setLyricists(LiveNodes const &lyricist_)
					
					
					Sets the property \ref nmm_lyricist "nmm:lyricist" set to the given \a lyricist_ set.
					\sa LiveResource::setObjects
				 */
				void setLyricists(LiveNodes const &lyricist_) { baseSetObjects(nmm::lyricist::iri(), lyricist_); }
				/*!
					\fn void removeLyricists(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_lyricist "nmm:lyricist" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLyricists(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::lyricist::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Artist > getLyricist()
					
					
					Returns the property \ref nmm_lyricist "nmm:lyricist". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Artist > getLyricist() { return baseGetObject< nmm::lyricist >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > setLyricist(::SopranoLive::Live< Artist > const &lyricist_)
					
					
					Sets the property \ref nmm_lyricist "nmm:lyricist" to the given \a lyricist.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Artist > setLyricist(::SopranoLive::Live< Artist > const &lyricist_) { return baseSetObject< nmm::lyricist >( lyricist_ ); }
				/*!
					\fn ::SopranoLive::Live< Artist > firstLyricist()
					
					
					Returns the first property \ref nmm_lyricist "nmm:lyricist". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Artist > firstLyricist() { return baseFirstObject< nmm::lyricist >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addLyricist()
					
					
					Adds a new uniquely named resource to the property \ref nmm_lyricist "nmm:lyricist" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addLyricist() { return baseAddObject< nmm::lyricist >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addLyricist(::SopranoLive::Live< Artist > const &lyricist_)
					
					
					Adds the given \a lyricist_ to the property \ref nmm_lyricist "nmm:lyricist" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addLyricist(::SopranoLive::Live< Artist > const &lyricist_) { return baseAddObject< nmm::lyricist >( lyricist_ ); }
				/*!
					\fn void removeLyricist(::SopranoLive::Live< Artist > const &lyricist_)
					
					
					Removes the given \a lyricist_ from the property \ref nmm_lyricist "nmm:lyricist" set.
					\sa LiveResource::removeObject
				 */
				void removeLyricist(::SopranoLive::Live< Artist > const &lyricist_) { baseRemoveObject< nmm::lyricist >(lyricist_); }

				/* Property generated from nmm:musicAlbum
				 * \n album the music belongs to
				 * \n rdfs:label=album
				 * \n rdfs:subPropertyOf=nie:isLogicalPartOf
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmm:MusicAlbum
				 * \n rdfs:domain=nmm:MusicPiece
				 * \n tracker:writeback=true
				 * \n tracker:weight=6
				 * \n tracker:indexed=true
				 * \n tracker:modified=1599
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMusicAlbums(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_musicAlbum "nmm:musicAlbum" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMusicAlbums(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::musicAlbum >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMusicAlbums(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_musicAlbum "nmm:musicAlbum" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMusicAlbums(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::musicAlbum >(object_info, strategy, parent); }
				/*!
					\fn void setMusicAlbums(LiveNodes const &musicAlbum_)
					
					
					Sets the property \ref nmm_musicAlbum "nmm:musicAlbum" set to the given \a musicAlbum_ set.
					\sa LiveResource::setObjects
				 */
				void setMusicAlbums(LiveNodes const &musicAlbum_) { baseSetObjects(nmm::musicAlbum::iri(), musicAlbum_); }
				/*!
					\fn void removeMusicAlbums(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_musicAlbum "nmm:musicAlbum" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMusicAlbums(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::musicAlbum::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< MusicAlbum > getMusicAlbum()
					
					
					Returns the property \ref nmm_musicAlbum "nmm:musicAlbum". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< MusicAlbum > getMusicAlbum() { return baseGetObject< nmm::musicAlbum >(); }
				/*!
					\fn ::SopranoLive::Live< MusicAlbum > setMusicAlbum(::SopranoLive::Live< MusicAlbum > const &musicAlbum_)
					
					
					Sets the property \ref nmm_musicAlbum "nmm:musicAlbum" to the given \a musicAlbum.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< MusicAlbum > setMusicAlbum(::SopranoLive::Live< MusicAlbum > const &musicAlbum_) { return baseSetObject< nmm::musicAlbum >( musicAlbum_ ); }
				/*!
					\fn ::SopranoLive::Live< MusicAlbum > firstMusicAlbum()
					
					
					Returns the first property \ref nmm_musicAlbum "nmm:musicAlbum". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< MusicAlbum > firstMusicAlbum() { return baseFirstObject< nmm::musicAlbum >(); }
				/*!
					\fn ::SopranoLive::Live< MusicAlbum > addMusicAlbum()
					
					
					Adds a new uniquely named resource to the property \ref nmm_musicAlbum "nmm:musicAlbum" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< MusicAlbum > addMusicAlbum() { return baseAddObject< nmm::musicAlbum >(); }
				/*!
					\fn ::SopranoLive::Live< MusicAlbum > addMusicAlbum(::SopranoLive::Live< MusicAlbum > const &musicAlbum_)
					
					
					Adds the given \a musicAlbum_ to the property \ref nmm_musicAlbum "nmm:musicAlbum" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< MusicAlbum > addMusicAlbum(::SopranoLive::Live< MusicAlbum > const &musicAlbum_) { return baseAddObject< nmm::musicAlbum >( musicAlbum_ ); }
				/*!
					\fn void removeMusicAlbum(::SopranoLive::Live< MusicAlbum > const &musicAlbum_)
					
					
					Removes the given \a musicAlbum_ from the property \ref nmm_musicAlbum "nmm:musicAlbum" set.
					\sa LiveResource::removeObject
				 */
				void removeMusicAlbum(::SopranoLive::Live< MusicAlbum > const &musicAlbum_) { baseRemoveObject< nmm::musicAlbum >(musicAlbum_); }

				/* Property generated from nmm:lyrics
				 * \n rdfs:range=nmm:SynchronizedText
				 * \n rdfs:label=File with the lyrics for the music piece
				 * \n tracker:modified=1676
				 * \n rdfs:domain=nmm:MusicPiece
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLyricss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_lyrics "nmm:lyrics" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLyricss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::lyrics >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLyricss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_lyrics "nmm:lyrics" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLyricss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::lyrics >(object_info, strategy, parent); }
				/*!
					\fn void setLyricss(LiveNodes const &lyrics_)
					
					
					Sets the property \ref nmm_lyrics "nmm:lyrics" set to the given \a lyrics_ set.
					\sa LiveResource::setObjects
				 */
				void setLyricss(LiveNodes const &lyrics_) { baseSetObjects(nmm::lyrics::iri(), lyrics_); }
				/*!
					\fn void removeLyricss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_lyrics "nmm:lyrics" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLyricss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::lyrics::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< SynchronizedText > firstLyrics()
					
					
					Returns the first property \ref nmm_lyrics "nmm:lyrics". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< SynchronizedText > firstLyrics() { return baseFirstObject< nmm::lyrics >(); }
				/*!
					\fn ::SopranoLive::Live< SynchronizedText > addLyrics()
					
					
					Adds a new uniquely named resource to the property \ref nmm_lyrics "nmm:lyrics" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< SynchronizedText > addLyrics() { return baseAddObject< nmm::lyrics >(); }
				/*!
					\fn ::SopranoLive::Live< SynchronizedText > addLyrics(::SopranoLive::Live< SynchronizedText > const &lyrics_)
					
					
					Adds the given \a lyrics_ to the property \ref nmm_lyrics "nmm:lyrics" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< SynchronizedText > addLyrics(::SopranoLive::Live< SynchronizedText > const &lyrics_) { return baseAddObject< nmm::lyrics >( lyrics_ ); }
				/*!
					\fn void removeLyrics(::SopranoLive::Live< SynchronizedText > const &lyrics_)
					
					
					Removes the given \a lyrics_ from the property \ref nmm_lyrics "nmm:lyrics" set.
					\sa LiveResource::removeObject
				 */
				void removeLyrics(::SopranoLive::Live< SynchronizedText > const &lyrics_) { baseRemoveObject< nmm::lyrics >(lyrics_); }

				/* Property generated from nmm:length
				 * \n Length or duration (in seconds)
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=Length
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:MusicPiece
				 * \n tracker:modified=1971
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLengths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmm::length for replacement
					Returns a live model of property \ref nmm_length "nmm:length" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveLengths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::length >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLengths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmm::length for replacement
					Returns all current values of property \ref nmm_length "nmm:length" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getLengths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::length >(object_info, strategy, parent); }
				/*!
					\fn void setLengths(LiveNodes const &length_)
					
					\deprecated See \ref nmm::length for replacement
					Sets the property \ref nmm_length "nmm:length" set to the given \a length_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setLengths(LiveNodes const &length_) { baseSetObjects(nmm::length::iri(), length_); }
				/*!
					\fn void removeLengths(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nmm::length for replacement
					Removes the properties from property \ref nmm_length "nmm:length" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeLengths(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::length::iri(), object_info); }
				/*!
					\fn qint64 getLength()
					
					\deprecated See \ref nmm::length for replacement
					Returns the property \ref nmm_length "nmm:length". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED qint64 getLength() { return baseGetObject< nmm::length >(); }
				/*!
					\fn void setLength(qint64 const &length_)
					
					\deprecated See \ref nmm::length for replacement
					Sets the property \ref nmm_length "nmm:length" to the given \a length.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED void setLength(qint64 const &length_) { baseSetObject< nmm::length >( length_ ); }
				/*!
					\fn qint64 firstLength()
					
					\deprecated See \ref nmm::length for replacement
					Returns the first property \ref nmm_length "nmm:length". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED qint64 firstLength() { return baseFirstObject< nmm::length >(); }
				/*!
					\fn void addLength(qint64 const &length_)
					
					\deprecated See \ref nmm::length for replacement
					Adds the given \a length_ to the property \ref nmm_length "nmm:length" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addLength(qint64 const &length_) { baseAddObject< nmm::length >( length_ ); }
				/*!
					\fn void removeLength(qint64 const &length_)
					
					\deprecated See \ref nmm::length for replacement
					Removes the given \a length_ from the property \ref nmm_length "nmm:length" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeLength(qint64 const &length_) { baseRemoveObject< nmm::length >(length_); }

				/* Property generated from nmm:composer
				 * \n Composer
				 * \n rdfs:label=Composer
				 * \n rdfs:subPropertyOf=nco:contributor
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmm:Artist
				 * \n rdfs:domain=nmm:MusicPiece
				 * \n tracker:weight=4
				 * \n tracker:modified=1459
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveComposers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_composer "nmm:composer" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveComposers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::composer >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getComposers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_composer "nmm:composer" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getComposers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::composer >(object_info, strategy, parent); }
				/*!
					\fn void setComposers(LiveNodes const &composer_)
					
					
					Sets the property \ref nmm_composer "nmm:composer" set to the given \a composer_ set.
					\sa LiveResource::setObjects
				 */
				void setComposers(LiveNodes const &composer_) { baseSetObjects(nmm::composer::iri(), composer_); }
				/*!
					\fn void removeComposers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_composer "nmm:composer" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeComposers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::composer::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Artist > getComposer()
					
					
					Returns the property \ref nmm_composer "nmm:composer". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Artist > getComposer() { return baseGetObject< nmm::composer >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > setComposer(::SopranoLive::Live< Artist > const &composer_)
					
					
					Sets the property \ref nmm_composer "nmm:composer" to the given \a composer.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Artist > setComposer(::SopranoLive::Live< Artist > const &composer_) { return baseSetObject< nmm::composer >( composer_ ); }
				/*!
					\fn ::SopranoLive::Live< Artist > firstComposer()
					
					
					Returns the first property \ref nmm_composer "nmm:composer". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Artist > firstComposer() { return baseFirstObject< nmm::composer >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addComposer()
					
					
					Adds a new uniquely named resource to the property \ref nmm_composer "nmm:composer" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addComposer() { return baseAddObject< nmm::composer >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addComposer(::SopranoLive::Live< Artist > const &composer_)
					
					
					Adds the given \a composer_ to the property \ref nmm_composer "nmm:composer" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addComposer(::SopranoLive::Live< Artist > const &composer_) { return baseAddObject< nmm::composer >( composer_ ); }
				/*!
					\fn void removeComposer(::SopranoLive::Live< Artist > const &composer_)
					
					
					Removes the given \a composer_ from the property \ref nmm_composer "nmm:composer" set.
					\sa LiveResource::removeObject
				 */
				void removeComposer(::SopranoLive::Live< Artist > const &composer_) { baseRemoveObject< nmm::composer >(composer_); }

				/* Property generated from nmm:trackNumber
				 * \n Track number of the music in its album
				 * \n rdfs:label=Track number
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:MusicPiece
				 * \n tracker:modified=1031
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTrackNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_trackNumber "nmm:trackNumber" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTrackNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::trackNumber >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTrackNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_trackNumber "nmm:trackNumber" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTrackNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::trackNumber >(object_info, strategy, parent); }
				/*!
					\fn void setTrackNumbers(LiveNodes const &trackNumber_)
					
					
					Sets the property \ref nmm_trackNumber "nmm:trackNumber" set to the given \a trackNumber_ set.
					\sa LiveResource::setObjects
				 */
				void setTrackNumbers(LiveNodes const &trackNumber_) { baseSetObjects(nmm::trackNumber::iri(), trackNumber_); }
				/*!
					\fn void removeTrackNumbers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_trackNumber "nmm:trackNumber" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTrackNumbers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::trackNumber::iri(), object_info); }
				/*!
					\fn qint64 getTrackNumber()
					
					
					Returns the property \ref nmm_trackNumber "nmm:trackNumber". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getTrackNumber() { return baseGetObject< nmm::trackNumber >(); }
				/*!
					\fn void setTrackNumber(qint64 const &trackNumber_)
					
					
					Sets the property \ref nmm_trackNumber "nmm:trackNumber" to the given \a trackNumber.
					\sa LiveResource::setObject
				 */
				void setTrackNumber(qint64 const &trackNumber_) { baseSetObject< nmm::trackNumber >( trackNumber_ ); }
				/*!
					\fn qint64 firstTrackNumber()
					
					
					Returns the first property \ref nmm_trackNumber "nmm:trackNumber". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstTrackNumber() { return baseFirstObject< nmm::trackNumber >(); }
				/*!
					\fn void addTrackNumber(qint64 const &trackNumber_)
					
					
					Adds the given \a trackNumber_ to the property \ref nmm_trackNumber "nmm:trackNumber" set.
					\sa LiveResource::addObject
				 */
				void addTrackNumber(qint64 const &trackNumber_) { baseAddObject< nmm::trackNumber >( trackNumber_ ); }
				/*!
					\fn void removeTrackNumber(qint64 const &trackNumber_)
					
					
					Removes the given \a trackNumber_ from the property \ref nmm_trackNumber "nmm:trackNumber" set.
					\sa LiveResource::removeObject
				 */
				void removeTrackNumber(qint64 const &trackNumber_) { baseRemoveObject< nmm::trackNumber >(trackNumber_); }

				/* Property generated from nmm:beatsPerMinute
				 * \n beats per minute
				 * \n rdfs:label=Beats per minute
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:MusicPiece
				 * \n tracker:modified=1511
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBeatsPerMinutes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_beatsPerMinute "nmm:beatsPerMinute" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBeatsPerMinutes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::beatsPerMinute >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBeatsPerMinutes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_beatsPerMinute "nmm:beatsPerMinute" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBeatsPerMinutes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::beatsPerMinute >(object_info, strategy, parent); }
				/*!
					\fn void setBeatsPerMinutes(LiveNodes const &beatsPerMinute_)
					
					
					Sets the property \ref nmm_beatsPerMinute "nmm:beatsPerMinute" set to the given \a beatsPerMinute_ set.
					\sa LiveResource::setObjects
				 */
				void setBeatsPerMinutes(LiveNodes const &beatsPerMinute_) { baseSetObjects(nmm::beatsPerMinute::iri(), beatsPerMinute_); }
				/*!
					\fn void removeBeatsPerMinutes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_beatsPerMinute "nmm:beatsPerMinute" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBeatsPerMinutes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::beatsPerMinute::iri(), object_info); }
				/*!
					\fn qint64 getBeatsPerMinute()
					
					
					Returns the property \ref nmm_beatsPerMinute "nmm:beatsPerMinute". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getBeatsPerMinute() { return baseGetObject< nmm::beatsPerMinute >(); }
				/*!
					\fn void setBeatsPerMinute(qint64 const &beatsPerMinute_)
					
					
					Sets the property \ref nmm_beatsPerMinute "nmm:beatsPerMinute" to the given \a beatsPerMinute.
					\sa LiveResource::setObject
				 */
				void setBeatsPerMinute(qint64 const &beatsPerMinute_) { baseSetObject< nmm::beatsPerMinute >( beatsPerMinute_ ); }
				/*!
					\fn qint64 firstBeatsPerMinute()
					
					
					Returns the first property \ref nmm_beatsPerMinute "nmm:beatsPerMinute". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstBeatsPerMinute() { return baseFirstObject< nmm::beatsPerMinute >(); }
				/*!
					\fn void addBeatsPerMinute(qint64 const &beatsPerMinute_)
					
					
					Adds the given \a beatsPerMinute_ to the property \ref nmm_beatsPerMinute "nmm:beatsPerMinute" set.
					\sa LiveResource::addObject
				 */
				void addBeatsPerMinute(qint64 const &beatsPerMinute_) { baseAddObject< nmm::beatsPerMinute >( beatsPerMinute_ ); }
				/*!
					\fn void removeBeatsPerMinute(qint64 const &beatsPerMinute_)
					
					
					Removes the given \a beatsPerMinute_ from the property \ref nmm_beatsPerMinute "nmm:beatsPerMinute" set.
					\sa LiveResource::removeObject
				 */
				void removeBeatsPerMinute(qint64 const &beatsPerMinute_) { baseRemoveObject< nmm::beatsPerMinute >(beatsPerMinute_); }

				/* Property generated from nmm:performer
				 * \n Performer
				 * \n rdfs:label=Performer
				 * \n rdfs:subPropertyOf=nco:contributor
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmm:Artist
				 * \n rdfs:domain=nmm:MusicPiece
				 * \n tracker:writeback=true
				 * \n tracker:weight=4
				 * \n tracker:indexed=true
				 * \n tracker:modified=1572
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePerformers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_performer "nmm:performer" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePerformers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::performer >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPerformers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_performer "nmm:performer" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPerformers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::performer >(object_info, strategy, parent); }
				/*!
					\fn void setPerformers(LiveNodes const &performer_)
					
					
					Sets the property \ref nmm_performer "nmm:performer" set to the given \a performer_ set.
					\sa LiveResource::setObjects
				 */
				void setPerformers(LiveNodes const &performer_) { baseSetObjects(nmm::performer::iri(), performer_); }
				/*!
					\fn void removePerformers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_performer "nmm:performer" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePerformers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::performer::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Artist > getPerformer()
					
					
					Returns the property \ref nmm_performer "nmm:performer". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Artist > getPerformer() { return baseGetObject< nmm::performer >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > setPerformer(::SopranoLive::Live< Artist > const &performer_)
					
					
					Sets the property \ref nmm_performer "nmm:performer" to the given \a performer.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Artist > setPerformer(::SopranoLive::Live< Artist > const &performer_) { return baseSetObject< nmm::performer >( performer_ ); }
				/*!
					\fn ::SopranoLive::Live< Artist > firstPerformer()
					
					
					Returns the first property \ref nmm_performer "nmm:performer". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Artist > firstPerformer() { return baseFirstObject< nmm::performer >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addPerformer()
					
					
					Adds a new uniquely named resource to the property \ref nmm_performer "nmm:performer" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addPerformer() { return baseAddObject< nmm::performer >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addPerformer(::SopranoLive::Live< Artist > const &performer_)
					
					
					Adds the given \a performer_ to the property \ref nmm_performer "nmm:performer" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addPerformer(::SopranoLive::Live< Artist > const &performer_) { return baseAddObject< nmm::performer >( performer_ ); }
				/*!
					\fn void removePerformer(::SopranoLive::Live< Artist > const &performer_)
					
					
					Removes the given \a performer_ from the property \ref nmm_performer "nmm:performer" set.
					\sa LiveResource::removeObject
				 */
				void removePerformer(::SopranoLive::Live< Artist > const &performer_) { baseRemoveObject< nmm::performer >(performer_); }
				 //@}
			};

			/*! Class generated from nmm:Photo
			 * \ingroup onto_nmm_classes
			 * A photo
			 * 
			 * rdfs:label = Photo
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1159
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Photo
				: public virtual nfo::Image

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#Photo"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::Image, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Photo> Live;
				Photo() { this->attachInterfaceHelper< Photo >(); }
				~Photo() { this->detachInterfaceHelper< Photo >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmm:whiteBalance
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmm:WhiteBalance
				 * \n rdfs:domain=nmm:Photo
				 * \n tracker:writeback=true
				 * \n tracker:modified=1007
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveWhiteBalances(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_whiteBalance "nmm:whiteBalance" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveWhiteBalances(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::whiteBalance >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getWhiteBalances(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_whiteBalance "nmm:whiteBalance" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getWhiteBalances(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::whiteBalance >(object_info, strategy, parent); }
				/*!
					\fn void setWhiteBalances(LiveNodes const &whiteBalance_)
					
					
					Sets the property \ref nmm_whiteBalance "nmm:whiteBalance" set to the given \a whiteBalance_ set.
					\sa LiveResource::setObjects
				 */
				void setWhiteBalances(LiveNodes const &whiteBalance_) { baseSetObjects(nmm::whiteBalance::iri(), whiteBalance_); }
				/*!
					\fn void removeWhiteBalances(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_whiteBalance "nmm:whiteBalance" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeWhiteBalances(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::whiteBalance::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< WhiteBalance > getWhiteBalance()
					
					
					Returns the property \ref nmm_whiteBalance "nmm:whiteBalance". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< WhiteBalance > getWhiteBalance() { return baseGetObject< nmm::whiteBalance >(); }
				/*!
					\fn ::SopranoLive::Live< WhiteBalance > setWhiteBalance(::SopranoLive::Live< WhiteBalance > const &whiteBalance_)
					
					
					Sets the property \ref nmm_whiteBalance "nmm:whiteBalance" to the given \a whiteBalance.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< WhiteBalance > setWhiteBalance(::SopranoLive::Live< WhiteBalance > const &whiteBalance_) { return baseSetObject< nmm::whiteBalance >( whiteBalance_ ); }
				/*!
					\fn ::SopranoLive::Live< WhiteBalance > firstWhiteBalance()
					
					
					Returns the first property \ref nmm_whiteBalance "nmm:whiteBalance". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< WhiteBalance > firstWhiteBalance() { return baseFirstObject< nmm::whiteBalance >(); }
				/*!
					\fn ::SopranoLive::Live< WhiteBalance > addWhiteBalance()
					
					
					Adds a new uniquely named resource to the property \ref nmm_whiteBalance "nmm:whiteBalance" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< WhiteBalance > addWhiteBalance() { return baseAddObject< nmm::whiteBalance >(); }
				/*!
					\fn ::SopranoLive::Live< WhiteBalance > addWhiteBalance(::SopranoLive::Live< WhiteBalance > const &whiteBalance_)
					
					
					Adds the given \a whiteBalance_ to the property \ref nmm_whiteBalance "nmm:whiteBalance" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< WhiteBalance > addWhiteBalance(::SopranoLive::Live< WhiteBalance > const &whiteBalance_) { return baseAddObject< nmm::whiteBalance >( whiteBalance_ ); }
				/*!
					\fn void removeWhiteBalance(::SopranoLive::Live< WhiteBalance > const &whiteBalance_)
					
					
					Removes the given \a whiteBalance_ from the property \ref nmm_whiteBalance "nmm:whiteBalance" set.
					\sa LiveResource::removeObject
				 */
				void removeWhiteBalance(::SopranoLive::Live< WhiteBalance > const &whiteBalance_) { baseRemoveObject< nmm::whiteBalance >(whiteBalance_); }

				/* Property generated from nmm:isoSpeed
				 * \n Measure of a photographic film's sensitivity to light as ISO value
				 * \n rdfs:label=ISO speed
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nmm:Photo
				 * \n tracker:writeback=true
				 * \n tracker:modified=1805
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveIsoSpeeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_isoSpeed "nmm:isoSpeed" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsoSpeeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::isoSpeed >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsoSpeeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_isoSpeed "nmm:isoSpeed" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsoSpeeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::isoSpeed >(object_info, strategy, parent); }
				/*!
					\fn void setIsoSpeeds(LiveNodes const &isoSpeed_)
					
					
					Sets the property \ref nmm_isoSpeed "nmm:isoSpeed" set to the given \a isoSpeed_ set.
					\sa LiveResource::setObjects
				 */
				void setIsoSpeeds(LiveNodes const &isoSpeed_) { baseSetObjects(nmm::isoSpeed::iri(), isoSpeed_); }
				/*!
					\fn void removeIsoSpeeds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_isoSpeed "nmm:isoSpeed" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsoSpeeds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::isoSpeed::iri(), object_info); }
				/*!
					\fn double getIsoSpeed()
					
					
					Returns the property \ref nmm_isoSpeed "nmm:isoSpeed". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getIsoSpeed() { return baseGetObject< nmm::isoSpeed >(); }
				/*!
					\fn void setIsoSpeed(double const &isoSpeed_)
					
					
					Sets the property \ref nmm_isoSpeed "nmm:isoSpeed" to the given \a isoSpeed.
					\sa LiveResource::setObject
				 */
				void setIsoSpeed(double const &isoSpeed_) { baseSetObject< nmm::isoSpeed >( isoSpeed_ ); }
				/*!
					\fn double firstIsoSpeed()
					
					
					Returns the first property \ref nmm_isoSpeed "nmm:isoSpeed". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstIsoSpeed() { return baseFirstObject< nmm::isoSpeed >(); }
				/*!
					\fn void addIsoSpeed(double const &isoSpeed_)
					
					
					Adds the given \a isoSpeed_ to the property \ref nmm_isoSpeed "nmm:isoSpeed" set.
					\sa LiveResource::addObject
				 */
				void addIsoSpeed(double const &isoSpeed_) { baseAddObject< nmm::isoSpeed >( isoSpeed_ ); }
				/*!
					\fn void removeIsoSpeed(double const &isoSpeed_)
					
					
					Removes the given \a isoSpeed_ from the property \ref nmm_isoSpeed "nmm:isoSpeed" set.
					\sa LiveResource::removeObject
				 */
				void removeIsoSpeed(double const &isoSpeed_) { baseRemoveObject< nmm::isoSpeed >(isoSpeed_); }

				/* Property generated from nmm:fnumber
				 * \n The diameter of the entrance pupil in terms of the focal length of the lens
				 * \n rdfs:label=F number
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nmm:Photo
				 * \n tracker:writeback=true
				 * \n tracker:modified=1147
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFnumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_fnumber "nmm:fnumber" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFnumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::fnumber >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFnumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_fnumber "nmm:fnumber" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFnumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::fnumber >(object_info, strategy, parent); }
				/*!
					\fn void setFnumbers(LiveNodes const &fnumber_)
					
					
					Sets the property \ref nmm_fnumber "nmm:fnumber" set to the given \a fnumber_ set.
					\sa LiveResource::setObjects
				 */
				void setFnumbers(LiveNodes const &fnumber_) { baseSetObjects(nmm::fnumber::iri(), fnumber_); }
				/*!
					\fn void removeFnumbers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_fnumber "nmm:fnumber" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFnumbers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::fnumber::iri(), object_info); }
				/*!
					\fn double getFnumber()
					
					
					Returns the property \ref nmm_fnumber "nmm:fnumber". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getFnumber() { return baseGetObject< nmm::fnumber >(); }
				/*!
					\fn void setFnumber(double const &fnumber_)
					
					
					Sets the property \ref nmm_fnumber "nmm:fnumber" to the given \a fnumber.
					\sa LiveResource::setObject
				 */
				void setFnumber(double const &fnumber_) { baseSetObject< nmm::fnumber >( fnumber_ ); }
				/*!
					\fn double firstFnumber()
					
					
					Returns the first property \ref nmm_fnumber "nmm:fnumber". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstFnumber() { return baseFirstObject< nmm::fnumber >(); }
				/*!
					\fn void addFnumber(double const &fnumber_)
					
					
					Adds the given \a fnumber_ to the property \ref nmm_fnumber "nmm:fnumber" set.
					\sa LiveResource::addObject
				 */
				void addFnumber(double const &fnumber_) { baseAddObject< nmm::fnumber >( fnumber_ ); }
				/*!
					\fn void removeFnumber(double const &fnumber_)
					
					
					Removes the given \a fnumber_ from the property \ref nmm_fnumber "nmm:fnumber" set.
					\sa LiveResource::removeObject
				 */
				void removeFnumber(double const &fnumber_) { baseRemoveObject< nmm::fnumber >(fnumber_); }

				/* Property generated from nmm:flash
				 * \n Specifies whether flash was used
				 * \n rdfs:label=Flash
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmm:Flash
				 * \n rdfs:domain=nmm:Photo
				 * \n tracker:writeback=true
				 * \n tracker:modified=1435
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFlashs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_flash "nmm:flash" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFlashs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::flash >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFlashs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_flash "nmm:flash" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFlashs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::flash >(object_info, strategy, parent); }
				/*!
					\fn void setFlashs(LiveNodes const &flash_)
					
					
					Sets the property \ref nmm_flash "nmm:flash" set to the given \a flash_ set.
					\sa LiveResource::setObjects
				 */
				void setFlashs(LiveNodes const &flash_) { baseSetObjects(nmm::flash::iri(), flash_); }
				/*!
					\fn void removeFlashs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_flash "nmm:flash" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFlashs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::flash::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Flash > getFlash()
					
					
					Returns the property \ref nmm_flash "nmm:flash". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Flash > getFlash() { return baseGetObject< nmm::flash >(); }
				/*!
					\fn ::SopranoLive::Live< Flash > setFlash(::SopranoLive::Live< Flash > const &flash_)
					
					
					Sets the property \ref nmm_flash "nmm:flash" to the given \a flash.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Flash > setFlash(::SopranoLive::Live< Flash > const &flash_) { return baseSetObject< nmm::flash >( flash_ ); }
				/*!
					\fn ::SopranoLive::Live< Flash > firstFlash()
					
					
					Returns the first property \ref nmm_flash "nmm:flash". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Flash > firstFlash() { return baseFirstObject< nmm::flash >(); }
				/*!
					\fn ::SopranoLive::Live< Flash > addFlash()
					
					
					Adds a new uniquely named resource to the property \ref nmm_flash "nmm:flash" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Flash > addFlash() { return baseAddObject< nmm::flash >(); }
				/*!
					\fn ::SopranoLive::Live< Flash > addFlash(::SopranoLive::Live< Flash > const &flash_)
					
					
					Adds the given \a flash_ to the property \ref nmm_flash "nmm:flash" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Flash > addFlash(::SopranoLive::Live< Flash > const &flash_) { return baseAddObject< nmm::flash >( flash_ ); }
				/*!
					\fn void removeFlash(::SopranoLive::Live< Flash > const &flash_)
					
					
					Removes the given \a flash_ from the property \ref nmm_flash "nmm:flash" set.
					\sa LiveResource::removeObject
				 */
				void removeFlash(::SopranoLive::Live< Flash > const &flash_) { baseRemoveObject< nmm::flash >(flash_); }

				/* Property generated from nmm:meteringMode
				 * \n Metering mode refers to the way in which a camera determines the exposure.
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmm:MeteringMode
				 * \n rdfs:domain=nmm:Photo
				 * \n tracker:writeback=true
				 * \n tracker:modified=1495
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMeteringModes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_meteringMode "nmm:meteringMode" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMeteringModes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::meteringMode >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMeteringModes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_meteringMode "nmm:meteringMode" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMeteringModes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::meteringMode >(object_info, strategy, parent); }
				/*!
					\fn void setMeteringModes(LiveNodes const &meteringMode_)
					
					
					Sets the property \ref nmm_meteringMode "nmm:meteringMode" set to the given \a meteringMode_ set.
					\sa LiveResource::setObjects
				 */
				void setMeteringModes(LiveNodes const &meteringMode_) { baseSetObjects(nmm::meteringMode::iri(), meteringMode_); }
				/*!
					\fn void removeMeteringModes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_meteringMode "nmm:meteringMode" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMeteringModes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::meteringMode::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< MeteringMode > getMeteringMode()
					
					
					Returns the property \ref nmm_meteringMode "nmm:meteringMode". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< MeteringMode > getMeteringMode() { return baseGetObject< nmm::meteringMode >(); }
				/*!
					\fn ::SopranoLive::Live< MeteringMode > setMeteringMode(::SopranoLive::Live< MeteringMode > const &meteringMode_)
					
					
					Sets the property \ref nmm_meteringMode "nmm:meteringMode" to the given \a meteringMode.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< MeteringMode > setMeteringMode(::SopranoLive::Live< MeteringMode > const &meteringMode_) { return baseSetObject< nmm::meteringMode >( meteringMode_ ); }
				/*!
					\fn ::SopranoLive::Live< MeteringMode > firstMeteringMode()
					
					
					Returns the first property \ref nmm_meteringMode "nmm:meteringMode". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< MeteringMode > firstMeteringMode() { return baseFirstObject< nmm::meteringMode >(); }
				/*!
					\fn ::SopranoLive::Live< MeteringMode > addMeteringMode()
					
					
					Adds a new uniquely named resource to the property \ref nmm_meteringMode "nmm:meteringMode" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< MeteringMode > addMeteringMode() { return baseAddObject< nmm::meteringMode >(); }
				/*!
					\fn ::SopranoLive::Live< MeteringMode > addMeteringMode(::SopranoLive::Live< MeteringMode > const &meteringMode_)
					
					
					Adds the given \a meteringMode_ to the property \ref nmm_meteringMode "nmm:meteringMode" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< MeteringMode > addMeteringMode(::SopranoLive::Live< MeteringMode > const &meteringMode_) { return baseAddObject< nmm::meteringMode >( meteringMode_ ); }
				/*!
					\fn void removeMeteringMode(::SopranoLive::Live< MeteringMode > const &meteringMode_)
					
					
					Removes the given \a meteringMode_ from the property \ref nmm_meteringMode "nmm:meteringMode" set.
					\sa LiveResource::removeObject
				 */
				void removeMeteringMode(::SopranoLive::Live< MeteringMode > const &meteringMode_) { baseRemoveObject< nmm::meteringMode >(meteringMode_); }

				/* Property generated from nmm:exposureTime
				 * \n Exposure time of the photo
				 * \n rdfs:label=Exposure time
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nmm:Photo
				 * \n tracker:writeback=true
				 * \n tracker:modified=1069
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveExposureTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_exposureTime "nmm:exposureTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveExposureTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::exposureTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getExposureTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_exposureTime "nmm:exposureTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getExposureTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::exposureTime >(object_info, strategy, parent); }
				/*!
					\fn void setExposureTimes(LiveNodes const &exposureTime_)
					
					
					Sets the property \ref nmm_exposureTime "nmm:exposureTime" set to the given \a exposureTime_ set.
					\sa LiveResource::setObjects
				 */
				void setExposureTimes(LiveNodes const &exposureTime_) { baseSetObjects(nmm::exposureTime::iri(), exposureTime_); }
				/*!
					\fn void removeExposureTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_exposureTime "nmm:exposureTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeExposureTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::exposureTime::iri(), object_info); }
				/*!
					\fn double getExposureTime()
					
					
					Returns the property \ref nmm_exposureTime "nmm:exposureTime". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getExposureTime() { return baseGetObject< nmm::exposureTime >(); }
				/*!
					\fn void setExposureTime(double const &exposureTime_)
					
					
					Sets the property \ref nmm_exposureTime "nmm:exposureTime" to the given \a exposureTime.
					\sa LiveResource::setObject
				 */
				void setExposureTime(double const &exposureTime_) { baseSetObject< nmm::exposureTime >( exposureTime_ ); }
				/*!
					\fn double firstExposureTime()
					
					
					Returns the first property \ref nmm_exposureTime "nmm:exposureTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstExposureTime() { return baseFirstObject< nmm::exposureTime >(); }
				/*!
					\fn void addExposureTime(double const &exposureTime_)
					
					
					Adds the given \a exposureTime_ to the property \ref nmm_exposureTime "nmm:exposureTime" set.
					\sa LiveResource::addObject
				 */
				void addExposureTime(double const &exposureTime_) { baseAddObject< nmm::exposureTime >( exposureTime_ ); }
				/*!
					\fn void removeExposureTime(double const &exposureTime_)
					
					
					Removes the given \a exposureTime_ from the property \ref nmm_exposureTime "nmm:exposureTime" set.
					\sa LiveResource::removeObject
				 */
				void removeExposureTime(double const &exposureTime_) { baseRemoveObject< nmm::exposureTime >(exposureTime_); }

				/* Property generated from nmm:isColorCorrected
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1530
				 * \n rdfs:domain=nmm:Photo
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsColorCorrecteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_isColorCorrected "nmm:isColorCorrected" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsColorCorrecteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::isColorCorrected >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsColorCorrecteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_isColorCorrected "nmm:isColorCorrected" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsColorCorrecteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::isColorCorrected >(object_info, strategy, parent); }
				/*!
					\fn void setIsColorCorrecteds(LiveNodes const &isColorCorrected_)
					
					
					Sets the property \ref nmm_isColorCorrected "nmm:isColorCorrected" set to the given \a isColorCorrected_ set.
					\sa LiveResource::setObjects
				 */
				void setIsColorCorrecteds(LiveNodes const &isColorCorrected_) { baseSetObjects(nmm::isColorCorrected::iri(), isColorCorrected_); }
				/*!
					\fn void removeIsColorCorrecteds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_isColorCorrected "nmm:isColorCorrected" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsColorCorrecteds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::isColorCorrected::iri(), object_info); }
				/*!
					\fn bool getIsColorCorrected()
					
					
					Returns the property \ref nmm_isColorCorrected "nmm:isColorCorrected". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsColorCorrected() { return baseGetObject< nmm::isColorCorrected >(); }
				/*!
					\fn void setIsColorCorrected(bool const &isColorCorrected_)
					
					
					Sets the property \ref nmm_isColorCorrected "nmm:isColorCorrected" to the given \a isColorCorrected.
					\sa LiveResource::setObject
				 */
				void setIsColorCorrected(bool const &isColorCorrected_) { baseSetObject< nmm::isColorCorrected >( isColorCorrected_ ); }
				/*!
					\fn bool firstIsColorCorrected()
					
					
					Returns the first property \ref nmm_isColorCorrected "nmm:isColorCorrected". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsColorCorrected() { return baseFirstObject< nmm::isColorCorrected >(); }
				/*!
					\fn void addIsColorCorrected(bool const &isColorCorrected_)
					
					
					Adds the given \a isColorCorrected_ to the property \ref nmm_isColorCorrected "nmm:isColorCorrected" set.
					\sa LiveResource::addObject
				 */
				void addIsColorCorrected(bool const &isColorCorrected_) { baseAddObject< nmm::isColorCorrected >( isColorCorrected_ ); }
				/*!
					\fn void removeIsColorCorrected(bool const &isColorCorrected_)
					
					
					Removes the given \a isColorCorrected_ from the property \ref nmm_isColorCorrected "nmm:isColorCorrected" set.
					\sa LiveResource::removeObject
				 */
				void removeIsColorCorrected(bool const &isColorCorrected_) { baseRemoveObject< nmm::isColorCorrected >(isColorCorrected_); }

				/* Property generated from nmm:focalLength
				 * \n A measure of how strongly the lens converges light
				 * \n rdfs:label=Focal length
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nmm:Photo
				 * \n tracker:writeback=true
				 * \n tracker:modified=1205
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFocalLengths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_focalLength "nmm:focalLength" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFocalLengths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::focalLength >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFocalLengths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_focalLength "nmm:focalLength" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFocalLengths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::focalLength >(object_info, strategy, parent); }
				/*!
					\fn void setFocalLengths(LiveNodes const &focalLength_)
					
					
					Sets the property \ref nmm_focalLength "nmm:focalLength" set to the given \a focalLength_ set.
					\sa LiveResource::setObjects
				 */
				void setFocalLengths(LiveNodes const &focalLength_) { baseSetObjects(nmm::focalLength::iri(), focalLength_); }
				/*!
					\fn void removeFocalLengths(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_focalLength "nmm:focalLength" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFocalLengths(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::focalLength::iri(), object_info); }
				/*!
					\fn double getFocalLength()
					
					
					Returns the property \ref nmm_focalLength "nmm:focalLength". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getFocalLength() { return baseGetObject< nmm::focalLength >(); }
				/*!
					\fn void setFocalLength(double const &focalLength_)
					
					
					Sets the property \ref nmm_focalLength "nmm:focalLength" to the given \a focalLength.
					\sa LiveResource::setObject
				 */
				void setFocalLength(double const &focalLength_) { baseSetObject< nmm::focalLength >( focalLength_ ); }
				/*!
					\fn double firstFocalLength()
					
					
					Returns the first property \ref nmm_focalLength "nmm:focalLength". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstFocalLength() { return baseFirstObject< nmm::focalLength >(); }
				/*!
					\fn void addFocalLength(double const &focalLength_)
					
					
					Adds the given \a focalLength_ to the property \ref nmm_focalLength "nmm:focalLength" set.
					\sa LiveResource::addObject
				 */
				void addFocalLength(double const &focalLength_) { baseAddObject< nmm::focalLength >( focalLength_ ); }
				/*!
					\fn void removeFocalLength(double const &focalLength_)
					
					
					Removes the given \a focalLength_ from the property \ref nmm_focalLength "nmm:focalLength" set.
					\sa LiveResource::removeObject
				 */
				void removeFocalLength(double const &focalLength_) { baseRemoveObject< nmm::focalLength >(focalLength_); }

				/* Property generated from nmm:isCropped
				 * \n rdfs:range=xsd:boolean
				 * \n tracker:modified=1216
				 * \n rdfs:domain=nmm:Photo
				 * \n tracker:added=2010-11-30T13:24:06Z
				 * \n nrl:maxCardinality=1
				 */
				/*!
					\fn LiveNodes liveIsCroppeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_isCropped "nmm:isCropped" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsCroppeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::isCropped >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsCroppeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_isCropped "nmm:isCropped" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsCroppeds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::isCropped >(object_info, strategy, parent); }
				/*!
					\fn void setIsCroppeds(LiveNodes const &isCropped_)
					
					
					Sets the property \ref nmm_isCropped "nmm:isCropped" set to the given \a isCropped_ set.
					\sa LiveResource::setObjects
				 */
				void setIsCroppeds(LiveNodes const &isCropped_) { baseSetObjects(nmm::isCropped::iri(), isCropped_); }
				/*!
					\fn void removeIsCroppeds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_isCropped "nmm:isCropped" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsCroppeds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::isCropped::iri(), object_info); }
				/*!
					\fn bool getIsCropped()
					
					
					Returns the property \ref nmm_isCropped "nmm:isCropped". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsCropped() { return baseGetObject< nmm::isCropped >(); }
				/*!
					\fn void setIsCropped(bool const &isCropped_)
					
					
					Sets the property \ref nmm_isCropped "nmm:isCropped" to the given \a isCropped.
					\sa LiveResource::setObject
				 */
				void setIsCropped(bool const &isCropped_) { baseSetObject< nmm::isCropped >( isCropped_ ); }
				/*!
					\fn bool firstIsCropped()
					
					
					Returns the first property \ref nmm_isCropped "nmm:isCropped". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsCropped() { return baseFirstObject< nmm::isCropped >(); }
				/*!
					\fn void addIsCropped(bool const &isCropped_)
					
					
					Adds the given \a isCropped_ to the property \ref nmm_isCropped "nmm:isCropped" set.
					\sa LiveResource::addObject
				 */
				void addIsCropped(bool const &isCropped_) { baseAddObject< nmm::isCropped >( isCropped_ ); }
				/*!
					\fn void removeIsCropped(bool const &isCropped_)
					
					
					Removes the given \a isCropped_ from the property \ref nmm_isCropped "nmm:isCropped" set.
					\sa LiveResource::removeObject
				 */
				void removeIsCropped(bool const &isCropped_) { baseRemoveObject< nmm::isCropped >(isCropped_); }

				/* Property generated from nmm:camera
				 * \n The maker and model of the camera used to take the photograph. DEPRECATED (check nfo:device)
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=Camera
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmm:Photo
				 * \n tracker:writeback=true
				 * \n tracker:weight=3
				 * \n tracker:modified=1649
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCameras(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmm::camera for replacement
					Returns a live model of property \ref nmm_camera "nmm:camera" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveCameras(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::camera >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCameras(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nmm::camera for replacement
					Returns all current values of property \ref nmm_camera "nmm:camera" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getCameras(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::camera >(object_info, strategy, parent); }
				/*!
					\fn void setCameras(LiveNodes const &camera_)
					
					\deprecated See \ref nmm::camera for replacement
					Sets the property \ref nmm_camera "nmm:camera" set to the given \a camera_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setCameras(LiveNodes const &camera_) { baseSetObjects(nmm::camera::iri(), camera_); }
				/*!
					\fn void removeCameras(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nmm::camera for replacement
					Removes the properties from property \ref nmm_camera "nmm:camera" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeCameras(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::camera::iri(), object_info); }
				/*!
					\fn QString getCamera()
					
					\deprecated See \ref nmm::camera for replacement
					Returns the property \ref nmm_camera "nmm:camera". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED QString getCamera() { return baseGetObject< nmm::camera >(); }
				/*!
					\fn void setCamera(QString const &camera_)
					
					\deprecated See \ref nmm::camera for replacement
					Sets the property \ref nmm_camera "nmm:camera" to the given \a camera.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED void setCamera(QString const &camera_) { baseSetObject< nmm::camera >( camera_ ); }
				/*!
					\fn QString firstCamera()
					
					\deprecated See \ref nmm::camera for replacement
					Returns the first property \ref nmm_camera "nmm:camera". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED QString firstCamera() { return baseFirstObject< nmm::camera >(); }
				/*!
					\fn void addCamera(QString const &camera_)
					
					\deprecated See \ref nmm::camera for replacement
					Adds the given \a camera_ to the property \ref nmm_camera "nmm:camera" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addCamera(QString const &camera_) { baseAddObject< nmm::camera >( camera_ ); }
				/*!
					\fn void removeCamera(QString const &camera_)
					
					\deprecated See \ref nmm::camera for replacement
					Removes the given \a camera_ from the property \ref nmm_camera "nmm:camera" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeCamera(QString const &camera_) { baseRemoveObject< nmm::camera >(camera_); }
				 //@}
			};

			/*! Class generated from nmm:Playlist
			 * \ingroup onto_nmm_classes
			 * Specific class to split MediaList in Albums and playlists.
			 * 
			 * rdfs:label = Media playlist
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1116
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Playlist
				: public virtual nfo::MediaList

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#Playlist"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::MediaList, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Playlist> Live;
				Playlist() { this->attachInterfaceHelper< Playlist >(); }
				~Playlist() { this->detachInterfaceHelper< Playlist >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmm:RadioModulation
			 * \ingroup onto_nmm_classes
			 * Set of instances for analog radio modulation
			 * 
			 * rdfs:label = Radio modulation
			 * 
			 * tracker:modified = 1589
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nmm_radio_modulation_am "nmm:radio-modulation-am"
			 * 		\ref nmm_radio_modulation_fm "nmm:radio-modulation-fm"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmm_modulation "nmm:modulation"
			 */
			class RadioModulation
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#RadioModulation"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<RadioModulation> Live;
				RadioModulation() { this->attachInterfaceHelper< RadioModulation >(); }
				~RadioModulation() { this->detachInterfaceHelper< RadioModulation >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nmm:RadioStation
			 * \ingroup onto_nmm_classes
			 * The Radio station in user terms: BBC3, Radio5, YLEX, ... It is linked with 1 or more carriers (different FM frenquencies, online sources in different qualities, etc.). Some RDS information is represented with nie properties, nie:identifier for PI, nie:title for PS
			 * 
			 * rdfs:label = Radio station
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1565
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class RadioStation
				: public virtual nfo::Audio

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#RadioStation"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::Audio, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<RadioStation> Live;
				RadioStation() { this->attachInterfaceHelper< RadioStation >(); }
				~RadioStation() { this->detachInterfaceHelper< RadioStation >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmm:radioPTY
				 * \n PTY Code (content description) as integer. RDS specs define the translations into human readable descriptions for various languages
				 * \n rdfs:label=PTY
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:RadioStation
				 * \n tracker:modified=1504
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRadioPTYs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_radioPTY "nmm:radioPTY" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRadioPTYs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::radioPTY >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRadioPTYs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_radioPTY "nmm:radioPTY" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRadioPTYs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::radioPTY >(object_info, strategy, parent); }
				/*!
					\fn void setRadioPTYs(LiveNodes const &radioPTY_)
					
					
					Sets the property \ref nmm_radioPTY "nmm:radioPTY" set to the given \a radioPTY_ set.
					\sa LiveResource::setObjects
				 */
				void setRadioPTYs(LiveNodes const &radioPTY_) { baseSetObjects(nmm::radioPTY::iri(), radioPTY_); }
				/*!
					\fn void removeRadioPTYs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_radioPTY "nmm:radioPTY" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRadioPTYs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::radioPTY::iri(), object_info); }
				/*!
					\fn qint64 getRadioPTY()
					
					
					Returns the property \ref nmm_radioPTY "nmm:radioPTY". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getRadioPTY() { return baseGetObject< nmm::radioPTY >(); }
				/*!
					\fn void setRadioPTY(qint64 const &radioPTY_)
					
					
					Sets the property \ref nmm_radioPTY "nmm:radioPTY" to the given \a radioPTY.
					\sa LiveResource::setObject
				 */
				void setRadioPTY(qint64 const &radioPTY_) { baseSetObject< nmm::radioPTY >( radioPTY_ ); }
				/*!
					\fn qint64 firstRadioPTY()
					
					
					Returns the first property \ref nmm_radioPTY "nmm:radioPTY". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstRadioPTY() { return baseFirstObject< nmm::radioPTY >(); }
				/*!
					\fn void addRadioPTY(qint64 const &radioPTY_)
					
					
					Adds the given \a radioPTY_ to the property \ref nmm_radioPTY "nmm:radioPTY" set.
					\sa LiveResource::addObject
				 */
				void addRadioPTY(qint64 const &radioPTY_) { baseAddObject< nmm::radioPTY >( radioPTY_ ); }
				/*!
					\fn void removeRadioPTY(qint64 const &radioPTY_)
					
					
					Removes the given \a radioPTY_ from the property \ref nmm_radioPTY "nmm:radioPTY" set.
					\sa LiveResource::removeObject
				 */
				void removeRadioPTY(qint64 const &radioPTY_) { baseRemoveObject< nmm::radioPTY >(radioPTY_); }

				/* Property generated from nmm:radioIcon
				 * \n Image used as logo for a radio station
				 * \n rdfs:label=Radio station icon
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:Image
				 * \n rdfs:domain=nmm:RadioStation
				 * \n tracker:modified=1702
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nfo::Image Image;
				/*!
					\fn LiveNodes liveRadioIcons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_radioIcon "nmm:radioIcon" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRadioIcons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::radioIcon >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRadioIcons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_radioIcon "nmm:radioIcon" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRadioIcons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::radioIcon >(object_info, strategy, parent); }
				/*!
					\fn void setRadioIcons(LiveNodes const &radioIcon_)
					
					
					Sets the property \ref nmm_radioIcon "nmm:radioIcon" set to the given \a radioIcon_ set.
					\sa LiveResource::setObjects
				 */
				void setRadioIcons(LiveNodes const &radioIcon_) { baseSetObjects(nmm::radioIcon::iri(), radioIcon_); }
				/*!
					\fn void removeRadioIcons(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_radioIcon "nmm:radioIcon" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRadioIcons(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::radioIcon::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::Image > getRadioIcon()
					
					
					Returns the property \ref nmm_radioIcon "nmm:radioIcon". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::Image > getRadioIcon() { return baseGetObject< nmm::radioIcon >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::Image > setRadioIcon(::SopranoLive::Live< nfo::Image > const &radioIcon_)
					
					
					Sets the property \ref nmm_radioIcon "nmm:radioIcon" to the given \a radioIcon.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::Image > setRadioIcon(::SopranoLive::Live< nfo::Image > const &radioIcon_) { return baseSetObject< nmm::radioIcon >( radioIcon_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::Image > firstRadioIcon()
					
					
					Returns the first property \ref nmm_radioIcon "nmm:radioIcon". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::Image > firstRadioIcon() { return baseFirstObject< nmm::radioIcon >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::Image > addRadioIcon()
					
					
					Adds a new uniquely named resource to the property \ref nmm_radioIcon "nmm:radioIcon" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::Image > addRadioIcon() { return baseAddObject< nmm::radioIcon >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::Image > addRadioIcon(::SopranoLive::Live< nfo::Image > const &radioIcon_)
					
					
					Adds the given \a radioIcon_ to the property \ref nmm_radioIcon "nmm:radioIcon" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::Image > addRadioIcon(::SopranoLive::Live< nfo::Image > const &radioIcon_) { return baseAddObject< nmm::radioIcon >( radioIcon_ ); }
				/*!
					\fn void removeRadioIcon(::SopranoLive::Live< nfo::Image > const &radioIcon_)
					
					
					Removes the given \a radioIcon_ from the property \ref nmm_radioIcon "nmm:radioIcon" set.
					\sa LiveResource::removeObject
				 */
				void removeRadioIcon(::SopranoLive::Live< nfo::Image > const &radioIcon_) { baseRemoveObject< nmm::radioIcon >(radioIcon_); }

				/* Property generated from nmm:carrier
				 * \n Signal where a radio can be tuned in. There can be more than one.
				 * \n rdfs:range=nfo:MediaStream
				 * \n rdfs:label=Carrier
				 * \n tracker:modified=1677
				 * \n rdfs:domain=nmm:RadioStation
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nfo::MediaStream MediaStream;
				/*!
					\fn LiveNodes liveCarriers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_carrier "nmm:carrier" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCarriers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::carrier >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCarriers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_carrier "nmm:carrier" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCarriers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::carrier >(object_info, strategy, parent); }
				/*!
					\fn void setCarriers(LiveNodes const &carrier_)
					
					
					Sets the property \ref nmm_carrier "nmm:carrier" set to the given \a carrier_ set.
					\sa LiveResource::setObjects
				 */
				void setCarriers(LiveNodes const &carrier_) { baseSetObjects(nmm::carrier::iri(), carrier_); }
				/*!
					\fn void removeCarriers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_carrier "nmm:carrier" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCarriers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::carrier::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::MediaStream > firstCarrier()
					
					
					Returns the first property \ref nmm_carrier "nmm:carrier". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::MediaStream > firstCarrier() { return baseFirstObject< nmm::carrier >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::MediaStream > addCarrier()
					
					
					Adds a new uniquely named resource to the property \ref nmm_carrier "nmm:carrier" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::MediaStream > addCarrier() { return baseAddObject< nmm::carrier >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::MediaStream > addCarrier(::SopranoLive::Live< nfo::MediaStream > const &carrier_)
					
					
					Adds the given \a carrier_ to the property \ref nmm_carrier "nmm:carrier" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::MediaStream > addCarrier(::SopranoLive::Live< nfo::MediaStream > const &carrier_) { return baseAddObject< nmm::carrier >( carrier_ ); }
				/*!
					\fn void removeCarrier(::SopranoLive::Live< nfo::MediaStream > const &carrier_)
					
					
					Removes the given \a carrier_ from the property \ref nmm_carrier "nmm:carrier" set.
					\sa LiveResource::removeObject
				 */
				void removeCarrier(::SopranoLive::Live< nfo::MediaStream > const &carrier_) { baseRemoveObject< nmm::carrier >(carrier_); }
				 //@}
			};

			/*! Class generated from nmm:SynchronizedText
			 * \ingroup onto_nmm_classes
			 * 
			 * rdfs:label = Synchronized text (use nie:language to set the language). Valid for subtitles and lyrics
			 * 
			 * tracker:modified = 1593
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmm_subtitle "nmm:subtitle"
			 * 		\ref nmm_lyrics "nmm:lyrics"
			 */
			class SynchronizedText
				: public virtual nfo::PlainTextDocument

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#SynchronizedText"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::PlainTextDocument, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<SynchronizedText> Live;
				SynchronizedText() { this->attachInterfaceHelper< SynchronizedText >(); }
				~SynchronizedText() { this->detachInterfaceHelper< SynchronizedText >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmm:isForHearingImpaired
				 * \n Does text stream contain helper tags for hearing-impaired such as &lt;steps in hallway&gt;
				 * \n rdfs:label=Is for hearing-impaired
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nmm:SynchronizedText
				 * \n tracker:modified=1383
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveIsForHearingImpaireds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_isForHearingImpaired "nmm:isForHearingImpaired" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsForHearingImpaireds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::isForHearingImpaired >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsForHearingImpaireds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_isForHearingImpaired "nmm:isForHearingImpaired" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsForHearingImpaireds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::isForHearingImpaired >(object_info, strategy, parent); }
				/*!
					\fn void setIsForHearingImpaireds(LiveNodes const &isForHearingImpaired_)
					
					
					Sets the property \ref nmm_isForHearingImpaired "nmm:isForHearingImpaired" set to the given \a isForHearingImpaired_ set.
					\sa LiveResource::setObjects
				 */
				void setIsForHearingImpaireds(LiveNodes const &isForHearingImpaired_) { baseSetObjects(nmm::isForHearingImpaired::iri(), isForHearingImpaired_); }
				/*!
					\fn void removeIsForHearingImpaireds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_isForHearingImpaired "nmm:isForHearingImpaired" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsForHearingImpaireds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::isForHearingImpaired::iri(), object_info); }
				/*!
					\fn bool getIsForHearingImpaired()
					
					
					Returns the property \ref nmm_isForHearingImpaired "nmm:isForHearingImpaired". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsForHearingImpaired() { return baseGetObject< nmm::isForHearingImpaired >(); }
				/*!
					\fn void setIsForHearingImpaired(bool const &isForHearingImpaired_)
					
					
					Sets the property \ref nmm_isForHearingImpaired "nmm:isForHearingImpaired" to the given \a isForHearingImpaired.
					\sa LiveResource::setObject
				 */
				void setIsForHearingImpaired(bool const &isForHearingImpaired_) { baseSetObject< nmm::isForHearingImpaired >( isForHearingImpaired_ ); }
				/*!
					\fn bool firstIsForHearingImpaired()
					
					
					Returns the first property \ref nmm_isForHearingImpaired "nmm:isForHearingImpaired". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsForHearingImpaired() { return baseFirstObject< nmm::isForHearingImpaired >(); }
				/*!
					\fn void addIsForHearingImpaired(bool const &isForHearingImpaired_)
					
					
					Adds the given \a isForHearingImpaired_ to the property \ref nmm_isForHearingImpaired "nmm:isForHearingImpaired" set.
					\sa LiveResource::addObject
				 */
				void addIsForHearingImpaired(bool const &isForHearingImpaired_) { baseAddObject< nmm::isForHearingImpaired >( isForHearingImpaired_ ); }
				/*!
					\fn void removeIsForHearingImpaired(bool const &isForHearingImpaired_)
					
					
					Removes the given \a isForHearingImpaired_ from the property \ref nmm_isForHearingImpaired "nmm:isForHearingImpaired" set.
					\sa LiveResource::removeObject
				 */
				void removeIsForHearingImpaired(bool const &isForHearingImpaired_) { baseRemoveObject< nmm::isForHearingImpaired >(isForHearingImpaired_); }
				 //@}
			};

			/*! Class generated from nmm:Video
			 * \ingroup onto_nmm_classes
			 * 
			 * rdfs:label = Video
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1914
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Video
				: public virtual nfo::Audio, public virtual nfo::Video

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#Video"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::Audio, QPair<nfo::Video, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Video> Live;
				Video() { this->attachInterfaceHelper< Video >(); }
				~Video() { this->detachInterfaceHelper< Video >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mtp:fourCC
				 * \n These codes are used to uniquely identify video formats, and are used in various legacy and current software development kits (SDKs), including those for Microsoft Video for Windows (VfW), Microsoft DirectShow, and Microsoft Windows Media Format.
				 * \n rdfs:label=MTP fourCC code
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:modified=1025
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMtpFourCCs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mtp_fourCC "mtp:fourCC" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMtpFourCCs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mtp::fourCC >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMtpFourCCs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mtp_fourCC "mtp:fourCC" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMtpFourCCs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mtp::fourCC >(object_info, strategy, parent); }
				/*!
					\fn void setMtpFourCCs(LiveNodes const &mtpFourCC_)
					
					
					Sets the property \ref mtp_fourCC "mtp:fourCC" set to the given \a mtpFourCC_ set.
					\sa LiveResource::setObjects
				 */
				void setMtpFourCCs(LiveNodes const &mtpFourCC_) { baseSetObjects(mtp::fourCC::iri(), mtpFourCC_); }
				/*!
					\fn void removeMtpFourCCs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mtp_fourCC "mtp:fourCC" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMtpFourCCs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mtp::fourCC::iri(), object_info); }
				/*!
					\fn QString getMtpFourCC()
					
					
					Returns the property \ref mtp_fourCC "mtp:fourCC". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getMtpFourCC() { return baseGetObject< mtp::fourCC >(); }
				/*!
					\fn void setMtpFourCC(QString const &mtpFourCC_)
					
					
					Sets the property \ref mtp_fourCC "mtp:fourCC" to the given \a mtpFourCC.
					\sa LiveResource::setObject
				 */
				void setMtpFourCC(QString const &mtpFourCC_) { baseSetObject< mtp::fourCC >( mtpFourCC_ ); }
				/*!
					\fn QString firstMtpFourCC()
					
					
					Returns the first property \ref mtp_fourCC "mtp:fourCC". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMtpFourCC() { return baseFirstObject< mtp::fourCC >(); }
				/*!
					\fn void addMtpFourCC(QString const &mtpFourCC_)
					
					
					Adds the given \a mtpFourCC_ to the property \ref mtp_fourCC "mtp:fourCC" set.
					\sa LiveResource::addObject
				 */
				void addMtpFourCC(QString const &mtpFourCC_) { baseAddObject< mtp::fourCC >( mtpFourCC_ ); }
				/*!
					\fn void removeMtpFourCC(QString const &mtpFourCC_)
					
					
					Removes the given \a mtpFourCC_ from the property \ref mtp_fourCC "mtp:fourCC" set.
					\sa LiveResource::removeObject
				 */
				void removeMtpFourCC(QString const &mtpFourCC_) { baseRemoveObject< mtp::fourCC >(mtpFourCC_); }

				/* Property generated from nmm:MPAARating
				 * \n rdfs:label=MPAA Rating
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:modified=1217
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMPAARatings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_MPAARating "nmm:MPAARating" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMPAARatings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::MPAARating >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMPAARatings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_MPAARating "nmm:MPAARating" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMPAARatings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::MPAARating >(object_info, strategy, parent); }
				/*!
					\fn void setMPAARatings(LiveNodes const &mPAARating_)
					
					
					Sets the property \ref nmm_MPAARating "nmm:MPAARating" set to the given \a mPAARating_ set.
					\sa LiveResource::setObjects
				 */
				void setMPAARatings(LiveNodes const &mPAARating_) { baseSetObjects(nmm::MPAARating::iri(), mPAARating_); }
				/*!
					\fn void removeMPAARatings(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_MPAARating "nmm:MPAARating" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMPAARatings(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::MPAARating::iri(), object_info); }
				/*!
					\fn QString getMPAARating()
					
					
					Returns the property \ref nmm_MPAARating "nmm:MPAARating". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getMPAARating() { return baseGetObject< nmm::MPAARating >(); }
				/*!
					\fn void setMPAARating(QString const &mPAARating_)
					
					
					Sets the property \ref nmm_MPAARating "nmm:MPAARating" to the given \a mPAARating.
					\sa LiveResource::setObject
				 */
				void setMPAARating(QString const &mPAARating_) { baseSetObject< nmm::MPAARating >( mPAARating_ ); }
				/*!
					\fn QString firstMPAARating()
					
					
					Returns the first property \ref nmm_MPAARating "nmm:MPAARating". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMPAARating() { return baseFirstObject< nmm::MPAARating >(); }
				/*!
					\fn void addMPAARating(QString const &mPAARating_)
					
					
					Adds the given \a mPAARating_ to the property \ref nmm_MPAARating "nmm:MPAARating" set.
					\sa LiveResource::addObject
				 */
				void addMPAARating(QString const &mPAARating_) { baseAddObject< nmm::MPAARating >( mPAARating_ ); }
				/*!
					\fn void removeMPAARating(QString const &mPAARating_)
					
					
					Removes the given \a mPAARating_ from the property \ref nmm_MPAARating "nmm:MPAARating" set.
					\sa LiveResource::removeObject
				 */
				void removeMPAARating(QString const &mPAARating_) { baseRemoveObject< nmm::MPAARating >(mPAARating_); }

				/* Property generated from nmm:season
				 * \n rdfs:label=Season
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:modified=1073
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSeasons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_season "nmm:season" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSeasons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::season >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSeasons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_season "nmm:season" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSeasons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::season >(object_info, strategy, parent); }
				/*!
					\fn void setSeasons(LiveNodes const &season_)
					
					
					Sets the property \ref nmm_season "nmm:season" set to the given \a season_ set.
					\sa LiveResource::setObjects
				 */
				void setSeasons(LiveNodes const &season_) { baseSetObjects(nmm::season::iri(), season_); }
				/*!
					\fn void removeSeasons(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_season "nmm:season" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSeasons(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::season::iri(), object_info); }
				/*!
					\fn qint64 getSeason()
					
					
					Returns the property \ref nmm_season "nmm:season". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getSeason() { return baseGetObject< nmm::season >(); }
				/*!
					\fn void setSeason(qint64 const &season_)
					
					
					Sets the property \ref nmm_season "nmm:season" to the given \a season.
					\sa LiveResource::setObject
				 */
				void setSeason(qint64 const &season_) { baseSetObject< nmm::season >( season_ ); }
				/*!
					\fn qint64 firstSeason()
					
					
					Returns the first property \ref nmm_season "nmm:season". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstSeason() { return baseFirstObject< nmm::season >(); }
				/*!
					\fn void addSeason(qint64 const &season_)
					
					
					Adds the given \a season_ to the property \ref nmm_season "nmm:season" set.
					\sa LiveResource::addObject
				 */
				void addSeason(qint64 const &season_) { baseAddObject< nmm::season >( season_ ); }
				/*!
					\fn void removeSeason(qint64 const &season_)
					
					
					Removes the given \a season_ from the property \ref nmm_season "nmm:season" set.
					\sa LiveResource::removeObject
				 */
				void removeSeason(qint64 const &season_) { baseRemoveObject< nmm::season >(season_); }

				/* Property generated from nmm:videoAlbum
				 * \n rdfs:label=Album
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:MediaList
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:modified=1758
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nfo::MediaList MediaList;
				/*!
					\fn LiveNodes liveVideoAlbums(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_videoAlbum "nmm:videoAlbum" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveVideoAlbums(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::videoAlbum >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getVideoAlbums(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_videoAlbum "nmm:videoAlbum" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getVideoAlbums(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::videoAlbum >(object_info, strategy, parent); }
				/*!
					\fn void setVideoAlbums(LiveNodes const &videoAlbum_)
					
					
					Sets the property \ref nmm_videoAlbum "nmm:videoAlbum" set to the given \a videoAlbum_ set.
					\sa LiveResource::setObjects
				 */
				void setVideoAlbums(LiveNodes const &videoAlbum_) { baseSetObjects(nmm::videoAlbum::iri(), videoAlbum_); }
				/*!
					\fn void removeVideoAlbums(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_videoAlbum "nmm:videoAlbum" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeVideoAlbums(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::videoAlbum::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::MediaList > getVideoAlbum()
					
					
					Returns the property \ref nmm_videoAlbum "nmm:videoAlbum". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::MediaList > getVideoAlbum() { return baseGetObject< nmm::videoAlbum >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::MediaList > setVideoAlbum(::SopranoLive::Live< nfo::MediaList > const &videoAlbum_)
					
					
					Sets the property \ref nmm_videoAlbum "nmm:videoAlbum" to the given \a videoAlbum.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::MediaList > setVideoAlbum(::SopranoLive::Live< nfo::MediaList > const &videoAlbum_) { return baseSetObject< nmm::videoAlbum >( videoAlbum_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::MediaList > firstVideoAlbum()
					
					
					Returns the first property \ref nmm_videoAlbum "nmm:videoAlbum". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::MediaList > firstVideoAlbum() { return baseFirstObject< nmm::videoAlbum >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::MediaList > addVideoAlbum()
					
					
					Adds a new uniquely named resource to the property \ref nmm_videoAlbum "nmm:videoAlbum" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::MediaList > addVideoAlbum() { return baseAddObject< nmm::videoAlbum >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::MediaList > addVideoAlbum(::SopranoLive::Live< nfo::MediaList > const &videoAlbum_)
					
					
					Adds the given \a videoAlbum_ to the property \ref nmm_videoAlbum "nmm:videoAlbum" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::MediaList > addVideoAlbum(::SopranoLive::Live< nfo::MediaList > const &videoAlbum_) { return baseAddObject< nmm::videoAlbum >( videoAlbum_ ); }
				/*!
					\fn void removeVideoAlbum(::SopranoLive::Live< nfo::MediaList > const &videoAlbum_)
					
					
					Removes the given \a videoAlbum_ from the property \ref nmm_videoAlbum "nmm:videoAlbum" set.
					\sa LiveResource::removeObject
				 */
				void removeVideoAlbum(::SopranoLive::Live< nfo::MediaList > const &videoAlbum_) { baseRemoveObject< nmm::videoAlbum >(videoAlbum_); }

				/* Property generated from nmm:hasSubtitle
				 * \n rdfs:label=Has subtitle
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:modified=1021
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasSubtitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_hasSubtitle "nmm:hasSubtitle" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasSubtitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::hasSubtitle >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasSubtitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_hasSubtitle "nmm:hasSubtitle" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasSubtitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::hasSubtitle >(object_info, strategy, parent); }
				/*!
					\fn void setHasSubtitles(LiveNodes const &hasSubtitle_)
					
					
					Sets the property \ref nmm_hasSubtitle "nmm:hasSubtitle" set to the given \a hasSubtitle_ set.
					\sa LiveResource::setObjects
				 */
				void setHasSubtitles(LiveNodes const &hasSubtitle_) { baseSetObjects(nmm::hasSubtitle::iri(), hasSubtitle_); }
				/*!
					\fn void removeHasSubtitles(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_hasSubtitle "nmm:hasSubtitle" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasSubtitles(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::hasSubtitle::iri(), object_info); }
				/*!
					\fn bool getHasSubtitle()
					
					
					Returns the property \ref nmm_hasSubtitle "nmm:hasSubtitle". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getHasSubtitle() { return baseGetObject< nmm::hasSubtitle >(); }
				/*!
					\fn void setHasSubtitle(bool const &hasSubtitle_)
					
					
					Sets the property \ref nmm_hasSubtitle "nmm:hasSubtitle" to the given \a hasSubtitle.
					\sa LiveResource::setObject
				 */
				void setHasSubtitle(bool const &hasSubtitle_) { baseSetObject< nmm::hasSubtitle >( hasSubtitle_ ); }
				/*!
					\fn bool firstHasSubtitle()
					
					
					Returns the first property \ref nmm_hasSubtitle "nmm:hasSubtitle". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstHasSubtitle() { return baseFirstObject< nmm::hasSubtitle >(); }
				/*!
					\fn void addHasSubtitle(bool const &hasSubtitle_)
					
					
					Adds the given \a hasSubtitle_ to the property \ref nmm_hasSubtitle "nmm:hasSubtitle" set.
					\sa LiveResource::addObject
				 */
				void addHasSubtitle(bool const &hasSubtitle_) { baseAddObject< nmm::hasSubtitle >( hasSubtitle_ ); }
				/*!
					\fn void removeHasSubtitle(bool const &hasSubtitle_)
					
					
					Removes the given \a hasSubtitle_ from the property \ref nmm_hasSubtitle "nmm:hasSubtitle" set.
					\sa LiveResource::removeObject
				 */
				void removeHasSubtitle(bool const &hasSubtitle_) { baseRemoveObject< nmm::hasSubtitle >(hasSubtitle_); }

				/* Property generated from nmm:director
				 * \n rdfs:label=Director
				 * \n rdfs:range=nmm:Artist
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:weight=4
				 * \n tracker:modified=1062
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDirectors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_director "nmm:director" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDirectors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::director >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDirectors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_director "nmm:director" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDirectors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::director >(object_info, strategy, parent); }
				/*!
					\fn void setDirectors(LiveNodes const &director_)
					
					
					Sets the property \ref nmm_director "nmm:director" set to the given \a director_ set.
					\sa LiveResource::setObjects
				 */
				void setDirectors(LiveNodes const &director_) { baseSetObjects(nmm::director::iri(), director_); }
				/*!
					\fn void removeDirectors(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_director "nmm:director" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDirectors(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::director::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Artist > firstDirector()
					
					
					Returns the first property \ref nmm_director "nmm:director". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Artist > firstDirector() { return baseFirstObject< nmm::director >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addDirector()
					
					
					Adds a new uniquely named resource to the property \ref nmm_director "nmm:director" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addDirector() { return baseAddObject< nmm::director >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addDirector(::SopranoLive::Live< Artist > const &director_)
					
					
					Adds the given \a director_ to the property \ref nmm_director "nmm:director" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addDirector(::SopranoLive::Live< Artist > const &director_) { return baseAddObject< nmm::director >( director_ ); }
				/*!
					\fn void removeDirector(::SopranoLive::Live< Artist > const &director_)
					
					
					Removes the given \a director_ from the property \ref nmm_director "nmm:director" set.
					\sa LiveResource::removeObject
				 */
				void removeDirector(::SopranoLive::Live< Artist > const &director_) { baseRemoveObject< nmm::director >(director_); }

				/* Property generated from nmm:runTime
				 * \n rdfs:label=Run time
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:modified=1176
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRunTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_runTime "nmm:runTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRunTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::runTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRunTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_runTime "nmm:runTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRunTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::runTime >(object_info, strategy, parent); }
				/*!
					\fn void setRunTimes(LiveNodes const &runTime_)
					
					
					Sets the property \ref nmm_runTime "nmm:runTime" set to the given \a runTime_ set.
					\sa LiveResource::setObjects
				 */
				void setRunTimes(LiveNodes const &runTime_) { baseSetObjects(nmm::runTime::iri(), runTime_); }
				/*!
					\fn void removeRunTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_runTime "nmm:runTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRunTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::runTime::iri(), object_info); }
				/*!
					\fn qint64 getRunTime()
					
					
					Returns the property \ref nmm_runTime "nmm:runTime". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getRunTime() { return baseGetObject< nmm::runTime >(); }
				/*!
					\fn void setRunTime(qint64 const &runTime_)
					
					
					Sets the property \ref nmm_runTime "nmm:runTime" to the given \a runTime.
					\sa LiveResource::setObject
				 */
				void setRunTime(qint64 const &runTime_) { baseSetObject< nmm::runTime >( runTime_ ); }
				/*!
					\fn qint64 firstRunTime()
					
					
					Returns the first property \ref nmm_runTime "nmm:runTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstRunTime() { return baseFirstObject< nmm::runTime >(); }
				/*!
					\fn void addRunTime(qint64 const &runTime_)
					
					
					Adds the given \a runTime_ to the property \ref nmm_runTime "nmm:runTime" set.
					\sa LiveResource::addObject
				 */
				void addRunTime(qint64 const &runTime_) { baseAddObject< nmm::runTime >( runTime_ ); }
				/*!
					\fn void removeRunTime(qint64 const &runTime_)
					
					
					Removes the given \a runTime_ from the property \ref nmm_runTime "nmm:runTime" set.
					\sa LiveResource::removeObject
				 */
				void removeRunTime(qint64 const &runTime_) { baseRemoveObject< nmm::runTime >(runTime_); }

				/* Property generated from nmm:producedBy
				 * \n rdfs:label=Produced by
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nmm:Artist
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:weight=3
				 * \n tracker:modified=1072
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveProducedBys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_producedBy "nmm:producedBy" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveProducedBys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::producedBy >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getProducedBys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_producedBy "nmm:producedBy" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getProducedBys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::producedBy >(object_info, strategy, parent); }
				/*!
					\fn void setProducedBys(LiveNodes const &producedBy_)
					
					
					Sets the property \ref nmm_producedBy "nmm:producedBy" set to the given \a producedBy_ set.
					\sa LiveResource::setObjects
				 */
				void setProducedBys(LiveNodes const &producedBy_) { baseSetObjects(nmm::producedBy::iri(), producedBy_); }
				/*!
					\fn void removeProducedBys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_producedBy "nmm:producedBy" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeProducedBys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::producedBy::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Artist > getProducedBy()
					
					
					Returns the property \ref nmm_producedBy "nmm:producedBy". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Artist > getProducedBy() { return baseGetObject< nmm::producedBy >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > setProducedBy(::SopranoLive::Live< Artist > const &producedBy_)
					
					
					Sets the property \ref nmm_producedBy "nmm:producedBy" to the given \a producedBy.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Artist > setProducedBy(::SopranoLive::Live< Artist > const &producedBy_) { return baseSetObject< nmm::producedBy >( producedBy_ ); }
				/*!
					\fn ::SopranoLive::Live< Artist > firstProducedBy()
					
					
					Returns the first property \ref nmm_producedBy "nmm:producedBy". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Artist > firstProducedBy() { return baseFirstObject< nmm::producedBy >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addProducedBy()
					
					
					Adds a new uniquely named resource to the property \ref nmm_producedBy "nmm:producedBy" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addProducedBy() { return baseAddObject< nmm::producedBy >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addProducedBy(::SopranoLive::Live< Artist > const &producedBy_)
					
					
					Adds the given \a producedBy_ to the property \ref nmm_producedBy "nmm:producedBy" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addProducedBy(::SopranoLive::Live< Artist > const &producedBy_) { return baseAddObject< nmm::producedBy >( producedBy_ ); }
				/*!
					\fn void removeProducedBy(::SopranoLive::Live< Artist > const &producedBy_)
					
					
					Removes the given \a producedBy_ from the property \ref nmm_producedBy "nmm:producedBy" set.
					\sa LiveResource::removeObject
				 */
				void removeProducedBy(::SopranoLive::Live< Artist > const &producedBy_) { baseRemoveObject< nmm::producedBy >(producedBy_); }

				/* Property generated from nmm:leadActor
				 * \n rdfs:label=Lead actor
				 * \n rdfs:range=nmm:Artist
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:weight=4
				 * \n tracker:modified=1250
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLeadActors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_leadActor "nmm:leadActor" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLeadActors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::leadActor >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLeadActors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_leadActor "nmm:leadActor" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLeadActors(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::leadActor >(object_info, strategy, parent); }
				/*!
					\fn void setLeadActors(LiveNodes const &leadActor_)
					
					
					Sets the property \ref nmm_leadActor "nmm:leadActor" set to the given \a leadActor_ set.
					\sa LiveResource::setObjects
				 */
				void setLeadActors(LiveNodes const &leadActor_) { baseSetObjects(nmm::leadActor::iri(), leadActor_); }
				/*!
					\fn void removeLeadActors(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_leadActor "nmm:leadActor" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLeadActors(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::leadActor::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Artist > firstLeadActor()
					
					
					Returns the first property \ref nmm_leadActor "nmm:leadActor". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Artist > firstLeadActor() { return baseFirstObject< nmm::leadActor >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addLeadActor()
					
					
					Adds a new uniquely named resource to the property \ref nmm_leadActor "nmm:leadActor" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addLeadActor() { return baseAddObject< nmm::leadActor >(); }
				/*!
					\fn ::SopranoLive::Live< Artist > addLeadActor(::SopranoLive::Live< Artist > const &leadActor_)
					
					
					Adds the given \a leadActor_ to the property \ref nmm_leadActor "nmm:leadActor" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Artist > addLeadActor(::SopranoLive::Live< Artist > const &leadActor_) { return baseAddObject< nmm::leadActor >( leadActor_ ); }
				/*!
					\fn void removeLeadActor(::SopranoLive::Live< Artist > const &leadActor_)
					
					
					Removes the given \a leadActor_ from the property \ref nmm_leadActor "nmm:leadActor" set.
					\sa LiveResource::removeObject
				 */
				void removeLeadActor(::SopranoLive::Live< Artist > const &leadActor_) { baseRemoveObject< nmm::leadActor >(leadActor_); }

				/* Property generated from mtp:waveformat
				 * \n the WAVE formats reserved with Microsoft as of June 1, 2003. These codes are used to uniquely identify audio formats, and are used in various legacy and current software development kits (SDKs), including MCI, Microsoft Video for Windows, Microsoft DirectShow, Microsoft DirectSound, and Microsoft Windows Media Format.
				 * \n rdfs:label=Wave format
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:modified=1055
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMtpWaveformats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mtp_waveformat "mtp:waveformat" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMtpWaveformats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mtp::waveformat >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMtpWaveformats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mtp_waveformat "mtp:waveformat" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMtpWaveformats(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mtp::waveformat >(object_info, strategy, parent); }
				/*!
					\fn void setMtpWaveformats(LiveNodes const &mtpWaveformat_)
					
					
					Sets the property \ref mtp_waveformat "mtp:waveformat" set to the given \a mtpWaveformat_ set.
					\sa LiveResource::setObjects
				 */
				void setMtpWaveformats(LiveNodes const &mtpWaveformat_) { baseSetObjects(mtp::waveformat::iri(), mtpWaveformat_); }
				/*!
					\fn void removeMtpWaveformats(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mtp_waveformat "mtp:waveformat" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMtpWaveformats(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mtp::waveformat::iri(), object_info); }
				/*!
					\fn QString getMtpWaveformat()
					
					
					Returns the property \ref mtp_waveformat "mtp:waveformat". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getMtpWaveformat() { return baseGetObject< mtp::waveformat >(); }
				/*!
					\fn void setMtpWaveformat(QString const &mtpWaveformat_)
					
					
					Sets the property \ref mtp_waveformat "mtp:waveformat" to the given \a mtpWaveformat.
					\sa LiveResource::setObject
				 */
				void setMtpWaveformat(QString const &mtpWaveformat_) { baseSetObject< mtp::waveformat >( mtpWaveformat_ ); }
				/*!
					\fn QString firstMtpWaveformat()
					
					
					Returns the first property \ref mtp_waveformat "mtp:waveformat". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMtpWaveformat() { return baseFirstObject< mtp::waveformat >(); }
				/*!
					\fn void addMtpWaveformat(QString const &mtpWaveformat_)
					
					
					Adds the given \a mtpWaveformat_ to the property \ref mtp_waveformat "mtp:waveformat" set.
					\sa LiveResource::addObject
				 */
				void addMtpWaveformat(QString const &mtpWaveformat_) { baseAddObject< mtp::waveformat >( mtpWaveformat_ ); }
				/*!
					\fn void removeMtpWaveformat(QString const &mtpWaveformat_)
					
					
					Removes the given \a mtpWaveformat_ from the property \ref mtp_waveformat "mtp:waveformat" set.
					\sa LiveResource::removeObject
				 */
				void removeMtpWaveformat(QString const &mtpWaveformat_) { baseRemoveObject< mtp::waveformat >(mtpWaveformat_); }

				/* Property generated from nmm:subtitle
				 * \n rdfs:label=Subtitle file relevant for the video
				 * \n rdfs:range=nmm:SynchronizedText
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:weight=5
				 * \n tracker:modified=1666
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSubtitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_subtitle "nmm:subtitle" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSubtitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::subtitle >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSubtitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_subtitle "nmm:subtitle" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSubtitles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::subtitle >(object_info, strategy, parent); }
				/*!
					\fn void setSubtitles(LiveNodes const &subtitle_)
					
					
					Sets the property \ref nmm_subtitle "nmm:subtitle" set to the given \a subtitle_ set.
					\sa LiveResource::setObjects
				 */
				void setSubtitles(LiveNodes const &subtitle_) { baseSetObjects(nmm::subtitle::iri(), subtitle_); }
				/*!
					\fn void removeSubtitles(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_subtitle "nmm:subtitle" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSubtitles(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::subtitle::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< SynchronizedText > firstSubtitle()
					
					
					Returns the first property \ref nmm_subtitle "nmm:subtitle". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< SynchronizedText > firstSubtitle() { return baseFirstObject< nmm::subtitle >(); }
				/*!
					\fn ::SopranoLive::Live< SynchronizedText > addSubtitle()
					
					
					Adds a new uniquely named resource to the property \ref nmm_subtitle "nmm:subtitle" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< SynchronizedText > addSubtitle() { return baseAddObject< nmm::subtitle >(); }
				/*!
					\fn ::SopranoLive::Live< SynchronizedText > addSubtitle(::SopranoLive::Live< SynchronizedText > const &subtitle_)
					
					
					Adds the given \a subtitle_ to the property \ref nmm_subtitle "nmm:subtitle" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< SynchronizedText > addSubtitle(::SopranoLive::Live< SynchronizedText > const &subtitle_) { return baseAddObject< nmm::subtitle >( subtitle_ ); }
				/*!
					\fn void removeSubtitle(::SopranoLive::Live< SynchronizedText > const &subtitle_)
					
					
					Removes the given \a subtitle_ from the property \ref nmm_subtitle "nmm:subtitle" set.
					\sa LiveResource::removeObject
				 */
				void removeSubtitle(::SopranoLive::Live< SynchronizedText > const &subtitle_) { baseRemoveObject< nmm::subtitle >(subtitle_); }

				/* Property generated from mtp:scantype
				 * \n Scan type of a video file (MTP requirement. FIXME Maybe should be move to a different ontology)
				 * \n rdfs:range=mtp:ScanType
				 * \n rdfs:label=Scan type
				 * \n tracker:modified=1167
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef mtp::ScanType ScanType;
				/*!
					\fn LiveNodes liveMtpScantypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mtp_scantype "mtp:scantype" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMtpScantypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mtp::scantype >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMtpScantypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mtp_scantype "mtp:scantype" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMtpScantypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mtp::scantype >(object_info, strategy, parent); }
				/*!
					\fn void setMtpScantypes(LiveNodes const &mtpScantype_)
					
					
					Sets the property \ref mtp_scantype "mtp:scantype" set to the given \a mtpScantype_ set.
					\sa LiveResource::setObjects
				 */
				void setMtpScantypes(LiveNodes const &mtpScantype_) { baseSetObjects(mtp::scantype::iri(), mtpScantype_); }
				/*!
					\fn void removeMtpScantypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mtp_scantype "mtp:scantype" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMtpScantypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mtp::scantype::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< mtp::ScanType > firstMtpScantype()
					
					
					Returns the first property \ref mtp_scantype "mtp:scantype". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< mtp::ScanType > firstMtpScantype() { return baseFirstObject< mtp::scantype >(); }
				/*!
					\fn ::SopranoLive::Live< mtp::ScanType > addMtpScantype()
					
					
					Adds a new uniquely named resource to the property \ref mtp_scantype "mtp:scantype" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< mtp::ScanType > addMtpScantype() { return baseAddObject< mtp::scantype >(); }
				/*!
					\fn ::SopranoLive::Live< mtp::ScanType > addMtpScantype(::SopranoLive::Live< mtp::ScanType > const &mtpScantype_)
					
					
					Adds the given \a mtpScantype_ to the property \ref mtp_scantype "mtp:scantype" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< mtp::ScanType > addMtpScantype(::SopranoLive::Live< mtp::ScanType > const &mtpScantype_) { return baseAddObject< mtp::scantype >( mtpScantype_ ); }
				/*!
					\fn void removeMtpScantype(::SopranoLive::Live< mtp::ScanType > const &mtpScantype_)
					
					
					Removes the given \a mtpScantype_ from the property \ref mtp_scantype "mtp:scantype" set.
					\sa LiveResource::removeObject
				 */
				void removeMtpScantype(::SopranoLive::Live< mtp::ScanType > const &mtpScantype_) { baseRemoveObject< mtp::scantype >(mtpScantype_); }

				/* Property generated from nmm:isSeries
				 * \n rdfs:label=Is series
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:modified=1478
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveIsSeriess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_isSeries "nmm:isSeries" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsSeriess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::isSeries >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsSeriess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_isSeries "nmm:isSeries" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsSeriess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::isSeries >(object_info, strategy, parent); }
				/*!
					\fn void setIsSeriess(LiveNodes const &isSeries_)
					
					
					Sets the property \ref nmm_isSeries "nmm:isSeries" set to the given \a isSeries_ set.
					\sa LiveResource::setObjects
				 */
				void setIsSeriess(LiveNodes const &isSeries_) { baseSetObjects(nmm::isSeries::iri(), isSeries_); }
				/*!
					\fn void removeIsSeriess(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_isSeries "nmm:isSeries" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsSeriess(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::isSeries::iri(), object_info); }
				/*!
					\fn bool getIsSeries()
					
					
					Returns the property \ref nmm_isSeries "nmm:isSeries". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsSeries() { return baseGetObject< nmm::isSeries >(); }
				/*!
					\fn void setIsSeries(bool const &isSeries_)
					
					
					Sets the property \ref nmm_isSeries "nmm:isSeries" to the given \a isSeries.
					\sa LiveResource::setObject
				 */
				void setIsSeries(bool const &isSeries_) { baseSetObject< nmm::isSeries >( isSeries_ ); }
				/*!
					\fn bool firstIsSeries()
					
					
					Returns the first property \ref nmm_isSeries "nmm:isSeries". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsSeries() { return baseFirstObject< nmm::isSeries >(); }
				/*!
					\fn void addIsSeries(bool const &isSeries_)
					
					
					Adds the given \a isSeries_ to the property \ref nmm_isSeries "nmm:isSeries" set.
					\sa LiveResource::addObject
				 */
				void addIsSeries(bool const &isSeries_) { baseAddObject< nmm::isSeries >( isSeries_ ); }
				/*!
					\fn void removeIsSeries(bool const &isSeries_)
					
					
					Removes the given \a isSeries_ from the property \ref nmm_isSeries "nmm:isSeries" set.
					\sa LiveResource::removeObject
				 */
				void removeIsSeries(bool const &isSeries_) { baseRemoveObject< nmm::isSeries >(isSeries_); }

				/* Property generated from nmm:category
				 * \n rdfs:label=Category
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:weight=4
				 * \n tracker:modified=1829
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_category "nmm:category" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::category >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_category "nmm:category" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::category >(object_info, strategy, parent); }
				/*!
					\fn void setCategorys(LiveNodes const &category_)
					
					
					Sets the property \ref nmm_category "nmm:category" set to the given \a category_ set.
					\sa LiveResource::setObjects
				 */
				void setCategorys(LiveNodes const &category_) { baseSetObjects(nmm::category::iri(), category_); }
				/*!
					\fn void removeCategorys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_category "nmm:category" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCategorys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::category::iri(), object_info); }
				/*!
					\fn QString getCategory()
					
					
					Returns the property \ref nmm_category "nmm:category". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getCategory() { return baseGetObject< nmm::category >(); }
				/*!
					\fn void setCategory(QString const &category_)
					
					
					Sets the property \ref nmm_category "nmm:category" to the given \a category.
					\sa LiveResource::setObject
				 */
				void setCategory(QString const &category_) { baseSetObject< nmm::category >( category_ ); }
				/*!
					\fn QString firstCategory()
					
					
					Returns the first property \ref nmm_category "nmm:category". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstCategory() { return baseFirstObject< nmm::category >(); }
				/*!
					\fn void addCategory(QString const &category_)
					
					
					Adds the given \a category_ to the property \ref nmm_category "nmm:category" set.
					\sa LiveResource::addObject
				 */
				void addCategory(QString const &category_) { baseAddObject< nmm::category >( category_ ); }
				/*!
					\fn void removeCategory(QString const &category_)
					
					
					Removes the given \a category_ from the property \ref nmm_category "nmm:category" set.
					\sa LiveResource::removeObject
				 */
				void removeCategory(QString const &category_) { baseRemoveObject< nmm::category >(category_); }

				/* Property generated from nmm:episodeNumber
				 * \n rdfs:label=Episode number
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:modified=1232
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEpisodeNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_episodeNumber "nmm:episodeNumber" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEpisodeNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::episodeNumber >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEpisodeNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_episodeNumber "nmm:episodeNumber" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEpisodeNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::episodeNumber >(object_info, strategy, parent); }
				/*!
					\fn void setEpisodeNumbers(LiveNodes const &episodeNumber_)
					
					
					Sets the property \ref nmm_episodeNumber "nmm:episodeNumber" set to the given \a episodeNumber_ set.
					\sa LiveResource::setObjects
				 */
				void setEpisodeNumbers(LiveNodes const &episodeNumber_) { baseSetObjects(nmm::episodeNumber::iri(), episodeNumber_); }
				/*!
					\fn void removeEpisodeNumbers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_episodeNumber "nmm:episodeNumber" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEpisodeNumbers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::episodeNumber::iri(), object_info); }
				/*!
					\fn qint64 getEpisodeNumber()
					
					
					Returns the property \ref nmm_episodeNumber "nmm:episodeNumber". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getEpisodeNumber() { return baseGetObject< nmm::episodeNumber >(); }
				/*!
					\fn void setEpisodeNumber(qint64 const &episodeNumber_)
					
					
					Sets the property \ref nmm_episodeNumber "nmm:episodeNumber" to the given \a episodeNumber.
					\sa LiveResource::setObject
				 */
				void setEpisodeNumber(qint64 const &episodeNumber_) { baseSetObject< nmm::episodeNumber >( episodeNumber_ ); }
				/*!
					\fn qint64 firstEpisodeNumber()
					
					
					Returns the first property \ref nmm_episodeNumber "nmm:episodeNumber". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstEpisodeNumber() { return baseFirstObject< nmm::episodeNumber >(); }
				/*!
					\fn void addEpisodeNumber(qint64 const &episodeNumber_)
					
					
					Adds the given \a episodeNumber_ to the property \ref nmm_episodeNumber "nmm:episodeNumber" set.
					\sa LiveResource::addObject
				 */
				void addEpisodeNumber(qint64 const &episodeNumber_) { baseAddObject< nmm::episodeNumber >( episodeNumber_ ); }
				/*!
					\fn void removeEpisodeNumber(qint64 const &episodeNumber_)
					
					
					Removes the given \a episodeNumber_ from the property \ref nmm_episodeNumber "nmm:episodeNumber" set.
					\sa LiveResource::removeObject
				 */
				void removeEpisodeNumber(qint64 const &episodeNumber_) { baseRemoveObject< nmm::episodeNumber >(episodeNumber_); }

				/* Property generated from nmm:synopsis
				 * \n rdfs:label=Synopsis
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:modified=1256
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSynopsiss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_synopsis "nmm:synopsis" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSynopsiss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::synopsis >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSynopsiss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_synopsis "nmm:synopsis" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSynopsiss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::synopsis >(object_info, strategy, parent); }
				/*!
					\fn void setSynopsiss(LiveNodes const &synopsis_)
					
					
					Sets the property \ref nmm_synopsis "nmm:synopsis" set to the given \a synopsis_ set.
					\sa LiveResource::setObjects
				 */
				void setSynopsiss(LiveNodes const &synopsis_) { baseSetObjects(nmm::synopsis::iri(), synopsis_); }
				/*!
					\fn void removeSynopsiss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_synopsis "nmm:synopsis" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSynopsiss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::synopsis::iri(), object_info); }
				/*!
					\fn QString getSynopsis()
					
					
					Returns the property \ref nmm_synopsis "nmm:synopsis". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getSynopsis() { return baseGetObject< nmm::synopsis >(); }
				/*!
					\fn void setSynopsis(QString const &synopsis_)
					
					
					Sets the property \ref nmm_synopsis "nmm:synopsis" to the given \a synopsis.
					\sa LiveResource::setObject
				 */
				void setSynopsis(QString const &synopsis_) { baseSetObject< nmm::synopsis >( synopsis_ ); }
				/*!
					\fn QString firstSynopsis()
					
					
					Returns the first property \ref nmm_synopsis "nmm:synopsis". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstSynopsis() { return baseFirstObject< nmm::synopsis >(); }
				/*!
					\fn void addSynopsis(QString const &synopsis_)
					
					
					Adds the given \a synopsis_ to the property \ref nmm_synopsis "nmm:synopsis" set.
					\sa LiveResource::addObject
				 */
				void addSynopsis(QString const &synopsis_) { baseAddObject< nmm::synopsis >( synopsis_ ); }
				/*!
					\fn void removeSynopsis(QString const &synopsis_)
					
					
					Removes the given \a synopsis_ from the property \ref nmm_synopsis "nmm:synopsis" set.
					\sa LiveResource::removeObject
				 */
				void removeSynopsis(QString const &synopsis_) { baseRemoveObject< nmm::synopsis >(synopsis_); }

				/* Property generated from nmm:isContentEncrypted
				 * \n rdfs:label=Is content encrypted FIXME: defined already in IE in this ontology!
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nmm:Video
				 * \n tracker:modified=1350
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveIsContentEncrypteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_isContentEncrypted "nmm:isContentEncrypted" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsContentEncrypteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::isContentEncrypted >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsContentEncrypteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_isContentEncrypted "nmm:isContentEncrypted" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsContentEncrypteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::isContentEncrypted >(object_info, strategy, parent); }
				/*!
					\fn void setIsContentEncrypteds(LiveNodes const &isContentEncrypted_)
					
					
					Sets the property \ref nmm_isContentEncrypted "nmm:isContentEncrypted" set to the given \a isContentEncrypted_ set.
					\sa LiveResource::setObjects
				 */
				void setIsContentEncrypteds(LiveNodes const &isContentEncrypted_) { baseSetObjects(nmm::isContentEncrypted::iri(), isContentEncrypted_); }
				/*!
					\fn void removeIsContentEncrypteds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_isContentEncrypted "nmm:isContentEncrypted" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsContentEncrypteds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::isContentEncrypted::iri(), object_info); }
				/*!
					\fn bool getIsContentEncrypted()
					
					
					Returns the property \ref nmm_isContentEncrypted "nmm:isContentEncrypted". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsContentEncrypted() { return baseGetObject< nmm::isContentEncrypted >(); }
				/*!
					\fn void setIsContentEncrypted(bool const &isContentEncrypted_)
					
					
					Sets the property \ref nmm_isContentEncrypted "nmm:isContentEncrypted" to the given \a isContentEncrypted.
					\sa LiveResource::setObject
				 */
				void setIsContentEncrypted(bool const &isContentEncrypted_) { baseSetObject< nmm::isContentEncrypted >( isContentEncrypted_ ); }
				/*!
					\fn bool firstIsContentEncrypted()
					
					
					Returns the first property \ref nmm_isContentEncrypted "nmm:isContentEncrypted". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsContentEncrypted() { return baseFirstObject< nmm::isContentEncrypted >(); }
				/*!
					\fn void addIsContentEncrypted(bool const &isContentEncrypted_)
					
					
					Adds the given \a isContentEncrypted_ to the property \ref nmm_isContentEncrypted "nmm:isContentEncrypted" set.
					\sa LiveResource::addObject
				 */
				void addIsContentEncrypted(bool const &isContentEncrypted_) { baseAddObject< nmm::isContentEncrypted >( isContentEncrypted_ ); }
				/*!
					\fn void removeIsContentEncrypted(bool const &isContentEncrypted_)
					
					
					Removes the given \a isContentEncrypted_ from the property \ref nmm_isContentEncrypted "nmm:isContentEncrypted" set.
					\sa LiveResource::removeObject
				 */
				void removeIsContentEncrypted(bool const &isContentEncrypted_) { baseRemoveObject< nmm::isContentEncrypted >(isContentEncrypted_); }
				 //@}
			};

			/*! Class generated from nmm:WhiteBalance
			 * \ingroup onto_nmm_classes
			 * Camera's white balance setting
			 * 
			 * rdfs:label = White balance
			 * 
			 * tracker:modified = 1673
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nmm_white_balance_auto "nmm:white-balance-auto"
			 * 		\ref nmm_white_balance_manual "nmm:white-balance-manual"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmm_whiteBalance "nmm:whiteBalance"
			 */
			class WhiteBalance
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/nmm#WhiteBalance"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nmm Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<WhiteBalance> Live;
				WhiteBalance() { this->attachInterfaceHelper< WhiteBalance >(); }
				~WhiteBalance() { this->detachInterfaceHelper< WhiteBalance >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::AnalogRadio::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::Artist::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::DigitalRadio::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::Flash::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::ImageList::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::MeteringMode::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::MusicAlbum::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::MusicPiece::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::Photo::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::Playlist::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::RadioModulation::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::RadioStation::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::SynchronizedText::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::Video::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nmm::WhiteBalance::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_NMM_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_NMM_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_NMM_H_POST_INCLUDES
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/mtp.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdf.h>
#endif
