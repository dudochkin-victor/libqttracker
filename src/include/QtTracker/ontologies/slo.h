/*
 * slo.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:26.772772
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/slo.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_SLO_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_SLO_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_slo_classes namespace slo class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_slo_properties namespace slo property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_slo_resources namespace slo resource definitions
		 *  @{
		 *  @}
		 */
		static const char slo_namespace_prefix[] = "http://www.tracker-project.org/temp/slo#";
		struct Ontology_slo
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(slo_namespace_prefix) + suffix;
			}
		};
		namespace slo
		{
			inline QUrl iri(QString suffix) { return Ontology_slo::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class GeoLocation;
			class Landmark;
			class LandmarkCategory;
			class Route;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_SLO_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_SLO_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_SLO_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace slo
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from slo:latitude
			 * \anchor slo_latitude
			 * \n Positive values for the north hemisphere, negative for the south
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Latitude
			 * \n tracker:modified=2059
			 * \n rdfs:domain=slo:GeoLocation
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class latitude
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#latitude"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from slo:longitude
			 * \anchor slo_longitude
			 * \n Positive to the East of the Greenwich meridian, negative to the West (following WGS-84)
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Longitude
			 * \n tracker:modified=2073
			 * \n rdfs:domain=slo:GeoLocation
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class longitude
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#longitude"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from slo:verticalAccuracy
			 * \anchor slo_verticalAccuracy
			 * \n Represents the error estimate of vertical (earths-surface) accuracy in meters.
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Latitude
			 * \n tracker:modified=2074
			 * \n rdfs:domain=slo:GeoLocation
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class verticalAccuracy
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#verticalAccuracy"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from slo:horizontalAccuracy
			 * \anchor slo_horizontalAccuracy
			 * \n Represents the error estimate of horizontal (earths-surface) accuracy in meters.
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Longitude
			 * \n tracker:modified=2080
			 * \n rdfs:domain=slo:GeoLocation
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class horizontalAccuracy
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#horizontalAccuracy"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from slo:altitude
			 * \anchor slo_altitude
			 * \n Altitude following WGS 84 reference
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Altitude
			 * \n tracker:modified=2044
			 * \n rdfs:domain=slo:GeoLocation
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class altitude
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#altitude"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from slo:boundingLatitudeMin
			 * \anchor slo_boundingLatitudeMin
			 * \n Southern latitude of the bounding box
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Latitude
			 * \n tracker:modified=2067
			 * \n rdfs:domain=slo:GeoLocation
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class boundingLatitudeMin
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#boundingLatitudeMin"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from slo:boundingLatitudeMax
			 * \anchor slo_boundingLatitudeMax
			 * \n Northern latitude of the bounding box
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Latitude
			 * \n tracker:modified=2071
			 * \n rdfs:domain=slo:GeoLocation
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class boundingLatitudeMax
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#boundingLatitudeMax"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from slo:boundingLongitudeMin
			 * \anchor slo_boundingLongitudeMin
			 * \n Western longitude of the bounding box
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Longitude
			 * \n tracker:modified=2078
			 * \n rdfs:domain=slo:GeoLocation
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class boundingLongitudeMin
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#boundingLongitudeMin"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from slo:boundingLongitudeMax
			 * \anchor slo_boundingLongitudeMax
			 * \n Eastern longitude of the bounding box
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Longitude
			 * \n tracker:modified=2084
			 * \n rdfs:domain=slo:GeoLocation
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class boundingLongitudeMax
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#boundingLongitudeMax"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from slo:radius
			 * \anchor slo_radius
			 * \n Radius from the center to define an area. Some applications can use it in 2D sense, making then a circle instead of a sphere
			 * \n rdfs:range=xsd:double
			 * \n rdfs:label=Radius
			 * \n tracker:modified=2070
			 * \n rdfs:domain=slo:GeoLocation
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class radius
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#radius"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from slo:timestamp
			 * \anchor slo_timestamp
			 * \n Timestamp when the geolocation is referenced. Create subproperties for certain use cases
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:label=Timestamp
			 * \n tracker:modified=2083
			 * \n rdfs:domain=slo:GeoLocation
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class timestamp
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#timestamp"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from slo:postalAddress
			 * \anchor slo_postalAddress
			 * \n Representation of the location as text address
			 * \n rdfs:label=As postal address
			 * \n rdfs:range=nco:PostalAddress
			 * \n rdfs:domain=slo:GeoLocation
			 * \n tracker:indexed=true
			 * \n tracker:modified=2065
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class postalAddress
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#postalAddress"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef GeoLocation Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef GeoLocation RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::PostalAddress Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::PostalAddress RDFRange;
			};
			/*! Property generated from slo:belongsToCategory
			 * \anchor slo_belongsToCategory
			 * \n Relation of a landmark with a landmark category
			 * \n rdfs:range=slo:LandmarkCategory
			 * \n rdfs:label=Belongs to category
			 * \n tracker:modified=2061
			 * \n rdfs:domain=slo:Landmark
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class belongsToCategory
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#belongsToCategory"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Landmark Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Landmark RDFDomain;
				/// The localized c++ range type of this property
				typedef LandmarkCategory Range;
				/// The full, non-localized rdf range type of this property
				typedef LandmarkCategory RDFRange;
			};
			/*! Property generated from slo:hasContact
			 * \anchor slo_hasContact
			 * \n The contact information of the landmark in question
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:label=Landmark contact information
			 * \n tracker:modified=2051
			 * \n rdfs:domain=slo:Landmark
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class hasContact
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#hasContact"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Landmark Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Landmark RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from slo:iconUrl
			 * \anchor slo_iconUrl
			 * \n Url of the icon that corresponds to this landmark.
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:label=Landmark icon
			 * \n tracker:modified=2049
			 * \n rdfs:domain=slo:Landmark
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class iconUrl
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#iconUrl"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Landmark Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Landmark RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from slo:isRemovable
			 * \anchor slo_isRemovable
			 * \n Flag to indicate if this instance is removable. This restriction is not enforced by tracker; it is API responsability to honor the value
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:label=Is removable
			 * \n tracker:modified=2046
			 * \n rdfs:domain=slo:LandmarkCategory
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class isRemovable
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#isRemovable"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef LandmarkCategory Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef LandmarkCategory RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from slo:categoryIconUrl
			 * \anchor slo_categoryIconUrl
			 * \n Url of the icon that corresponds to this category.
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:label=Landmark category icon
			 * \n tracker:modified=2055
			 * \n rdfs:domain=slo:LandmarkCategory
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class categoryIconUrl
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#categoryIconUrl"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef LandmarkCategory Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef LandmarkCategory RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from slo:startTime
			 * \anchor slo_startTime
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:label=Time when the first point in the route was saved
			 * \n tracker:modified=2064
			 * \n rdfs:domain=slo:Route
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class startTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#startTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Route Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Route RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from slo:endTime
			 * \anchor slo_endTime
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:label=Time when the last point in the route was saved
			 * \n tracker:modified=2052
			 * \n rdfs:domain=slo:Route
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class endTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#endTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Route Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Route RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from slo:routeDetails
			 * \anchor slo_routeDetails
			 * \n FIXME Domain can be resource if we handle map-files correctly in the ontology
			 * \n rdfs:range=xsd:string
			 * \n rdfs:label=Pointer to a file containing route details (e.g. KML file).
			 * \n tracker:modified=2081
			 * \n rdfs:domain=slo:Route
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class routeDetails
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#routeDetails"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Route Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Route RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from slo:location
			 * \anchor slo_location
			 * \n This can be subclassed to add semantics
			 * \n rdfs:label=Property linking something to a location
			 * \n rdfs:range=slo:GeoLocation
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:writeback=true
			 * \n tracker:indexed=true
			 * \n tracker:modified=2054
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_slo_properties
			class location
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#location"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_slo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef nie::InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nie::InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef GeoLocation Range;
				/// The full, non-localized rdf range type of this property
				typedef GeoLocation RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			/*! Resource generated from slo:predefined-landmark-category-accommodation
			 * \anchor slo_predefined_landmark_category_accommodation
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_accommodation
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-accommodation"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-business
			 * \anchor slo_predefined_landmark_category_business
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_business
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-business"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-communication
			 * \anchor slo_predefined_landmark_category_communication
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_communication
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-communication"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-educational-institute
			 * \anchor slo_predefined_landmark_category_educational_institute
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_educational_institute
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-educational-institute"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-entertainment
			 * \anchor slo_predefined_landmark_category_entertainment
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_entertainment
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-entertainment"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-food-beverage
			 * \anchor slo_predefined_landmark_category_food_beverage
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_food_beverage
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-food-beverage"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-geographical-area
			 * \anchor slo_predefined_landmark_category_geographical_area
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_geographical_area
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-geographical-area"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-outdoor-activities
			 * \anchor slo_predefined_landmark_category_outdoor_activities
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_outdoor_activities
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-outdoor-activities"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-people
			 * \anchor slo_predefined_landmark_category_people
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_people
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-people"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-public-service
			 * \anchor slo_predefined_landmark_category_public_service
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_public_service
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-public-service"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-religious-places
			 * \anchor slo_predefined_landmark_category_religious_places
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_religious_places
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-religious-places"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-shopping
			 * \anchor slo_predefined_landmark_category_shopping
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_shopping
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-shopping"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-sightseeing
			 * \anchor slo_predefined_landmark_category_sightseeing
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_sightseeing
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-sightseeing"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-sports
			 * \anchor slo_predefined_landmark_category_sports
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_sports
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-sports"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from slo:predefined-landmark-category-transport
			 * \anchor slo_predefined_landmark_category_transport
			 */
			/// \ingroup onto_slo_resources
			class predefined_landmark_category_transport
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#predefined-landmark-category-transport"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef LandmarkCategory ResourceType;
				//! The ontology of this resource
				typedef Ontology_slo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_SLO_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_SLO_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_SLO_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace slo
		{

			using namespace rdf;
			using namespace rdfs;
			using namespace nie;
			using namespace xsd;
			using namespace nco;

			/*! Class generated from slo:GeoLocation
			 * \ingroup onto_slo_classes
			 * A place in the space, can be defined by coordinates or text
			 * 
			 * rdfs:label = Location
			 * 
			 * tracker:modified = 2086
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref slo_location "slo:location"
			 */
			class GeoLocation
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#GeoLocation"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_slo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<GeoLocation> Live;
				GeoLocation() { this->attachInterfaceHelper< GeoLocation >(); }
				~GeoLocation() { this->detachInterfaceHelper< GeoLocation >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from slo:latitude
				 * \n Positive values for the north hemisphere, negative for the south
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Latitude
				 * \n tracker:modified=2059
				 * \n rdfs:domain=slo:GeoLocation
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLatitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_latitude "slo:latitude" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLatitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::latitude >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLatitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_latitude "slo:latitude" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLatitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::latitude >(object_info, strategy, parent); }
				/*!
					\fn void setLatitudes(LiveNodes const &latitude_)
					
					
					Sets the property \ref slo_latitude "slo:latitude" set to the given \a latitude_ set.
					\sa LiveResource::setObjects
				 */
				void setLatitudes(LiveNodes const &latitude_) { baseSetObjects(slo::latitude::iri(), latitude_); }
				/*!
					\fn void removeLatitudes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_latitude "slo:latitude" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLatitudes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::latitude::iri(), object_info); }
				/*!
					\fn double firstLatitude()
					
					
					Returns the first property \ref slo_latitude "slo:latitude". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstLatitude() { return baseFirstObject< slo::latitude >(); }
				/*!
					\fn void addLatitude(double const &latitude_)
					
					
					Adds the given \a latitude_ to the property \ref slo_latitude "slo:latitude" set.
					\sa LiveResource::addObject
				 */
				void addLatitude(double const &latitude_) { baseAddObject< slo::latitude >( latitude_ ); }
				/*!
					\fn void removeLatitude(double const &latitude_)
					
					
					Removes the given \a latitude_ from the property \ref slo_latitude "slo:latitude" set.
					\sa LiveResource::removeObject
				 */
				void removeLatitude(double const &latitude_) { baseRemoveObject< slo::latitude >(latitude_); }

				/* Property generated from slo:boundingLongitudeMin
				 * \n Western longitude of the bounding box
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Longitude
				 * \n tracker:modified=2078
				 * \n rdfs:domain=slo:GeoLocation
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBoundingLongitudeMins(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_boundingLongitudeMin "slo:boundingLongitudeMin" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBoundingLongitudeMins(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::boundingLongitudeMin >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBoundingLongitudeMins(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_boundingLongitudeMin "slo:boundingLongitudeMin" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBoundingLongitudeMins(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::boundingLongitudeMin >(object_info, strategy, parent); }
				/*!
					\fn void setBoundingLongitudeMins(LiveNodes const &boundingLongitudeMin_)
					
					
					Sets the property \ref slo_boundingLongitudeMin "slo:boundingLongitudeMin" set to the given \a boundingLongitudeMin_ set.
					\sa LiveResource::setObjects
				 */
				void setBoundingLongitudeMins(LiveNodes const &boundingLongitudeMin_) { baseSetObjects(slo::boundingLongitudeMin::iri(), boundingLongitudeMin_); }
				/*!
					\fn void removeBoundingLongitudeMins(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_boundingLongitudeMin "slo:boundingLongitudeMin" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBoundingLongitudeMins(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::boundingLongitudeMin::iri(), object_info); }
				/*!
					\fn double firstBoundingLongitudeMin()
					
					
					Returns the first property \ref slo_boundingLongitudeMin "slo:boundingLongitudeMin". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstBoundingLongitudeMin() { return baseFirstObject< slo::boundingLongitudeMin >(); }
				/*!
					\fn void addBoundingLongitudeMin(double const &boundingLongitudeMin_)
					
					
					Adds the given \a boundingLongitudeMin_ to the property \ref slo_boundingLongitudeMin "slo:boundingLongitudeMin" set.
					\sa LiveResource::addObject
				 */
				void addBoundingLongitudeMin(double const &boundingLongitudeMin_) { baseAddObject< slo::boundingLongitudeMin >( boundingLongitudeMin_ ); }
				/*!
					\fn void removeBoundingLongitudeMin(double const &boundingLongitudeMin_)
					
					
					Removes the given \a boundingLongitudeMin_ from the property \ref slo_boundingLongitudeMin "slo:boundingLongitudeMin" set.
					\sa LiveResource::removeObject
				 */
				void removeBoundingLongitudeMin(double const &boundingLongitudeMin_) { baseRemoveObject< slo::boundingLongitudeMin >(boundingLongitudeMin_); }

				/* Property generated from slo:postalAddress
				 * \n Representation of the location as text address
				 * \n rdfs:label=As postal address
				 * \n rdfs:range=nco:PostalAddress
				 * \n rdfs:domain=slo:GeoLocation
				 * \n tracker:indexed=true
				 * \n tracker:modified=2065
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nco::PostalAddress PostalAddress;
				/*!
					\fn LiveNodes livePostalAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_postalAddress "slo:postalAddress" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePostalAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::postalAddress >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPostalAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_postalAddress "slo:postalAddress" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPostalAddresss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::postalAddress >(object_info, strategy, parent); }
				/*!
					\fn void setPostalAddresss(LiveNodes const &postalAddress_)
					
					
					Sets the property \ref slo_postalAddress "slo:postalAddress" set to the given \a postalAddress_ set.
					\sa LiveResource::setObjects
				 */
				void setPostalAddresss(LiveNodes const &postalAddress_) { baseSetObjects(slo::postalAddress::iri(), postalAddress_); }
				/*!
					\fn void removePostalAddresss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_postalAddress "slo:postalAddress" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePostalAddresss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::postalAddress::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::PostalAddress > firstPostalAddress()
					
					
					Returns the first property \ref slo_postalAddress "slo:postalAddress". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::PostalAddress > firstPostalAddress() { return baseFirstObject< slo::postalAddress >(); }
				/*!
					\fn ::SopranoLive::Live< nco::PostalAddress > addPostalAddress()
					
					
					Adds a new uniquely named resource to the property \ref slo_postalAddress "slo:postalAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::PostalAddress > addPostalAddress() { return baseAddObject< slo::postalAddress >(); }
				/*!
					\fn ::SopranoLive::Live< nco::PostalAddress > addPostalAddress(::SopranoLive::Live< nco::PostalAddress > const &postalAddress_)
					
					
					Adds the given \a postalAddress_ to the property \ref slo_postalAddress "slo:postalAddress" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::PostalAddress > addPostalAddress(::SopranoLive::Live< nco::PostalAddress > const &postalAddress_) { return baseAddObject< slo::postalAddress >( postalAddress_ ); }
				/*!
					\fn void removePostalAddress(::SopranoLive::Live< nco::PostalAddress > const &postalAddress_)
					
					
					Removes the given \a postalAddress_ from the property \ref slo_postalAddress "slo:postalAddress" set.
					\sa LiveResource::removeObject
				 */
				void removePostalAddress(::SopranoLive::Live< nco::PostalAddress > const &postalAddress_) { baseRemoveObject< slo::postalAddress >(postalAddress_); }

				/* Property generated from slo:timestamp
				 * \n Timestamp when the geolocation is referenced. Create subproperties for certain use cases
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:label=Timestamp
				 * \n tracker:modified=2083
				 * \n rdfs:domain=slo:GeoLocation
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTimestamps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_timestamp "slo:timestamp" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTimestamps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::timestamp >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTimestamps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_timestamp "slo:timestamp" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTimestamps(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::timestamp >(object_info, strategy, parent); }
				/*!
					\fn void setTimestamps(LiveNodes const &timestamp_)
					
					
					Sets the property \ref slo_timestamp "slo:timestamp" set to the given \a timestamp_ set.
					\sa LiveResource::setObjects
				 */
				void setTimestamps(LiveNodes const &timestamp_) { baseSetObjects(slo::timestamp::iri(), timestamp_); }
				/*!
					\fn void removeTimestamps(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_timestamp "slo:timestamp" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTimestamps(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::timestamp::iri(), object_info); }
				/*!
					\fn QDateTime firstTimestamp()
					
					
					Returns the first property \ref slo_timestamp "slo:timestamp". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstTimestamp() { return baseFirstObject< slo::timestamp >(); }
				/*!
					\fn void addTimestamp(QDateTime const &timestamp_)
					
					
					Adds the given \a timestamp_ to the property \ref slo_timestamp "slo:timestamp" set.
					\sa LiveResource::addObject
				 */
				void addTimestamp(QDateTime const &timestamp_) { baseAddObject< slo::timestamp >( timestamp_ ); }
				/*!
					\fn void removeTimestamp(QDateTime const &timestamp_)
					
					
					Removes the given \a timestamp_ from the property \ref slo_timestamp "slo:timestamp" set.
					\sa LiveResource::removeObject
				 */
				void removeTimestamp(QDateTime const &timestamp_) { baseRemoveObject< slo::timestamp >(timestamp_); }

				/* Property generated from slo:boundingLongitudeMax
				 * \n Eastern longitude of the bounding box
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Longitude
				 * \n tracker:modified=2084
				 * \n rdfs:domain=slo:GeoLocation
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBoundingLongitudeMaxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_boundingLongitudeMax "slo:boundingLongitudeMax" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBoundingLongitudeMaxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::boundingLongitudeMax >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBoundingLongitudeMaxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_boundingLongitudeMax "slo:boundingLongitudeMax" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBoundingLongitudeMaxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::boundingLongitudeMax >(object_info, strategy, parent); }
				/*!
					\fn void setBoundingLongitudeMaxs(LiveNodes const &boundingLongitudeMax_)
					
					
					Sets the property \ref slo_boundingLongitudeMax "slo:boundingLongitudeMax" set to the given \a boundingLongitudeMax_ set.
					\sa LiveResource::setObjects
				 */
				void setBoundingLongitudeMaxs(LiveNodes const &boundingLongitudeMax_) { baseSetObjects(slo::boundingLongitudeMax::iri(), boundingLongitudeMax_); }
				/*!
					\fn void removeBoundingLongitudeMaxs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_boundingLongitudeMax "slo:boundingLongitudeMax" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBoundingLongitudeMaxs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::boundingLongitudeMax::iri(), object_info); }
				/*!
					\fn double firstBoundingLongitudeMax()
					
					
					Returns the first property \ref slo_boundingLongitudeMax "slo:boundingLongitudeMax". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstBoundingLongitudeMax() { return baseFirstObject< slo::boundingLongitudeMax >(); }
				/*!
					\fn void addBoundingLongitudeMax(double const &boundingLongitudeMax_)
					
					
					Adds the given \a boundingLongitudeMax_ to the property \ref slo_boundingLongitudeMax "slo:boundingLongitudeMax" set.
					\sa LiveResource::addObject
				 */
				void addBoundingLongitudeMax(double const &boundingLongitudeMax_) { baseAddObject< slo::boundingLongitudeMax >( boundingLongitudeMax_ ); }
				/*!
					\fn void removeBoundingLongitudeMax(double const &boundingLongitudeMax_)
					
					
					Removes the given \a boundingLongitudeMax_ from the property \ref slo_boundingLongitudeMax "slo:boundingLongitudeMax" set.
					\sa LiveResource::removeObject
				 */
				void removeBoundingLongitudeMax(double const &boundingLongitudeMax_) { baseRemoveObject< slo::boundingLongitudeMax >(boundingLongitudeMax_); }

				/* Property generated from slo:boundingLatitudeMax
				 * \n Northern latitude of the bounding box
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Latitude
				 * \n tracker:modified=2071
				 * \n rdfs:domain=slo:GeoLocation
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBoundingLatitudeMaxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_boundingLatitudeMax "slo:boundingLatitudeMax" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBoundingLatitudeMaxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::boundingLatitudeMax >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBoundingLatitudeMaxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_boundingLatitudeMax "slo:boundingLatitudeMax" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBoundingLatitudeMaxs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::boundingLatitudeMax >(object_info, strategy, parent); }
				/*!
					\fn void setBoundingLatitudeMaxs(LiveNodes const &boundingLatitudeMax_)
					
					
					Sets the property \ref slo_boundingLatitudeMax "slo:boundingLatitudeMax" set to the given \a boundingLatitudeMax_ set.
					\sa LiveResource::setObjects
				 */
				void setBoundingLatitudeMaxs(LiveNodes const &boundingLatitudeMax_) { baseSetObjects(slo::boundingLatitudeMax::iri(), boundingLatitudeMax_); }
				/*!
					\fn void removeBoundingLatitudeMaxs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_boundingLatitudeMax "slo:boundingLatitudeMax" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBoundingLatitudeMaxs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::boundingLatitudeMax::iri(), object_info); }
				/*!
					\fn double firstBoundingLatitudeMax()
					
					
					Returns the first property \ref slo_boundingLatitudeMax "slo:boundingLatitudeMax". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstBoundingLatitudeMax() { return baseFirstObject< slo::boundingLatitudeMax >(); }
				/*!
					\fn void addBoundingLatitudeMax(double const &boundingLatitudeMax_)
					
					
					Adds the given \a boundingLatitudeMax_ to the property \ref slo_boundingLatitudeMax "slo:boundingLatitudeMax" set.
					\sa LiveResource::addObject
				 */
				void addBoundingLatitudeMax(double const &boundingLatitudeMax_) { baseAddObject< slo::boundingLatitudeMax >( boundingLatitudeMax_ ); }
				/*!
					\fn void removeBoundingLatitudeMax(double const &boundingLatitudeMax_)
					
					
					Removes the given \a boundingLatitudeMax_ from the property \ref slo_boundingLatitudeMax "slo:boundingLatitudeMax" set.
					\sa LiveResource::removeObject
				 */
				void removeBoundingLatitudeMax(double const &boundingLatitudeMax_) { baseRemoveObject< slo::boundingLatitudeMax >(boundingLatitudeMax_); }

				/* Property generated from slo:altitude
				 * \n Altitude following WGS 84 reference
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Altitude
				 * \n tracker:modified=2044
				 * \n rdfs:domain=slo:GeoLocation
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAltitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_altitude "slo:altitude" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAltitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::altitude >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAltitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_altitude "slo:altitude" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAltitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::altitude >(object_info, strategy, parent); }
				/*!
					\fn void setAltitudes(LiveNodes const &altitude_)
					
					
					Sets the property \ref slo_altitude "slo:altitude" set to the given \a altitude_ set.
					\sa LiveResource::setObjects
				 */
				void setAltitudes(LiveNodes const &altitude_) { baseSetObjects(slo::altitude::iri(), altitude_); }
				/*!
					\fn void removeAltitudes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_altitude "slo:altitude" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAltitudes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::altitude::iri(), object_info); }
				/*!
					\fn double firstAltitude()
					
					
					Returns the first property \ref slo_altitude "slo:altitude". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstAltitude() { return baseFirstObject< slo::altitude >(); }
				/*!
					\fn void addAltitude(double const &altitude_)
					
					
					Adds the given \a altitude_ to the property \ref slo_altitude "slo:altitude" set.
					\sa LiveResource::addObject
				 */
				void addAltitude(double const &altitude_) { baseAddObject< slo::altitude >( altitude_ ); }
				/*!
					\fn void removeAltitude(double const &altitude_)
					
					
					Removes the given \a altitude_ from the property \ref slo_altitude "slo:altitude" set.
					\sa LiveResource::removeObject
				 */
				void removeAltitude(double const &altitude_) { baseRemoveObject< slo::altitude >(altitude_); }

				/* Property generated from slo:verticalAccuracy
				 * \n Represents the error estimate of vertical (earths-surface) accuracy in meters.
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Latitude
				 * \n tracker:modified=2074
				 * \n rdfs:domain=slo:GeoLocation
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveVerticalAccuracys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_verticalAccuracy "slo:verticalAccuracy" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveVerticalAccuracys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::verticalAccuracy >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getVerticalAccuracys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_verticalAccuracy "slo:verticalAccuracy" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getVerticalAccuracys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::verticalAccuracy >(object_info, strategy, parent); }
				/*!
					\fn void setVerticalAccuracys(LiveNodes const &verticalAccuracy_)
					
					
					Sets the property \ref slo_verticalAccuracy "slo:verticalAccuracy" set to the given \a verticalAccuracy_ set.
					\sa LiveResource::setObjects
				 */
				void setVerticalAccuracys(LiveNodes const &verticalAccuracy_) { baseSetObjects(slo::verticalAccuracy::iri(), verticalAccuracy_); }
				/*!
					\fn void removeVerticalAccuracys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_verticalAccuracy "slo:verticalAccuracy" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeVerticalAccuracys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::verticalAccuracy::iri(), object_info); }
				/*!
					\fn double firstVerticalAccuracy()
					
					
					Returns the first property \ref slo_verticalAccuracy "slo:verticalAccuracy". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstVerticalAccuracy() { return baseFirstObject< slo::verticalAccuracy >(); }
				/*!
					\fn void addVerticalAccuracy(double const &verticalAccuracy_)
					
					
					Adds the given \a verticalAccuracy_ to the property \ref slo_verticalAccuracy "slo:verticalAccuracy" set.
					\sa LiveResource::addObject
				 */
				void addVerticalAccuracy(double const &verticalAccuracy_) { baseAddObject< slo::verticalAccuracy >( verticalAccuracy_ ); }
				/*!
					\fn void removeVerticalAccuracy(double const &verticalAccuracy_)
					
					
					Removes the given \a verticalAccuracy_ from the property \ref slo_verticalAccuracy "slo:verticalAccuracy" set.
					\sa LiveResource::removeObject
				 */
				void removeVerticalAccuracy(double const &verticalAccuracy_) { baseRemoveObject< slo::verticalAccuracy >(verticalAccuracy_); }

				/* Property generated from slo:longitude
				 * \n Positive to the East of the Greenwich meridian, negative to the West (following WGS-84)
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Longitude
				 * \n tracker:modified=2073
				 * \n rdfs:domain=slo:GeoLocation
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLongitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_longitude "slo:longitude" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLongitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::longitude >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLongitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_longitude "slo:longitude" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLongitudes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::longitude >(object_info, strategy, parent); }
				/*!
					\fn void setLongitudes(LiveNodes const &longitude_)
					
					
					Sets the property \ref slo_longitude "slo:longitude" set to the given \a longitude_ set.
					\sa LiveResource::setObjects
				 */
				void setLongitudes(LiveNodes const &longitude_) { baseSetObjects(slo::longitude::iri(), longitude_); }
				/*!
					\fn void removeLongitudes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_longitude "slo:longitude" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLongitudes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::longitude::iri(), object_info); }
				/*!
					\fn double firstLongitude()
					
					
					Returns the first property \ref slo_longitude "slo:longitude". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstLongitude() { return baseFirstObject< slo::longitude >(); }
				/*!
					\fn void addLongitude(double const &longitude_)
					
					
					Adds the given \a longitude_ to the property \ref slo_longitude "slo:longitude" set.
					\sa LiveResource::addObject
				 */
				void addLongitude(double const &longitude_) { baseAddObject< slo::longitude >( longitude_ ); }
				/*!
					\fn void removeLongitude(double const &longitude_)
					
					
					Removes the given \a longitude_ from the property \ref slo_longitude "slo:longitude" set.
					\sa LiveResource::removeObject
				 */
				void removeLongitude(double const &longitude_) { baseRemoveObject< slo::longitude >(longitude_); }

				/* Property generated from slo:radius
				 * \n Radius from the center to define an area. Some applications can use it in 2D sense, making then a circle instead of a sphere
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Radius
				 * \n tracker:modified=2070
				 * \n rdfs:domain=slo:GeoLocation
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRadiuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_radius "slo:radius" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRadiuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::radius >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRadiuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_radius "slo:radius" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRadiuss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::radius >(object_info, strategy, parent); }
				/*!
					\fn void setRadiuss(LiveNodes const &radius_)
					
					
					Sets the property \ref slo_radius "slo:radius" set to the given \a radius_ set.
					\sa LiveResource::setObjects
				 */
				void setRadiuss(LiveNodes const &radius_) { baseSetObjects(slo::radius::iri(), radius_); }
				/*!
					\fn void removeRadiuss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_radius "slo:radius" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRadiuss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::radius::iri(), object_info); }
				/*!
					\fn double firstRadius()
					
					
					Returns the first property \ref slo_radius "slo:radius". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstRadius() { return baseFirstObject< slo::radius >(); }
				/*!
					\fn void addRadius(double const &radius_)
					
					
					Adds the given \a radius_ to the property \ref slo_radius "slo:radius" set.
					\sa LiveResource::addObject
				 */
				void addRadius(double const &radius_) { baseAddObject< slo::radius >( radius_ ); }
				/*!
					\fn void removeRadius(double const &radius_)
					
					
					Removes the given \a radius_ from the property \ref slo_radius "slo:radius" set.
					\sa LiveResource::removeObject
				 */
				void removeRadius(double const &radius_) { baseRemoveObject< slo::radius >(radius_); }

				/* Property generated from slo:horizontalAccuracy
				 * \n Represents the error estimate of horizontal (earths-surface) accuracy in meters.
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Longitude
				 * \n tracker:modified=2080
				 * \n rdfs:domain=slo:GeoLocation
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHorizontalAccuracys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_horizontalAccuracy "slo:horizontalAccuracy" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHorizontalAccuracys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::horizontalAccuracy >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHorizontalAccuracys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_horizontalAccuracy "slo:horizontalAccuracy" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHorizontalAccuracys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::horizontalAccuracy >(object_info, strategy, parent); }
				/*!
					\fn void setHorizontalAccuracys(LiveNodes const &horizontalAccuracy_)
					
					
					Sets the property \ref slo_horizontalAccuracy "slo:horizontalAccuracy" set to the given \a horizontalAccuracy_ set.
					\sa LiveResource::setObjects
				 */
				void setHorizontalAccuracys(LiveNodes const &horizontalAccuracy_) { baseSetObjects(slo::horizontalAccuracy::iri(), horizontalAccuracy_); }
				/*!
					\fn void removeHorizontalAccuracys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_horizontalAccuracy "slo:horizontalAccuracy" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHorizontalAccuracys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::horizontalAccuracy::iri(), object_info); }
				/*!
					\fn double firstHorizontalAccuracy()
					
					
					Returns the first property \ref slo_horizontalAccuracy "slo:horizontalAccuracy". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstHorizontalAccuracy() { return baseFirstObject< slo::horizontalAccuracy >(); }
				/*!
					\fn void addHorizontalAccuracy(double const &horizontalAccuracy_)
					
					
					Adds the given \a horizontalAccuracy_ to the property \ref slo_horizontalAccuracy "slo:horizontalAccuracy" set.
					\sa LiveResource::addObject
				 */
				void addHorizontalAccuracy(double const &horizontalAccuracy_) { baseAddObject< slo::horizontalAccuracy >( horizontalAccuracy_ ); }
				/*!
					\fn void removeHorizontalAccuracy(double const &horizontalAccuracy_)
					
					
					Removes the given \a horizontalAccuracy_ from the property \ref slo_horizontalAccuracy "slo:horizontalAccuracy" set.
					\sa LiveResource::removeObject
				 */
				void removeHorizontalAccuracy(double const &horizontalAccuracy_) { baseRemoveObject< slo::horizontalAccuracy >(horizontalAccuracy_); }

				/* Property generated from slo:boundingLatitudeMin
				 * \n Southern latitude of the bounding box
				 * \n rdfs:range=xsd:double
				 * \n rdfs:label=Latitude
				 * \n tracker:modified=2067
				 * \n rdfs:domain=slo:GeoLocation
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBoundingLatitudeMins(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_boundingLatitudeMin "slo:boundingLatitudeMin" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBoundingLatitudeMins(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::boundingLatitudeMin >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBoundingLatitudeMins(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_boundingLatitudeMin "slo:boundingLatitudeMin" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBoundingLatitudeMins(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::boundingLatitudeMin >(object_info, strategy, parent); }
				/*!
					\fn void setBoundingLatitudeMins(LiveNodes const &boundingLatitudeMin_)
					
					
					Sets the property \ref slo_boundingLatitudeMin "slo:boundingLatitudeMin" set to the given \a boundingLatitudeMin_ set.
					\sa LiveResource::setObjects
				 */
				void setBoundingLatitudeMins(LiveNodes const &boundingLatitudeMin_) { baseSetObjects(slo::boundingLatitudeMin::iri(), boundingLatitudeMin_); }
				/*!
					\fn void removeBoundingLatitudeMins(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_boundingLatitudeMin "slo:boundingLatitudeMin" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBoundingLatitudeMins(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::boundingLatitudeMin::iri(), object_info); }
				/*!
					\fn double firstBoundingLatitudeMin()
					
					
					Returns the first property \ref slo_boundingLatitudeMin "slo:boundingLatitudeMin". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstBoundingLatitudeMin() { return baseFirstObject< slo::boundingLatitudeMin >(); }
				/*!
					\fn void addBoundingLatitudeMin(double const &boundingLatitudeMin_)
					
					
					Adds the given \a boundingLatitudeMin_ to the property \ref slo_boundingLatitudeMin "slo:boundingLatitudeMin" set.
					\sa LiveResource::addObject
				 */
				void addBoundingLatitudeMin(double const &boundingLatitudeMin_) { baseAddObject< slo::boundingLatitudeMin >( boundingLatitudeMin_ ); }
				/*!
					\fn void removeBoundingLatitudeMin(double const &boundingLatitudeMin_)
					
					
					Removes the given \a boundingLatitudeMin_ from the property \ref slo_boundingLatitudeMin "slo:boundingLatitudeMin" set.
					\sa LiveResource::removeObject
				 */
				void removeBoundingLatitudeMin(double const &boundingLatitudeMin_) { baseRemoveObject< slo::boundingLatitudeMin >(boundingLatitudeMin_); }
				 //@}
			};

			/*! Class generated from slo:Landmark
			 * \ingroup onto_slo_classes
			 * Use the nie title, description, ... properties
			 * 
			 * rdfs:label = Point with special relevance for the user
			 * 
			 * tracker:modified = 2050
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Landmark
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#Landmark"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_slo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Landmark> Live;
				Landmark() { this->attachInterfaceHelper< Landmark >(); }
				~Landmark() { this->detachInterfaceHelper< Landmark >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from slo:iconUrl
				 * \n Url of the icon that corresponds to this landmark.
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:label=Landmark icon
				 * \n tracker:modified=2049
				 * \n rdfs:domain=slo:Landmark
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveIconUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_iconUrl "slo:iconUrl" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIconUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::iconUrl >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIconUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_iconUrl "slo:iconUrl" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIconUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::iconUrl >(object_info, strategy, parent); }
				/*!
					\fn void setIconUrls(LiveNodes const &iconUrl_)
					
					
					Sets the property \ref slo_iconUrl "slo:iconUrl" set to the given \a iconUrl_ set.
					\sa LiveResource::setObjects
				 */
				void setIconUrls(LiveNodes const &iconUrl_) { baseSetObjects(slo::iconUrl::iri(), iconUrl_); }
				/*!
					\fn void removeIconUrls(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_iconUrl "slo:iconUrl" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIconUrls(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::iconUrl::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstIconUrl()
					
					
					Returns the first property \ref slo_iconUrl "slo:iconUrl". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstIconUrl() { return baseFirstObject< slo::iconUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addIconUrl()
					
					
					Adds a new uniquely named resource to the property \ref slo_iconUrl "slo:iconUrl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addIconUrl() { return baseAddObject< slo::iconUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addIconUrl(::SopranoLive::Live< rdfs::Resource > const &iconUrl_)
					
					
					Adds the given \a iconUrl_ to the property \ref slo_iconUrl "slo:iconUrl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addIconUrl(::SopranoLive::Live< rdfs::Resource > const &iconUrl_) { return baseAddObject< slo::iconUrl >( iconUrl_ ); }
				/*!
					\fn void removeIconUrl(::SopranoLive::Live< rdfs::Resource > const &iconUrl_)
					
					
					Removes the given \a iconUrl_ from the property \ref slo_iconUrl "slo:iconUrl" set.
					\sa LiveResource::removeObject
				 */
				void removeIconUrl(::SopranoLive::Live< rdfs::Resource > const &iconUrl_) { baseRemoveObject< slo::iconUrl >(iconUrl_); }

				/* Property generated from slo:belongsToCategory
				 * \n Relation of a landmark with a landmark category
				 * \n rdfs:range=slo:LandmarkCategory
				 * \n rdfs:label=Belongs to category
				 * \n tracker:modified=2061
				 * \n rdfs:domain=slo:Landmark
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBelongsToCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_belongsToCategory "slo:belongsToCategory" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBelongsToCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::belongsToCategory >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBelongsToCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_belongsToCategory "slo:belongsToCategory" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBelongsToCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::belongsToCategory >(object_info, strategy, parent); }
				/*!
					\fn void setBelongsToCategorys(LiveNodes const &belongsToCategory_)
					
					
					Sets the property \ref slo_belongsToCategory "slo:belongsToCategory" set to the given \a belongsToCategory_ set.
					\sa LiveResource::setObjects
				 */
				void setBelongsToCategorys(LiveNodes const &belongsToCategory_) { baseSetObjects(slo::belongsToCategory::iri(), belongsToCategory_); }
				/*!
					\fn void removeBelongsToCategorys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_belongsToCategory "slo:belongsToCategory" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBelongsToCategorys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::belongsToCategory::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< LandmarkCategory > firstBelongsToCategory()
					
					
					Returns the first property \ref slo_belongsToCategory "slo:belongsToCategory". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< LandmarkCategory > firstBelongsToCategory() { return baseFirstObject< slo::belongsToCategory >(); }
				/*!
					\fn ::SopranoLive::Live< LandmarkCategory > addBelongsToCategory()
					
					
					Adds a new uniquely named resource to the property \ref slo_belongsToCategory "slo:belongsToCategory" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< LandmarkCategory > addBelongsToCategory() { return baseAddObject< slo::belongsToCategory >(); }
				/*!
					\fn ::SopranoLive::Live< LandmarkCategory > addBelongsToCategory(::SopranoLive::Live< LandmarkCategory > const &belongsToCategory_)
					
					
					Adds the given \a belongsToCategory_ to the property \ref slo_belongsToCategory "slo:belongsToCategory" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< LandmarkCategory > addBelongsToCategory(::SopranoLive::Live< LandmarkCategory > const &belongsToCategory_) { return baseAddObject< slo::belongsToCategory >( belongsToCategory_ ); }
				/*!
					\fn void removeBelongsToCategory(::SopranoLive::Live< LandmarkCategory > const &belongsToCategory_)
					
					
					Removes the given \a belongsToCategory_ from the property \ref slo_belongsToCategory "slo:belongsToCategory" set.
					\sa LiveResource::removeObject
				 */
				void removeBelongsToCategory(::SopranoLive::Live< LandmarkCategory > const &belongsToCategory_) { baseRemoveObject< slo::belongsToCategory >(belongsToCategory_); }

				/* Property generated from slo:hasContact
				 * \n The contact information of the landmark in question
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:label=Landmark contact information
				 * \n tracker:modified=2051
				 * \n rdfs:domain=slo:Landmark
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nco::Contact Contact;
				/*!
					\fn LiveNodes liveHasContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_hasContact "slo:hasContact" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::hasContact >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_hasContact "slo:hasContact" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasContacts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::hasContact >(object_info, strategy, parent); }
				/*!
					\fn void setHasContacts(LiveNodes const &hasContact_)
					
					
					Sets the property \ref slo_hasContact "slo:hasContact" set to the given \a hasContact_ set.
					\sa LiveResource::setObjects
				 */
				void setHasContacts(LiveNodes const &hasContact_) { baseSetObjects(slo::hasContact::iri(), hasContact_); }
				/*!
					\fn void removeHasContacts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_hasContact "slo:hasContact" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasContacts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::hasContact::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstHasContact()
					
					
					Returns the first property \ref slo_hasContact "slo:hasContact". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstHasContact() { return baseFirstObject< slo::hasContact >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addHasContact()
					
					
					Adds a new uniquely named resource to the property \ref slo_hasContact "slo:hasContact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addHasContact() { return baseAddObject< slo::hasContact >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addHasContact(::SopranoLive::Live< nco::Contact > const &hasContact_)
					
					
					Adds the given \a hasContact_ to the property \ref slo_hasContact "slo:hasContact" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addHasContact(::SopranoLive::Live< nco::Contact > const &hasContact_) { return baseAddObject< slo::hasContact >( hasContact_ ); }
				/*!
					\fn void removeHasContact(::SopranoLive::Live< nco::Contact > const &hasContact_)
					
					
					Removes the given \a hasContact_ from the property \ref slo_hasContact "slo:hasContact" set.
					\sa LiveResource::removeObject
				 */
				void removeHasContact(::SopranoLive::Live< nco::Contact > const &hasContact_) { baseRemoveObject< slo::hasContact >(hasContact_); }
				 //@}
			};

			/*! Class generated from slo:LandmarkCategory
			 * \ingroup onto_slo_classes
			 * Predefined set of instances for categories of landmarks
			 * 
			 * rdfs:label = Landmark category
			 * 
			 * tracker:modified = 2069
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref slo_predefined_landmark_category_outdoor_activities "slo:predefined-landmark-category-outdoor-activities"
			 * 		\ref slo_predefined_landmark_category_business "slo:predefined-landmark-category-business"
			 * 		\ref slo_predefined_landmark_category_public_service "slo:predefined-landmark-category-public-service"
			 * 		\ref slo_predefined_landmark_category_religious_places "slo:predefined-landmark-category-religious-places"
			 * 		\ref slo_predefined_landmark_category_food_beverage "slo:predefined-landmark-category-food-beverage"
			 * 		\ref slo_predefined_landmark_category_transport "slo:predefined-landmark-category-transport"
			 * 		\ref slo_predefined_landmark_category_sports "slo:predefined-landmark-category-sports"
			 * 		\ref slo_predefined_landmark_category_sightseeing "slo:predefined-landmark-category-sightseeing"
			 * 		\ref slo_predefined_landmark_category_entertainment "slo:predefined-landmark-category-entertainment"
			 * 		\ref slo_predefined_landmark_category_shopping "slo:predefined-landmark-category-shopping"
			 * 		\ref slo_predefined_landmark_category_communication "slo:predefined-landmark-category-communication"
			 * 		\ref slo_predefined_landmark_category_people "slo:predefined-landmark-category-people"
			 * 		\ref slo_predefined_landmark_category_accommodation "slo:predefined-landmark-category-accommodation"
			 * 		\ref slo_predefined_landmark_category_educational_institute "slo:predefined-landmark-category-educational-institute"
			 * 		\ref slo_predefined_landmark_category_geographical_area "slo:predefined-landmark-category-geographical-area"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref slo_belongsToCategory "slo:belongsToCategory"
			 */
			class LandmarkCategory
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#LandmarkCategory"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_slo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<LandmarkCategory> Live;
				LandmarkCategory() { this->attachInterfaceHelper< LandmarkCategory >(); }
				~LandmarkCategory() { this->detachInterfaceHelper< LandmarkCategory >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from slo:categoryIconUrl
				 * \n Url of the icon that corresponds to this category.
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:label=Landmark category icon
				 * \n tracker:modified=2055
				 * \n rdfs:domain=slo:LandmarkCategory
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveCategoryIconUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_categoryIconUrl "slo:categoryIconUrl" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCategoryIconUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::categoryIconUrl >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCategoryIconUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_categoryIconUrl "slo:categoryIconUrl" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCategoryIconUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::categoryIconUrl >(object_info, strategy, parent); }
				/*!
					\fn void setCategoryIconUrls(LiveNodes const &categoryIconUrl_)
					
					
					Sets the property \ref slo_categoryIconUrl "slo:categoryIconUrl" set to the given \a categoryIconUrl_ set.
					\sa LiveResource::setObjects
				 */
				void setCategoryIconUrls(LiveNodes const &categoryIconUrl_) { baseSetObjects(slo::categoryIconUrl::iri(), categoryIconUrl_); }
				/*!
					\fn void removeCategoryIconUrls(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_categoryIconUrl "slo:categoryIconUrl" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCategoryIconUrls(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::categoryIconUrl::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstCategoryIconUrl()
					
					
					Returns the first property \ref slo_categoryIconUrl "slo:categoryIconUrl". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstCategoryIconUrl() { return baseFirstObject< slo::categoryIconUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addCategoryIconUrl()
					
					
					Adds a new uniquely named resource to the property \ref slo_categoryIconUrl "slo:categoryIconUrl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addCategoryIconUrl() { return baseAddObject< slo::categoryIconUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addCategoryIconUrl(::SopranoLive::Live< rdfs::Resource > const &categoryIconUrl_)
					
					
					Adds the given \a categoryIconUrl_ to the property \ref slo_categoryIconUrl "slo:categoryIconUrl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addCategoryIconUrl(::SopranoLive::Live< rdfs::Resource > const &categoryIconUrl_) { return baseAddObject< slo::categoryIconUrl >( categoryIconUrl_ ); }
				/*!
					\fn void removeCategoryIconUrl(::SopranoLive::Live< rdfs::Resource > const &categoryIconUrl_)
					
					
					Removes the given \a categoryIconUrl_ from the property \ref slo_categoryIconUrl "slo:categoryIconUrl" set.
					\sa LiveResource::removeObject
				 */
				void removeCategoryIconUrl(::SopranoLive::Live< rdfs::Resource > const &categoryIconUrl_) { baseRemoveObject< slo::categoryIconUrl >(categoryIconUrl_); }

				/* Property generated from slo:isRemovable
				 * \n Flag to indicate if this instance is removable. This restriction is not enforced by tracker; it is API responsability to honor the value
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:label=Is removable
				 * \n tracker:modified=2046
				 * \n rdfs:domain=slo:LandmarkCategory
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveIsRemovables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_isRemovable "slo:isRemovable" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsRemovables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::isRemovable >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsRemovables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_isRemovable "slo:isRemovable" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsRemovables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::isRemovable >(object_info, strategy, parent); }
				/*!
					\fn void setIsRemovables(LiveNodes const &isRemovable_)
					
					
					Sets the property \ref slo_isRemovable "slo:isRemovable" set to the given \a isRemovable_ set.
					\sa LiveResource::setObjects
				 */
				void setIsRemovables(LiveNodes const &isRemovable_) { baseSetObjects(slo::isRemovable::iri(), isRemovable_); }
				/*!
					\fn void removeIsRemovables(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_isRemovable "slo:isRemovable" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsRemovables(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::isRemovable::iri(), object_info); }
				/*!
					\fn bool firstIsRemovable()
					
					
					Returns the first property \ref slo_isRemovable "slo:isRemovable". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsRemovable() { return baseFirstObject< slo::isRemovable >(); }
				/*!
					\fn void addIsRemovable(bool const &isRemovable_)
					
					
					Adds the given \a isRemovable_ to the property \ref slo_isRemovable "slo:isRemovable" set.
					\sa LiveResource::addObject
				 */
				void addIsRemovable(bool const &isRemovable_) { baseAddObject< slo::isRemovable >( isRemovable_ ); }
				/*!
					\fn void removeIsRemovable(bool const &isRemovable_)
					
					
					Removes the given \a isRemovable_ from the property \ref slo_isRemovable "slo:isRemovable" set.
					\sa LiveResource::removeObject
				 */
				void removeIsRemovable(bool const &isRemovable_) { baseRemoveObject< slo::isRemovable >(isRemovable_); }
				 //@}
			};

			/*! Class generated from slo:Route
			 * \ingroup onto_slo_classes
			 * 
			 * rdfs:label = Minimum box containing all the points traversed in route
			 * 
			 * tracker:modified = 2045
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Route
				: public virtual GeoLocation

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/slo#Route"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<GeoLocation, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_slo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Route> Live;
				Route() { this->attachInterfaceHelper< Route >(); }
				~Route() { this->detachInterfaceHelper< Route >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from slo:routeDetails
				 * \n FIXME Domain can be resource if we handle map-files correctly in the ontology
				 * \n rdfs:range=xsd:string
				 * \n rdfs:label=Pointer to a file containing route details (e.g. KML file).
				 * \n tracker:modified=2081
				 * \n rdfs:domain=slo:Route
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRouteDetailss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_routeDetails "slo:routeDetails" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRouteDetailss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::routeDetails >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRouteDetailss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_routeDetails "slo:routeDetails" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRouteDetailss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::routeDetails >(object_info, strategy, parent); }
				/*!
					\fn void setRouteDetailss(LiveNodes const &routeDetails_)
					
					
					Sets the property \ref slo_routeDetails "slo:routeDetails" set to the given \a routeDetails_ set.
					\sa LiveResource::setObjects
				 */
				void setRouteDetailss(LiveNodes const &routeDetails_) { baseSetObjects(slo::routeDetails::iri(), routeDetails_); }
				/*!
					\fn void removeRouteDetailss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_routeDetails "slo:routeDetails" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRouteDetailss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::routeDetails::iri(), object_info); }
				/*!
					\fn QString firstRouteDetails()
					
					
					Returns the first property \ref slo_routeDetails "slo:routeDetails". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstRouteDetails() { return baseFirstObject< slo::routeDetails >(); }
				/*!
					\fn void addRouteDetails(QString const &routeDetails_)
					
					
					Adds the given \a routeDetails_ to the property \ref slo_routeDetails "slo:routeDetails" set.
					\sa LiveResource::addObject
				 */
				void addRouteDetails(QString const &routeDetails_) { baseAddObject< slo::routeDetails >( routeDetails_ ); }
				/*!
					\fn void removeRouteDetails(QString const &routeDetails_)
					
					
					Removes the given \a routeDetails_ from the property \ref slo_routeDetails "slo:routeDetails" set.
					\sa LiveResource::removeObject
				 */
				void removeRouteDetails(QString const &routeDetails_) { baseRemoveObject< slo::routeDetails >(routeDetails_); }

				/* Property generated from slo:endTime
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:label=Time when the last point in the route was saved
				 * \n tracker:modified=2052
				 * \n rdfs:domain=slo:Route
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEndTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_endTime "slo:endTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEndTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::endTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEndTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_endTime "slo:endTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEndTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::endTime >(object_info, strategy, parent); }
				/*!
					\fn void setEndTimes(LiveNodes const &endTime_)
					
					
					Sets the property \ref slo_endTime "slo:endTime" set to the given \a endTime_ set.
					\sa LiveResource::setObjects
				 */
				void setEndTimes(LiveNodes const &endTime_) { baseSetObjects(slo::endTime::iri(), endTime_); }
				/*!
					\fn void removeEndTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_endTime "slo:endTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEndTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::endTime::iri(), object_info); }
				/*!
					\fn QDateTime firstEndTime()
					
					
					Returns the first property \ref slo_endTime "slo:endTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstEndTime() { return baseFirstObject< slo::endTime >(); }
				/*!
					\fn void addEndTime(QDateTime const &endTime_)
					
					
					Adds the given \a endTime_ to the property \ref slo_endTime "slo:endTime" set.
					\sa LiveResource::addObject
				 */
				void addEndTime(QDateTime const &endTime_) { baseAddObject< slo::endTime >( endTime_ ); }
				/*!
					\fn void removeEndTime(QDateTime const &endTime_)
					
					
					Removes the given \a endTime_ from the property \ref slo_endTime "slo:endTime" set.
					\sa LiveResource::removeObject
				 */
				void removeEndTime(QDateTime const &endTime_) { baseRemoveObject< slo::endTime >(endTime_); }

				/* Property generated from slo:startTime
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:label=Time when the first point in the route was saved
				 * \n tracker:modified=2064
				 * \n rdfs:domain=slo:Route
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveStartTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref slo_startTime "slo:startTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStartTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< slo::startTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStartTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref slo_startTime "slo:startTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStartTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< slo::startTime >(object_info, strategy, parent); }
				/*!
					\fn void setStartTimes(LiveNodes const &startTime_)
					
					
					Sets the property \ref slo_startTime "slo:startTime" set to the given \a startTime_ set.
					\sa LiveResource::setObjects
				 */
				void setStartTimes(LiveNodes const &startTime_) { baseSetObjects(slo::startTime::iri(), startTime_); }
				/*!
					\fn void removeStartTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref slo_startTime "slo:startTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStartTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(slo::startTime::iri(), object_info); }
				/*!
					\fn QDateTime firstStartTime()
					
					
					Returns the first property \ref slo_startTime "slo:startTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstStartTime() { return baseFirstObject< slo::startTime >(); }
				/*!
					\fn void addStartTime(QDateTime const &startTime_)
					
					
					Adds the given \a startTime_ to the property \ref slo_startTime "slo:startTime" set.
					\sa LiveResource::addObject
				 */
				void addStartTime(QDateTime const &startTime_) { baseAddObject< slo::startTime >( startTime_ ); }
				/*!
					\fn void removeStartTime(QDateTime const &startTime_)
					
					
					Removes the given \a startTime_ from the property \ref slo_startTime "slo:startTime" set.
					\sa LiveResource::removeObject
				 */
				void removeStartTime(QDateTime const &startTime_) { baseRemoveObject< slo::startTime >(startTime_); }
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::slo::GeoLocation::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::slo::Landmark::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::slo::LandmarkCategory::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::slo::Route::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_SLO_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_SLO_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_SLO_H_POST_INCLUDES
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#endif
