/*
 * mto.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:24.569906
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/mto.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_MTO_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_MTO_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_mto_classes namespace mto class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_mto_properties namespace mto property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_mto_resources namespace mto resource definitions
		 *  @{
		 *  @}
		 */
		static const char mto_namespace_prefix[] = "http://www.tracker-project.org/temp/mto#";
		struct Ontology_mto
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(mto_namespace_prefix) + suffix;
			}
		};
		namespace mto
		{
			inline QUrl iri(QString suffix) { return Ontology_mto::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class DownloadTransfer;
			class State;
			class SyncTransfer;
			class Transfer;
			class TransferElement;
			class TransferMethod;
			class UploadTransfer;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_MTO_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_MTO_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_MTO_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdfs.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace mto
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from mto:transferState
			 * \anchor mto_transferState
			 * \n Captures the state of the transfer. This is derived from the cumulative states of the transfer elements of this transfer. Applications are responsible to keep it up-to-date
			 * \n rdfs:label=Transfer state
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=mto:State
			 * \n rdfs:domain=mto:Transfer
			 * \n tracker:modified=1142
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class transferState
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#transferState"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Transfer Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Transfer RDFDomain;
				/// The localized c++ range type of this property
				typedef State Range;
				/// The full, non-localized rdf range type of this property
				typedef State RDFRange;
			};
			/*! Property generated from mto:method
			 * \anchor mto_method
			 * \n The method of transfer - Bluetooth, Web upload etc
			 * \n rdfs:label=Method
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=mto:TransferMethod
			 * \n rdfs:domain=mto:Transfer
			 * \n tracker:modified=1785
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class method
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#method"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Transfer Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Transfer RDFDomain;
				/// The localized c++ range type of this property
				typedef TransferMethod Range;
				/// The full, non-localized rdf range type of this property
				typedef TransferMethod RDFRange;
			};
			/*! Property generated from mto:created
			 * \anchor mto_created
			 * \n The date and time when the transfer was created
			 * \n rdfs:label=Created
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=mto:Transfer
			 * \n tracker:modified=1209
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class created
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#created"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Transfer Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Transfer RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from mto:transferList
			 * \anchor mto_transferList
			 * \n A list of transfer elements
			 * \n rdfs:range=mto:TransferElement
			 * \n rdfs:label=Transfer List
			 * \n tracker:modified=1792
			 * \n rdfs:domain=mto:Transfer
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class transferList
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#transferList"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Transfer Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Transfer RDFDomain;
				/// The localized c++ range type of this property
				typedef TransferElement Range;
				/// The full, non-localized rdf range type of this property
				typedef TransferElement RDFRange;
			};
			/*! Property generated from mto:account
			 * \anchor mto_account
			 * \n A reference to the account to which the web upload is to be done. This should at least contain information about the account and the service which is being used. For instance, Google/YouTube or Google/Picassa
			 * \n rdfs:label=Account
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=mto:Transfer
			 * \n tracker:modified=1086
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class account
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#account"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Transfer Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Transfer RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from mto:starter
			 * \anchor mto_starter
			 * \n The application that actually triggered the transfer - e.g. Gallery, Content Manager etc
			 * \n rdfs:label=Starter
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:Software
			 * \n rdfs:domain=mto:Transfer
			 * \n tracker:modified=1443
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class starter
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#starter"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Transfer Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Transfer RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::Software Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::Software RDFRange;
			};
			/*! Property generated from mto:agent
			 * \anchor mto_agent
			 * \n The application processing the transfer - e.g. Upload Engine etc
			 * \n rdfs:label=Agent
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:Software
			 * \n rdfs:domain=mto:Transfer
			 * \n tracker:modified=1299
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class agent
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#agent"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Transfer Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Transfer RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::Software Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::Software RDFRange;
			};
			/*! Property generated from mto:transferPrivacyLevel
			 * \anchor mto_transferPrivacyLevel
			 * \n It will contain an string with the privacy level in the service. The exact string and its interpretation is service specific
			 * \n rdfs:range=xsd:string
			 * \n rdfs:label=Privacy level
			 * \n tracker:modified=1761
			 * \n rdfs:domain=mto:Transfer
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class transferPrivacyLevel
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#transferPrivacyLevel"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Transfer Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Transfer RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from mto:source
			 * \anchor mto_source
			 * \n The source for the transfer. If the transfer is an upload, it would be the URI for a file on the device. If the transfer is a (web) download, it will be a URL. Question: Does it make more sense to have two fields: uploadSource and downloadSource?
			 * \n rdfs:label=Source
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=mto:TransferElement
			 * \n tracker:modified=1898
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class source
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#source"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef TransferElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TransferElement RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from mto:destination
			 * \anchor mto_destination
			 * \n The destination of the transfer. If the transfer is an download, it would be the URI for a file on the device. If the transfer is a (web) upload, it will be a URL, which will be filled once the upload is completed.
			 * \n rdfs:label=Destination
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=mto:TransferElement
			 * \n tracker:modified=1575
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class destination
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#destination"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef TransferElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TransferElement RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from mto:startedTime
			 * \anchor mto_startedTime
			 * \n Captures the date and time when the transfer was started
			 * \n rdfs:label=Started
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=mto:TransferElement
			 * \n tracker:modified=1479
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class startedTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#startedTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef TransferElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TransferElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from mto:completedTime
			 * \anchor mto_completedTime
			 * \n Captures the date and time when the transfer ended. It must be set only when the trasfer element is completed succesfully
			 * \n rdfs:label=Completed
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=mto:TransferElement
			 * \n tracker:modified=1558
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class completedTime
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#completedTime"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef TransferElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TransferElement RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from mto:state
			 * \anchor mto_state
			 * \n Captures the current state of the transfer element: Pending (not started), In Progress, Paused, Cancelled, Done
			 * \n rdfs:label=State
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=mto:State
			 * \n rdfs:domain=mto:TransferElement
			 * \n tracker:modified=1110
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class state
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#state"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef TransferElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TransferElement RDFDomain;
				/// The localized c++ range type of this property
				typedef State Range;
				/// The full, non-localized rdf range type of this property
				typedef State RDFRange;
			};
			/*! Property generated from mto:transferCategory
			 * \anchor mto_transferCategory
			 * \n This can contain category / tag / album / folder in the destination service
			 * \n rdfs:range=xsd:string
			 * \n rdfs:label=Category for the transfer
			 * \n tracker:modified=1736
			 * \n rdfs:domain=mto:UploadTransfer
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_mto_properties
			class transferCategory
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#transferCategory"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_mto Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef UploadTransfer Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef UploadTransfer RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			/*! Resource generated from mto:state-active
			 * \anchor mto_state_active
			 */
			/// \ingroup onto_mto_resources
			class state_active
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#state-active"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef State ResourceType;
				//! The ontology of this resource
				typedef Ontology_mto Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mto:state-cancelled
			 * \anchor mto_state_cancelled
			 */
			/// \ingroup onto_mto_resources
			class state_cancelled
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#state-cancelled"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef State ResourceType;
				//! The ontology of this resource
				typedef Ontology_mto Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mto:state-done
			 * \anchor mto_state_done
			 */
			/// \ingroup onto_mto_resources
			class state_done
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#state-done"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef State ResourceType;
				//! The ontology of this resource
				typedef Ontology_mto Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mto:state-error
			 * \anchor mto_state_error
			 */
			/// \ingroup onto_mto_resources
			class state_error
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#state-error"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef State ResourceType;
				//! The ontology of this resource
				typedef Ontology_mto Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mto:state-paused
			 * \anchor mto_state_paused
			 */
			/// \ingroup onto_mto_resources
			class state_paused
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#state-paused"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef State ResourceType;
				//! The ontology of this resource
				typedef Ontology_mto Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mto:state-pending
			 * \anchor mto_state_pending
			 */
			/// \ingroup onto_mto_resources
			class state_pending
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#state-pending"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef State ResourceType;
				//! The ontology of this resource
				typedef Ontology_mto Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mto:transfer-method-bluetooth
			 * \anchor mto_transfer_method_bluetooth
			 */
			/// \ingroup onto_mto_resources
			class transfer_method_bluetooth
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#transfer-method-bluetooth"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef TransferMethod ResourceType;
				//! The ontology of this resource
				typedef Ontology_mto Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from mto:transfer-method-web
			 * \anchor mto_transfer_method_web
			 */
			/// \ingroup onto_mto_resources
			class transfer_method_web
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#transfer-method-web"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef TransferMethod ResourceType;
				//! The ontology of this resource
				typedef Ontology_mto Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_MTO_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_MTO_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_MTO_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdfs.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace mto
		{

			using namespace rdfs;
			using namespace nfo;
			using namespace nie;
			using namespace rdf;
			using namespace xsd;

			/*! Class generated from mto:Transfer
			 * \ingroup onto_mto_classes
			 * Represent a single transfer task, which could have multiple transfer elements
			 * 
			 * rdfs:label = Transfer
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1555
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Transfer
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#Transfer"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mto Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Transfer> Live;
				Transfer() { this->attachInterfaceHelper< Transfer >(); }
				~Transfer() { this->detachInterfaceHelper< Transfer >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mto:transferState
				 * \n Captures the state of the transfer. This is derived from the cumulative states of the transfer elements of this transfer. Applications are responsible to keep it up-to-date
				 * \n rdfs:label=Transfer state
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=mto:State
				 * \n rdfs:domain=mto:Transfer
				 * \n tracker:modified=1142
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTransferStates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_transferState "mto:transferState" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTransferStates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::transferState >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTransferStates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_transferState "mto:transferState" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTransferStates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::transferState >(object_info, strategy, parent); }
				/*!
					\fn void setTransferStates(LiveNodes const &transferState_)
					
					
					Sets the property \ref mto_transferState "mto:transferState" set to the given \a transferState_ set.
					\sa LiveResource::setObjects
				 */
				void setTransferStates(LiveNodes const &transferState_) { baseSetObjects(mto::transferState::iri(), transferState_); }
				/*!
					\fn void removeTransferStates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_transferState "mto:transferState" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTransferStates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::transferState::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< State > getTransferState()
					
					
					Returns the property \ref mto_transferState "mto:transferState". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< State > getTransferState() { return baseGetObject< mto::transferState >(); }
				/*!
					\fn ::SopranoLive::Live< State > setTransferState(::SopranoLive::Live< State > const &transferState_)
					
					
					Sets the property \ref mto_transferState "mto:transferState" to the given \a transferState.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< State > setTransferState(::SopranoLive::Live< State > const &transferState_) { return baseSetObject< mto::transferState >( transferState_ ); }
				/*!
					\fn ::SopranoLive::Live< State > firstTransferState()
					
					
					Returns the first property \ref mto_transferState "mto:transferState". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< State > firstTransferState() { return baseFirstObject< mto::transferState >(); }
				/*!
					\fn ::SopranoLive::Live< State > addTransferState()
					
					
					Adds a new uniquely named resource to the property \ref mto_transferState "mto:transferState" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< State > addTransferState() { return baseAddObject< mto::transferState >(); }
				/*!
					\fn ::SopranoLive::Live< State > addTransferState(::SopranoLive::Live< State > const &transferState_)
					
					
					Adds the given \a transferState_ to the property \ref mto_transferState "mto:transferState" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< State > addTransferState(::SopranoLive::Live< State > const &transferState_) { return baseAddObject< mto::transferState >( transferState_ ); }
				/*!
					\fn void removeTransferState(::SopranoLive::Live< State > const &transferState_)
					
					
					Removes the given \a transferState_ from the property \ref mto_transferState "mto:transferState" set.
					\sa LiveResource::removeObject
				 */
				void removeTransferState(::SopranoLive::Live< State > const &transferState_) { baseRemoveObject< mto::transferState >(transferState_); }

				/* Property generated from mto:created
				 * \n The date and time when the transfer was created
				 * \n rdfs:label=Created
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=mto:Transfer
				 * \n tracker:modified=1209
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_created "mto:created" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::created >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_created "mto:created" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::created >(object_info, strategy, parent); }
				/*!
					\fn void setCreateds(LiveNodes const &created_)
					
					
					Sets the property \ref mto_created "mto:created" set to the given \a created_ set.
					\sa LiveResource::setObjects
				 */
				void setCreateds(LiveNodes const &created_) { baseSetObjects(mto::created::iri(), created_); }
				/*!
					\fn void removeCreateds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_created "mto:created" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCreateds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::created::iri(), object_info); }
				/*!
					\fn QDateTime getCreated()
					
					
					Returns the property \ref mto_created "mto:created". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getCreated() { return baseGetObject< mto::created >(); }
				/*!
					\fn void setCreated(QDateTime const &created_)
					
					
					Sets the property \ref mto_created "mto:created" to the given \a created.
					\sa LiveResource::setObject
				 */
				void setCreated(QDateTime const &created_) { baseSetObject< mto::created >( created_ ); }
				/*!
					\fn QDateTime firstCreated()
					
					
					Returns the first property \ref mto_created "mto:created". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstCreated() { return baseFirstObject< mto::created >(); }
				/*!
					\fn void addCreated(QDateTime const &created_)
					
					
					Adds the given \a created_ to the property \ref mto_created "mto:created" set.
					\sa LiveResource::addObject
				 */
				void addCreated(QDateTime const &created_) { baseAddObject< mto::created >( created_ ); }
				/*!
					\fn void removeCreated(QDateTime const &created_)
					
					
					Removes the given \a created_ from the property \ref mto_created "mto:created" set.
					\sa LiveResource::removeObject
				 */
				void removeCreated(QDateTime const &created_) { baseRemoveObject< mto::created >(created_); }

				/* Property generated from mto:starter
				 * \n The application that actually triggered the transfer - e.g. Gallery, Content Manager etc
				 * \n rdfs:label=Starter
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:Software
				 * \n rdfs:domain=mto:Transfer
				 * \n tracker:modified=1443
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nfo::Software Software;
				/*!
					\fn LiveNodes liveStarters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_starter "mto:starter" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStarters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::starter >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStarters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_starter "mto:starter" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStarters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::starter >(object_info, strategy, parent); }
				/*!
					\fn void setStarters(LiveNodes const &starter_)
					
					
					Sets the property \ref mto_starter "mto:starter" set to the given \a starter_ set.
					\sa LiveResource::setObjects
				 */
				void setStarters(LiveNodes const &starter_) { baseSetObjects(mto::starter::iri(), starter_); }
				/*!
					\fn void removeStarters(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_starter "mto:starter" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStarters(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::starter::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::Software > getStarter()
					
					
					Returns the property \ref mto_starter "mto:starter". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::Software > getStarter() { return baseGetObject< mto::starter >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::Software > setStarter(::SopranoLive::Live< nfo::Software > const &starter_)
					
					
					Sets the property \ref mto_starter "mto:starter" to the given \a starter.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::Software > setStarter(::SopranoLive::Live< nfo::Software > const &starter_) { return baseSetObject< mto::starter >( starter_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::Software > firstStarter()
					
					
					Returns the first property \ref mto_starter "mto:starter". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::Software > firstStarter() { return baseFirstObject< mto::starter >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::Software > addStarter()
					
					
					Adds a new uniquely named resource to the property \ref mto_starter "mto:starter" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::Software > addStarter() { return baseAddObject< mto::starter >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::Software > addStarter(::SopranoLive::Live< nfo::Software > const &starter_)
					
					
					Adds the given \a starter_ to the property \ref mto_starter "mto:starter" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::Software > addStarter(::SopranoLive::Live< nfo::Software > const &starter_) { return baseAddObject< mto::starter >( starter_ ); }
				/*!
					\fn void removeStarter(::SopranoLive::Live< nfo::Software > const &starter_)
					
					
					Removes the given \a starter_ from the property \ref mto_starter "mto:starter" set.
					\sa LiveResource::removeObject
				 */
				void removeStarter(::SopranoLive::Live< nfo::Software > const &starter_) { baseRemoveObject< mto::starter >(starter_); }

				/* Property generated from mto:transferPrivacyLevel
				 * \n It will contain an string with the privacy level in the service. The exact string and its interpretation is service specific
				 * \n rdfs:range=xsd:string
				 * \n rdfs:label=Privacy level
				 * \n tracker:modified=1761
				 * \n rdfs:domain=mto:Transfer
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTransferPrivacyLevels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_transferPrivacyLevel "mto:transferPrivacyLevel" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTransferPrivacyLevels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::transferPrivacyLevel >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTransferPrivacyLevels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_transferPrivacyLevel "mto:transferPrivacyLevel" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTransferPrivacyLevels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::transferPrivacyLevel >(object_info, strategy, parent); }
				/*!
					\fn void setTransferPrivacyLevels(LiveNodes const &transferPrivacyLevel_)
					
					
					Sets the property \ref mto_transferPrivacyLevel "mto:transferPrivacyLevel" set to the given \a transferPrivacyLevel_ set.
					\sa LiveResource::setObjects
				 */
				void setTransferPrivacyLevels(LiveNodes const &transferPrivacyLevel_) { baseSetObjects(mto::transferPrivacyLevel::iri(), transferPrivacyLevel_); }
				/*!
					\fn void removeTransferPrivacyLevels(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_transferPrivacyLevel "mto:transferPrivacyLevel" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTransferPrivacyLevels(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::transferPrivacyLevel::iri(), object_info); }
				/*!
					\fn QString firstTransferPrivacyLevel()
					
					
					Returns the first property \ref mto_transferPrivacyLevel "mto:transferPrivacyLevel". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTransferPrivacyLevel() { return baseFirstObject< mto::transferPrivacyLevel >(); }
				/*!
					\fn void addTransferPrivacyLevel(QString const &transferPrivacyLevel_)
					
					
					Adds the given \a transferPrivacyLevel_ to the property \ref mto_transferPrivacyLevel "mto:transferPrivacyLevel" set.
					\sa LiveResource::addObject
				 */
				void addTransferPrivacyLevel(QString const &transferPrivacyLevel_) { baseAddObject< mto::transferPrivacyLevel >( transferPrivacyLevel_ ); }
				/*!
					\fn void removeTransferPrivacyLevel(QString const &transferPrivacyLevel_)
					
					
					Removes the given \a transferPrivacyLevel_ from the property \ref mto_transferPrivacyLevel "mto:transferPrivacyLevel" set.
					\sa LiveResource::removeObject
				 */
				void removeTransferPrivacyLevel(QString const &transferPrivacyLevel_) { baseRemoveObject< mto::transferPrivacyLevel >(transferPrivacyLevel_); }

				/* Property generated from mto:agent
				 * \n The application processing the transfer - e.g. Upload Engine etc
				 * \n rdfs:label=Agent
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:Software
				 * \n rdfs:domain=mto:Transfer
				 * \n tracker:modified=1299
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAgents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_agent "mto:agent" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAgents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::agent >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAgents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_agent "mto:agent" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAgents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::agent >(object_info, strategy, parent); }
				/*!
					\fn void setAgents(LiveNodes const &agent_)
					
					
					Sets the property \ref mto_agent "mto:agent" set to the given \a agent_ set.
					\sa LiveResource::setObjects
				 */
				void setAgents(LiveNodes const &agent_) { baseSetObjects(mto::agent::iri(), agent_); }
				/*!
					\fn void removeAgents(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_agent "mto:agent" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAgents(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::agent::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nfo::Software > getAgent()
					
					
					Returns the property \ref mto_agent "mto:agent". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nfo::Software > getAgent() { return baseGetObject< mto::agent >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::Software > setAgent(::SopranoLive::Live< nfo::Software > const &agent_)
					
					
					Sets the property \ref mto_agent "mto:agent" to the given \a agent.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nfo::Software > setAgent(::SopranoLive::Live< nfo::Software > const &agent_) { return baseSetObject< mto::agent >( agent_ ); }
				/*!
					\fn ::SopranoLive::Live< nfo::Software > firstAgent()
					
					
					Returns the first property \ref mto_agent "mto:agent". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nfo::Software > firstAgent() { return baseFirstObject< mto::agent >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::Software > addAgent()
					
					
					Adds a new uniquely named resource to the property \ref mto_agent "mto:agent" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::Software > addAgent() { return baseAddObject< mto::agent >(); }
				/*!
					\fn ::SopranoLive::Live< nfo::Software > addAgent(::SopranoLive::Live< nfo::Software > const &agent_)
					
					
					Adds the given \a agent_ to the property \ref mto_agent "mto:agent" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nfo::Software > addAgent(::SopranoLive::Live< nfo::Software > const &agent_) { return baseAddObject< mto::agent >( agent_ ); }
				/*!
					\fn void removeAgent(::SopranoLive::Live< nfo::Software > const &agent_)
					
					
					Removes the given \a agent_ from the property \ref mto_agent "mto:agent" set.
					\sa LiveResource::removeObject
				 */
				void removeAgent(::SopranoLive::Live< nfo::Software > const &agent_) { baseRemoveObject< mto::agent >(agent_); }

				/* Property generated from mto:method
				 * \n The method of transfer - Bluetooth, Web upload etc
				 * \n rdfs:label=Method
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=mto:TransferMethod
				 * \n rdfs:domain=mto:Transfer
				 * \n tracker:modified=1785
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMethods(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_method "mto:method" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMethods(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::method >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMethods(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_method "mto:method" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMethods(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::method >(object_info, strategy, parent); }
				/*!
					\fn void setMethods(LiveNodes const &method_)
					
					
					Sets the property \ref mto_method "mto:method" set to the given \a method_ set.
					\sa LiveResource::setObjects
				 */
				void setMethods(LiveNodes const &method_) { baseSetObjects(mto::method::iri(), method_); }
				/*!
					\fn void removeMethods(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_method "mto:method" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMethods(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::method::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TransferMethod > getMethod()
					
					
					Returns the property \ref mto_method "mto:method". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< TransferMethod > getMethod() { return baseGetObject< mto::method >(); }
				/*!
					\fn ::SopranoLive::Live< TransferMethod > setMethod(::SopranoLive::Live< TransferMethod > const &method_)
					
					
					Sets the property \ref mto_method "mto:method" to the given \a method.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< TransferMethod > setMethod(::SopranoLive::Live< TransferMethod > const &method_) { return baseSetObject< mto::method >( method_ ); }
				/*!
					\fn ::SopranoLive::Live< TransferMethod > firstMethod()
					
					
					Returns the first property \ref mto_method "mto:method". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TransferMethod > firstMethod() { return baseFirstObject< mto::method >(); }
				/*!
					\fn ::SopranoLive::Live< TransferMethod > addMethod()
					
					
					Adds a new uniquely named resource to the property \ref mto_method "mto:method" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TransferMethod > addMethod() { return baseAddObject< mto::method >(); }
				/*!
					\fn ::SopranoLive::Live< TransferMethod > addMethod(::SopranoLive::Live< TransferMethod > const &method_)
					
					
					Adds the given \a method_ to the property \ref mto_method "mto:method" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TransferMethod > addMethod(::SopranoLive::Live< TransferMethod > const &method_) { return baseAddObject< mto::method >( method_ ); }
				/*!
					\fn void removeMethod(::SopranoLive::Live< TransferMethod > const &method_)
					
					
					Removes the given \a method_ from the property \ref mto_method "mto:method" set.
					\sa LiveResource::removeObject
				 */
				void removeMethod(::SopranoLive::Live< TransferMethod > const &method_) { baseRemoveObject< mto::method >(method_); }

				/* Property generated from mto:account
				 * \n A reference to the account to which the web upload is to be done. This should at least contain information about the account and the service which is being used. For instance, Google/YouTube or Google/Picassa
				 * \n rdfs:label=Account
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=mto:Transfer
				 * \n tracker:modified=1086
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAccounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_account "mto:account" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAccounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::account >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAccounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_account "mto:account" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAccounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::account >(object_info, strategy, parent); }
				/*!
					\fn void setAccounts(LiveNodes const &account_)
					
					
					Sets the property \ref mto_account "mto:account" set to the given \a account_ set.
					\sa LiveResource::setObjects
				 */
				void setAccounts(LiveNodes const &account_) { baseSetObjects(mto::account::iri(), account_); }
				/*!
					\fn void removeAccounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_account "mto:account" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAccounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::account::iri(), object_info); }
				/*!
					\fn QString getAccount()
					
					
					Returns the property \ref mto_account "mto:account". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getAccount() { return baseGetObject< mto::account >(); }
				/*!
					\fn void setAccount(QString const &account_)
					
					
					Sets the property \ref mto_account "mto:account" to the given \a account.
					\sa LiveResource::setObject
				 */
				void setAccount(QString const &account_) { baseSetObject< mto::account >( account_ ); }
				/*!
					\fn QString firstAccount()
					
					
					Returns the first property \ref mto_account "mto:account". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstAccount() { return baseFirstObject< mto::account >(); }
				/*!
					\fn void addAccount(QString const &account_)
					
					
					Adds the given \a account_ to the property \ref mto_account "mto:account" set.
					\sa LiveResource::addObject
				 */
				void addAccount(QString const &account_) { baseAddObject< mto::account >( account_ ); }
				/*!
					\fn void removeAccount(QString const &account_)
					
					
					Removes the given \a account_ from the property \ref mto_account "mto:account" set.
					\sa LiveResource::removeObject
				 */
				void removeAccount(QString const &account_) { baseRemoveObject< mto::account >(account_); }

				/* Property generated from mto:transferList
				 * \n A list of transfer elements
				 * \n rdfs:range=mto:TransferElement
				 * \n rdfs:label=Transfer List
				 * \n tracker:modified=1792
				 * \n rdfs:domain=mto:Transfer
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTransferLists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_transferList "mto:transferList" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTransferLists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::transferList >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTransferLists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_transferList "mto:transferList" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTransferLists(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::transferList >(object_info, strategy, parent); }
				/*!
					\fn void setTransferLists(LiveNodes const &transferList_)
					
					
					Sets the property \ref mto_transferList "mto:transferList" set to the given \a transferList_ set.
					\sa LiveResource::setObjects
				 */
				void setTransferLists(LiveNodes const &transferList_) { baseSetObjects(mto::transferList::iri(), transferList_); }
				/*!
					\fn void removeTransferLists(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_transferList "mto:transferList" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTransferLists(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::transferList::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< TransferElement > firstTransferList()
					
					
					Returns the first property \ref mto_transferList "mto:transferList". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< TransferElement > firstTransferList() { return baseFirstObject< mto::transferList >(); }
				/*!
					\fn ::SopranoLive::Live< TransferElement > addTransferList()
					
					
					Adds a new uniquely named resource to the property \ref mto_transferList "mto:transferList" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TransferElement > addTransferList() { return baseAddObject< mto::transferList >(); }
				/*!
					\fn ::SopranoLive::Live< TransferElement > addTransferList(::SopranoLive::Live< TransferElement > const &transferList_)
					
					
					Adds the given \a transferList_ to the property \ref mto_transferList "mto:transferList" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< TransferElement > addTransferList(::SopranoLive::Live< TransferElement > const &transferList_) { return baseAddObject< mto::transferList >( transferList_ ); }
				/*!
					\fn void removeTransferList(::SopranoLive::Live< TransferElement > const &transferList_)
					
					
					Removes the given \a transferList_ from the property \ref mto_transferList "mto:transferList" set.
					\sa LiveResource::removeObject
				 */
				void removeTransferList(::SopranoLive::Live< TransferElement > const &transferList_) { baseRemoveObject< mto::transferList >(transferList_); }
				 //@}
			};

			/*! Class generated from mto:DownloadTransfer
			 * \ingroup onto_mto_classes
			 * Handles transfers of files outside the device into the device. This class will only refer to files downloaded from a website or recieved using BlueTooth etc. Files recieved with messages are not considered here. Those would be handled seperately using nmo:Message
			 * 
			 * rdfs:label = Download
			 * 
			 * tracker:modified = 1920
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class DownloadTransfer
				: public virtual Transfer

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#DownloadTransfer"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Transfer, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mto Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<DownloadTransfer> Live;
				DownloadTransfer() { this->attachInterfaceHelper< DownloadTransfer >(); }
				~DownloadTransfer() { this->detachInterfaceHelper< DownloadTransfer >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from mto:State
			 * \ingroup onto_mto_classes
			 * Class with a restricted set of instances to enumarate transfer methods
			 * 
			 * rdfs:label = State value
			 * 
			 * tracker:modified = 1440
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref mto_state_error "mto:state-error"
			 * 		\ref mto_state_active "mto:state-active"
			 * 		\ref mto_state_pending "mto:state-pending"
			 * 		\ref mto_state_paused "mto:state-paused"
			 * 		\ref mto_state_done "mto:state-done"
			 * 		\ref mto_state_cancelled "mto:state-cancelled"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref mto_state "mto:state"
			 * 		\ref mto_transferState "mto:transferState"
			 */
			class State
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#State"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mto Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<State> Live;
				State() { this->attachInterfaceHelper< State >(); }
				~State() { this->detachInterfaceHelper< State >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from mto:SyncTransfer
			 * \ingroup onto_mto_classes
			 * Handles synchronization between the device and some server (a computer, or a website)
			 * 
			 * rdfs:label = Sync
			 * 
			 * tracker:modified = 1230
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class SyncTransfer
				: public virtual Transfer

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#SyncTransfer"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Transfer, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mto Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<SyncTransfer> Live;
				SyncTransfer() { this->attachInterfaceHelper< SyncTransfer >(); }
				~SyncTransfer() { this->detachInterfaceHelper< SyncTransfer >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from mto:TransferElement
			 * \ingroup onto_mto_classes
			 * Gives information about the transfer of a single element - typically a file. The properties in this class would need to be changed if it has to handle sync elements as well
			 * 
			 * rdfs:label = Transfer element
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1875
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref mto_transferList "mto:transferList"
			 */
			class TransferElement
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#TransferElement"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mto Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<TransferElement> Live;
				TransferElement() { this->attachInterfaceHelper< TransferElement >(); }
				~TransferElement() { this->detachInterfaceHelper< TransferElement >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mto:state
				 * \n Captures the current state of the transfer element: Pending (not started), In Progress, Paused, Cancelled, Done
				 * \n rdfs:label=State
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=mto:State
				 * \n rdfs:domain=mto:TransferElement
				 * \n tracker:modified=1110
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveStates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_state "mto:state" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::state >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_state "mto:state" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::state >(object_info, strategy, parent); }
				/*!
					\fn void setStates(LiveNodes const &state_)
					
					
					Sets the property \ref mto_state "mto:state" set to the given \a state_ set.
					\sa LiveResource::setObjects
				 */
				void setStates(LiveNodes const &state_) { baseSetObjects(mto::state::iri(), state_); }
				/*!
					\fn void removeStates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_state "mto:state" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::state::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< State > getState()
					
					
					Returns the property \ref mto_state "mto:state". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< State > getState() { return baseGetObject< mto::state >(); }
				/*!
					\fn ::SopranoLive::Live< State > setState(::SopranoLive::Live< State > const &state_)
					
					
					Sets the property \ref mto_state "mto:state" to the given \a state.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< State > setState(::SopranoLive::Live< State > const &state_) { return baseSetObject< mto::state >( state_ ); }
				/*!
					\fn ::SopranoLive::Live< State > firstState()
					
					
					Returns the first property \ref mto_state "mto:state". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< State > firstState() { return baseFirstObject< mto::state >(); }
				/*!
					\fn ::SopranoLive::Live< State > addState()
					
					
					Adds a new uniquely named resource to the property \ref mto_state "mto:state" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< State > addState() { return baseAddObject< mto::state >(); }
				/*!
					\fn ::SopranoLive::Live< State > addState(::SopranoLive::Live< State > const &state_)
					
					
					Adds the given \a state_ to the property \ref mto_state "mto:state" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< State > addState(::SopranoLive::Live< State > const &state_) { return baseAddObject< mto::state >( state_ ); }
				/*!
					\fn void removeState(::SopranoLive::Live< State > const &state_)
					
					
					Removes the given \a state_ from the property \ref mto_state "mto:state" set.
					\sa LiveResource::removeObject
				 */
				void removeState(::SopranoLive::Live< State > const &state_) { baseRemoveObject< mto::state >(state_); }

				/* Property generated from mto:destination
				 * \n The destination of the transfer. If the transfer is an download, it would be the URI for a file on the device. If the transfer is a (web) upload, it will be a URL, which will be filled once the upload is completed.
				 * \n rdfs:label=Destination
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=mto:TransferElement
				 * \n tracker:modified=1575
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveDestinations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_destination "mto:destination" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDestinations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::destination >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDestinations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_destination "mto:destination" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDestinations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::destination >(object_info, strategy, parent); }
				/*!
					\fn void setDestinations(LiveNodes const &destination_)
					
					
					Sets the property \ref mto_destination "mto:destination" set to the given \a destination_ set.
					\sa LiveResource::setObjects
				 */
				void setDestinations(LiveNodes const &destination_) { baseSetObjects(mto::destination::iri(), destination_); }
				/*!
					\fn void removeDestinations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_destination "mto:destination" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDestinations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::destination::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getDestination()
					
					
					Returns the property \ref mto_destination "mto:destination". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getDestination() { return baseGetObject< mto::destination >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setDestination(::SopranoLive::Live< rdfs::Resource > const &destination_)
					
					
					Sets the property \ref mto_destination "mto:destination" to the given \a destination.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setDestination(::SopranoLive::Live< rdfs::Resource > const &destination_) { return baseSetObject< mto::destination >( destination_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstDestination()
					
					
					Returns the first property \ref mto_destination "mto:destination". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstDestination() { return baseFirstObject< mto::destination >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addDestination()
					
					
					Adds a new uniquely named resource to the property \ref mto_destination "mto:destination" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addDestination() { return baseAddObject< mto::destination >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addDestination(::SopranoLive::Live< rdfs::Resource > const &destination_)
					
					
					Adds the given \a destination_ to the property \ref mto_destination "mto:destination" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addDestination(::SopranoLive::Live< rdfs::Resource > const &destination_) { return baseAddObject< mto::destination >( destination_ ); }
				/*!
					\fn void removeDestination(::SopranoLive::Live< rdfs::Resource > const &destination_)
					
					
					Removes the given \a destination_ from the property \ref mto_destination "mto:destination" set.
					\sa LiveResource::removeObject
				 */
				void removeDestination(::SopranoLive::Live< rdfs::Resource > const &destination_) { baseRemoveObject< mto::destination >(destination_); }

				/* Property generated from mto:source
				 * \n The source for the transfer. If the transfer is an upload, it would be the URI for a file on the device. If the transfer is a (web) download, it will be a URL. Question: Does it make more sense to have two fields: uploadSource and downloadSource?
				 * \n rdfs:label=Source
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=mto:TransferElement
				 * \n tracker:modified=1898
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSources(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_source "mto:source" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSources(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::source >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSources(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_source "mto:source" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSources(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::source >(object_info, strategy, parent); }
				/*!
					\fn void setSources(LiveNodes const &source_)
					
					
					Sets the property \ref mto_source "mto:source" set to the given \a source_ set.
					\sa LiveResource::setObjects
				 */
				void setSources(LiveNodes const &source_) { baseSetObjects(mto::source::iri(), source_); }
				/*!
					\fn void removeSources(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_source "mto:source" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSources(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::source::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getSource()
					
					
					Returns the property \ref mto_source "mto:source". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Resource > getSource() { return baseGetObject< mto::source >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setSource(::SopranoLive::Live< rdfs::Resource > const &source_)
					
					
					Sets the property \ref mto_source "mto:source" to the given \a source.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Resource > setSource(::SopranoLive::Live< rdfs::Resource > const &source_) { return baseSetObject< mto::source >( source_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstSource()
					
					
					Returns the first property \ref mto_source "mto:source". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Resource > firstSource() { return baseFirstObject< mto::source >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addSource()
					
					
					Adds a new uniquely named resource to the property \ref mto_source "mto:source" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addSource() { return baseAddObject< mto::source >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addSource(::SopranoLive::Live< rdfs::Resource > const &source_)
					
					
					Adds the given \a source_ to the property \ref mto_source "mto:source" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Resource > addSource(::SopranoLive::Live< rdfs::Resource > const &source_) { return baseAddObject< mto::source >( source_ ); }
				/*!
					\fn void removeSource(::SopranoLive::Live< rdfs::Resource > const &source_)
					
					
					Removes the given \a source_ from the property \ref mto_source "mto:source" set.
					\sa LiveResource::removeObject
				 */
				void removeSource(::SopranoLive::Live< rdfs::Resource > const &source_) { baseRemoveObject< mto::source >(source_); }

				/* Property generated from mto:startedTime
				 * \n Captures the date and time when the transfer was started
				 * \n rdfs:label=Started
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=mto:TransferElement
				 * \n tracker:modified=1479
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveStartedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_startedTime "mto:startedTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStartedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::startedTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStartedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_startedTime "mto:startedTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStartedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::startedTime >(object_info, strategy, parent); }
				/*!
					\fn void setStartedTimes(LiveNodes const &startedTime_)
					
					
					Sets the property \ref mto_startedTime "mto:startedTime" set to the given \a startedTime_ set.
					\sa LiveResource::setObjects
				 */
				void setStartedTimes(LiveNodes const &startedTime_) { baseSetObjects(mto::startedTime::iri(), startedTime_); }
				/*!
					\fn void removeStartedTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_startedTime "mto:startedTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStartedTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::startedTime::iri(), object_info); }
				/*!
					\fn QDateTime getStartedTime()
					
					
					Returns the property \ref mto_startedTime "mto:startedTime". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getStartedTime() { return baseGetObject< mto::startedTime >(); }
				/*!
					\fn void setStartedTime(QDateTime const &startedTime_)
					
					
					Sets the property \ref mto_startedTime "mto:startedTime" to the given \a startedTime.
					\sa LiveResource::setObject
				 */
				void setStartedTime(QDateTime const &startedTime_) { baseSetObject< mto::startedTime >( startedTime_ ); }
				/*!
					\fn QDateTime firstStartedTime()
					
					
					Returns the first property \ref mto_startedTime "mto:startedTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstStartedTime() { return baseFirstObject< mto::startedTime >(); }
				/*!
					\fn void addStartedTime(QDateTime const &startedTime_)
					
					
					Adds the given \a startedTime_ to the property \ref mto_startedTime "mto:startedTime" set.
					\sa LiveResource::addObject
				 */
				void addStartedTime(QDateTime const &startedTime_) { baseAddObject< mto::startedTime >( startedTime_ ); }
				/*!
					\fn void removeStartedTime(QDateTime const &startedTime_)
					
					
					Removes the given \a startedTime_ from the property \ref mto_startedTime "mto:startedTime" set.
					\sa LiveResource::removeObject
				 */
				void removeStartedTime(QDateTime const &startedTime_) { baseRemoveObject< mto::startedTime >(startedTime_); }

				/* Property generated from mto:completedTime
				 * \n Captures the date and time when the transfer ended. It must be set only when the trasfer element is completed succesfully
				 * \n rdfs:label=Completed
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=mto:TransferElement
				 * \n tracker:modified=1558
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCompletedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_completedTime "mto:completedTime" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCompletedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::completedTime >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCompletedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_completedTime "mto:completedTime" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCompletedTimes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::completedTime >(object_info, strategy, parent); }
				/*!
					\fn void setCompletedTimes(LiveNodes const &completedTime_)
					
					
					Sets the property \ref mto_completedTime "mto:completedTime" set to the given \a completedTime_ set.
					\sa LiveResource::setObjects
				 */
				void setCompletedTimes(LiveNodes const &completedTime_) { baseSetObjects(mto::completedTime::iri(), completedTime_); }
				/*!
					\fn void removeCompletedTimes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_completedTime "mto:completedTime" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCompletedTimes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::completedTime::iri(), object_info); }
				/*!
					\fn QDateTime getCompletedTime()
					
					
					Returns the property \ref mto_completedTime "mto:completedTime". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getCompletedTime() { return baseGetObject< mto::completedTime >(); }
				/*!
					\fn void setCompletedTime(QDateTime const &completedTime_)
					
					
					Sets the property \ref mto_completedTime "mto:completedTime" to the given \a completedTime.
					\sa LiveResource::setObject
				 */
				void setCompletedTime(QDateTime const &completedTime_) { baseSetObject< mto::completedTime >( completedTime_ ); }
				/*!
					\fn QDateTime firstCompletedTime()
					
					
					Returns the first property \ref mto_completedTime "mto:completedTime". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstCompletedTime() { return baseFirstObject< mto::completedTime >(); }
				/*!
					\fn void addCompletedTime(QDateTime const &completedTime_)
					
					
					Adds the given \a completedTime_ to the property \ref mto_completedTime "mto:completedTime" set.
					\sa LiveResource::addObject
				 */
				void addCompletedTime(QDateTime const &completedTime_) { baseAddObject< mto::completedTime >( completedTime_ ); }
				/*!
					\fn void removeCompletedTime(QDateTime const &completedTime_)
					
					
					Removes the given \a completedTime_ from the property \ref mto_completedTime "mto:completedTime" set.
					\sa LiveResource::removeObject
				 */
				void removeCompletedTime(QDateTime const &completedTime_) { baseRemoveObject< mto::completedTime >(completedTime_); }
				 //@}
			};

			/*! Class generated from mto:TransferMethod
			 * \ingroup onto_mto_classes
			 * Class with a restricted set of instances to enumarate transfer methods
			 * 
			 * tracker:modified = 1941
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref mto_transfer_method_web "mto:transfer-method-web"
			 * 		\ref mto_transfer_method_bluetooth "mto:transfer-method-bluetooth"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref mto_method "mto:method"
			 */
			class TransferMethod
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#TransferMethod"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mto Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<TransferMethod> Live;
				TransferMethod() { this->attachInterfaceHelper< TransferMethod >(); }
				~TransferMethod() { this->detachInterfaceHelper< TransferMethod >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from mto:UploadTransfer
			 * \ingroup onto_mto_classes
			 * Handles transfers of files/data present on the device to some place outside the device. Upload methods include uploading to a website, sending via BlueTooth etc. 
			 * 
			 * rdfs:label = Upload
			 * 
			 * tracker:modified = 1121
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class UploadTransfer
				: public virtual Transfer

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.tracker-project.org/temp/mto#UploadTransfer"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Transfer, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_mto Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<UploadTransfer> Live;
				UploadTransfer() { this->attachInterfaceHelper< UploadTransfer >(); }
				~UploadTransfer() { this->detachInterfaceHelper< UploadTransfer >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from mto:transferCategory
				 * \n This can contain category / tag / album / folder in the destination service
				 * \n rdfs:range=xsd:string
				 * \n rdfs:label=Category for the transfer
				 * \n tracker:modified=1736
				 * \n rdfs:domain=mto:UploadTransfer
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTransferCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mto_transferCategory "mto:transferCategory" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTransferCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mto::transferCategory >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTransferCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mto_transferCategory "mto:transferCategory" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTransferCategorys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mto::transferCategory >(object_info, strategy, parent); }
				/*!
					\fn void setTransferCategorys(LiveNodes const &transferCategory_)
					
					
					Sets the property \ref mto_transferCategory "mto:transferCategory" set to the given \a transferCategory_ set.
					\sa LiveResource::setObjects
				 */
				void setTransferCategorys(LiveNodes const &transferCategory_) { baseSetObjects(mto::transferCategory::iri(), transferCategory_); }
				/*!
					\fn void removeTransferCategorys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mto_transferCategory "mto:transferCategory" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTransferCategorys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mto::transferCategory::iri(), object_info); }
				/*!
					\fn QString firstTransferCategory()
					
					
					Returns the first property \ref mto_transferCategory "mto:transferCategory". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTransferCategory() { return baseFirstObject< mto::transferCategory >(); }
				/*!
					\fn void addTransferCategory(QString const &transferCategory_)
					
					
					Adds the given \a transferCategory_ to the property \ref mto_transferCategory "mto:transferCategory" set.
					\sa LiveResource::addObject
				 */
				void addTransferCategory(QString const &transferCategory_) { baseAddObject< mto::transferCategory >( transferCategory_ ); }
				/*!
					\fn void removeTransferCategory(QString const &transferCategory_)
					
					
					Removes the given \a transferCategory_ from the property \ref mto_transferCategory "mto:transferCategory" set.
					\sa LiveResource::removeObject
				 */
				void removeTransferCategory(QString const &transferCategory_) { baseRemoveObject< mto::transferCategory >(transferCategory_); }
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mto::DownloadTransfer::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mto::State::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mto::SyncTransfer::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mto::Transfer::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mto::TransferElement::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mto::TransferMethod::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::mto::UploadTransfer::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_MTO_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_MTO_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_MTO_H_POST_INCLUDES
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/rdfs.h>
#endif
