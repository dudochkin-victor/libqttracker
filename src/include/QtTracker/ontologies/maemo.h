/*
 * maemo.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:24.312132
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/maemo.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_MAEMO_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_MAEMO_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_maemo_classes namespace maemo class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_maemo_properties namespace maemo property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_maemo_resources namespace maemo resource definitions
		 *  @{
		 *  @}
		 */
		static const char maemo_namespace_prefix[] = "http://maemo.org/ontologies/tracker#";
		struct Ontology_maemo
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(maemo_namespace_prefix) + suffix;
			}
		};
		namespace maemo
		{
			inline QUrl iri(QString suffix) { return Ontology_maemo::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class ControlPanelApplet;
			class DesktopBookmark;
			class SoftwareApplet;
			class SoftwareWidget;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_MAEMO_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_MAEMO_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_MAEMO_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace maemo
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from maemo:bookmarkThumbnail
			 * \anchor maemo_bookmarkThumbnail
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1022
			 * \n rdfs:domain=nfo:Bookmark
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_maemo_properties
			class bookmarkThumbnail
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#bookmarkThumbnail"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_maemo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef nfo::Bookmark Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nfo::Bookmark RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from maemo:contactAudioRingtone
			 * \anchor maemo_contactAudioRingtone
			 * \n Audio file linked with a contact
			 * \n rdfs:label=Audio ringtone
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:FileDataObject
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:modified=1818
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_maemo_properties
			class contactAudioRingtone
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#contactAudioRingtone"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_maemo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef nco::PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nco::PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::FileDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::FileDataObject RDFRange;
			};
			/*! Property generated from maemo:contactGroupAudioRingtone
			 * \anchor maemo_contactGroupAudioRingtone
			 * \n Audio file linked with a contact group
			 * \n rdfs:label=Audio ringtone
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:FileDataObject
			 * \n rdfs:domain=nco:ContactGroup
			 * \n tracker:modified=1226
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_maemo_properties
			class contactGroupAudioRingtone
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#contactGroupAudioRingtone"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_maemo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef nco::ContactGroup Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nco::ContactGroup RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::FileDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::FileDataObject RDFRange;
			};
			/*! Property generated from maemo:contactGroupVibrationRingtone
			 * \anchor maemo_contactGroupVibrationRingtone
			 * \n File linked with a contact group to vibrate on a pleasant frequency
			 * \n rdfs:label=Vibration ringtone
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:FileDataObject
			 * \n rdfs:domain=nco:ContactGroup
			 * \n tracker:modified=2066
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_maemo_properties
			class contactGroupVibrationRingtone
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#contactGroupVibrationRingtone"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_maemo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef nco::ContactGroup Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nco::ContactGroup RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::FileDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::FileDataObject RDFRange;
			};
			/*! Property generated from maemo:contactGroupVideoRingtone
			 * \anchor maemo_contactGroupVideoRingtone
			 * \n Video file linked with a contact group
			 * \n rdfs:label=Video ringtone
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:FileDataObject
			 * \n rdfs:domain=nco:ContactGroup
			 * \n tracker:modified=2053
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_maemo_properties
			class contactGroupVideoRingtone
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#contactGroupVideoRingtone"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_maemo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef nco::ContactGroup Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nco::ContactGroup RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::FileDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::FileDataObject RDFRange;
			};
			/*! Property generated from maemo:contactVibrationRingtone
			 * \anchor maemo_contactVibrationRingtone
			 * \n File linked with a contact to vibrate on a pleasant frequency
			 * \n rdfs:label=Vibration ringtone
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:FileDataObject
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:modified=1628
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_maemo_properties
			class contactVibrationRingtone
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#contactVibrationRingtone"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_maemo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef nco::PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nco::PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::FileDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::FileDataObject RDFRange;
			};
			/*! Property generated from maemo:contactVideoRingtone
			 * \anchor maemo_contactVideoRingtone
			 * \n Video file linked with a contact
			 * \n rdfs:label=Video ringtone
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:FileDataObject
			 * \n rdfs:domain=nco:PersonContact
			 * \n tracker:modified=1236
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_maemo_properties
			class contactVideoRingtone
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#contactVideoRingtone"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_maemo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef nco::PersonContact Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nco::PersonContact RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::FileDataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::FileDataObject RDFRange;
			};
			/*! Property generated from maemo:localPhoneNumber
			 * \anchor maemo_localPhoneNumber
			 * \n rdfs:label=local phone number (last N digits)
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nco:PhoneNumber
			 * \n tracker:indexed=true
			 * \n tracker:modified=1863
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_maemo_properties
			class localPhoneNumber
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#localPhoneNumber"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_maemo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef nco::PhoneNumber Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nco::PhoneNumber RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from maemo:relevance
			 * \anchor maemo_relevance
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1899
			 * \n tracker:defaultValue=1000000
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_maemo_properties
			class relevance
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#relevance"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_maemo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef nie::InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nie::InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from maemo:remoteMediaArt
			 * \anchor maemo_remoteMediaArt
			 * \n rdfs:range=nfo:Image
			 * \n tracker:modified=1005
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_maemo_properties
			class remoteMediaArt
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#remoteMediaArt"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_maemo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef nfo::Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nfo::Media RDFDomain;
				/// The localized c++ range type of this property
				typedef nfo::Image Range;
				/// The full, non-localized rdf range type of this property
				typedef nfo::Image RDFRange;
			};
			/*! Property generated from maemo:webhistoryThumbnail
			 * \anchor maemo_webhistoryThumbnail
			 * \n rdfs:range=xsd:string
			 * \n tracker:modified=1169
			 * \n rdfs:domain=nfo:WebHistory
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_maemo_properties
			class webhistoryThumbnail
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#webhistoryThumbnail"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_maemo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef nfo::WebHistory Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nfo::WebHistory RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			/*! Resource generated from maemo:BrowserBookmarkFolder
			 * \anchor maemo_BrowserBookmarkFolder
			 */
			/// \ingroup onto_maemo_resources
			class BrowserBookmarkFolder
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#BrowserBookmarkFolder"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef nfo::BookmarkFolder ResourceType;
				//! The ontology of this resource
				typedef Ontology_maemo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from maemo:DesktopBookmarkFolder
			 * \anchor maemo_DesktopBookmarkFolder
			 */
			/// \ingroup onto_maemo_resources
			class DesktopBookmarkFolder
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#DesktopBookmarkFolder"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef nfo::BookmarkFolder ResourceType;
				//! The ontology of this resource
				typedef Ontology_maemo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_MAEMO_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_MAEMO_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_MAEMO_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace maemo
		{

			using namespace nfo;
			using namespace nie;
			using namespace rdf;
			using namespace xsd;
			using namespace nco;

			/*! Class generated from maemo:SoftwareApplet
			 * \ingroup onto_maemo_classes
			 * A widget
			 * 
			 * rdfs:label = Widget
			 * 
			 * tracker:modified = 1292
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class SoftwareApplet
				: public virtual nfo::Software

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#SoftwareApplet"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::Software, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_maemo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<SoftwareApplet> Live;
				SoftwareApplet() { this->attachInterfaceHelper< SoftwareApplet >(); }
				~SoftwareApplet() { this->detachInterfaceHelper< SoftwareApplet >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from maemo:ControlPanelApplet
			 * \ingroup onto_maemo_classes
			 * A control panel applet for Meego
			 * 
			 * rdfs:label = Control Panel Applet for Meego
			 * 
			 * tracker:modified = 1126
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class ControlPanelApplet
				: public virtual SoftwareApplet

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#ControlPanelApplet"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<SoftwareApplet, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_maemo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<ControlPanelApplet> Live;
				ControlPanelApplet() { this->attachInterfaceHelper< ControlPanelApplet >(); }
				~ControlPanelApplet() { this->detachInterfaceHelper< ControlPanelApplet >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from maemo:DesktopBookmark
			 * \ingroup onto_maemo_classes
			 * 
			 * rdfs:label = Desktop bookmark
			 * 
			 * tracker:modified = 1498
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class DesktopBookmark
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#DesktopBookmark"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_maemo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<DesktopBookmark> Live;
				DesktopBookmark() { this->attachInterfaceHelper< DesktopBookmark >(); }
				~DesktopBookmark() { this->detachInterfaceHelper< DesktopBookmark >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from maemo:SoftwareWidget
			 * \ingroup onto_maemo_classes
			 * A widget
			 * 
			 * rdfs:label = Widget
			 * 
			 * tracker:modified = 1276
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class SoftwareWidget
				: public virtual nfo::Software

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://maemo.org/ontologies/tracker#SoftwareWidget"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nfo::Software, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_maemo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<SoftwareWidget> Live;
				SoftwareWidget() { this->attachInterfaceHelper< SoftwareWidget >(); }
				~SoftwareWidget() { this->detachInterfaceHelper< SoftwareWidget >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::maemo::ControlPanelApplet::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::maemo::DesktopBookmark::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::maemo::SoftwareApplet::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::maemo::SoftwareWidget::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_MAEMO_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_MAEMO_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_MAEMO_H_POST_INCLUDES
#include <QtTracker/ontologies/nfo.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#endif
