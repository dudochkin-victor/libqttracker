/*
 * nfo.h, autogenerated
 *
 * Automatically created on: 2010-12-01 19:33:25.440062
 * Automatically created by: tools/build/detail/rdfxml2convenience.py -i data/rdf-xml/QtTracker/ontologies/nfo.xml -c QtTracker
 * DO NOT MAKE CHANGES TO THIS FILE AS THEY MIGHT BE LOST
 */

#ifndef SOPRANOLIVE_ONTOLOGIES_NFO_H_FORWARD_DECLARATIONS
#define SOPRANOLIVE_ONTOLOGIES_NFO_H_FORWARD_DECLARATIONS

// Namespace objects and forward declarations section

#include "../QLiveAutogenerationBase"

namespace SopranoLive
{
	namespace Ontologies
	{
		/*! \defgroup onto_nfo_classes namespace nfo class definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nfo_properties namespace nfo property definitions
		 *  @{
		 *  @}
		 */
		/*! \defgroup onto_nfo_resources namespace nfo resource definitions
		 *  @{
		 *  @}
		 */
		static const char nfo_namespace_prefix[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#";
		struct Ontology_nfo
		{
			//! The defining context of this namespace
			typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
			static QUrl iri(QString suffix = QString())
			{
				return QLatin1String(nfo_namespace_prefix) + suffix;
			}
		};
		namespace nfo
		{
			inline QUrl iri(QString suffix) { return Ontology_nfo::iri(suffix); }

			/*!
			 * \section classes Classes
			 */
			//@{
			class Application;
			class Archive;
			class ArchiveItem;
			class Attachment;
			class Audio;
			class Bookmark;
			class BookmarkFolder;
			class CompressionType;
			class Cursor;
			class DataContainer;
			class DeletedResource;
			class Document;
			class EmbeddedFileDataObject;
			class Equipment;
			class Executable;
			class FileDataObject;
			class FileHash;
			class Filesystem;
			class FilesystemImage;
			class Folder;
			class Font;
			class HardDiskPartition;
			class HelpDocument;
			class HtmlDocument;
			class Icon;
			class Image;
			class Media;
			class MediaFileListEntry;
			class MediaList;
			class MediaStream;
			class MindMap;
			class OperatingSystem;
			class Orientation;
			class PaginatedTextDocument;
			class PlainTextDocument;
			class Presentation;
			class RasterImage;
			class RemoteDataObject;
			class RemotePortAddress;
			class Software;
			class SoftwareApplication;
			class SoftwareCategory;
			class SoftwareItem;
			class SoftwareService;
			class SourceCode;
			class Spreadsheet;
			class TextDocument;
			class Trash;
			class VectorImage;
			class Video;
			class Visual;
			class WebHistory;
			class Website;
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NFO_H_FORWARD_DECLARATIONS */


// Property class definitions section

#if (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NFO_H_PROPERTY_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NFO_H_PROPERTY_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/mtp.h>
#include <QtTracker/ontologies/poi.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#include <QtTracker/ontologies/nmm.h>
#elif defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/mtp.h>
#include <QtTracker/ontologies/poi.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#include <QtTracker/ontologies/nmm.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#else
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/mtp.h>
#include <QtTracker/ontologies/poi.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#include <QtTracker/ontologies/nmm.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nfo
		{
			/*!
			 * \section properties Property description classes
			 */
			//@{
			/*! Property generated from nfo:uncompressedSize
			 * \anchor nfo_uncompressedSize
			 * \n Uncompressed size of the content of a compressed file.
			 * \n rdfs:label=uncompressedSize
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Archive
			 * \n tracker:modified=1992
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class uncompressedSize
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#uncompressedSize"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Archive Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Archive RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:isPasswordProtected
			 * \anchor nfo_isPasswordProtected
			 * \n States if a given resource is password-protected.
			 * \n rdfs:label=isPasswordProtected
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nfo:ArchiveItem
			 * \n tracker:modified=1687
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class isPasswordProtected
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#isPasswordProtected"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef ArchiveItem Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef ArchiveItem RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nfo:channels
			 * \anchor nfo_channels
			 * \n Number of channels. This property is to be used directly if no detailed information is necessary. Otherwise use more detailed subproperties.
			 * \n rdfs:label=channels
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Audio
			 * \n tracker:modified=1105
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class channels
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#channels"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:sideChannels
			 * \anchor nfo_sideChannels
			 * \n Number of side channels
			 * \n rdfs:label=sideChannels
			 * \n rdfs:subPropertyOf=nfo:channels
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Audio
			 * \n tracker:modified=1233
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class sideChannels
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sideChannels"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:lfeChannels
			 * \anchor nfo_lfeChannels
			 * \n Number of Low Frequency Expansion (subwoofer) channels.
			 * \n rdfs:label=lfeChannels
			 * \n rdfs:subPropertyOf=nfo:channels
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Audio
			 * \n tracker:modified=1938
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class lfeChannels
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#lfeChannels"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:sampleCount
			 * \anchor nfo_sampleCount
			 * \n The amount of samples in an audio clip.
			 * \n rdfs:label=sampleCount
			 * \n rdfs:subPropertyOf=nfo:count
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Audio
			 * \n tracker:modified=1797
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class sampleCount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleCount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:bitsPerSample
			 * \anchor nfo_bitsPerSample
			 * \n Amount of bits in each audio sample.
			 * \n rdfs:label=bitsPerSample
			 * \n rdfs:subPropertyOf=nfo:bitDepth
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Audio
			 * \n tracker:modified=1037
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class bitsPerSample
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitsPerSample"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:frontChannels
			 * \anchor nfo_frontChannels
			 * \n Number of front channels.
			 * \n rdfs:label=frontChannels
			 * \n rdfs:subPropertyOf=nfo:channels
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Audio
			 * \n tracker:modified=1658
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class frontChannels
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frontChannels"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:sampleRate
			 * \anchor nfo_sampleRate
			 * \n The amount of audio samples per second.
			 * \n rdfs:label=sampleRate
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nfo:Audio
			 * \n tracker:modified=1013
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class sampleRate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleRate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nfo:averageAudioBitrate
			 * \anchor nfo_averageAudioBitrate
			 * \n The average overall bitrate of a media container. (i.e. the size of the piece of media in bits, divided by it's duration expressed in seconds).
			 * \n rdfs:label=averageBitrate
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nfo:Audio
			 * \n tracker:modified=1404
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class averageAudioBitrate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageAudioBitrate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nfo:rearChannels
			 * \anchor nfo_rearChannels
			 * \n Number of rear channels.
			 * \n rdfs:label=rearChannels
			 * \n rdfs:subPropertyOf=nfo:channels
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Audio
			 * \n tracker:modified=1253
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class rearChannels
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rearChannels"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:gain
			 * \anchor nfo_gain
			 * \n Gain of media
			 * \n rdfs:label=Gain
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Audio
			 * \n tracker:modified=1588
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class gain
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#gain"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:peakGain
			 * \anchor nfo_peakGain
			 * \n Peak Gain of media
			 * \n rdfs:label=Peak Gain
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Audio
			 * \n tracker:modified=1774
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class peakGain
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#peakGain"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Audio Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Audio RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:bookmarks
			 * \anchor nfo_bookmarks
			 * \n The address of the linked object. Usually a web URI.
			 * \n rdfs:label=link
			 * \n rdfs:subPropertyOf=nie:links
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:domain=nfo:Bookmark
			 * \n tracker:modified=1734
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class bookmarks
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Bookmark Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Bookmark RDFDomain;
				/// The localized c++ range type of this property
				typedef nie::DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nie::DataObject RDFRange;
			};
			/*! Property generated from nfo:characterPosition
			 * \anchor nfo_characterPosition
			 * \n rdfs:label=Character position
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Bookmark
			 * \n tracker:modified=1706
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class characterPosition
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#characterPosition"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Bookmark Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Bookmark RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:pageNumber
			 * \anchor nfo_pageNumber
			 * \n rdfs:label=Page number
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Bookmark
			 * \n tracker:modified=1008
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class pageNumber
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#pageNumber"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Bookmark Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Bookmark RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:streamPosition
			 * \anchor nfo_streamPosition
			 * \n rdfs:label=Stream position
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Bookmark
			 * \n tracker:modified=1711
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class streamPosition
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#streamPosition"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Bookmark Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Bookmark RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:streamDuration
			 * \anchor nfo_streamDuration
			 * \n rdfs:label=Stream duration
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Bookmark
			 * \n tracker:modified=1979
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class streamDuration
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#streamDuration"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Bookmark Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Bookmark RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:containsBookmarkFolder
			 * \anchor nfo_containsBookmarkFolder
			 * \n The folder contains a bookmark folder.
			 * \n rdfs:label=contains folder
			 * \n rdfs:subPropertyOf=nie:hasLogicalPart
			 * \n rdfs:range=nfo:BookmarkFolder
			 * \n rdfs:domain=nfo:BookmarkFolder
			 * \n tracker:modified=1081
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class containsBookmarkFolder
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#containsBookmarkFolder"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef BookmarkFolder Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef BookmarkFolder RDFDomain;
				/// The localized c++ range type of this property
				typedef BookmarkFolder Range;
				/// The full, non-localized rdf range type of this property
				typedef BookmarkFolder RDFRange;
			};
			/*! Property generated from nfo:containsBookmark
			 * \anchor nfo_containsBookmark
			 * \n The folder contains a bookmark.
			 * \n rdfs:label=contains bookmark
			 * \n rdfs:subPropertyOf=nie:hasLogicalPart
			 * \n rdfs:range=nfo:Bookmark
			 * \n rdfs:domain=nfo:BookmarkFolder
			 * \n tracker:modified=1822
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class containsBookmark
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#containsBookmark"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef BookmarkFolder Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef BookmarkFolder RDFDomain;
				/// The localized c++ range type of this property
				typedef Bookmark Range;
				/// The full, non-localized rdf range type of this property
				typedef Bookmark RDFRange;
			};
			/*! Property generated from nfo:originalLocation
			 * \anchor nfo_originalLocation
			 * \n The original location of the deleted resource.
			 * \n rdfs:label=originalLocation
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:DeletedResource
			 * \n tracker:modified=1327
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class originalLocation
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#originalLocation"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef DeletedResource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef DeletedResource RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:deletionDate
			 * \anchor nfo_deletionDate
			 * \n The date and time of the deletion.
			 * \n rdfs:label=deletionDate
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=nfo:DeletedResource
			 * \n tracker:modified=1689
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class deletionDate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#deletionDate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef DeletedResource Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef DeletedResource RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nfo:tableOfContents
			 * \anchor nfo_tableOfContents
			 * \n Section titles and figure descriptions of the document.
			 * \n rdfs:label=Table of contents
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Document
			 * \n tracker:weight=5
			 * \n tracker:modified=1158
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class tableOfContents
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#tableOfContents"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Document Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Document RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:encoding
			 * \anchor nfo_encoding
			 * \n The encoding used for the Embedded File. Examples might include BASE64 or UUEncode
			 * \n rdfs:label=encoding
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:EmbeddedFileDataObject
			 * \n tracker:modified=1740
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class encoding
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#encoding"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef EmbeddedFileDataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef EmbeddedFileDataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:manufacturer
			 * \anchor nfo_manufacturer
			 * \n The manufacturer of the equipment
			 * \n rdfs:label=Manufacturer
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Equipment
			 * \n tracker:modified=1545
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class manufacturer
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#manufacturer"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Equipment Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Equipment RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:model
			 * \anchor nfo_model
			 * \n The model of the equipment
			 * \n rdfs:label=Model
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Equipment
			 * \n tracker:modified=1998
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class model
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#model"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Equipment Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Equipment RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:equipmentSoftware
			 * \anchor nfo_equipmentSoftware
			 * \n The software of the equipment
			 * \n rdfs:label=Equipment software
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Equipment
			 * \n tracker:modified=1486
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class equipmentSoftware
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#equipmentSoftware"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Equipment Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Equipment RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:fileLastAccessed
			 * \anchor nfo_fileLastAccessed
			 * \n Time when the file was last accessed.
			 * \n rdfs:label=fileLastAccessed
			 * \n rdfs:subPropertyOf=dc:date
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=nfo:FileDataObject
			 * \n tracker:modified=1922
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class fileLastAccessed
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileLastAccessed"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FileDataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FileDataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nfo:fileCreated
			 * \anchor nfo_fileCreated
			 * \n File creation date
			 * \n rdfs:label=fileCreated
			 * \n rdfs:subPropertyOf=nie:created
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=nfo:FileDataObject
			 * \n tracker:modified=1916
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class fileCreated
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileCreated"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FileDataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FileDataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nfo:fileSize
			 * \anchor nfo_fileSize
			 * \n The size of the file in bytes. For compressed files it means the size of the packed file, not of the contents. For folders it means the aggregated size of all contained files and folders
			 * \n rdfs:label=fileSize
			 * \n rdfs:subPropertyOf=nie:byteSize
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:FileDataObject
			 * \n tracker:modified=1114
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class fileSize
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileSize"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FileDataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FileDataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:permissions
			 * \anchor nfo_permissions
			 * \n A string containing the permissions of a file. A feature common in many UNIX-like operating systems.
			 * \n rdfs:label=permissions
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:FileDataObject
			 * \n tracker:modified=1101
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class permissions
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#permissions"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FileDataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FileDataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:fileName
			 * \anchor nfo_fileName
			 * \n Name of the file, together with the extension
			 * \n rdfs:label=fileName
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:FileDataObject
			 * \n tracker:weight=7
			 * \n tracker:modified=1092
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class fileName
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileName"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FileDataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FileDataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:fileUrl
			 * \anchor nfo_fileUrl
			 * \n URL of the file. It points at the location of the file. In cases where creating a simple file:// or http:// URL for a file is difficult (e.g. for files inside compressed archives) the applications are encouraged to use conventions defined by Apache Commons VFS Project at http://jakarta.apache.org/  commons/ vfs/ filesystems.html.
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=fileUrl
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Resource
			 * \n rdfs:domain=nfo:FileDataObject
			 * \n tracker:modified=1415
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class fileUrl
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileUrl"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef FileDataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FileDataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Resource Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Resource RDFRange;
			};
			/*! Property generated from nfo:hasHash
			 * \anchor nfo_hasHash
			 * \n Links the file with it's hash value.
			 * \n rdfs:label=hasHash
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:FileHash
			 * \n rdfs:domain=nfo:FileDataObject
			 * \n tracker:modified=1329
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class hasHash
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasHash"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef FileDataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FileDataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef FileHash Range;
				/// The full, non-localized rdf range type of this property
				typedef FileHash RDFRange;
			};
			/*! Property generated from nfo:fileOwner
			 * \anchor nfo_fileOwner
			 * \n The owner of the file as defined by the file system access rights feature.
			 * \n rdfs:label=fileOwner
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=nfo:FileDataObject
			 * \n tracker:modified=1349
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class fileOwner
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileOwner"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef FileDataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FileDataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from nfo:fileLastModified
			 * \anchor nfo_fileLastModified
			 * \n last modification date
			 * \n rdfs:label=fileLastModified
			 * \n rdfs:subPropertyOf=dc:date
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:dateTime
			 * \n rdfs:domain=nfo:FileDataObject
			 * \n tracker:indexed=true
			 * \n tracker:modified=1651
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class fileLastModified
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileLastModified"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FileDataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FileDataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef QDateTime Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::dateTime RDFRange;
			};
			/*! Property generated from nfo:hashValue
			 * \anchor nfo_hashValue
			 * \n The actual value of the hash.
			 * \n rdfs:label=hashValue
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:FileHash
			 * \n tracker:modified=1238
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class hashValue
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hashValue"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FileHash Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FileHash RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:hashAlgorithm
			 * \anchor nfo_hashAlgorithm
			 * \n Name of the algorithm used to compute the hash value. Examples might include CRC32, MD5, SHA, TTH etc.
			 * \n rdfs:label=hashAlgorithm
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:FileHash
			 * \n tracker:modified=1590
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class hashAlgorithm
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hashAlgorithm"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef FileHash Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef FileHash RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:fontFamily
			 * \anchor nfo_fontFamily
			 * \n The name of the font family.
			 * \n rdfs:label=fontFamily
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Font
			 * \n tracker:weight=5
			 * \n tracker:modified=1490
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class fontFamily
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Font Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Font RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:foundry
			 * \anchor nfo_foundry
			 * \n The foundry, the organization that created the font.
			 * \n rdfs:label=foundry
			 * \n rdfs:subPropertyOf=nco:creator
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nco:Contact
			 * \n rdfs:domain=nfo:Font
			 * \n tracker:modified=1994
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class foundry
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Font Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Font RDFDomain;
				/// The localized c++ range type of this property
				typedef nco::Contact Range;
				/// The full, non-localized rdf range type of this property
				typedef nco::Contact RDFRange;
			};
			/*! Property generated from nfo:verticalResolution
			 * \anchor nfo_verticalResolution
			 * \n Vertical resolution of an Image (if printed). Expressed in DPI
			 * \n rdfs:label=verticalResolution
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Image
			 * \n tracker:modified=1990
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class verticalResolution
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#verticalResolution"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Image Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Image RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:horizontalResolution
			 * \anchor nfo_horizontalResolution
			 * \n Horizontal resolution of an image (if printed). Expressed in DPI.
			 * \n rdfs:label=horizontalResolution
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Image
			 * \n tracker:modified=1177
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class horizontalResolution
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#horizontalResolution"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Image Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Image RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:orientation
			 * \anchor nfo_orientation
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:Orientation
			 * \n rdfs:domain=nfo:Image
			 * \n tracker:writeback=true
			 * \n tracker:modified=1066
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class orientation
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#orientation"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Image Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Image RDFDomain;
				/// The localized c++ range type of this property
				typedef Orientation Range;
				/// The full, non-localized rdf range type of this property
				typedef Orientation RDFRange;
			};
			/*! Property generated from nfo:depicts
			 * \anchor nfo_depicts
			 * \n rdfs:range=poi:ObjectOfInterest
			 * \n tracker:modified=1675
			 * \n rdfs:domain=nfo:Image
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class depicts
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#depicts"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef Image Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Image RDFDomain;
				/// The localized c++ range type of this property
				typedef poi::ObjectOfInterest Range;
				/// The full, non-localized rdf range type of this property
				typedef poi::ObjectOfInterest RDFRange;
			};
			/*! Property generated from nfo:count
			 * \anchor nfo_count
			 * \n A common superproperty for all properties signifying the amount of atomic media data units. Examples of subproperties may include sampleCount and frameCount.
			 * \n rdfs:label=count
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1871
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class count
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#count"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Media RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:duration
			 * \anchor nfo_duration
			 * \n Duration of a media piece.
			 * \n rdfs:label=duration
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1094
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class duration
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#duration"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Media RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:device
			 * \anchor nfo_device
			 * \n Device (maker/model) used to capture the image/video
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=Device
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1494
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class device
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#device"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Media RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:compressionType
			 * \anchor nfo_compressionType
			 * \n The type of the compression. Values include, lossy and lossless.
			 * \n rdfs:label=compressionType
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:CompressionType
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1364
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class compressionType
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#compressionType"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Media RDFDomain;
				/// The localized c++ range type of this property
				typedef CompressionType Range;
				/// The full, non-localized rdf range type of this property
				typedef CompressionType RDFRange;
			};
			/*! Property generated from nfo:hasMediaStream
			 * \anchor nfo_hasMediaStream
			 * \n Connects a media container with a single media stream contained within.
			 * \n rdfs:label=hasMediaStream
			 * \n rdfs:subPropertyOf=nie:hasPart
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nie:DataObject
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1764
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class hasMediaStream
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasMediaStream"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Media RDFDomain;
				/// The localized c++ range type of this property
				typedef nie::DataObject Range;
				/// The full, non-localized rdf range type of this property
				typedef nie::DataObject RDFRange;
			};
			/*! Property generated from nfo:bitDepth
			 * \anchor nfo_bitDepth
			 * \n A common superproperty for all properties signifying the amount of bits for an atomic unit of data. Examples of subproperties may include bitsPerSample and bitsPerPixel
			 * \n rdfs:label=bitDepth
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=rdfs:Literal
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1173
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class bitDepth
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitDepth"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Media RDFDomain;
				/// The localized c++ range type of this property
				typedef rdfs::Literal Range;
				/// The full, non-localized rdf range type of this property
				typedef rdfs::Literal RDFRange;
			};
			/*! Property generated from nfo:codec
			 * \anchor nfo_codec
			 * \n The name of the codec necessary to decode a piece of media.
			 * \n rdfs:label=codec
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1709
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class codec
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#codec"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Media RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:encodedBy
			 * \anchor nfo_encodedBy
			 * \n The contains the name of the person or organisation that encoded the media
			 * \n rdfs:label=encodedBy
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1533
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class encodedBy
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#encodedBy"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Media RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:bitrateType
			 * \anchor nfo_bitrateType
			 * \n The type of the bitrate. Examples may include CBR and VBR.
			 * \n rdfs:label=bitrateType
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1213
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class bitrateType
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitrateType"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Media RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:averageBitrate
			 * \anchor nfo_averageBitrate
			 * \n The average overall bitrate of a media container. (i.e. the size of the piece of media in bits, divided by it's duration expressed in seconds).
			 * \n rdfs:label=averageBitrate
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1182
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class averageBitrate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageBitrate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Media RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nfo:genre
			 * \anchor nfo_genre
			 * \n Genre of media
			 * \n rdfs:label=Genre
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:weight=4
			 * \n tracker:modified=1251
			 * \n tracker:fulltextIndexed=true
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class genre
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#genre"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Media RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:equipment
			 * \anchor nfo_equipment
			 * \n Equipment used to create the media
			 * \n rdfs:label=Device
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:Equipment
			 * \n rdfs:domain=nfo:Media
			 * \n tracker:modified=1388
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class equipment
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#equipment"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Media Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Media RDFDomain;
				/// The localized c++ range type of this property
				typedef Equipment Range;
				/// The full, non-localized rdf range type of this property
				typedef Equipment RDFRange;
			};
			/*! Property generated from nfo:listPosition
			 * \anchor nfo_listPosition
			 * \n Position of an entry in a list. Double, to optimize the poor insertions
			 * \n rdfs:label=list position
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nfo:MediaFileListEntry
			 * \n tracker:writeback=true
			 * \n tracker:modified=1381
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class listPosition
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#listPosition"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MediaFileListEntry Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MediaFileListEntry RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nfo:entryContent
			 * \anchor nfo_entryContent
			 * \n URI to the element in certain position of the list
			 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
			 * \n rdfs:label=Entry content
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nie:InformationElement
			 * \n rdfs:domain=nfo:MediaFileListEntry
			 * \n tracker:writeback=true
			 * \n tracker:modified=1753
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class entryContent
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#entryContent"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef MediaFileListEntry Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MediaFileListEntry RDFDomain;
				/// The localized c++ range type of this property
				typedef nie::InformationElement Range;
				/// The full, non-localized rdf range type of this property
				typedef nie::InformationElement RDFRange;
			};
			/*! Property generated from nfo:entryUrl
			 * \anchor nfo_entryUrl
			 * \n URI to the element in certain position of the list
			 * \n rdfs:label=Entry URL
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:MediaFileListEntry
			 * \n tracker:writeback=true
			 * \n tracker:modified=1279
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class entryUrl
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#entryUrl"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MediaFileListEntry Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MediaFileListEntry RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:hasMediaFileListEntry
			 * \anchor nfo_hasMediaFileListEntry
			 * \n This property is intended to point to an RDF list of MediaFiles.
			 * \n rdfs:label=hasMediaFileListEntry
			 * \n rdfs:range=nfo:MediaFileListEntry
			 * \n rdfs:domain=nfo:MediaList
			 * \n tracker:writeback=true
			 * \n tracker:modified=1319
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class hasMediaFileListEntry
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasMediaFileListEntry"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef MediaList Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MediaList RDFDomain;
				/// The localized c++ range type of this property
				typedef MediaFileListEntry Range;
				/// The full, non-localized rdf range type of this property
				typedef MediaFileListEntry RDFRange;
			};
			/*! Property generated from nfo:entryCounter
			 * \anchor nfo_entryCounter
			 * \n Number of entries in the list. Optimize some common queries
			 * \n rdfs:label=entry Counter
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:MediaList
			 * \n tracker:writeback=true
			 * \n tracker:modified=1520
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class entryCounter
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#entryCounter"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MediaList Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MediaList RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:listDuration
			 * \anchor nfo_listDuration
			 * \n Sum of the duration of all items in the list. Optimize some common queries. In seconds
			 * \n rdfs:label=List duration
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:MediaList
			 * \n tracker:writeback=true
			 * \n tracker:modified=1618
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class listDuration
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#listDuration"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef MediaList Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MediaList RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:mediaListEntry
			 * \anchor nfo_mediaListEntry
			 * \n A certain item belongs to a media list. This can reflect that a song is in a playlist, an image or video in an Album
			 * \n rdfs:range=nie:InformationElement
			 * \n rdfs:label=Media list entry
			 * \n tracker:modified=1282
			 * \n rdfs:domain=nfo:MediaList
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class mediaListEntry
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#mediaListEntry"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = 0 };
				/// The domain/owning class of this property
				typedef MediaList Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef MediaList RDFDomain;
				/// The localized c++ range type of this property
				typedef nie::InformationElement Range;
				/// The full, non-localized rdf range type of this property
				typedef nie::InformationElement RDFRange;
			};
			/*! Property generated from nfo:pageCount
			 * \anchor nfo_pageCount
			 * \n Number of pages.
			 * \n rdfs:label=pageCount
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:PaginatedTextDocument
			 * \n tracker:modified=1773
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class pageCount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#pageCount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef PaginatedTextDocument Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef PaginatedTextDocument RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:conflicts
			 * \anchor nfo_conflicts
			 * \n States that a piece of software is in conflict with another piece of software.
			 * \n rdfs:label=conflicts
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:Software
			 * \n rdfs:domain=nfo:Software
			 * \n tracker:modified=1727
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class conflicts
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#conflicts"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Software Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Software RDFDomain;
				/// The localized c++ range type of this property
				typedef Software Range;
				/// The full, non-localized rdf range type of this property
				typedef Software RDFRange;
			};
			/*! Property generated from nfo:supercedes
			 * \anchor nfo_supercedes
			 * \n States that a piece of software supercedes another piece of software.
			 * \n rdfs:label=supercedes
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:Software
			 * \n rdfs:domain=nfo:Software
			 * \n tracker:modified=1604
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class supercedes
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#supercedes"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Software Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Software RDFDomain;
				/// The localized c++ range type of this property
				typedef Software Range;
				/// The full, non-localized rdf range type of this property
				typedef Software RDFRange;
			};
			/*! Property generated from nfo:softwareIcon
			 * \anchor nfo_softwareIcon
			 * \n Icon of the software
			 * \n rdfs:label=SoftwareIcon
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:Image
			 * \n rdfs:domain=nfo:Software
			 * \n tracker:modified=1297
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class softwareIcon
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#softwareIcon"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef Software Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Software RDFDomain;
				/// The localized c++ range type of this property
				typedef Image Range;
				/// The full, non-localized rdf range type of this property
				typedef Image RDFRange;
			};
			/*! Property generated from nfo:softwareCmdLine
			 * \anchor nfo_softwareCmdLine
			 * \n Command to launch the software
			 * \n rdfs:label=SoftwareCmdLine
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:Software
			 * \n tracker:weight=3
			 * \n tracker:modified=1911
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class softwareCmdLine
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#softwareCmdLine"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Software Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Software RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:softwareCategoryIcon
			 * \anchor nfo_softwareCategoryIcon
			 * \n Icon of the software
			 * \n rdfs:label=SoftwareIcon
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:Image
			 * \n rdfs:domain=nfo:SoftwareCategory
			 * \n tracker:modified=1467
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class softwareCategoryIcon
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#softwareCategoryIcon"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef SoftwareCategory Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef SoftwareCategory RDFDomain;
				/// The localized c++ range type of this property
				typedef Image Range;
				/// The full, non-localized rdf range type of this property
				typedef Image RDFRange;
			};
			/*! Property generated from nfo:commentCharacterCount
			 * \anchor nfo_commentCharacterCount
			 * \n The amount of character in comments i.e. characters ignored by the compiler/interpreter.
			 * \n rdfs:label=commentCharacterCount
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:SourceCode
			 * \n tracker:modified=1686
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class commentCharacterCount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#commentCharacterCount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef SourceCode Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef SourceCode RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:programmingLanguage
			 * \anchor nfo_programmingLanguage
			 * \n rdfs:label=programmingLanguage
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:SourceCode
			 * \n tracker:modified=1140
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class programmingLanguage
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#programmingLanguage"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef SourceCode Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef SourceCode RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:definesClass
			 * \anchor nfo_definesClass
			 * \n Name of a class defined in the source code file.
			 * \n rdfs:label=definesClass
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:SourceCode
			 * \n tracker:modified=1141
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class definesClass
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#definesClass"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef SourceCode Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef SourceCode RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:definesFunction
			 * \anchor nfo_definesFunction
			 * \n A name of a function/method defined in the given source code file.
			 * \n rdfs:label=definesFunction
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:SourceCode
			 * \n tracker:modified=1704
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class definesFunction
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#definesFunction"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef SourceCode Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef SourceCode RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:definesGlobalVariable
			 * \anchor nfo_definesGlobalVariable
			 * \n Name of a global variable defined within the source code file.
			 * \n rdfs:label=definesGlobalVariable
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:SourceCode
			 * \n tracker:modified=1874
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class definesGlobalVariable
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#definesGlobalVariable"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef SourceCode Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef SourceCode RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:wordCount
			 * \anchor nfo_wordCount
			 * \n The amount of words in a text document.
			 * \n rdfs:label=wordCount
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:TextDocument
			 * \n tracker:modified=1293
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class wordCount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#wordCount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef TextDocument Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TextDocument RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:lineCount
			 * \anchor nfo_lineCount
			 * \n The amount of lines in a text document
			 * \n rdfs:label=lineCount
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:TextDocument
			 * \n tracker:modified=1744
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class lineCount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#lineCount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef TextDocument Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TextDocument RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:characterCount
			 * \anchor nfo_characterCount
			 * \n The amount of characters in the document.
			 * \n rdfs:label=characterCount
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:TextDocument
			 * \n tracker:modified=1091
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class characterCount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#characterCount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef TextDocument Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef TextDocument RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:frameRate
			 * \anchor nfo_frameRate
			 * \n Amount of video frames per second.
			 * \n rdfs:label=frameRate
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nfo:Video
			 * \n tracker:modified=1071
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class frameRate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frameRate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nfo:frameCount
			 * \anchor nfo_frameCount
			 * \n The amount of frames in a video sequence.
			 * \n rdfs:label=frameCount
			 * \n rdfs:subPropertyOf=nfo:count
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Video
			 * \n tracker:modified=1823
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class frameCount
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frameCount"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:averageVideoBitrate
			 * \anchor nfo_averageVideoBitrate
			 * \n The average overall bitrate of a media container. (i.e. the size of the piece of media in bits, divided by it's duration expressed in seconds).
			 * \n rdfs:label=averageBitrate
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nfo:Video
			 * \n tracker:modified=1664
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class averageVideoBitrate
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageVideoBitrate"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Video Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Video RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nfo:aspectRatio
			 * \anchor nfo_aspectRatio
			 * \n Visual content aspect ratio. (Width divided by Height)
			 * \n rdfs:label=aspectRatio
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nfo:Visual
			 * \n tracker:modified=1393
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class aspectRatio
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#aspectRatio"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Visual Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Visual RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nfo:heading
			 * \anchor nfo_heading
			 * \n Specifies the direction of travelling while capturing image/video. The range of values from 0.00 to 359.99 (where 0 is due North, 90 is East, 180 South and 270 is West)
			 * \n rdfs:label=Heading
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nfo:Visual
			 * \n tracker:modified=1505
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class heading
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#heading"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Visual Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Visual RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nfo:tilt
			 * \anchor nfo_tilt
			 * \n Vertical inclination of the camera while capturing the image, in angles starting on 0 as horizontal, positive numbers pointing up, negative angles pointing down
			 * \n rdfs:label=Tilt
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:double
			 * \n rdfs:domain=nfo:Visual
			 * \n tracker:modified=1374
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class tilt
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#tilt"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Visual Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Visual RDFDomain;
				/// The localized c++ range type of this property
				typedef double Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::double_ RDFRange;
			};
			/*! Property generated from nfo:interlaceMode
			 * \anchor nfo_interlaceMode
			 * \n True if the image is interlaced, false if not.
			 * \n rdfs:label=interlaceMode
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nfo:Visual
			 * \n tracker:modified=1895
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class interlaceMode
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#interlaceMode"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Visual Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Visual RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			/*! Property generated from nfo:height
			 * \anchor nfo_height
			 * \n Visual content height in pixels.
			 * \n rdfs:label=height
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Visual
			 * \n tracker:modified=1810
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class height
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#height"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Visual Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Visual RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:width
			 * \anchor nfo_width
			 * \n Visual content width in pixels.
			 * \n rdfs:label=width
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Visual
			 * \n tracker:modified=1843
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class width
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#width"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Visual Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Visual RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:colorDepth
			 * \anchor nfo_colorDepth
			 * \n Amount of bits used to express the color of each pixel.
			 * \n rdfs:label=colorDepth
			 * \n rdfs:subPropertyOf=nfo:bitDepth
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:integer
			 * \n rdfs:domain=nfo:Visual
			 * \n tracker:modified=1472
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class colorDepth
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorDepth"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef Visual Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef Visual RDFDomain;
				/// The localized c++ range type of this property
				typedef qint64 Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::integer RDFRange;
			};
			/*! Property generated from nfo:domain
			 * \anchor nfo_domain
			 * \n rdfs:label=Domain for a web history entry
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:WebHistory
			 * \n tracker:weight=3
			 * \n tracker:modified=1591
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class domain
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#domain"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef WebHistory Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef WebHistory RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:uri
			 * \anchor nfo_uri
			 * \n rdfs:label=Uri for a web history entry
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:string
			 * \n rdfs:domain=nfo:WebHistory
			 * \n tracker:weight=5
			 * \n tracker:modified=1241
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class uri
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#uri"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef WebHistory Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef WebHistory RDFDomain;
				/// The localized c++ range type of this property
				typedef QString Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::string RDFRange;
			};
			/*! Property generated from nfo:belongsToContainer
			 * \anchor nfo_belongsToContainer
			 * \n Models the containment relations between Files and Folders (or CompressedFiles).
			 * \n rdfs:label=belongsToContainer
			 * \n rdfs:subPropertyOf=nie:isPartOf
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=nfo:DataContainer
			 * \n rdfs:domain=nie:DataObject
			 * \n tracker:modified=1904
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class belongsToContainer
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#belongsToContainer"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued };
				/// The domain/owning class of this property
				typedef nie::DataObject Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nie::DataObject RDFDomain;
				/// The localized c++ range type of this property
				typedef DataContainer Range;
				/// The full, non-localized rdf range type of this property
				typedef DataContainer RDFRange;
			};
			/*! Property generated from nfo:isContentEncrypted
			 * \anchor nfo_isContentEncrypted
			 * \n Might change (IE of DataObject property?)
			 * \n rdfs:label=Is content encrypted
			 * \n nrl:maxCardinality=1
			 * \n rdfs:range=xsd:boolean
			 * \n rdfs:domain=nie:InformationElement
			 * \n tracker:modified=1344
			 * \n tracker:added=2010-11-30T13:24:06Z
			 */
			/// \ingroup onto_nfo_properties
			class isContentEncrypted
			{	public:
				/// \return encoded iri of this property
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#isContentEncrypted"; }
				/// \return iri of this property
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this property
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// When this property class is used as a resource it has type rdf:Property
				typedef rdf::Property ResourceType;
				//! The ontology of this property
				typedef Ontology_nfo Ontology;
				/// The base strategy of this property. Typically just contains the multiplevalued/optionalvalud attributes.
				enum { BaseStrategy = ::SopranoLive::RDFStrategy::NonMultipleValued | ::SopranoLive::RDFStrategy::Literal };
				/// The domain/owning class of this property
				typedef nie::InformationElement Domain;
				/// The domain/owning class of this property (for symmetry with RDFRange)
				typedef nie::InformationElement RDFDomain;
				/// The localized c++ range type of this property
				typedef bool Range;
				/// The full, non-localized rdf range type of this property
				typedef ::SopranoLive::Ontologies::xsd::boolean RDFRange;
			};
			//@}
			/*!
			 * \section resources Resource description classes
			 */
			//@{
			/*! Resource generated from nfo:orientation-bottom
			 * \anchor nfo_orientation_bottom
			 */
			/// \ingroup onto_nfo_resources
			class orientation_bottom
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#orientation-bottom"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Orientation ResourceType;
				//! The ontology of this resource
				typedef Ontology_nfo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nfo:orientation-bottom-mirror
			 * \anchor nfo_orientation_bottom_mirror
			 */
			/// \ingroup onto_nfo_resources
			class orientation_bottom_mirror
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#orientation-bottom-mirror"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Orientation ResourceType;
				//! The ontology of this resource
				typedef Ontology_nfo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nfo:orientation-left
			 * \anchor nfo_orientation_left
			 */
			/// \ingroup onto_nfo_resources
			class orientation_left
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#orientation-left"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Orientation ResourceType;
				//! The ontology of this resource
				typedef Ontology_nfo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nfo:orientation-left-mirror
			 * \anchor nfo_orientation_left_mirror
			 */
			/// \ingroup onto_nfo_resources
			class orientation_left_mirror
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#orientation-left-mirror"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Orientation ResourceType;
				//! The ontology of this resource
				typedef Ontology_nfo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nfo:orientation-right
			 * \anchor nfo_orientation_right
			 */
			/// \ingroup onto_nfo_resources
			class orientation_right
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#orientation-right"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Orientation ResourceType;
				//! The ontology of this resource
				typedef Ontology_nfo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nfo:orientation-right-mirror
			 * \anchor nfo_orientation_right_mirror
			 */
			/// \ingroup onto_nfo_resources
			class orientation_right_mirror
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#orientation-right-mirror"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Orientation ResourceType;
				//! The ontology of this resource
				typedef Ontology_nfo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nfo:orientation-top
			 * \anchor nfo_orientation_top
			 */
			/// \ingroup onto_nfo_resources
			class orientation_top
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#orientation-top"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Orientation ResourceType;
				//! The ontology of this resource
				typedef Ontology_nfo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			/*! Resource generated from nfo:orientation-top-mirror
			 * \anchor nfo_orientation_top_mirror
			 */
			/// \ingroup onto_nfo_resources
			class orientation_top_mirror
			{	public:
				/// \return encoded iri of this resource
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#orientation-top-mirror"; }
				/// \return iri of this resource
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				/// The defining context of this resource
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;
				/// The type of this resource
				typedef Orientation ResourceType;
				//! The ontology of this resource
				typedef Ontology_nfo Ontology;
				/// The base strategy of this resource
				enum { BaseStrategy = 0 };
			};
			//@}
		}
	}
}
#endif /* SOPRANOLIVE_ONTOLOGIES_NFO_H_PROPERTY_DEFINITIONS */
#endif /* (!defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) || defined(Q_MOC_RUN) */


#if ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) \
      && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY) \
      ) || defined(Q_MOC_RUN))
#ifndef SOPRANOLIVE_ONTOLOGIES_NFO_H_CLASS_DEFINITIONS
#define SOPRANOLIVE_ONTOLOGIES_NFO_H_CLASS_DEFINITIONS

#ifdef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/mtp.h>
#include <QtTracker/ontologies/poi.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#include <QtTracker/ontologies/nmm.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdfs.h>
#else // !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING)
#define SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#define SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/mtp.h>
#include <QtTracker/ontologies/poi.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#include <QtTracker/ontologies/nmm.h>
#undef SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/rdfs.h>
#undef SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING
#endif // SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING

namespace SopranoLive
{
	namespace Ontologies
	{
		namespace nfo
		{

			using namespace rdfs;
			using namespace poi;
			using namespace nie;
			using namespace rdf;
			using namespace xsd;
			using namespace nco;

			/*! Class generated from nfo:Software
			 * \ingroup onto_nfo_classes
			 * A piece of software. Examples may include applications and the operating system. This interpretation most commonly applies to SoftwareItems.
			 * 
			 * rdfs:label = Software
			 * 
			 * tracker:modified = 1507
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nfo_conflicts "nfo:conflicts"
			 * 		\ref nfo_supercedes "nfo:supercedes"
			 */
			class Software
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Software"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Software> Live;
				Software() { this->attachInterfaceHelper< Software >(); }
				~Software() { this->detachInterfaceHelper< Software >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:conflicts
				 * \n States that a piece of software is in conflict with another piece of software.
				 * \n rdfs:label=conflicts
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:Software
				 * \n rdfs:domain=nfo:Software
				 * \n tracker:modified=1727
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveConflictss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_conflicts "nfo:conflicts" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveConflictss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::conflicts >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getConflictss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_conflicts "nfo:conflicts" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getConflictss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::conflicts >(object_info, strategy, parent); }
				/*!
					\fn void setConflictss(LiveNodes const &conflicts_)
					
					
					Sets the property \ref nfo_conflicts "nfo:conflicts" set to the given \a conflicts_ set.
					\sa LiveResource::setObjects
				 */
				void setConflictss(LiveNodes const &conflicts_) { baseSetObjects(nfo::conflicts::iri(), conflicts_); }
				/*!
					\fn void removeConflictss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_conflicts "nfo:conflicts" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeConflictss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::conflicts::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Software > getConflicts()
					
					
					Returns the property \ref nfo_conflicts "nfo:conflicts". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Software > getConflicts() { return baseGetObject< nfo::conflicts >(); }
				/*!
					\fn ::SopranoLive::Live< Software > setConflicts(::SopranoLive::Live< Software > const &conflicts_)
					
					
					Sets the property \ref nfo_conflicts "nfo:conflicts" to the given \a conflicts.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Software > setConflicts(::SopranoLive::Live< Software > const &conflicts_) { return baseSetObject< nfo::conflicts >( conflicts_ ); }
				/*!
					\fn ::SopranoLive::Live< Software > firstConflicts()
					
					
					Returns the first property \ref nfo_conflicts "nfo:conflicts". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Software > firstConflicts() { return baseFirstObject< nfo::conflicts >(); }
				/*!
					\fn ::SopranoLive::Live< Software > addConflicts()
					
					
					Adds a new uniquely named resource to the property \ref nfo_conflicts "nfo:conflicts" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Software > addConflicts() { return baseAddObject< nfo::conflicts >(); }
				/*!
					\fn ::SopranoLive::Live< Software > addConflicts(::SopranoLive::Live< Software > const &conflicts_)
					
					
					Adds the given \a conflicts_ to the property \ref nfo_conflicts "nfo:conflicts" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Software > addConflicts(::SopranoLive::Live< Software > const &conflicts_) { return baseAddObject< nfo::conflicts >( conflicts_ ); }
				/*!
					\fn void removeConflicts(::SopranoLive::Live< Software > const &conflicts_)
					
					
					Removes the given \a conflicts_ from the property \ref nfo_conflicts "nfo:conflicts" set.
					\sa LiveResource::removeObject
				 */
				void removeConflicts(::SopranoLive::Live< Software > const &conflicts_) { baseRemoveObject< nfo::conflicts >(conflicts_); }

				/* Property generated from nfo:softwareIcon
				 * \n Icon of the software
				 * \n rdfs:label=SoftwareIcon
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:Image
				 * \n rdfs:domain=nfo:Software
				 * \n tracker:modified=1297
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSoftwareIcons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_softwareIcon "nfo:softwareIcon" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSoftwareIcons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::softwareIcon >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSoftwareIcons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_softwareIcon "nfo:softwareIcon" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSoftwareIcons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::softwareIcon >(object_info, strategy, parent); }
				/*!
					\fn void setSoftwareIcons(LiveNodes const &softwareIcon_)
					
					
					Sets the property \ref nfo_softwareIcon "nfo:softwareIcon" set to the given \a softwareIcon_ set.
					\sa LiveResource::setObjects
				 */
				void setSoftwareIcons(LiveNodes const &softwareIcon_) { baseSetObjects(nfo::softwareIcon::iri(), softwareIcon_); }
				/*!
					\fn void removeSoftwareIcons(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_softwareIcon "nfo:softwareIcon" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSoftwareIcons(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::softwareIcon::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Image > getSoftwareIcon()
					
					
					Returns the property \ref nfo_softwareIcon "nfo:softwareIcon". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Image > getSoftwareIcon() { return baseGetObject< nfo::softwareIcon >(); }
				/*!
					\fn ::SopranoLive::Live< Image > setSoftwareIcon(::SopranoLive::Live< Image > const &softwareIcon_)
					
					
					Sets the property \ref nfo_softwareIcon "nfo:softwareIcon" to the given \a softwareIcon.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Image > setSoftwareIcon(::SopranoLive::Live< Image > const &softwareIcon_) { return baseSetObject< nfo::softwareIcon >( softwareIcon_ ); }
				/*!
					\fn ::SopranoLive::Live< Image > firstSoftwareIcon()
					
					
					Returns the first property \ref nfo_softwareIcon "nfo:softwareIcon". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Image > firstSoftwareIcon() { return baseFirstObject< nfo::softwareIcon >(); }
				/*!
					\fn ::SopranoLive::Live< Image > addSoftwareIcon()
					
					
					Adds a new uniquely named resource to the property \ref nfo_softwareIcon "nfo:softwareIcon" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Image > addSoftwareIcon() { return baseAddObject< nfo::softwareIcon >(); }
				/*!
					\fn ::SopranoLive::Live< Image > addSoftwareIcon(::SopranoLive::Live< Image > const &softwareIcon_)
					
					
					Adds the given \a softwareIcon_ to the property \ref nfo_softwareIcon "nfo:softwareIcon" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Image > addSoftwareIcon(::SopranoLive::Live< Image > const &softwareIcon_) { return baseAddObject< nfo::softwareIcon >( softwareIcon_ ); }
				/*!
					\fn void removeSoftwareIcon(::SopranoLive::Live< Image > const &softwareIcon_)
					
					
					Removes the given \a softwareIcon_ from the property \ref nfo_softwareIcon "nfo:softwareIcon" set.
					\sa LiveResource::removeObject
				 */
				void removeSoftwareIcon(::SopranoLive::Live< Image > const &softwareIcon_) { baseRemoveObject< nfo::softwareIcon >(softwareIcon_); }

				/* Property generated from nfo:softwareCmdLine
				 * \n Command to launch the software
				 * \n rdfs:label=SoftwareCmdLine
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Software
				 * \n tracker:weight=3
				 * \n tracker:modified=1911
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSoftwareCmdLines(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_softwareCmdLine "nfo:softwareCmdLine" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSoftwareCmdLines(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::softwareCmdLine >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSoftwareCmdLines(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_softwareCmdLine "nfo:softwareCmdLine" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSoftwareCmdLines(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::softwareCmdLine >(object_info, strategy, parent); }
				/*!
					\fn void setSoftwareCmdLines(LiveNodes const &softwareCmdLine_)
					
					
					Sets the property \ref nfo_softwareCmdLine "nfo:softwareCmdLine" set to the given \a softwareCmdLine_ set.
					\sa LiveResource::setObjects
				 */
				void setSoftwareCmdLines(LiveNodes const &softwareCmdLine_) { baseSetObjects(nfo::softwareCmdLine::iri(), softwareCmdLine_); }
				/*!
					\fn void removeSoftwareCmdLines(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_softwareCmdLine "nfo:softwareCmdLine" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSoftwareCmdLines(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::softwareCmdLine::iri(), object_info); }
				/*!
					\fn QString getSoftwareCmdLine()
					
					
					Returns the property \ref nfo_softwareCmdLine "nfo:softwareCmdLine". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getSoftwareCmdLine() { return baseGetObject< nfo::softwareCmdLine >(); }
				/*!
					\fn void setSoftwareCmdLine(QString const &softwareCmdLine_)
					
					
					Sets the property \ref nfo_softwareCmdLine "nfo:softwareCmdLine" to the given \a softwareCmdLine.
					\sa LiveResource::setObject
				 */
				void setSoftwareCmdLine(QString const &softwareCmdLine_) { baseSetObject< nfo::softwareCmdLine >( softwareCmdLine_ ); }
				/*!
					\fn QString firstSoftwareCmdLine()
					
					
					Returns the first property \ref nfo_softwareCmdLine "nfo:softwareCmdLine". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstSoftwareCmdLine() { return baseFirstObject< nfo::softwareCmdLine >(); }
				/*!
					\fn void addSoftwareCmdLine(QString const &softwareCmdLine_)
					
					
					Adds the given \a softwareCmdLine_ to the property \ref nfo_softwareCmdLine "nfo:softwareCmdLine" set.
					\sa LiveResource::addObject
				 */
				void addSoftwareCmdLine(QString const &softwareCmdLine_) { baseAddObject< nfo::softwareCmdLine >( softwareCmdLine_ ); }
				/*!
					\fn void removeSoftwareCmdLine(QString const &softwareCmdLine_)
					
					
					Removes the given \a softwareCmdLine_ from the property \ref nfo_softwareCmdLine "nfo:softwareCmdLine" set.
					\sa LiveResource::removeObject
				 */
				void removeSoftwareCmdLine(QString const &softwareCmdLine_) { baseRemoveObject< nfo::softwareCmdLine >(softwareCmdLine_); }

				/* Property generated from nfo:supercedes
				 * \n States that a piece of software supercedes another piece of software.
				 * \n rdfs:label=supercedes
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:Software
				 * \n rdfs:domain=nfo:Software
				 * \n tracker:modified=1604
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSupercedess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_supercedes "nfo:supercedes" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSupercedess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::supercedes >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSupercedess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_supercedes "nfo:supercedes" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSupercedess(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::supercedes >(object_info, strategy, parent); }
				/*!
					\fn void setSupercedess(LiveNodes const &supercedes_)
					
					
					Sets the property \ref nfo_supercedes "nfo:supercedes" set to the given \a supercedes_ set.
					\sa LiveResource::setObjects
				 */
				void setSupercedess(LiveNodes const &supercedes_) { baseSetObjects(nfo::supercedes::iri(), supercedes_); }
				/*!
					\fn void removeSupercedess(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_supercedes "nfo:supercedes" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSupercedess(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::supercedes::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Software > getSupercedes()
					
					
					Returns the property \ref nfo_supercedes "nfo:supercedes". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Software > getSupercedes() { return baseGetObject< nfo::supercedes >(); }
				/*!
					\fn ::SopranoLive::Live< Software > setSupercedes(::SopranoLive::Live< Software > const &supercedes_)
					
					
					Sets the property \ref nfo_supercedes "nfo:supercedes" to the given \a supercedes.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Software > setSupercedes(::SopranoLive::Live< Software > const &supercedes_) { return baseSetObject< nfo::supercedes >( supercedes_ ); }
				/*!
					\fn ::SopranoLive::Live< Software > firstSupercedes()
					
					
					Returns the first property \ref nfo_supercedes "nfo:supercedes". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Software > firstSupercedes() { return baseFirstObject< nfo::supercedes >(); }
				/*!
					\fn ::SopranoLive::Live< Software > addSupercedes()
					
					
					Adds a new uniquely named resource to the property \ref nfo_supercedes "nfo:supercedes" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Software > addSupercedes() { return baseAddObject< nfo::supercedes >(); }
				/*!
					\fn ::SopranoLive::Live< Software > addSupercedes(::SopranoLive::Live< Software > const &supercedes_)
					
					
					Adds the given \a supercedes_ to the property \ref nfo_supercedes "nfo:supercedes" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Software > addSupercedes(::SopranoLive::Live< Software > const &supercedes_) { return baseAddObject< nfo::supercedes >( supercedes_ ); }
				/*!
					\fn void removeSupercedes(::SopranoLive::Live< Software > const &supercedes_)
					
					
					Removes the given \a supercedes_ from the property \ref nfo_supercedes "nfo:supercedes" set.
					\sa LiveResource::removeObject
				 */
				void removeSupercedes(::SopranoLive::Live< Software > const &supercedes_) { baseRemoveObject< nfo::supercedes >(supercedes_); }
				 //@}
			};

			/*! Class generated from nfo:Application
			 * \ingroup onto_nfo_classes
			 * An application
			 * 
			 * rdfs:label = Application
			 * 
			 * tracker:modified = 1254
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Application
				: public virtual Software

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Application"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Software, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Application> Live;
				Application() { this->attachInterfaceHelper< Application >(); }
				~Application() { this->detachInterfaceHelper< Application >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:DataContainer
			 * \ingroup onto_nfo_classes
			 * A superclass for all entities, whose primary purpose is to serve as containers for other data object. They usually don't have any 'meaning' by themselves. Examples include folders, archives and optical disc images.
			 * 
			 * rdfs:label = DataContainer
			 * 
			 * tracker:modified = 1568
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nfo_belongsToContainer "nfo:belongsToContainer"
			 */
			class DataContainer
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#DataContainer"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<DataContainer> Live;
				DataContainer() { this->attachInterfaceHelper< DataContainer >(); }
				~DataContainer() { this->detachInterfaceHelper< DataContainer >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:Archive
			 * \ingroup onto_nfo_classes
			 * A compressed file. May contain other files or folder inside.
			 * 
			 * rdfs:label = Archive
			 * 
			 * tracker:modified = 1127
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Archive
				: public virtual DataContainer

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Archive"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<DataContainer, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Archive> Live;
				Archive() { this->attachInterfaceHelper< Archive >(); }
				~Archive() { this->detachInterfaceHelper< Archive >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:uncompressedSize
				 * \n Uncompressed size of the content of a compressed file.
				 * \n rdfs:label=uncompressedSize
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Archive
				 * \n tracker:modified=1992
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveUncompressedSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_uncompressedSize "nfo:uncompressedSize" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveUncompressedSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::uncompressedSize >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getUncompressedSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_uncompressedSize "nfo:uncompressedSize" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getUncompressedSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::uncompressedSize >(object_info, strategy, parent); }
				/*!
					\fn void setUncompressedSizes(LiveNodes const &uncompressedSize_)
					
					
					Sets the property \ref nfo_uncompressedSize "nfo:uncompressedSize" set to the given \a uncompressedSize_ set.
					\sa LiveResource::setObjects
				 */
				void setUncompressedSizes(LiveNodes const &uncompressedSize_) { baseSetObjects(nfo::uncompressedSize::iri(), uncompressedSize_); }
				/*!
					\fn void removeUncompressedSizes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_uncompressedSize "nfo:uncompressedSize" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeUncompressedSizes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::uncompressedSize::iri(), object_info); }
				/*!
					\fn qint64 getUncompressedSize()
					
					
					Returns the property \ref nfo_uncompressedSize "nfo:uncompressedSize". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getUncompressedSize() { return baseGetObject< nfo::uncompressedSize >(); }
				/*!
					\fn void setUncompressedSize(qint64 const &uncompressedSize_)
					
					
					Sets the property \ref nfo_uncompressedSize "nfo:uncompressedSize" to the given \a uncompressedSize.
					\sa LiveResource::setObject
				 */
				void setUncompressedSize(qint64 const &uncompressedSize_) { baseSetObject< nfo::uncompressedSize >( uncompressedSize_ ); }
				/*!
					\fn qint64 firstUncompressedSize()
					
					
					Returns the first property \ref nfo_uncompressedSize "nfo:uncompressedSize". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstUncompressedSize() { return baseFirstObject< nfo::uncompressedSize >(); }
				/*!
					\fn void addUncompressedSize(qint64 const &uncompressedSize_)
					
					
					Adds the given \a uncompressedSize_ to the property \ref nfo_uncompressedSize "nfo:uncompressedSize" set.
					\sa LiveResource::addObject
				 */
				void addUncompressedSize(qint64 const &uncompressedSize_) { baseAddObject< nfo::uncompressedSize >( uncompressedSize_ ); }
				/*!
					\fn void removeUncompressedSize(qint64 const &uncompressedSize_)
					
					
					Removes the given \a uncompressedSize_ from the property \ref nfo_uncompressedSize "nfo:uncompressedSize" set.
					\sa LiveResource::removeObject
				 */
				void removeUncompressedSize(qint64 const &uncompressedSize_) { baseRemoveObject< nfo::uncompressedSize >(uncompressedSize_); }
				 //@}
			};

			/*! Class generated from nfo:FileDataObject
			 * \ingroup onto_nfo_classes
			 * A resource containing a finite sequence of bytes with arbitrary information, that is available to a computer program and is usually based on some kind of durable storage. A file is durable in the sense that it remains available for programs to use after the current program has finished.
			 * 
			 * rdfs:label = FileDataObject
			 * 
			 * tracker:modified = 1214
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class FileDataObject
				: public virtual nie::DataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#FileDataObject"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::DataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<FileDataObject> Live;
				FileDataObject() { this->attachInterfaceHelper< FileDataObject >(); }
				~FileDataObject() { this->detachInterfaceHelper< FileDataObject >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:fileOwner
				 * \n The owner of the file as defined by the file system access rights feature.
				 * \n rdfs:label=fileOwner
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=nfo:FileDataObject
				 * \n tracker:modified=1349
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nco::Contact Contact;
				/*!
					\fn LiveNodes liveFileOwners(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_fileOwner "nfo:fileOwner" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFileOwners(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::fileOwner >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFileOwners(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_fileOwner "nfo:fileOwner" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFileOwners(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::fileOwner >(object_info, strategy, parent); }
				/*!
					\fn void setFileOwners(LiveNodes const &fileOwner_)
					
					
					Sets the property \ref nfo_fileOwner "nfo:fileOwner" set to the given \a fileOwner_ set.
					\sa LiveResource::setObjects
				 */
				void setFileOwners(LiveNodes const &fileOwner_) { baseSetObjects(nfo::fileOwner::iri(), fileOwner_); }
				/*!
					\fn void removeFileOwners(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_fileOwner "nfo:fileOwner" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFileOwners(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::fileOwner::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > getFileOwner()
					
					
					Returns the property \ref nfo_fileOwner "nfo:fileOwner". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::Contact > getFileOwner() { return baseGetObject< nfo::fileOwner >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > setFileOwner(::SopranoLive::Live< nco::Contact > const &fileOwner_)
					
					
					Sets the property \ref nfo_fileOwner "nfo:fileOwner" to the given \a fileOwner.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::Contact > setFileOwner(::SopranoLive::Live< nco::Contact > const &fileOwner_) { return baseSetObject< nfo::fileOwner >( fileOwner_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstFileOwner()
					
					
					Returns the first property \ref nfo_fileOwner "nfo:fileOwner". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstFileOwner() { return baseFirstObject< nfo::fileOwner >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addFileOwner()
					
					
					Adds a new uniquely named resource to the property \ref nfo_fileOwner "nfo:fileOwner" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addFileOwner() { return baseAddObject< nfo::fileOwner >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addFileOwner(::SopranoLive::Live< nco::Contact > const &fileOwner_)
					
					
					Adds the given \a fileOwner_ to the property \ref nfo_fileOwner "nfo:fileOwner" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addFileOwner(::SopranoLive::Live< nco::Contact > const &fileOwner_) { return baseAddObject< nfo::fileOwner >( fileOwner_ ); }
				/*!
					\fn void removeFileOwner(::SopranoLive::Live< nco::Contact > const &fileOwner_)
					
					
					Removes the given \a fileOwner_ from the property \ref nfo_fileOwner "nfo:fileOwner" set.
					\sa LiveResource::removeObject
				 */
				void removeFileOwner(::SopranoLive::Live< nco::Contact > const &fileOwner_) { baseRemoveObject< nfo::fileOwner >(fileOwner_); }

				/* Property generated from nfo:fileLastModified
				 * \n last modification date
				 * \n rdfs:label=fileLastModified
				 * \n rdfs:subPropertyOf=dc:date
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=nfo:FileDataObject
				 * \n tracker:indexed=true
				 * \n tracker:modified=1651
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFileLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_fileLastModified "nfo:fileLastModified" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFileLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::fileLastModified >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFileLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_fileLastModified "nfo:fileLastModified" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFileLastModifieds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::fileLastModified >(object_info, strategy, parent); }
				/*!
					\fn void setFileLastModifieds(LiveNodes const &fileLastModified_)
					
					
					Sets the property \ref nfo_fileLastModified "nfo:fileLastModified" set to the given \a fileLastModified_ set.
					\sa LiveResource::setObjects
				 */
				void setFileLastModifieds(LiveNodes const &fileLastModified_) { baseSetObjects(nfo::fileLastModified::iri(), fileLastModified_); }
				/*!
					\fn void removeFileLastModifieds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_fileLastModified "nfo:fileLastModified" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFileLastModifieds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::fileLastModified::iri(), object_info); }
				/*!
					\fn QDateTime getFileLastModified()
					
					
					Returns the property \ref nfo_fileLastModified "nfo:fileLastModified". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getFileLastModified() { return baseGetObject< nfo::fileLastModified >(); }
				/*!
					\fn void setFileLastModified(QDateTime const &fileLastModified_)
					
					
					Sets the property \ref nfo_fileLastModified "nfo:fileLastModified" to the given \a fileLastModified.
					\sa LiveResource::setObject
				 */
				void setFileLastModified(QDateTime const &fileLastModified_) { baseSetObject< nfo::fileLastModified >( fileLastModified_ ); }
				/*!
					\fn QDateTime firstFileLastModified()
					
					
					Returns the first property \ref nfo_fileLastModified "nfo:fileLastModified". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstFileLastModified() { return baseFirstObject< nfo::fileLastModified >(); }
				/*!
					\fn void addFileLastModified(QDateTime const &fileLastModified_)
					
					
					Adds the given \a fileLastModified_ to the property \ref nfo_fileLastModified "nfo:fileLastModified" set.
					\sa LiveResource::addObject
				 */
				void addFileLastModified(QDateTime const &fileLastModified_) { baseAddObject< nfo::fileLastModified >( fileLastModified_ ); }
				/*!
					\fn void removeFileLastModified(QDateTime const &fileLastModified_)
					
					
					Removes the given \a fileLastModified_ from the property \ref nfo_fileLastModified "nfo:fileLastModified" set.
					\sa LiveResource::removeObject
				 */
				void removeFileLastModified(QDateTime const &fileLastModified_) { baseRemoveObject< nfo::fileLastModified >(fileLastModified_); }

				/* Property generated from nfo:permissions
				 * \n A string containing the permissions of a file. A feature common in many UNIX-like operating systems.
				 * \n rdfs:label=permissions
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:FileDataObject
				 * \n tracker:modified=1101
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePermissionss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_permissions "nfo:permissions" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePermissionss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::permissions >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPermissionss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_permissions "nfo:permissions" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPermissionss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::permissions >(object_info, strategy, parent); }
				/*!
					\fn void setPermissionss(LiveNodes const &permissions_)
					
					
					Sets the property \ref nfo_permissions "nfo:permissions" set to the given \a permissions_ set.
					\sa LiveResource::setObjects
				 */
				void setPermissionss(LiveNodes const &permissions_) { baseSetObjects(nfo::permissions::iri(), permissions_); }
				/*!
					\fn void removePermissionss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_permissions "nfo:permissions" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePermissionss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::permissions::iri(), object_info); }
				/*!
					\fn QString getPermissions()
					
					
					Returns the property \ref nfo_permissions "nfo:permissions". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getPermissions() { return baseGetObject< nfo::permissions >(); }
				/*!
					\fn void setPermissions(QString const &permissions_)
					
					
					Sets the property \ref nfo_permissions "nfo:permissions" to the given \a permissions.
					\sa LiveResource::setObject
				 */
				void setPermissions(QString const &permissions_) { baseSetObject< nfo::permissions >( permissions_ ); }
				/*!
					\fn QString firstPermissions()
					
					
					Returns the first property \ref nfo_permissions "nfo:permissions". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstPermissions() { return baseFirstObject< nfo::permissions >(); }
				/*!
					\fn void addPermissions(QString const &permissions_)
					
					
					Adds the given \a permissions_ to the property \ref nfo_permissions "nfo:permissions" set.
					\sa LiveResource::addObject
				 */
				void addPermissions(QString const &permissions_) { baseAddObject< nfo::permissions >( permissions_ ); }
				/*!
					\fn void removePermissions(QString const &permissions_)
					
					
					Removes the given \a permissions_ from the property \ref nfo_permissions "nfo:permissions" set.
					\sa LiveResource::removeObject
				 */
				void removePermissions(QString const &permissions_) { baseRemoveObject< nfo::permissions >(permissions_); }

				/* Property generated from nfo:hasHash
				 * \n Links the file with it's hash value.
				 * \n rdfs:label=hasHash
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:FileHash
				 * \n rdfs:domain=nfo:FileDataObject
				 * \n tracker:modified=1329
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasHashs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_hasHash "nfo:hasHash" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasHashs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::hasHash >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasHashs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_hasHash "nfo:hasHash" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasHashs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::hasHash >(object_info, strategy, parent); }
				/*!
					\fn void setHasHashs(LiveNodes const &hasHash_)
					
					
					Sets the property \ref nfo_hasHash "nfo:hasHash" set to the given \a hasHash_ set.
					\sa LiveResource::setObjects
				 */
				void setHasHashs(LiveNodes const &hasHash_) { baseSetObjects(nfo::hasHash::iri(), hasHash_); }
				/*!
					\fn void removeHasHashs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_hasHash "nfo:hasHash" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasHashs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::hasHash::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< FileHash > getHasHash()
					
					
					Returns the property \ref nfo_hasHash "nfo:hasHash". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< FileHash > getHasHash() { return baseGetObject< nfo::hasHash >(); }
				/*!
					\fn ::SopranoLive::Live< FileHash > setHasHash(::SopranoLive::Live< FileHash > const &hasHash_)
					
					
					Sets the property \ref nfo_hasHash "nfo:hasHash" to the given \a hasHash.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< FileHash > setHasHash(::SopranoLive::Live< FileHash > const &hasHash_) { return baseSetObject< nfo::hasHash >( hasHash_ ); }
				/*!
					\fn ::SopranoLive::Live< FileHash > firstHasHash()
					
					
					Returns the first property \ref nfo_hasHash "nfo:hasHash". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< FileHash > firstHasHash() { return baseFirstObject< nfo::hasHash >(); }
				/*!
					\fn ::SopranoLive::Live< FileHash > addHasHash()
					
					
					Adds a new uniquely named resource to the property \ref nfo_hasHash "nfo:hasHash" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< FileHash > addHasHash() { return baseAddObject< nfo::hasHash >(); }
				/*!
					\fn ::SopranoLive::Live< FileHash > addHasHash(::SopranoLive::Live< FileHash > const &hasHash_)
					
					
					Adds the given \a hasHash_ to the property \ref nfo_hasHash "nfo:hasHash" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< FileHash > addHasHash(::SopranoLive::Live< FileHash > const &hasHash_) { return baseAddObject< nfo::hasHash >( hasHash_ ); }
				/*!
					\fn void removeHasHash(::SopranoLive::Live< FileHash > const &hasHash_)
					
					
					Removes the given \a hasHash_ from the property \ref nfo_hasHash "nfo:hasHash" set.
					\sa LiveResource::removeObject
				 */
				void removeHasHash(::SopranoLive::Live< FileHash > const &hasHash_) { baseRemoveObject< nfo::hasHash >(hasHash_); }

				/* Property generated from nfo:fileLastAccessed
				 * \n Time when the file was last accessed.
				 * \n rdfs:label=fileLastAccessed
				 * \n rdfs:subPropertyOf=dc:date
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=nfo:FileDataObject
				 * \n tracker:modified=1922
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFileLastAccesseds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_fileLastAccessed "nfo:fileLastAccessed" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFileLastAccesseds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::fileLastAccessed >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFileLastAccesseds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_fileLastAccessed "nfo:fileLastAccessed" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFileLastAccesseds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::fileLastAccessed >(object_info, strategy, parent); }
				/*!
					\fn void setFileLastAccesseds(LiveNodes const &fileLastAccessed_)
					
					
					Sets the property \ref nfo_fileLastAccessed "nfo:fileLastAccessed" set to the given \a fileLastAccessed_ set.
					\sa LiveResource::setObjects
				 */
				void setFileLastAccesseds(LiveNodes const &fileLastAccessed_) { baseSetObjects(nfo::fileLastAccessed::iri(), fileLastAccessed_); }
				/*!
					\fn void removeFileLastAccesseds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_fileLastAccessed "nfo:fileLastAccessed" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFileLastAccesseds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::fileLastAccessed::iri(), object_info); }
				/*!
					\fn QDateTime getFileLastAccessed()
					
					
					Returns the property \ref nfo_fileLastAccessed "nfo:fileLastAccessed". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getFileLastAccessed() { return baseGetObject< nfo::fileLastAccessed >(); }
				/*!
					\fn void setFileLastAccessed(QDateTime const &fileLastAccessed_)
					
					
					Sets the property \ref nfo_fileLastAccessed "nfo:fileLastAccessed" to the given \a fileLastAccessed.
					\sa LiveResource::setObject
				 */
				void setFileLastAccessed(QDateTime const &fileLastAccessed_) { baseSetObject< nfo::fileLastAccessed >( fileLastAccessed_ ); }
				/*!
					\fn QDateTime firstFileLastAccessed()
					
					
					Returns the first property \ref nfo_fileLastAccessed "nfo:fileLastAccessed". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstFileLastAccessed() { return baseFirstObject< nfo::fileLastAccessed >(); }
				/*!
					\fn void addFileLastAccessed(QDateTime const &fileLastAccessed_)
					
					
					Adds the given \a fileLastAccessed_ to the property \ref nfo_fileLastAccessed "nfo:fileLastAccessed" set.
					\sa LiveResource::addObject
				 */
				void addFileLastAccessed(QDateTime const &fileLastAccessed_) { baseAddObject< nfo::fileLastAccessed >( fileLastAccessed_ ); }
				/*!
					\fn void removeFileLastAccessed(QDateTime const &fileLastAccessed_)
					
					
					Removes the given \a fileLastAccessed_ from the property \ref nfo_fileLastAccessed "nfo:fileLastAccessed" set.
					\sa LiveResource::removeObject
				 */
				void removeFileLastAccessed(QDateTime const &fileLastAccessed_) { baseRemoveObject< nfo::fileLastAccessed >(fileLastAccessed_); }

				/* Property generated from nfo:fileUrl
				 * \n URL of the file. It points at the location of the file. In cases where creating a simple file:// or http:// URL for a file is difficult (e.g. for files inside compressed archives) the applications are encouraged to use conventions defined by Apache Commons VFS Project at http://jakarta.apache.org/  commons/ vfs/ filesystems.html.
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=fileUrl
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Resource
				 * \n rdfs:domain=nfo:FileDataObject
				 * \n tracker:modified=1415
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Resource Resource;
				/*!
					\fn LiveNodes liveFileUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nfo::fileUrl for replacement
					Returns a live model of property \ref nfo_fileUrl "nfo:fileUrl" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveFileUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::fileUrl >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFileUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nfo::fileUrl for replacement
					Returns all current values of property \ref nfo_fileUrl "nfo:fileUrl" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getFileUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::fileUrl >(object_info, strategy, parent); }
				/*!
					\fn void setFileUrls(LiveNodes const &fileUrl_)
					
					\deprecated See \ref nfo::fileUrl for replacement
					Sets the property \ref nfo_fileUrl "nfo:fileUrl" set to the given \a fileUrl_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setFileUrls(LiveNodes const &fileUrl_) { baseSetObjects(nfo::fileUrl::iri(), fileUrl_); }
				/*!
					\fn void removeFileUrls(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nfo::fileUrl for replacement
					Removes the properties from property \ref nfo_fileUrl "nfo:fileUrl" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeFileUrls(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::fileUrl::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > getFileUrl()
					
					\deprecated See \ref nfo::fileUrl for replacement
					Returns the property \ref nfo_fileUrl "nfo:fileUrl". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< rdfs::Resource > getFileUrl() { return baseGetObject< nfo::fileUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > setFileUrl(::SopranoLive::Live< rdfs::Resource > const &fileUrl_)
					
					\deprecated See \ref nfo::fileUrl for replacement
					Sets the property \ref nfo_fileUrl "nfo:fileUrl" to the given \a fileUrl.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< rdfs::Resource > setFileUrl(::SopranoLive::Live< rdfs::Resource > const &fileUrl_) { return baseSetObject< nfo::fileUrl >( fileUrl_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > firstFileUrl()
					
					\deprecated See \ref nfo::fileUrl for replacement
					Returns the first property \ref nfo_fileUrl "nfo:fileUrl". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< rdfs::Resource > firstFileUrl() { return baseFirstObject< nfo::fileUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addFileUrl()
					
					\deprecated See \ref nfo::fileUrl for replacement
					Adds a new uniquely named resource to the property \ref nfo_fileUrl "nfo:fileUrl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< rdfs::Resource > addFileUrl() { return baseAddObject< nfo::fileUrl >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Resource > addFileUrl(::SopranoLive::Live< rdfs::Resource > const &fileUrl_)
					
					\deprecated See \ref nfo::fileUrl for replacement
					Adds the given \a fileUrl_ to the property \ref nfo_fileUrl "nfo:fileUrl" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< rdfs::Resource > addFileUrl(::SopranoLive::Live< rdfs::Resource > const &fileUrl_) { return baseAddObject< nfo::fileUrl >( fileUrl_ ); }
				/*!
					\fn void removeFileUrl(::SopranoLive::Live< rdfs::Resource > const &fileUrl_)
					
					\deprecated See \ref nfo::fileUrl for replacement
					Removes the given \a fileUrl_ from the property \ref nfo_fileUrl "nfo:fileUrl" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeFileUrl(::SopranoLive::Live< rdfs::Resource > const &fileUrl_) { baseRemoveObject< nfo::fileUrl >(fileUrl_); }

				/* Property generated from nfo:fileSize
				 * \n The size of the file in bytes. For compressed files it means the size of the packed file, not of the contents. For folders it means the aggregated size of all contained files and folders
				 * \n rdfs:label=fileSize
				 * \n rdfs:subPropertyOf=nie:byteSize
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:FileDataObject
				 * \n tracker:modified=1114
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFileSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_fileSize "nfo:fileSize" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFileSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::fileSize >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFileSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_fileSize "nfo:fileSize" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFileSizes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::fileSize >(object_info, strategy, parent); }
				/*!
					\fn void setFileSizes(LiveNodes const &fileSize_)
					
					
					Sets the property \ref nfo_fileSize "nfo:fileSize" set to the given \a fileSize_ set.
					\sa LiveResource::setObjects
				 */
				void setFileSizes(LiveNodes const &fileSize_) { baseSetObjects(nfo::fileSize::iri(), fileSize_); }
				/*!
					\fn void removeFileSizes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_fileSize "nfo:fileSize" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFileSizes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::fileSize::iri(), object_info); }
				/*!
					\fn qint64 getFileSize()
					
					
					Returns the property \ref nfo_fileSize "nfo:fileSize". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getFileSize() { return baseGetObject< nfo::fileSize >(); }
				/*!
					\fn void setFileSize(qint64 const &fileSize_)
					
					
					Sets the property \ref nfo_fileSize "nfo:fileSize" to the given \a fileSize.
					\sa LiveResource::setObject
				 */
				void setFileSize(qint64 const &fileSize_) { baseSetObject< nfo::fileSize >( fileSize_ ); }
				/*!
					\fn qint64 firstFileSize()
					
					
					Returns the first property \ref nfo_fileSize "nfo:fileSize". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstFileSize() { return baseFirstObject< nfo::fileSize >(); }
				/*!
					\fn void addFileSize(qint64 const &fileSize_)
					
					
					Adds the given \a fileSize_ to the property \ref nfo_fileSize "nfo:fileSize" set.
					\sa LiveResource::addObject
				 */
				void addFileSize(qint64 const &fileSize_) { baseAddObject< nfo::fileSize >( fileSize_ ); }
				/*!
					\fn void removeFileSize(qint64 const &fileSize_)
					
					
					Removes the given \a fileSize_ from the property \ref nfo_fileSize "nfo:fileSize" set.
					\sa LiveResource::removeObject
				 */
				void removeFileSize(qint64 const &fileSize_) { baseRemoveObject< nfo::fileSize >(fileSize_); }

				/* Property generated from nfo:fileName
				 * \n Name of the file, together with the extension
				 * \n rdfs:label=fileName
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:FileDataObject
				 * \n tracker:weight=7
				 * \n tracker:modified=1092
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFileNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_fileName "nfo:fileName" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFileNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::fileName >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFileNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_fileName "nfo:fileName" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFileNames(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::fileName >(object_info, strategy, parent); }
				/*!
					\fn void setFileNames(LiveNodes const &fileName_)
					
					
					Sets the property \ref nfo_fileName "nfo:fileName" set to the given \a fileName_ set.
					\sa LiveResource::setObjects
				 */
				void setFileNames(LiveNodes const &fileName_) { baseSetObjects(nfo::fileName::iri(), fileName_); }
				/*!
					\fn void removeFileNames(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_fileName "nfo:fileName" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFileNames(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::fileName::iri(), object_info); }
				/*!
					\fn QString getFileName()
					
					
					Returns the property \ref nfo_fileName "nfo:fileName". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getFileName() { return baseGetObject< nfo::fileName >(); }
				/*!
					\fn void setFileName(QString const &fileName_)
					
					
					Sets the property \ref nfo_fileName "nfo:fileName" to the given \a fileName.
					\sa LiveResource::setObject
				 */
				void setFileName(QString const &fileName_) { baseSetObject< nfo::fileName >( fileName_ ); }
				/*!
					\fn QString firstFileName()
					
					
					Returns the first property \ref nfo_fileName "nfo:fileName". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstFileName() { return baseFirstObject< nfo::fileName >(); }
				/*!
					\fn void addFileName(QString const &fileName_)
					
					
					Adds the given \a fileName_ to the property \ref nfo_fileName "nfo:fileName" set.
					\sa LiveResource::addObject
				 */
				void addFileName(QString const &fileName_) { baseAddObject< nfo::fileName >( fileName_ ); }
				/*!
					\fn void removeFileName(QString const &fileName_)
					
					
					Removes the given \a fileName_ from the property \ref nfo_fileName "nfo:fileName" set.
					\sa LiveResource::removeObject
				 */
				void removeFileName(QString const &fileName_) { baseRemoveObject< nfo::fileName >(fileName_); }

				/* Property generated from nfo:fileCreated
				 * \n File creation date
				 * \n rdfs:label=fileCreated
				 * \n rdfs:subPropertyOf=nie:created
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=nfo:FileDataObject
				 * \n tracker:modified=1916
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFileCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_fileCreated "nfo:fileCreated" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFileCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::fileCreated >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFileCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_fileCreated "nfo:fileCreated" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFileCreateds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::fileCreated >(object_info, strategy, parent); }
				/*!
					\fn void setFileCreateds(LiveNodes const &fileCreated_)
					
					
					Sets the property \ref nfo_fileCreated "nfo:fileCreated" set to the given \a fileCreated_ set.
					\sa LiveResource::setObjects
				 */
				void setFileCreateds(LiveNodes const &fileCreated_) { baseSetObjects(nfo::fileCreated::iri(), fileCreated_); }
				/*!
					\fn void removeFileCreateds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_fileCreated "nfo:fileCreated" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFileCreateds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::fileCreated::iri(), object_info); }
				/*!
					\fn QDateTime getFileCreated()
					
					
					Returns the property \ref nfo_fileCreated "nfo:fileCreated". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getFileCreated() { return baseGetObject< nfo::fileCreated >(); }
				/*!
					\fn void setFileCreated(QDateTime const &fileCreated_)
					
					
					Sets the property \ref nfo_fileCreated "nfo:fileCreated" to the given \a fileCreated.
					\sa LiveResource::setObject
				 */
				void setFileCreated(QDateTime const &fileCreated_) { baseSetObject< nfo::fileCreated >( fileCreated_ ); }
				/*!
					\fn QDateTime firstFileCreated()
					
					
					Returns the first property \ref nfo_fileCreated "nfo:fileCreated". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstFileCreated() { return baseFirstObject< nfo::fileCreated >(); }
				/*!
					\fn void addFileCreated(QDateTime const &fileCreated_)
					
					
					Adds the given \a fileCreated_ to the property \ref nfo_fileCreated "nfo:fileCreated" set.
					\sa LiveResource::addObject
				 */
				void addFileCreated(QDateTime const &fileCreated_) { baseAddObject< nfo::fileCreated >( fileCreated_ ); }
				/*!
					\fn void removeFileCreated(QDateTime const &fileCreated_)
					
					
					Removes the given \a fileCreated_ from the property \ref nfo_fileCreated "nfo:fileCreated" set.
					\sa LiveResource::removeObject
				 */
				void removeFileCreated(QDateTime const &fileCreated_) { baseRemoveObject< nfo::fileCreated >(fileCreated_); }
				 //@}
			};

			/*! Class generated from nfo:EmbeddedFileDataObject
			 * \ingroup onto_nfo_classes
			 * A file embedded in another data object. There are many ways in which a file may be embedded in another one. Use this class directly only in cases if none of the subclasses gives a better description of your case.
			 * 
			 * rdfs:label = EmbeddedFileDataObject
			 * 
			 * tracker:modified = 1587
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class EmbeddedFileDataObject
				: public virtual FileDataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#EmbeddedFileDataObject"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<FileDataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<EmbeddedFileDataObject> Live;
				EmbeddedFileDataObject() { this->attachInterfaceHelper< EmbeddedFileDataObject >(); }
				~EmbeddedFileDataObject() { this->detachInterfaceHelper< EmbeddedFileDataObject >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:encoding
				 * \n The encoding used for the Embedded File. Examples might include BASE64 or UUEncode
				 * \n rdfs:label=encoding
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:EmbeddedFileDataObject
				 * \n tracker:modified=1740
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_encoding "nfo:encoding" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::encoding >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_encoding "nfo:encoding" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEncodings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::encoding >(object_info, strategy, parent); }
				/*!
					\fn void setEncodings(LiveNodes const &encoding_)
					
					
					Sets the property \ref nfo_encoding "nfo:encoding" set to the given \a encoding_ set.
					\sa LiveResource::setObjects
				 */
				void setEncodings(LiveNodes const &encoding_) { baseSetObjects(nfo::encoding::iri(), encoding_); }
				/*!
					\fn void removeEncodings(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_encoding "nfo:encoding" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEncodings(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::encoding::iri(), object_info); }
				/*!
					\fn QString getEncoding()
					
					
					Returns the property \ref nfo_encoding "nfo:encoding". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getEncoding() { return baseGetObject< nfo::encoding >(); }
				/*!
					\fn void setEncoding(QString const &encoding_)
					
					
					Sets the property \ref nfo_encoding "nfo:encoding" to the given \a encoding.
					\sa LiveResource::setObject
				 */
				void setEncoding(QString const &encoding_) { baseSetObject< nfo::encoding >( encoding_ ); }
				/*!
					\fn QString firstEncoding()
					
					
					Returns the first property \ref nfo_encoding "nfo:encoding". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstEncoding() { return baseFirstObject< nfo::encoding >(); }
				/*!
					\fn void addEncoding(QString const &encoding_)
					
					
					Adds the given \a encoding_ to the property \ref nfo_encoding "nfo:encoding" set.
					\sa LiveResource::addObject
				 */
				void addEncoding(QString const &encoding_) { baseAddObject< nfo::encoding >( encoding_ ); }
				/*!
					\fn void removeEncoding(QString const &encoding_)
					
					
					Removes the given \a encoding_ from the property \ref nfo_encoding "nfo:encoding" set.
					\sa LiveResource::removeObject
				 */
				void removeEncoding(QString const &encoding_) { baseRemoveObject< nfo::encoding >(encoding_); }
				 //@}
			};

			/*! Class generated from nfo:ArchiveItem
			 * \ingroup onto_nfo_classes
			 * A file entity inside an archive.
			 * 
			 * rdfs:label = ArchiveItem
			 * 
			 * tracker:modified = 1975
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class ArchiveItem
				: public virtual EmbeddedFileDataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#ArchiveItem"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<EmbeddedFileDataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<ArchiveItem> Live;
				ArchiveItem() { this->attachInterfaceHelper< ArchiveItem >(); }
				~ArchiveItem() { this->detachInterfaceHelper< ArchiveItem >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:isPasswordProtected
				 * \n States if a given resource is password-protected.
				 * \n rdfs:label=isPasswordProtected
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nfo:ArchiveItem
				 * \n tracker:modified=1687
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveIsPasswordProtecteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_isPasswordProtected "nfo:isPasswordProtected" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveIsPasswordProtecteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::isPasswordProtected >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getIsPasswordProtecteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_isPasswordProtected "nfo:isPasswordProtected" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getIsPasswordProtecteds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::isPasswordProtected >(object_info, strategy, parent); }
				/*!
					\fn void setIsPasswordProtecteds(LiveNodes const &isPasswordProtected_)
					
					
					Sets the property \ref nfo_isPasswordProtected "nfo:isPasswordProtected" set to the given \a isPasswordProtected_ set.
					\sa LiveResource::setObjects
				 */
				void setIsPasswordProtecteds(LiveNodes const &isPasswordProtected_) { baseSetObjects(nfo::isPasswordProtected::iri(), isPasswordProtected_); }
				/*!
					\fn void removeIsPasswordProtecteds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_isPasswordProtected "nfo:isPasswordProtected" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeIsPasswordProtecteds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::isPasswordProtected::iri(), object_info); }
				/*!
					\fn bool getIsPasswordProtected()
					
					
					Returns the property \ref nfo_isPasswordProtected "nfo:isPasswordProtected". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getIsPasswordProtected() { return baseGetObject< nfo::isPasswordProtected >(); }
				/*!
					\fn void setIsPasswordProtected(bool const &isPasswordProtected_)
					
					
					Sets the property \ref nfo_isPasswordProtected "nfo:isPasswordProtected" to the given \a isPasswordProtected.
					\sa LiveResource::setObject
				 */
				void setIsPasswordProtected(bool const &isPasswordProtected_) { baseSetObject< nfo::isPasswordProtected >( isPasswordProtected_ ); }
				/*!
					\fn bool firstIsPasswordProtected()
					
					
					Returns the first property \ref nfo_isPasswordProtected "nfo:isPasswordProtected". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstIsPasswordProtected() { return baseFirstObject< nfo::isPasswordProtected >(); }
				/*!
					\fn void addIsPasswordProtected(bool const &isPasswordProtected_)
					
					
					Adds the given \a isPasswordProtected_ to the property \ref nfo_isPasswordProtected "nfo:isPasswordProtected" set.
					\sa LiveResource::addObject
				 */
				void addIsPasswordProtected(bool const &isPasswordProtected_) { baseAddObject< nfo::isPasswordProtected >( isPasswordProtected_ ); }
				/*!
					\fn void removeIsPasswordProtected(bool const &isPasswordProtected_)
					
					
					Removes the given \a isPasswordProtected_ from the property \ref nfo_isPasswordProtected "nfo:isPasswordProtected" set.
					\sa LiveResource::removeObject
				 */
				void removeIsPasswordProtected(bool const &isPasswordProtected_) { baseRemoveObject< nfo::isPasswordProtected >(isPasswordProtected_); }
				 //@}
			};

			/*! Class generated from nfo:Attachment
			 * \ingroup onto_nfo_classes
			 * A file attached to another data object. Many data formats allow for attachments: emails, vcards, ical events, id3 and exif...
			 * 
			 * rdfs:label = Attachment
			 * 
			 * tracker:modified = 1654
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Attachment
				: public virtual EmbeddedFileDataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Attachment"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<EmbeddedFileDataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Attachment> Live;
				Attachment() { this->attachInterfaceHelper< Attachment >(); }
				~Attachment() { this->detachInterfaceHelper< Attachment >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:Media
			 * \ingroup onto_nfo_classes
			 * A piece of media content. This class may be used to express complex media containers with many streams of various media content (both aural and visual).
			 * 
			 * rdfs:label = Media
			 * 
			 * tracker:modified = 1263
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nmm_alternativeMedia "nmm:alternativeMedia"
			 */
			class Media
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Media"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Media> Live;
				Media() { this->attachInterfaceHelper< Media >(); }
				~Media() { this->detachInterfaceHelper< Media >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nmm:alternativeMedia
				 * \n Link between to different version of the same media. This is used for instances in uPnp where the server can provide the same video in different resolutions and codecs
				 * \n rdfs:range=nfo:Media
				 * \n rdfs:label=Alternative media
				 * \n tracker:modified=1078
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNmmAlternativeMedias(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_alternativeMedia "nmm:alternativeMedia" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNmmAlternativeMedias(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::alternativeMedia >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNmmAlternativeMedias(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_alternativeMedia "nmm:alternativeMedia" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNmmAlternativeMedias(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::alternativeMedia >(object_info, strategy, parent); }
				/*!
					\fn void setNmmAlternativeMedias(LiveNodes const &nmmAlternativeMedia_)
					
					
					Sets the property \ref nmm_alternativeMedia "nmm:alternativeMedia" set to the given \a nmmAlternativeMedia_ set.
					\sa LiveResource::setObjects
				 */
				void setNmmAlternativeMedias(LiveNodes const &nmmAlternativeMedia_) { baseSetObjects(nmm::alternativeMedia::iri(), nmmAlternativeMedia_); }
				/*!
					\fn void removeNmmAlternativeMedias(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_alternativeMedia "nmm:alternativeMedia" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNmmAlternativeMedias(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::alternativeMedia::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Media > firstNmmAlternativeMedia()
					
					
					Returns the first property \ref nmm_alternativeMedia "nmm:alternativeMedia". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Media > firstNmmAlternativeMedia() { return baseFirstObject< nmm::alternativeMedia >(); }
				/*!
					\fn ::SopranoLive::Live< Media > addNmmAlternativeMedia()
					
					
					Adds a new uniquely named resource to the property \ref nmm_alternativeMedia "nmm:alternativeMedia" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Media > addNmmAlternativeMedia() { return baseAddObject< nmm::alternativeMedia >(); }
				/*!
					\fn ::SopranoLive::Live< Media > addNmmAlternativeMedia(::SopranoLive::Live< Media > const &nmmAlternativeMedia_)
					
					
					Adds the given \a nmmAlternativeMedia_ to the property \ref nmm_alternativeMedia "nmm:alternativeMedia" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Media > addNmmAlternativeMedia(::SopranoLive::Live< Media > const &nmmAlternativeMedia_) { return baseAddObject< nmm::alternativeMedia >( nmmAlternativeMedia_ ); }
				/*!
					\fn void removeNmmAlternativeMedia(::SopranoLive::Live< Media > const &nmmAlternativeMedia_)
					
					
					Removes the given \a nmmAlternativeMedia_ from the property \ref nmm_alternativeMedia "nmm:alternativeMedia" set.
					\sa LiveResource::removeObject
				 */
				void removeNmmAlternativeMedia(::SopranoLive::Live< Media > const &nmmAlternativeMedia_) { baseRemoveObject< nmm::alternativeMedia >(nmmAlternativeMedia_); }

				/* Property generated from maemo:remoteMediaArt
				 * \n rdfs:range=nfo:Image
				 * \n tracker:modified=1005
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMaemoRemoteMediaArts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref maemo_remoteMediaArt "maemo:remoteMediaArt" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMaemoRemoteMediaArts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< maemo::remoteMediaArt >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMaemoRemoteMediaArts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref maemo_remoteMediaArt "maemo:remoteMediaArt" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMaemoRemoteMediaArts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< maemo::remoteMediaArt >(object_info, strategy, parent); }
				/*!
					\fn void setMaemoRemoteMediaArts(LiveNodes const &maemoRemoteMediaArt_)
					
					
					Sets the property \ref maemo_remoteMediaArt "maemo:remoteMediaArt" set to the given \a maemoRemoteMediaArt_ set.
					\sa LiveResource::setObjects
				 */
				void setMaemoRemoteMediaArts(LiveNodes const &maemoRemoteMediaArt_) { baseSetObjects(maemo::remoteMediaArt::iri(), maemoRemoteMediaArt_); }
				/*!
					\fn void removeMaemoRemoteMediaArts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref maemo_remoteMediaArt "maemo:remoteMediaArt" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMaemoRemoteMediaArts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(maemo::remoteMediaArt::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Image > firstMaemoRemoteMediaArt()
					
					
					Returns the first property \ref maemo_remoteMediaArt "maemo:remoteMediaArt". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Image > firstMaemoRemoteMediaArt() { return baseFirstObject< maemo::remoteMediaArt >(); }
				/*!
					\fn ::SopranoLive::Live< Image > addMaemoRemoteMediaArt()
					
					
					Adds a new uniquely named resource to the property \ref maemo_remoteMediaArt "maemo:remoteMediaArt" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Image > addMaemoRemoteMediaArt() { return baseAddObject< maemo::remoteMediaArt >(); }
				/*!
					\fn ::SopranoLive::Live< Image > addMaemoRemoteMediaArt(::SopranoLive::Live< Image > const &maemoRemoteMediaArt_)
					
					
					Adds the given \a maemoRemoteMediaArt_ to the property \ref maemo_remoteMediaArt "maemo:remoteMediaArt" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Image > addMaemoRemoteMediaArt(::SopranoLive::Live< Image > const &maemoRemoteMediaArt_) { return baseAddObject< maemo::remoteMediaArt >( maemoRemoteMediaArt_ ); }
				/*!
					\fn void removeMaemoRemoteMediaArt(::SopranoLive::Live< Image > const &maemoRemoteMediaArt_)
					
					
					Removes the given \a maemoRemoteMediaArt_ from the property \ref maemo_remoteMediaArt "maemo:remoteMediaArt" set.
					\sa LiveResource::removeObject
				 */
				void removeMaemoRemoteMediaArt(::SopranoLive::Live< Image > const &maemoRemoteMediaArt_) { baseRemoveObject< maemo::remoteMediaArt >(maemoRemoteMediaArt_); }

				/* Property generated from nfo:codec
				 * \n The name of the codec necessary to decode a piece of media.
				 * \n rdfs:label=codec
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1709
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCodecs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_codec "nfo:codec" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCodecs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::codec >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCodecs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_codec "nfo:codec" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCodecs(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::codec >(object_info, strategy, parent); }
				/*!
					\fn void setCodecs(LiveNodes const &codec_)
					
					
					Sets the property \ref nfo_codec "nfo:codec" set to the given \a codec_ set.
					\sa LiveResource::setObjects
				 */
				void setCodecs(LiveNodes const &codec_) { baseSetObjects(nfo::codec::iri(), codec_); }
				/*!
					\fn void removeCodecs(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_codec "nfo:codec" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCodecs(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::codec::iri(), object_info); }
				/*!
					\fn QString getCodec()
					
					
					Returns the property \ref nfo_codec "nfo:codec". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getCodec() { return baseGetObject< nfo::codec >(); }
				/*!
					\fn void setCodec(QString const &codec_)
					
					
					Sets the property \ref nfo_codec "nfo:codec" to the given \a codec.
					\sa LiveResource::setObject
				 */
				void setCodec(QString const &codec_) { baseSetObject< nfo::codec >( codec_ ); }
				/*!
					\fn QString firstCodec()
					
					
					Returns the first property \ref nfo_codec "nfo:codec". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstCodec() { return baseFirstObject< nfo::codec >(); }
				/*!
					\fn void addCodec(QString const &codec_)
					
					
					Adds the given \a codec_ to the property \ref nfo_codec "nfo:codec" set.
					\sa LiveResource::addObject
				 */
				void addCodec(QString const &codec_) { baseAddObject< nfo::codec >( codec_ ); }
				/*!
					\fn void removeCodec(QString const &codec_)
					
					
					Removes the given \a codec_ from the property \ref nfo_codec "nfo:codec" set.
					\sa LiveResource::removeObject
				 */
				void removeCodec(QString const &codec_) { baseRemoveObject< nfo::codec >(codec_); }

				/* Property generated from nmm:uPnPShared
				 * \n Tells the uPnP MediaServer (e.g. Rygel) whether to export/share the resource or not
				 * \n rdfs:label=uPnP shared
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1633
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNmmUPnPShareds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_uPnPShared "nmm:uPnPShared" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNmmUPnPShareds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::uPnPShared >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNmmUPnPShareds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_uPnPShared "nmm:uPnPShared" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNmmUPnPShareds(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::uPnPShared >(object_info, strategy, parent); }
				/*!
					\fn void setNmmUPnPShareds(LiveNodes const &nmmUPnPShared_)
					
					
					Sets the property \ref nmm_uPnPShared "nmm:uPnPShared" set to the given \a nmmUPnPShared_ set.
					\sa LiveResource::setObjects
				 */
				void setNmmUPnPShareds(LiveNodes const &nmmUPnPShared_) { baseSetObjects(nmm::uPnPShared::iri(), nmmUPnPShared_); }
				/*!
					\fn void removeNmmUPnPShareds(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_uPnPShared "nmm:uPnPShared" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNmmUPnPShareds(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::uPnPShared::iri(), object_info); }
				/*!
					\fn bool getNmmUPnPShared()
					
					
					Returns the property \ref nmm_uPnPShared "nmm:uPnPShared". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getNmmUPnPShared() { return baseGetObject< nmm::uPnPShared >(); }
				/*!
					\fn void setNmmUPnPShared(bool const &nmmUPnPShared_)
					
					
					Sets the property \ref nmm_uPnPShared "nmm:uPnPShared" to the given \a nmmUPnPShared.
					\sa LiveResource::setObject
				 */
				void setNmmUPnPShared(bool const &nmmUPnPShared_) { baseSetObject< nmm::uPnPShared >( nmmUPnPShared_ ); }
				/*!
					\fn bool firstNmmUPnPShared()
					
					
					Returns the first property \ref nmm_uPnPShared "nmm:uPnPShared". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstNmmUPnPShared() { return baseFirstObject< nmm::uPnPShared >(); }
				/*!
					\fn void addNmmUPnPShared(bool const &nmmUPnPShared_)
					
					
					Adds the given \a nmmUPnPShared_ to the property \ref nmm_uPnPShared "nmm:uPnPShared" set.
					\sa LiveResource::addObject
				 */
				void addNmmUPnPShared(bool const &nmmUPnPShared_) { baseAddObject< nmm::uPnPShared >( nmmUPnPShared_ ); }
				/*!
					\fn void removeNmmUPnPShared(bool const &nmmUPnPShared_)
					
					
					Removes the given \a nmmUPnPShared_ from the property \ref nmm_uPnPShared "nmm:uPnPShared" set.
					\sa LiveResource::removeObject
				 */
				void removeNmmUPnPShared(bool const &nmmUPnPShared_) { baseRemoveObject< nmm::uPnPShared >(nmmUPnPShared_); }

				/* Property generated from nmm:dlnaProfile
				 * \n DLNA profile of the content, like MP3, MPEG_TS_HD_US, LPCM etc
				 * \n rdfs:label=DLNA profile
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1300
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNmmDlnaProfiles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_dlnaProfile "nmm:dlnaProfile" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNmmDlnaProfiles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::dlnaProfile >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNmmDlnaProfiles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_dlnaProfile "nmm:dlnaProfile" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNmmDlnaProfiles(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::dlnaProfile >(object_info, strategy, parent); }
				/*!
					\fn void setNmmDlnaProfiles(LiveNodes const &nmmDlnaProfile_)
					
					
					Sets the property \ref nmm_dlnaProfile "nmm:dlnaProfile" set to the given \a nmmDlnaProfile_ set.
					\sa LiveResource::setObjects
				 */
				void setNmmDlnaProfiles(LiveNodes const &nmmDlnaProfile_) { baseSetObjects(nmm::dlnaProfile::iri(), nmmDlnaProfile_); }
				/*!
					\fn void removeNmmDlnaProfiles(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_dlnaProfile "nmm:dlnaProfile" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNmmDlnaProfiles(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::dlnaProfile::iri(), object_info); }
				/*!
					\fn QString getNmmDlnaProfile()
					
					
					Returns the property \ref nmm_dlnaProfile "nmm:dlnaProfile". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getNmmDlnaProfile() { return baseGetObject< nmm::dlnaProfile >(); }
				/*!
					\fn void setNmmDlnaProfile(QString const &nmmDlnaProfile_)
					
					
					Sets the property \ref nmm_dlnaProfile "nmm:dlnaProfile" to the given \a nmmDlnaProfile.
					\sa LiveResource::setObject
				 */
				void setNmmDlnaProfile(QString const &nmmDlnaProfile_) { baseSetObject< nmm::dlnaProfile >( nmmDlnaProfile_ ); }
				/*!
					\fn QString firstNmmDlnaProfile()
					
					
					Returns the first property \ref nmm_dlnaProfile "nmm:dlnaProfile". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstNmmDlnaProfile() { return baseFirstObject< nmm::dlnaProfile >(); }
				/*!
					\fn void addNmmDlnaProfile(QString const &nmmDlnaProfile_)
					
					
					Adds the given \a nmmDlnaProfile_ to the property \ref nmm_dlnaProfile "nmm:dlnaProfile" set.
					\sa LiveResource::addObject
				 */
				void addNmmDlnaProfile(QString const &nmmDlnaProfile_) { baseAddObject< nmm::dlnaProfile >( nmmDlnaProfile_ ); }
				/*!
					\fn void removeNmmDlnaProfile(QString const &nmmDlnaProfile_)
					
					
					Removes the given \a nmmDlnaProfile_ from the property \ref nmm_dlnaProfile "nmm:dlnaProfile" set.
					\sa LiveResource::removeObject
				 */
				void removeNmmDlnaProfile(QString const &nmmDlnaProfile_) { baseRemoveObject< nmm::dlnaProfile >(nmmDlnaProfile_); }

				/* Property generated from nfo:bitDepth
				 * \n A common superproperty for all properties signifying the amount of bits for an atomic unit of data. Examples of subproperties may include bitsPerSample and bitsPerPixel
				 * \n rdfs:label=bitDepth
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=rdfs:Literal
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1173
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef rdfs::Literal Literal;
				/*!
					\fn LiveNodes liveBitDepths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_bitDepth "nfo:bitDepth" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBitDepths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::bitDepth >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBitDepths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_bitDepth "nfo:bitDepth" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBitDepths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::bitDepth >(object_info, strategy, parent); }
				/*!
					\fn void setBitDepths(LiveNodes const &bitDepth_)
					
					
					Sets the property \ref nfo_bitDepth "nfo:bitDepth" set to the given \a bitDepth_ set.
					\sa LiveResource::setObjects
				 */
				void setBitDepths(LiveNodes const &bitDepth_) { baseSetObjects(nfo::bitDepth::iri(), bitDepth_); }
				/*!
					\fn void removeBitDepths(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_bitDepth "nfo:bitDepth" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBitDepths(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::bitDepth::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Literal > getBitDepth()
					
					
					Returns the property \ref nfo_bitDepth "nfo:bitDepth". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< rdfs::Literal > getBitDepth() { return baseGetObject< nfo::bitDepth >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Literal > setBitDepth(::SopranoLive::Live< rdfs::Literal > const &bitDepth_)
					
					
					Sets the property \ref nfo_bitDepth "nfo:bitDepth" to the given \a bitDepth.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< rdfs::Literal > setBitDepth(::SopranoLive::Live< rdfs::Literal > const &bitDepth_) { return baseSetObject< nfo::bitDepth >( bitDepth_ ); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Literal > firstBitDepth()
					
					
					Returns the first property \ref nfo_bitDepth "nfo:bitDepth". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< rdfs::Literal > firstBitDepth() { return baseFirstObject< nfo::bitDepth >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Literal > addBitDepth()
					
					
					Adds a new uniquely named resource to the property \ref nfo_bitDepth "nfo:bitDepth" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Literal > addBitDepth() { return baseAddObject< nfo::bitDepth >(); }
				/*!
					\fn ::SopranoLive::Live< rdfs::Literal > addBitDepth(::SopranoLive::Live< rdfs::Literal > const &bitDepth_)
					
					
					Adds the given \a bitDepth_ to the property \ref nfo_bitDepth "nfo:bitDepth" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< rdfs::Literal > addBitDepth(::SopranoLive::Live< rdfs::Literal > const &bitDepth_) { return baseAddObject< nfo::bitDepth >( bitDepth_ ); }
				/*!
					\fn void removeBitDepth(::SopranoLive::Live< rdfs::Literal > const &bitDepth_)
					
					
					Removes the given \a bitDepth_ from the property \ref nfo_bitDepth "nfo:bitDepth" set.
					\sa LiveResource::removeObject
				 */
				void removeBitDepth(::SopranoLive::Live< rdfs::Literal > const &bitDepth_) { baseRemoveObject< nfo::bitDepth >(bitDepth_); }

				/* Property generated from nfo:equipment
				 * \n Equipment used to create the media
				 * \n rdfs:label=Device
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:Equipment
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1388
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEquipments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_equipment "nfo:equipment" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEquipments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::equipment >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEquipments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_equipment "nfo:equipment" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEquipments(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::equipment >(object_info, strategy, parent); }
				/*!
					\fn void setEquipments(LiveNodes const &equipment_)
					
					
					Sets the property \ref nfo_equipment "nfo:equipment" set to the given \a equipment_ set.
					\sa LiveResource::setObjects
				 */
				void setEquipments(LiveNodes const &equipment_) { baseSetObjects(nfo::equipment::iri(), equipment_); }
				/*!
					\fn void removeEquipments(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_equipment "nfo:equipment" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEquipments(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::equipment::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Equipment > getEquipment()
					
					
					Returns the property \ref nfo_equipment "nfo:equipment". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Equipment > getEquipment() { return baseGetObject< nfo::equipment >(); }
				/*!
					\fn ::SopranoLive::Live< Equipment > setEquipment(::SopranoLive::Live< Equipment > const &equipment_)
					
					
					Sets the property \ref nfo_equipment "nfo:equipment" to the given \a equipment.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Equipment > setEquipment(::SopranoLive::Live< Equipment > const &equipment_) { return baseSetObject< nfo::equipment >( equipment_ ); }
				/*!
					\fn ::SopranoLive::Live< Equipment > firstEquipment()
					
					
					Returns the first property \ref nfo_equipment "nfo:equipment". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Equipment > firstEquipment() { return baseFirstObject< nfo::equipment >(); }
				/*!
					\fn ::SopranoLive::Live< Equipment > addEquipment()
					
					
					Adds a new uniquely named resource to the property \ref nfo_equipment "nfo:equipment" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Equipment > addEquipment() { return baseAddObject< nfo::equipment >(); }
				/*!
					\fn ::SopranoLive::Live< Equipment > addEquipment(::SopranoLive::Live< Equipment > const &equipment_)
					
					
					Adds the given \a equipment_ to the property \ref nfo_equipment "nfo:equipment" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Equipment > addEquipment(::SopranoLive::Live< Equipment > const &equipment_) { return baseAddObject< nfo::equipment >( equipment_ ); }
				/*!
					\fn void removeEquipment(::SopranoLive::Live< Equipment > const &equipment_)
					
					
					Removes the given \a equipment_ from the property \ref nfo_equipment "nfo:equipment" set.
					\sa LiveResource::removeObject
				 */
				void removeEquipment(::SopranoLive::Live< Equipment > const &equipment_) { baseRemoveObject< nfo::equipment >(equipment_); }

				/* Property generated from mtp:credits
				 * \n Following MTP spec, credits contains... FIXME
				 * \n rdfs:label=MTP credits
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:weight=2
				 * \n tracker:modified=1132
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMtpCreditss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mtp_credits "mtp:credits" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMtpCreditss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mtp::credits >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMtpCreditss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mtp_credits "mtp:credits" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMtpCreditss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mtp::credits >(object_info, strategy, parent); }
				/*!
					\fn void setMtpCreditss(LiveNodes const &mtpCredits_)
					
					
					Sets the property \ref mtp_credits "mtp:credits" set to the given \a mtpCredits_ set.
					\sa LiveResource::setObjects
				 */
				void setMtpCreditss(LiveNodes const &mtpCredits_) { baseSetObjects(mtp::credits::iri(), mtpCredits_); }
				/*!
					\fn void removeMtpCreditss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mtp_credits "mtp:credits" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMtpCreditss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mtp::credits::iri(), object_info); }
				/*!
					\fn QString getMtpCredits()
					
					
					Returns the property \ref mtp_credits "mtp:credits". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getMtpCredits() { return baseGetObject< mtp::credits >(); }
				/*!
					\fn void setMtpCredits(QString const &mtpCredits_)
					
					
					Sets the property \ref mtp_credits "mtp:credits" to the given \a mtpCredits.
					\sa LiveResource::setObject
				 */
				void setMtpCredits(QString const &mtpCredits_) { baseSetObject< mtp::credits >( mtpCredits_ ); }
				/*!
					\fn QString firstMtpCredits()
					
					
					Returns the first property \ref mtp_credits "mtp:credits". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMtpCredits() { return baseFirstObject< mtp::credits >(); }
				/*!
					\fn void addMtpCredits(QString const &mtpCredits_)
					
					
					Adds the given \a mtpCredits_ to the property \ref mtp_credits "mtp:credits" set.
					\sa LiveResource::addObject
				 */
				void addMtpCredits(QString const &mtpCredits_) { baseAddObject< mtp::credits >( mtpCredits_ ); }
				/*!
					\fn void removeMtpCredits(QString const &mtpCredits_)
					
					
					Removes the given \a mtpCredits_ from the property \ref mtp_credits "mtp:credits" set.
					\sa LiveResource::removeObject
				 */
				void removeMtpCredits(QString const &mtpCredits_) { baseRemoveObject< mtp::credits >(mtpCredits_); }

				/* Property generated from nfo:bitrateType
				 * \n The type of the bitrate. Examples may include CBR and VBR.
				 * \n rdfs:label=bitrateType
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1213
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBitrateTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_bitrateType "nfo:bitrateType" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBitrateTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::bitrateType >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBitrateTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_bitrateType "nfo:bitrateType" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBitrateTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::bitrateType >(object_info, strategy, parent); }
				/*!
					\fn void setBitrateTypes(LiveNodes const &bitrateType_)
					
					
					Sets the property \ref nfo_bitrateType "nfo:bitrateType" set to the given \a bitrateType_ set.
					\sa LiveResource::setObjects
				 */
				void setBitrateTypes(LiveNodes const &bitrateType_) { baseSetObjects(nfo::bitrateType::iri(), bitrateType_); }
				/*!
					\fn void removeBitrateTypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_bitrateType "nfo:bitrateType" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBitrateTypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::bitrateType::iri(), object_info); }
				/*!
					\fn QString getBitrateType()
					
					
					Returns the property \ref nfo_bitrateType "nfo:bitrateType". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getBitrateType() { return baseGetObject< nfo::bitrateType >(); }
				/*!
					\fn void setBitrateType(QString const &bitrateType_)
					
					
					Sets the property \ref nfo_bitrateType "nfo:bitrateType" to the given \a bitrateType.
					\sa LiveResource::setObject
				 */
				void setBitrateType(QString const &bitrateType_) { baseSetObject< nfo::bitrateType >( bitrateType_ ); }
				/*!
					\fn QString firstBitrateType()
					
					
					Returns the first property \ref nfo_bitrateType "nfo:bitrateType". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstBitrateType() { return baseFirstObject< nfo::bitrateType >(); }
				/*!
					\fn void addBitrateType(QString const &bitrateType_)
					
					
					Adds the given \a bitrateType_ to the property \ref nfo_bitrateType "nfo:bitrateType" set.
					\sa LiveResource::addObject
				 */
				void addBitrateType(QString const &bitrateType_) { baseAddObject< nfo::bitrateType >( bitrateType_ ); }
				/*!
					\fn void removeBitrateType(QString const &bitrateType_)
					
					
					Removes the given \a bitrateType_ from the property \ref nfo_bitrateType "nfo:bitrateType" set.
					\sa LiveResource::removeObject
				 */
				void removeBitrateType(QString const &bitrateType_) { baseRemoveObject< nfo::bitrateType >(bitrateType_); }

				/* Property generated from mtp:hidden
				 * \n Hidden for the MTP protocol
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:label=Hidden
				 * \n tracker:modified=1577
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMtpHiddens(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mtp_hidden "mtp:hidden" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMtpHiddens(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mtp::hidden >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMtpHiddens(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mtp_hidden "mtp:hidden" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMtpHiddens(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mtp::hidden >(object_info, strategy, parent); }
				/*!
					\fn void setMtpHiddens(LiveNodes const &mtpHidden_)
					
					
					Sets the property \ref mtp_hidden "mtp:hidden" set to the given \a mtpHidden_ set.
					\sa LiveResource::setObjects
				 */
				void setMtpHiddens(LiveNodes const &mtpHidden_) { baseSetObjects(mtp::hidden::iri(), mtpHidden_); }
				/*!
					\fn void removeMtpHiddens(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mtp_hidden "mtp:hidden" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMtpHiddens(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mtp::hidden::iri(), object_info); }
				/*!
					\fn bool firstMtpHidden()
					
					
					Returns the first property \ref mtp_hidden "mtp:hidden". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstMtpHidden() { return baseFirstObject< mtp::hidden >(); }
				/*!
					\fn void addMtpHidden(bool const &mtpHidden_)
					
					
					Adds the given \a mtpHidden_ to the property \ref mtp_hidden "mtp:hidden" set.
					\sa LiveResource::addObject
				 */
				void addMtpHidden(bool const &mtpHidden_) { baseAddObject< mtp::hidden >( mtpHidden_ ); }
				/*!
					\fn void removeMtpHidden(bool const &mtpHidden_)
					
					
					Removes the given \a mtpHidden_ from the property \ref mtp_hidden "mtp:hidden" set.
					\sa LiveResource::removeObject
				 */
				void removeMtpHidden(bool const &mtpHidden_) { baseRemoveObject< mtp::hidden >(mtpHidden_); }

				/* Property generated from nfo:genre
				 * \n Genre of media
				 * \n rdfs:label=Genre
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:weight=4
				 * \n tracker:modified=1251
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveGenres(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_genre "nfo:genre" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveGenres(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::genre >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getGenres(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_genre "nfo:genre" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getGenres(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::genre >(object_info, strategy, parent); }
				/*!
					\fn void setGenres(LiveNodes const &genre_)
					
					
					Sets the property \ref nfo_genre "nfo:genre" set to the given \a genre_ set.
					\sa LiveResource::setObjects
				 */
				void setGenres(LiveNodes const &genre_) { baseSetObjects(nfo::genre::iri(), genre_); }
				/*!
					\fn void removeGenres(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_genre "nfo:genre" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeGenres(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::genre::iri(), object_info); }
				/*!
					\fn QString getGenre()
					
					
					Returns the property \ref nfo_genre "nfo:genre". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getGenre() { return baseGetObject< nfo::genre >(); }
				/*!
					\fn void setGenre(QString const &genre_)
					
					
					Sets the property \ref nfo_genre "nfo:genre" to the given \a genre.
					\sa LiveResource::setObject
				 */
				void setGenre(QString const &genre_) { baseSetObject< nfo::genre >( genre_ ); }
				/*!
					\fn QString firstGenre()
					
					
					Returns the first property \ref nfo_genre "nfo:genre". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstGenre() { return baseFirstObject< nfo::genre >(); }
				/*!
					\fn void addGenre(QString const &genre_)
					
					
					Adds the given \a genre_ to the property \ref nfo_genre "nfo:genre" set.
					\sa LiveResource::addObject
				 */
				void addGenre(QString const &genre_) { baseAddObject< nfo::genre >( genre_ ); }
				/*!
					\fn void removeGenre(QString const &genre_)
					
					
					Removes the given \a genre_ from the property \ref nfo_genre "nfo:genre" set.
					\sa LiveResource::removeObject
				 */
				void removeGenre(QString const &genre_) { baseRemoveObject< nfo::genre >(genre_); }

				/* Property generated from nmm:genre
				 * \n rdfs:label=Genre
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:weight=4
				 * \n tracker:modified=1179
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNmmGenres(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_genre "nmm:genre" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNmmGenres(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::genre >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNmmGenres(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_genre "nmm:genre" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNmmGenres(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::genre >(object_info, strategy, parent); }
				/*!
					\fn void setNmmGenres(LiveNodes const &nmmGenre_)
					
					
					Sets the property \ref nmm_genre "nmm:genre" set to the given \a nmmGenre_ set.
					\sa LiveResource::setObjects
				 */
				void setNmmGenres(LiveNodes const &nmmGenre_) { baseSetObjects(nmm::genre::iri(), nmmGenre_); }
				/*!
					\fn void removeNmmGenres(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_genre "nmm:genre" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNmmGenres(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::genre::iri(), object_info); }
				/*!
					\fn QString getNmmGenre()
					
					
					Returns the property \ref nmm_genre "nmm:genre". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getNmmGenre() { return baseGetObject< nmm::genre >(); }
				/*!
					\fn void setNmmGenre(QString const &nmmGenre_)
					
					
					Sets the property \ref nmm_genre "nmm:genre" to the given \a nmmGenre.
					\sa LiveResource::setObject
				 */
				void setNmmGenre(QString const &nmmGenre_) { baseSetObject< nmm::genre >( nmmGenre_ ); }
				/*!
					\fn QString firstNmmGenre()
					
					
					Returns the first property \ref nmm_genre "nmm:genre". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstNmmGenre() { return baseFirstObject< nmm::genre >(); }
				/*!
					\fn void addNmmGenre(QString const &nmmGenre_)
					
					
					Adds the given \a nmmGenre_ to the property \ref nmm_genre "nmm:genre" set.
					\sa LiveResource::addObject
				 */
				void addNmmGenre(QString const &nmmGenre_) { baseAddObject< nmm::genre >( nmmGenre_ ); }
				/*!
					\fn void removeNmmGenre(QString const &nmmGenre_)
					
					
					Removes the given \a nmmGenre_ from the property \ref nmm_genre "nmm:genre" set.
					\sa LiveResource::removeObject
				 */
				void removeNmmGenre(QString const &nmmGenre_) { baseRemoveObject< nmm::genre >(nmmGenre_); }

				/* Property generated from nfo:count
				 * \n A common superproperty for all properties signifying the amount of atomic media data units. Examples of subproperties may include sampleCount and frameCount.
				 * \n rdfs:label=count
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1871
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_count "nfo:count" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::count >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_count "nfo:count" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::count >(object_info, strategy, parent); }
				/*!
					\fn void setCounts(LiveNodes const &count_)
					
					
					Sets the property \ref nfo_count "nfo:count" set to the given \a count_ set.
					\sa LiveResource::setObjects
				 */
				void setCounts(LiveNodes const &count_) { baseSetObjects(nfo::count::iri(), count_); }
				/*!
					\fn void removeCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_count "nfo:count" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::count::iri(), object_info); }
				/*!
					\fn qint64 getCount()
					
					
					Returns the property \ref nfo_count "nfo:count". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getCount() { return baseGetObject< nfo::count >(); }
				/*!
					\fn void setCount(qint64 const &count_)
					
					
					Sets the property \ref nfo_count "nfo:count" to the given \a count.
					\sa LiveResource::setObject
				 */
				void setCount(qint64 const &count_) { baseSetObject< nfo::count >( count_ ); }
				/*!
					\fn qint64 firstCount()
					
					
					Returns the first property \ref nfo_count "nfo:count". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstCount() { return baseFirstObject< nfo::count >(); }
				/*!
					\fn void addCount(qint64 const &count_)
					
					
					Adds the given \a count_ to the property \ref nfo_count "nfo:count" set.
					\sa LiveResource::addObject
				 */
				void addCount(qint64 const &count_) { baseAddObject< nfo::count >( count_ ); }
				/*!
					\fn void removeCount(qint64 const &count_)
					
					
					Removes the given \a count_ from the property \ref nfo_count "nfo:count" set.
					\sa LiveResource::removeObject
				 */
				void removeCount(qint64 const &count_) { baseRemoveObject< nfo::count >(count_); }

				/* Property generated from nfo:averageBitrate
				 * \n The average overall bitrate of a media container. (i.e. the size of the piece of media in bits, divided by it's duration expressed in seconds).
				 * \n rdfs:label=averageBitrate
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1182
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAverageBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_averageBitrate "nfo:averageBitrate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAverageBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::averageBitrate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAverageBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_averageBitrate "nfo:averageBitrate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAverageBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::averageBitrate >(object_info, strategy, parent); }
				/*!
					\fn void setAverageBitrates(LiveNodes const &averageBitrate_)
					
					
					Sets the property \ref nfo_averageBitrate "nfo:averageBitrate" set to the given \a averageBitrate_ set.
					\sa LiveResource::setObjects
				 */
				void setAverageBitrates(LiveNodes const &averageBitrate_) { baseSetObjects(nfo::averageBitrate::iri(), averageBitrate_); }
				/*!
					\fn void removeAverageBitrates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_averageBitrate "nfo:averageBitrate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAverageBitrates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::averageBitrate::iri(), object_info); }
				/*!
					\fn double getAverageBitrate()
					
					
					Returns the property \ref nfo_averageBitrate "nfo:averageBitrate". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getAverageBitrate() { return baseGetObject< nfo::averageBitrate >(); }
				/*!
					\fn void setAverageBitrate(double const &averageBitrate_)
					
					
					Sets the property \ref nfo_averageBitrate "nfo:averageBitrate" to the given \a averageBitrate.
					\sa LiveResource::setObject
				 */
				void setAverageBitrate(double const &averageBitrate_) { baseSetObject< nfo::averageBitrate >( averageBitrate_ ); }
				/*!
					\fn double firstAverageBitrate()
					
					
					Returns the first property \ref nfo_averageBitrate "nfo:averageBitrate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstAverageBitrate() { return baseFirstObject< nfo::averageBitrate >(); }
				/*!
					\fn void addAverageBitrate(double const &averageBitrate_)
					
					
					Adds the given \a averageBitrate_ to the property \ref nfo_averageBitrate "nfo:averageBitrate" set.
					\sa LiveResource::addObject
				 */
				void addAverageBitrate(double const &averageBitrate_) { baseAddObject< nfo::averageBitrate >( averageBitrate_ ); }
				/*!
					\fn void removeAverageBitrate(double const &averageBitrate_)
					
					
					Removes the given \a averageBitrate_ from the property \ref nfo_averageBitrate "nfo:averageBitrate" set.
					\sa LiveResource::removeObject
				 */
				void removeAverageBitrate(double const &averageBitrate_) { baseRemoveObject< nfo::averageBitrate >(averageBitrate_); }

				/* Property generated from nmm:skipCounter
				 * \n rdfs:label=Increase if the media is skip while playing
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1191
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveNmmSkipCounters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nmm_skipCounter "nmm:skipCounter" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveNmmSkipCounters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nmm::skipCounter >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getNmmSkipCounters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nmm_skipCounter "nmm:skipCounter" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getNmmSkipCounters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nmm::skipCounter >(object_info, strategy, parent); }
				/*!
					\fn void setNmmSkipCounters(LiveNodes const &nmmSkipCounter_)
					
					
					Sets the property \ref nmm_skipCounter "nmm:skipCounter" set to the given \a nmmSkipCounter_ set.
					\sa LiveResource::setObjects
				 */
				void setNmmSkipCounters(LiveNodes const &nmmSkipCounter_) { baseSetObjects(nmm::skipCounter::iri(), nmmSkipCounter_); }
				/*!
					\fn void removeNmmSkipCounters(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nmm_skipCounter "nmm:skipCounter" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeNmmSkipCounters(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nmm::skipCounter::iri(), object_info); }
				/*!
					\fn qint64 getNmmSkipCounter()
					
					
					Returns the property \ref nmm_skipCounter "nmm:skipCounter". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getNmmSkipCounter() { return baseGetObject< nmm::skipCounter >(); }
				/*!
					\fn void setNmmSkipCounter(qint64 const &nmmSkipCounter_)
					
					
					Sets the property \ref nmm_skipCounter "nmm:skipCounter" to the given \a nmmSkipCounter.
					\sa LiveResource::setObject
				 */
				void setNmmSkipCounter(qint64 const &nmmSkipCounter_) { baseSetObject< nmm::skipCounter >( nmmSkipCounter_ ); }
				/*!
					\fn qint64 firstNmmSkipCounter()
					
					
					Returns the first property \ref nmm_skipCounter "nmm:skipCounter". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstNmmSkipCounter() { return baseFirstObject< nmm::skipCounter >(); }
				/*!
					\fn void addNmmSkipCounter(qint64 const &nmmSkipCounter_)
					
					
					Adds the given \a nmmSkipCounter_ to the property \ref nmm_skipCounter "nmm:skipCounter" set.
					\sa LiveResource::addObject
				 */
				void addNmmSkipCounter(qint64 const &nmmSkipCounter_) { baseAddObject< nmm::skipCounter >( nmmSkipCounter_ ); }
				/*!
					\fn void removeNmmSkipCounter(qint64 const &nmmSkipCounter_)
					
					
					Removes the given \a nmmSkipCounter_ from the property \ref nmm_skipCounter "nmm:skipCounter" set.
					\sa LiveResource::removeObject
				 */
				void removeNmmSkipCounter(qint64 const &nmmSkipCounter_) { baseRemoveObject< nmm::skipCounter >(nmmSkipCounter_); }

				/* Property generated from nfo:duration
				 * \n Duration of a media piece.
				 * \n rdfs:label=duration
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1094
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_duration "nfo:duration" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::duration >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_duration "nfo:duration" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::duration >(object_info, strategy, parent); }
				/*!
					\fn void setDurations(LiveNodes const &duration_)
					
					
					Sets the property \ref nfo_duration "nfo:duration" set to the given \a duration_ set.
					\sa LiveResource::setObjects
				 */
				void setDurations(LiveNodes const &duration_) { baseSetObjects(nfo::duration::iri(), duration_); }
				/*!
					\fn void removeDurations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_duration "nfo:duration" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDurations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::duration::iri(), object_info); }
				/*!
					\fn qint64 getDuration()
					
					
					Returns the property \ref nfo_duration "nfo:duration". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getDuration() { return baseGetObject< nfo::duration >(); }
				/*!
					\fn void setDuration(qint64 const &duration_)
					
					
					Sets the property \ref nfo_duration "nfo:duration" to the given \a duration.
					\sa LiveResource::setObject
				 */
				void setDuration(qint64 const &duration_) { baseSetObject< nfo::duration >( duration_ ); }
				/*!
					\fn qint64 firstDuration()
					
					
					Returns the first property \ref nfo_duration "nfo:duration". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstDuration() { return baseFirstObject< nfo::duration >(); }
				/*!
					\fn void addDuration(qint64 const &duration_)
					
					
					Adds the given \a duration_ to the property \ref nfo_duration "nfo:duration" set.
					\sa LiveResource::addObject
				 */
				void addDuration(qint64 const &duration_) { baseAddObject< nfo::duration >( duration_ ); }
				/*!
					\fn void removeDuration(qint64 const &duration_)
					
					
					Removes the given \a duration_ from the property \ref nfo_duration "nfo:duration" set.
					\sa LiveResource::removeObject
				 */
				void removeDuration(qint64 const &duration_) { baseRemoveObject< nfo::duration >(duration_); }

				/* Property generated from nfo:compressionType
				 * \n The type of the compression. Values include, lossy and lossless.
				 * \n rdfs:label=compressionType
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:CompressionType
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1364
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCompressionTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_compressionType "nfo:compressionType" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCompressionTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::compressionType >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCompressionTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_compressionType "nfo:compressionType" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCompressionTypes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::compressionType >(object_info, strategy, parent); }
				/*!
					\fn void setCompressionTypes(LiveNodes const &compressionType_)
					
					
					Sets the property \ref nfo_compressionType "nfo:compressionType" set to the given \a compressionType_ set.
					\sa LiveResource::setObjects
				 */
				void setCompressionTypes(LiveNodes const &compressionType_) { baseSetObjects(nfo::compressionType::iri(), compressionType_); }
				/*!
					\fn void removeCompressionTypes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_compressionType "nfo:compressionType" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCompressionTypes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::compressionType::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< CompressionType > getCompressionType()
					
					
					Returns the property \ref nfo_compressionType "nfo:compressionType". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< CompressionType > getCompressionType() { return baseGetObject< nfo::compressionType >(); }
				/*!
					\fn ::SopranoLive::Live< CompressionType > setCompressionType(::SopranoLive::Live< CompressionType > const &compressionType_)
					
					
					Sets the property \ref nfo_compressionType "nfo:compressionType" to the given \a compressionType.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< CompressionType > setCompressionType(::SopranoLive::Live< CompressionType > const &compressionType_) { return baseSetObject< nfo::compressionType >( compressionType_ ); }
				/*!
					\fn ::SopranoLive::Live< CompressionType > firstCompressionType()
					
					
					Returns the first property \ref nfo_compressionType "nfo:compressionType". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< CompressionType > firstCompressionType() { return baseFirstObject< nfo::compressionType >(); }
				/*!
					\fn ::SopranoLive::Live< CompressionType > addCompressionType()
					
					
					Adds a new uniquely named resource to the property \ref nfo_compressionType "nfo:compressionType" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CompressionType > addCompressionType() { return baseAddObject< nfo::compressionType >(); }
				/*!
					\fn ::SopranoLive::Live< CompressionType > addCompressionType(::SopranoLive::Live< CompressionType > const &compressionType_)
					
					
					Adds the given \a compressionType_ to the property \ref nfo_compressionType "nfo:compressionType" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< CompressionType > addCompressionType(::SopranoLive::Live< CompressionType > const &compressionType_) { return baseAddObject< nfo::compressionType >( compressionType_ ); }
				/*!
					\fn void removeCompressionType(::SopranoLive::Live< CompressionType > const &compressionType_)
					
					
					Removes the given \a compressionType_ from the property \ref nfo_compressionType "nfo:compressionType" set.
					\sa LiveResource::removeObject
				 */
				void removeCompressionType(::SopranoLive::Live< CompressionType > const &compressionType_) { baseRemoveObject< nfo::compressionType >(compressionType_); }

				/* Property generated from nfo:hasMediaStream
				 * \n Connects a media container with a single media stream contained within.
				 * \n rdfs:label=hasMediaStream
				 * \n rdfs:subPropertyOf=nie:hasPart
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1764
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nie::DataObject DataObject;
				/*!
					\fn LiveNodes liveHasMediaStreams(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_hasMediaStream "nfo:hasMediaStream" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasMediaStreams(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::hasMediaStream >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasMediaStreams(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_hasMediaStream "nfo:hasMediaStream" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasMediaStreams(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::hasMediaStream >(object_info, strategy, parent); }
				/*!
					\fn void setHasMediaStreams(LiveNodes const &hasMediaStream_)
					
					
					Sets the property \ref nfo_hasMediaStream "nfo:hasMediaStream" set to the given \a hasMediaStream_ set.
					\sa LiveResource::setObjects
				 */
				void setHasMediaStreams(LiveNodes const &hasMediaStream_) { baseSetObjects(nfo::hasMediaStream::iri(), hasMediaStream_); }
				/*!
					\fn void removeHasMediaStreams(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_hasMediaStream "nfo:hasMediaStream" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasMediaStreams(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::hasMediaStream::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > getHasMediaStream()
					
					
					Returns the property \ref nfo_hasMediaStream "nfo:hasMediaStream". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nie::DataObject > getHasMediaStream() { return baseGetObject< nfo::hasMediaStream >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > setHasMediaStream(::SopranoLive::Live< nie::DataObject > const &hasMediaStream_)
					
					
					Sets the property \ref nfo_hasMediaStream "nfo:hasMediaStream" to the given \a hasMediaStream.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nie::DataObject > setHasMediaStream(::SopranoLive::Live< nie::DataObject > const &hasMediaStream_) { return baseSetObject< nfo::hasMediaStream >( hasMediaStream_ ); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > firstHasMediaStream()
					
					
					Returns the first property \ref nfo_hasMediaStream "nfo:hasMediaStream". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nie::DataObject > firstHasMediaStream() { return baseFirstObject< nfo::hasMediaStream >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addHasMediaStream()
					
					
					Adds a new uniquely named resource to the property \ref nfo_hasMediaStream "nfo:hasMediaStream" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addHasMediaStream() { return baseAddObject< nfo::hasMediaStream >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addHasMediaStream(::SopranoLive::Live< nie::DataObject > const &hasMediaStream_)
					
					
					Adds the given \a hasMediaStream_ to the property \ref nfo_hasMediaStream "nfo:hasMediaStream" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addHasMediaStream(::SopranoLive::Live< nie::DataObject > const &hasMediaStream_) { return baseAddObject< nfo::hasMediaStream >( hasMediaStream_ ); }
				/*!
					\fn void removeHasMediaStream(::SopranoLive::Live< nie::DataObject > const &hasMediaStream_)
					
					
					Removes the given \a hasMediaStream_ from the property \ref nfo_hasMediaStream "nfo:hasMediaStream" set.
					\sa LiveResource::removeObject
				 */
				void removeHasMediaStream(::SopranoLive::Live< nie::DataObject > const &hasMediaStream_) { baseRemoveObject< nfo::hasMediaStream >(hasMediaStream_); }

				/* Property generated from nfo:device
				 * \n Device (maker/model) used to capture the image/video
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=Device
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1494
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDevices(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nfo::device for replacement
					Returns a live model of property \ref nfo_device "nfo:device" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveDevices(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::device >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDevices(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nfo::device for replacement
					Returns all current values of property \ref nfo_device "nfo:device" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getDevices(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::device >(object_info, strategy, parent); }
				/*!
					\fn void setDevices(LiveNodes const &device_)
					
					\deprecated See \ref nfo::device for replacement
					Sets the property \ref nfo_device "nfo:device" set to the given \a device_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setDevices(LiveNodes const &device_) { baseSetObjects(nfo::device::iri(), device_); }
				/*!
					\fn void removeDevices(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nfo::device for replacement
					Removes the properties from property \ref nfo_device "nfo:device" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeDevices(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::device::iri(), object_info); }
				/*!
					\fn QString getDevice()
					
					\deprecated See \ref nfo::device for replacement
					Returns the property \ref nfo_device "nfo:device". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED QString getDevice() { return baseGetObject< nfo::device >(); }
				/*!
					\fn void setDevice(QString const &device_)
					
					\deprecated See \ref nfo::device for replacement
					Sets the property \ref nfo_device "nfo:device" to the given \a device.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED void setDevice(QString const &device_) { baseSetObject< nfo::device >( device_ ); }
				/*!
					\fn QString firstDevice()
					
					\deprecated See \ref nfo::device for replacement
					Returns the first property \ref nfo_device "nfo:device". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED QString firstDevice() { return baseFirstObject< nfo::device >(); }
				/*!
					\fn void addDevice(QString const &device_)
					
					\deprecated See \ref nfo::device for replacement
					Adds the given \a device_ to the property \ref nfo_device "nfo:device" set.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED void addDevice(QString const &device_) { baseAddObject< nfo::device >( device_ ); }
				/*!
					\fn void removeDevice(QString const &device_)
					
					\deprecated See \ref nfo::device for replacement
					Removes the given \a device_ from the property \ref nfo_device "nfo:device" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeDevice(QString const &device_) { baseRemoveObject< nfo::device >(device_); }

				/* Property generated from mtp:creator
				 * \n Following MTP spec, this property can contain a free text taking about creator of the Media
				 * \n rdfs:label=MTP Creator
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:weight=3
				 * \n tracker:modified=1444
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMtpCreators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref mtp_creator "mtp:creator" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMtpCreators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< mtp::creator >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMtpCreators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref mtp_creator "mtp:creator" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMtpCreators(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< mtp::creator >(object_info, strategy, parent); }
				/*!
					\fn void setMtpCreators(LiveNodes const &mtpCreator_)
					
					
					Sets the property \ref mtp_creator "mtp:creator" set to the given \a mtpCreator_ set.
					\sa LiveResource::setObjects
				 */
				void setMtpCreators(LiveNodes const &mtpCreator_) { baseSetObjects(mtp::creator::iri(), mtpCreator_); }
				/*!
					\fn void removeMtpCreators(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref mtp_creator "mtp:creator" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMtpCreators(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(mtp::creator::iri(), object_info); }
				/*!
					\fn QString getMtpCreator()
					
					
					Returns the property \ref mtp_creator "mtp:creator". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getMtpCreator() { return baseGetObject< mtp::creator >(); }
				/*!
					\fn void setMtpCreator(QString const &mtpCreator_)
					
					
					Sets the property \ref mtp_creator "mtp:creator" to the given \a mtpCreator.
					\sa LiveResource::setObject
				 */
				void setMtpCreator(QString const &mtpCreator_) { baseSetObject< mtp::creator >( mtpCreator_ ); }
				/*!
					\fn QString firstMtpCreator()
					
					
					Returns the first property \ref mtp_creator "mtp:creator". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMtpCreator() { return baseFirstObject< mtp::creator >(); }
				/*!
					\fn void addMtpCreator(QString const &mtpCreator_)
					
					
					Adds the given \a mtpCreator_ to the property \ref mtp_creator "mtp:creator" set.
					\sa LiveResource::addObject
				 */
				void addMtpCreator(QString const &mtpCreator_) { baseAddObject< mtp::creator >( mtpCreator_ ); }
				/*!
					\fn void removeMtpCreator(QString const &mtpCreator_)
					
					
					Removes the given \a mtpCreator_ from the property \ref mtp_creator "mtp:creator" set.
					\sa LiveResource::removeObject
				 */
				void removeMtpCreator(QString const &mtpCreator_) { baseRemoveObject< mtp::creator >(mtpCreator_); }

				/* Property generated from nfo:encodedBy
				 * \n The contains the name of the person or organisation that encoded the media
				 * \n rdfs:label=encodedBy
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Media
				 * \n tracker:modified=1533
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEncodedBys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_encodedBy "nfo:encodedBy" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEncodedBys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::encodedBy >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEncodedBys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_encodedBy "nfo:encodedBy" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEncodedBys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::encodedBy >(object_info, strategy, parent); }
				/*!
					\fn void setEncodedBys(LiveNodes const &encodedBy_)
					
					
					Sets the property \ref nfo_encodedBy "nfo:encodedBy" set to the given \a encodedBy_ set.
					\sa LiveResource::setObjects
				 */
				void setEncodedBys(LiveNodes const &encodedBy_) { baseSetObjects(nfo::encodedBy::iri(), encodedBy_); }
				/*!
					\fn void removeEncodedBys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_encodedBy "nfo:encodedBy" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEncodedBys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::encodedBy::iri(), object_info); }
				/*!
					\fn QString getEncodedBy()
					
					
					Returns the property \ref nfo_encodedBy "nfo:encodedBy". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getEncodedBy() { return baseGetObject< nfo::encodedBy >(); }
				/*!
					\fn void setEncodedBy(QString const &encodedBy_)
					
					
					Sets the property \ref nfo_encodedBy "nfo:encodedBy" to the given \a encodedBy.
					\sa LiveResource::setObject
				 */
				void setEncodedBy(QString const &encodedBy_) { baseSetObject< nfo::encodedBy >( encodedBy_ ); }
				/*!
					\fn QString firstEncodedBy()
					
					
					Returns the first property \ref nfo_encodedBy "nfo:encodedBy". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstEncodedBy() { return baseFirstObject< nfo::encodedBy >(); }
				/*!
					\fn void addEncodedBy(QString const &encodedBy_)
					
					
					Adds the given \a encodedBy_ to the property \ref nfo_encodedBy "nfo:encodedBy" set.
					\sa LiveResource::addObject
				 */
				void addEncodedBy(QString const &encodedBy_) { baseAddObject< nfo::encodedBy >( encodedBy_ ); }
				/*!
					\fn void removeEncodedBy(QString const &encodedBy_)
					
					
					Removes the given \a encodedBy_ from the property \ref nfo_encodedBy "nfo:encodedBy" set.
					\sa LiveResource::removeObject
				 */
				void removeEncodedBy(QString const &encodedBy_) { baseRemoveObject< nfo::encodedBy >(encodedBy_); }
				 //@}
			};

			/*! Class generated from nfo:Audio
			 * \ingroup onto_nfo_classes
			 * A file containing audio content
			 * 
			 * rdfs:label = Audio
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1878
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Audio
				: public virtual Media

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Audio"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Media, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Audio> Live;
				Audio() { this->attachInterfaceHelper< Audio >(); }
				~Audio() { this->detachInterfaceHelper< Audio >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:rearChannels
				 * \n Number of rear channels.
				 * \n rdfs:label=rearChannels
				 * \n rdfs:subPropertyOf=nfo:channels
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Audio
				 * \n tracker:modified=1253
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveRearChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_rearChannels "nfo:rearChannels" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveRearChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::rearChannels >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getRearChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_rearChannels "nfo:rearChannels" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getRearChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::rearChannels >(object_info, strategy, parent); }
				/*!
					\fn void setRearChannelss(LiveNodes const &rearChannels_)
					
					
					Sets the property \ref nfo_rearChannels "nfo:rearChannels" set to the given \a rearChannels_ set.
					\sa LiveResource::setObjects
				 */
				void setRearChannelss(LiveNodes const &rearChannels_) { baseSetObjects(nfo::rearChannels::iri(), rearChannels_); }
				/*!
					\fn void removeRearChannelss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_rearChannels "nfo:rearChannels" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeRearChannelss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::rearChannels::iri(), object_info); }
				/*!
					\fn qint64 getRearChannels()
					
					
					Returns the property \ref nfo_rearChannels "nfo:rearChannels". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getRearChannels() { return baseGetObject< nfo::rearChannels >(); }
				/*!
					\fn void setRearChannels(qint64 const &rearChannels_)
					
					
					Sets the property \ref nfo_rearChannels "nfo:rearChannels" to the given \a rearChannels.
					\sa LiveResource::setObject
				 */
				void setRearChannels(qint64 const &rearChannels_) { baseSetObject< nfo::rearChannels >( rearChannels_ ); }
				/*!
					\fn qint64 firstRearChannels()
					
					
					Returns the first property \ref nfo_rearChannels "nfo:rearChannels". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstRearChannels() { return baseFirstObject< nfo::rearChannels >(); }
				/*!
					\fn void addRearChannels(qint64 const &rearChannels_)
					
					
					Adds the given \a rearChannels_ to the property \ref nfo_rearChannels "nfo:rearChannels" set.
					\sa LiveResource::addObject
				 */
				void addRearChannels(qint64 const &rearChannels_) { baseAddObject< nfo::rearChannels >( rearChannels_ ); }
				/*!
					\fn void removeRearChannels(qint64 const &rearChannels_)
					
					
					Removes the given \a rearChannels_ from the property \ref nfo_rearChannels "nfo:rearChannels" set.
					\sa LiveResource::removeObject
				 */
				void removeRearChannels(qint64 const &rearChannels_) { baseRemoveObject< nfo::rearChannels >(rearChannels_); }

				/* Property generated from nfo:bitsPerSample
				 * \n Amount of bits in each audio sample.
				 * \n rdfs:label=bitsPerSample
				 * \n rdfs:subPropertyOf=nfo:bitDepth
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Audio
				 * \n tracker:modified=1037
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveBitsPerSamples(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_bitsPerSample "nfo:bitsPerSample" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBitsPerSamples(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::bitsPerSample >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBitsPerSamples(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_bitsPerSample "nfo:bitsPerSample" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBitsPerSamples(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::bitsPerSample >(object_info, strategy, parent); }
				/*!
					\fn void setBitsPerSamples(LiveNodes const &bitsPerSample_)
					
					
					Sets the property \ref nfo_bitsPerSample "nfo:bitsPerSample" set to the given \a bitsPerSample_ set.
					\sa LiveResource::setObjects
				 */
				void setBitsPerSamples(LiveNodes const &bitsPerSample_) { baseSetObjects(nfo::bitsPerSample::iri(), bitsPerSample_); }
				/*!
					\fn void removeBitsPerSamples(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_bitsPerSample "nfo:bitsPerSample" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBitsPerSamples(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::bitsPerSample::iri(), object_info); }
				/*!
					\fn qint64 getBitsPerSample()
					
					
					Returns the property \ref nfo_bitsPerSample "nfo:bitsPerSample". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getBitsPerSample() { return baseGetObject< nfo::bitsPerSample >(); }
				/*!
					\fn void setBitsPerSample(qint64 const &bitsPerSample_)
					
					
					Sets the property \ref nfo_bitsPerSample "nfo:bitsPerSample" to the given \a bitsPerSample.
					\sa LiveResource::setObject
				 */
				void setBitsPerSample(qint64 const &bitsPerSample_) { baseSetObject< nfo::bitsPerSample >( bitsPerSample_ ); }
				/*!
					\fn qint64 firstBitsPerSample()
					
					
					Returns the first property \ref nfo_bitsPerSample "nfo:bitsPerSample". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstBitsPerSample() { return baseFirstObject< nfo::bitsPerSample >(); }
				/*!
					\fn void addBitsPerSample(qint64 const &bitsPerSample_)
					
					
					Adds the given \a bitsPerSample_ to the property \ref nfo_bitsPerSample "nfo:bitsPerSample" set.
					\sa LiveResource::addObject
				 */
				void addBitsPerSample(qint64 const &bitsPerSample_) { baseAddObject< nfo::bitsPerSample >( bitsPerSample_ ); }
				/*!
					\fn void removeBitsPerSample(qint64 const &bitsPerSample_)
					
					
					Removes the given \a bitsPerSample_ from the property \ref nfo_bitsPerSample "nfo:bitsPerSample" set.
					\sa LiveResource::removeObject
				 */
				void removeBitsPerSample(qint64 const &bitsPerSample_) { baseRemoveObject< nfo::bitsPerSample >(bitsPerSample_); }

				/* Property generated from nfo:sampleRate
				 * \n The amount of audio samples per second.
				 * \n rdfs:label=sampleRate
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nfo:Audio
				 * \n tracker:modified=1013
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSampleRates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_sampleRate "nfo:sampleRate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSampleRates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::sampleRate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSampleRates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_sampleRate "nfo:sampleRate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSampleRates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::sampleRate >(object_info, strategy, parent); }
				/*!
					\fn void setSampleRates(LiveNodes const &sampleRate_)
					
					
					Sets the property \ref nfo_sampleRate "nfo:sampleRate" set to the given \a sampleRate_ set.
					\sa LiveResource::setObjects
				 */
				void setSampleRates(LiveNodes const &sampleRate_) { baseSetObjects(nfo::sampleRate::iri(), sampleRate_); }
				/*!
					\fn void removeSampleRates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_sampleRate "nfo:sampleRate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSampleRates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::sampleRate::iri(), object_info); }
				/*!
					\fn double getSampleRate()
					
					
					Returns the property \ref nfo_sampleRate "nfo:sampleRate". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getSampleRate() { return baseGetObject< nfo::sampleRate >(); }
				/*!
					\fn void setSampleRate(double const &sampleRate_)
					
					
					Sets the property \ref nfo_sampleRate "nfo:sampleRate" to the given \a sampleRate.
					\sa LiveResource::setObject
				 */
				void setSampleRate(double const &sampleRate_) { baseSetObject< nfo::sampleRate >( sampleRate_ ); }
				/*!
					\fn double firstSampleRate()
					
					
					Returns the first property \ref nfo_sampleRate "nfo:sampleRate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstSampleRate() { return baseFirstObject< nfo::sampleRate >(); }
				/*!
					\fn void addSampleRate(double const &sampleRate_)
					
					
					Adds the given \a sampleRate_ to the property \ref nfo_sampleRate "nfo:sampleRate" set.
					\sa LiveResource::addObject
				 */
				void addSampleRate(double const &sampleRate_) { baseAddObject< nfo::sampleRate >( sampleRate_ ); }
				/*!
					\fn void removeSampleRate(double const &sampleRate_)
					
					
					Removes the given \a sampleRate_ from the property \ref nfo_sampleRate "nfo:sampleRate" set.
					\sa LiveResource::removeObject
				 */
				void removeSampleRate(double const &sampleRate_) { baseRemoveObject< nfo::sampleRate >(sampleRate_); }

				/* Property generated from nfo:peakGain
				 * \n Peak Gain of media
				 * \n rdfs:label=Peak Gain
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Audio
				 * \n tracker:modified=1774
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePeakGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_peakGain "nfo:peakGain" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePeakGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::peakGain >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPeakGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_peakGain "nfo:peakGain" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPeakGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::peakGain >(object_info, strategy, parent); }
				/*!
					\fn void setPeakGains(LiveNodes const &peakGain_)
					
					
					Sets the property \ref nfo_peakGain "nfo:peakGain" set to the given \a peakGain_ set.
					\sa LiveResource::setObjects
				 */
				void setPeakGains(LiveNodes const &peakGain_) { baseSetObjects(nfo::peakGain::iri(), peakGain_); }
				/*!
					\fn void removePeakGains(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_peakGain "nfo:peakGain" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePeakGains(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::peakGain::iri(), object_info); }
				/*!
					\fn qint64 getPeakGain()
					
					
					Returns the property \ref nfo_peakGain "nfo:peakGain". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getPeakGain() { return baseGetObject< nfo::peakGain >(); }
				/*!
					\fn void setPeakGain(qint64 const &peakGain_)
					
					
					Sets the property \ref nfo_peakGain "nfo:peakGain" to the given \a peakGain.
					\sa LiveResource::setObject
				 */
				void setPeakGain(qint64 const &peakGain_) { baseSetObject< nfo::peakGain >( peakGain_ ); }
				/*!
					\fn qint64 firstPeakGain()
					
					
					Returns the first property \ref nfo_peakGain "nfo:peakGain". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstPeakGain() { return baseFirstObject< nfo::peakGain >(); }
				/*!
					\fn void addPeakGain(qint64 const &peakGain_)
					
					
					Adds the given \a peakGain_ to the property \ref nfo_peakGain "nfo:peakGain" set.
					\sa LiveResource::addObject
				 */
				void addPeakGain(qint64 const &peakGain_) { baseAddObject< nfo::peakGain >( peakGain_ ); }
				/*!
					\fn void removePeakGain(qint64 const &peakGain_)
					
					
					Removes the given \a peakGain_ from the property \ref nfo_peakGain "nfo:peakGain" set.
					\sa LiveResource::removeObject
				 */
				void removePeakGain(qint64 const &peakGain_) { baseRemoveObject< nfo::peakGain >(peakGain_); }

				/* Property generated from nfo:averageAudioBitrate
				 * \n The average overall bitrate of a media container. (i.e. the size of the piece of media in bits, divided by it's duration expressed in seconds).
				 * \n rdfs:label=averageBitrate
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nfo:Audio
				 * \n tracker:modified=1404
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAverageAudioBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_averageAudioBitrate "nfo:averageAudioBitrate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAverageAudioBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::averageAudioBitrate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAverageAudioBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_averageAudioBitrate "nfo:averageAudioBitrate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAverageAudioBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::averageAudioBitrate >(object_info, strategy, parent); }
				/*!
					\fn void setAverageAudioBitrates(LiveNodes const &averageAudioBitrate_)
					
					
					Sets the property \ref nfo_averageAudioBitrate "nfo:averageAudioBitrate" set to the given \a averageAudioBitrate_ set.
					\sa LiveResource::setObjects
				 */
				void setAverageAudioBitrates(LiveNodes const &averageAudioBitrate_) { baseSetObjects(nfo::averageAudioBitrate::iri(), averageAudioBitrate_); }
				/*!
					\fn void removeAverageAudioBitrates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_averageAudioBitrate "nfo:averageAudioBitrate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAverageAudioBitrates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::averageAudioBitrate::iri(), object_info); }
				/*!
					\fn double getAverageAudioBitrate()
					
					
					Returns the property \ref nfo_averageAudioBitrate "nfo:averageAudioBitrate". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getAverageAudioBitrate() { return baseGetObject< nfo::averageAudioBitrate >(); }
				/*!
					\fn void setAverageAudioBitrate(double const &averageAudioBitrate_)
					
					
					Sets the property \ref nfo_averageAudioBitrate "nfo:averageAudioBitrate" to the given \a averageAudioBitrate.
					\sa LiveResource::setObject
				 */
				void setAverageAudioBitrate(double const &averageAudioBitrate_) { baseSetObject< nfo::averageAudioBitrate >( averageAudioBitrate_ ); }
				/*!
					\fn double firstAverageAudioBitrate()
					
					
					Returns the first property \ref nfo_averageAudioBitrate "nfo:averageAudioBitrate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstAverageAudioBitrate() { return baseFirstObject< nfo::averageAudioBitrate >(); }
				/*!
					\fn void addAverageAudioBitrate(double const &averageAudioBitrate_)
					
					
					Adds the given \a averageAudioBitrate_ to the property \ref nfo_averageAudioBitrate "nfo:averageAudioBitrate" set.
					\sa LiveResource::addObject
				 */
				void addAverageAudioBitrate(double const &averageAudioBitrate_) { baseAddObject< nfo::averageAudioBitrate >( averageAudioBitrate_ ); }
				/*!
					\fn void removeAverageAudioBitrate(double const &averageAudioBitrate_)
					
					
					Removes the given \a averageAudioBitrate_ from the property \ref nfo_averageAudioBitrate "nfo:averageAudioBitrate" set.
					\sa LiveResource::removeObject
				 */
				void removeAverageAudioBitrate(double const &averageAudioBitrate_) { baseRemoveObject< nfo::averageAudioBitrate >(averageAudioBitrate_); }

				/* Property generated from nfo:lfeChannels
				 * \n Number of Low Frequency Expansion (subwoofer) channels.
				 * \n rdfs:label=lfeChannels
				 * \n rdfs:subPropertyOf=nfo:channels
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Audio
				 * \n tracker:modified=1938
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLfeChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_lfeChannels "nfo:lfeChannels" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLfeChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::lfeChannels >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLfeChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_lfeChannels "nfo:lfeChannels" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLfeChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::lfeChannels >(object_info, strategy, parent); }
				/*!
					\fn void setLfeChannelss(LiveNodes const &lfeChannels_)
					
					
					Sets the property \ref nfo_lfeChannels "nfo:lfeChannels" set to the given \a lfeChannels_ set.
					\sa LiveResource::setObjects
				 */
				void setLfeChannelss(LiveNodes const &lfeChannels_) { baseSetObjects(nfo::lfeChannels::iri(), lfeChannels_); }
				/*!
					\fn void removeLfeChannelss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_lfeChannels "nfo:lfeChannels" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLfeChannelss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::lfeChannels::iri(), object_info); }
				/*!
					\fn qint64 getLfeChannels()
					
					
					Returns the property \ref nfo_lfeChannels "nfo:lfeChannels". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getLfeChannels() { return baseGetObject< nfo::lfeChannels >(); }
				/*!
					\fn void setLfeChannels(qint64 const &lfeChannels_)
					
					
					Sets the property \ref nfo_lfeChannels "nfo:lfeChannels" to the given \a lfeChannels.
					\sa LiveResource::setObject
				 */
				void setLfeChannels(qint64 const &lfeChannels_) { baseSetObject< nfo::lfeChannels >( lfeChannels_ ); }
				/*!
					\fn qint64 firstLfeChannels()
					
					
					Returns the first property \ref nfo_lfeChannels "nfo:lfeChannels". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstLfeChannels() { return baseFirstObject< nfo::lfeChannels >(); }
				/*!
					\fn void addLfeChannels(qint64 const &lfeChannels_)
					
					
					Adds the given \a lfeChannels_ to the property \ref nfo_lfeChannels "nfo:lfeChannels" set.
					\sa LiveResource::addObject
				 */
				void addLfeChannels(qint64 const &lfeChannels_) { baseAddObject< nfo::lfeChannels >( lfeChannels_ ); }
				/*!
					\fn void removeLfeChannels(qint64 const &lfeChannels_)
					
					
					Removes the given \a lfeChannels_ from the property \ref nfo_lfeChannels "nfo:lfeChannels" set.
					\sa LiveResource::removeObject
				 */
				void removeLfeChannels(qint64 const &lfeChannels_) { baseRemoveObject< nfo::lfeChannels >(lfeChannels_); }

				/* Property generated from nfo:gain
				 * \n Gain of media
				 * \n rdfs:label=Gain
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Audio
				 * \n tracker:modified=1588
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_gain "nfo:gain" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::gain >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_gain "nfo:gain" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getGains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::gain >(object_info, strategy, parent); }
				/*!
					\fn void setGains(LiveNodes const &gain_)
					
					
					Sets the property \ref nfo_gain "nfo:gain" set to the given \a gain_ set.
					\sa LiveResource::setObjects
				 */
				void setGains(LiveNodes const &gain_) { baseSetObjects(nfo::gain::iri(), gain_); }
				/*!
					\fn void removeGains(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_gain "nfo:gain" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeGains(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::gain::iri(), object_info); }
				/*!
					\fn qint64 getGain()
					
					
					Returns the property \ref nfo_gain "nfo:gain". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getGain() { return baseGetObject< nfo::gain >(); }
				/*!
					\fn void setGain(qint64 const &gain_)
					
					
					Sets the property \ref nfo_gain "nfo:gain" to the given \a gain.
					\sa LiveResource::setObject
				 */
				void setGain(qint64 const &gain_) { baseSetObject< nfo::gain >( gain_ ); }
				/*!
					\fn qint64 firstGain()
					
					
					Returns the first property \ref nfo_gain "nfo:gain". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstGain() { return baseFirstObject< nfo::gain >(); }
				/*!
					\fn void addGain(qint64 const &gain_)
					
					
					Adds the given \a gain_ to the property \ref nfo_gain "nfo:gain" set.
					\sa LiveResource::addObject
				 */
				void addGain(qint64 const &gain_) { baseAddObject< nfo::gain >( gain_ ); }
				/*!
					\fn void removeGain(qint64 const &gain_)
					
					
					Removes the given \a gain_ from the property \ref nfo_gain "nfo:gain" set.
					\sa LiveResource::removeObject
				 */
				void removeGain(qint64 const &gain_) { baseRemoveObject< nfo::gain >(gain_); }

				/* Property generated from nfo:channels
				 * \n Number of channels. This property is to be used directly if no detailed information is necessary. Otherwise use more detailed subproperties.
				 * \n rdfs:label=channels
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Audio
				 * \n tracker:modified=1105
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_channels "nfo:channels" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::channels >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_channels "nfo:channels" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::channels >(object_info, strategy, parent); }
				/*!
					\fn void setChannelss(LiveNodes const &channels_)
					
					
					Sets the property \ref nfo_channels "nfo:channels" set to the given \a channels_ set.
					\sa LiveResource::setObjects
				 */
				void setChannelss(LiveNodes const &channels_) { baseSetObjects(nfo::channels::iri(), channels_); }
				/*!
					\fn void removeChannelss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_channels "nfo:channels" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeChannelss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::channels::iri(), object_info); }
				/*!
					\fn qint64 getChannels()
					
					
					Returns the property \ref nfo_channels "nfo:channels". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getChannels() { return baseGetObject< nfo::channels >(); }
				/*!
					\fn void setChannels(qint64 const &channels_)
					
					
					Sets the property \ref nfo_channels "nfo:channels" to the given \a channels.
					\sa LiveResource::setObject
				 */
				void setChannels(qint64 const &channels_) { baseSetObject< nfo::channels >( channels_ ); }
				/*!
					\fn qint64 firstChannels()
					
					
					Returns the first property \ref nfo_channels "nfo:channels". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstChannels() { return baseFirstObject< nfo::channels >(); }
				/*!
					\fn void addChannels(qint64 const &channels_)
					
					
					Adds the given \a channels_ to the property \ref nfo_channels "nfo:channels" set.
					\sa LiveResource::addObject
				 */
				void addChannels(qint64 const &channels_) { baseAddObject< nfo::channels >( channels_ ); }
				/*!
					\fn void removeChannels(qint64 const &channels_)
					
					
					Removes the given \a channels_ from the property \ref nfo_channels "nfo:channels" set.
					\sa LiveResource::removeObject
				 */
				void removeChannels(qint64 const &channels_) { baseRemoveObject< nfo::channels >(channels_); }

				/* Property generated from nfo:frontChannels
				 * \n Number of front channels.
				 * \n rdfs:label=frontChannels
				 * \n rdfs:subPropertyOf=nfo:channels
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Audio
				 * \n tracker:modified=1658
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFrontChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_frontChannels "nfo:frontChannels" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFrontChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::frontChannels >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFrontChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_frontChannels "nfo:frontChannels" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFrontChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::frontChannels >(object_info, strategy, parent); }
				/*!
					\fn void setFrontChannelss(LiveNodes const &frontChannels_)
					
					
					Sets the property \ref nfo_frontChannels "nfo:frontChannels" set to the given \a frontChannels_ set.
					\sa LiveResource::setObjects
				 */
				void setFrontChannelss(LiveNodes const &frontChannels_) { baseSetObjects(nfo::frontChannels::iri(), frontChannels_); }
				/*!
					\fn void removeFrontChannelss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_frontChannels "nfo:frontChannels" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFrontChannelss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::frontChannels::iri(), object_info); }
				/*!
					\fn qint64 getFrontChannels()
					
					
					Returns the property \ref nfo_frontChannels "nfo:frontChannels". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getFrontChannels() { return baseGetObject< nfo::frontChannels >(); }
				/*!
					\fn void setFrontChannels(qint64 const &frontChannels_)
					
					
					Sets the property \ref nfo_frontChannels "nfo:frontChannels" to the given \a frontChannels.
					\sa LiveResource::setObject
				 */
				void setFrontChannels(qint64 const &frontChannels_) { baseSetObject< nfo::frontChannels >( frontChannels_ ); }
				/*!
					\fn qint64 firstFrontChannels()
					
					
					Returns the first property \ref nfo_frontChannels "nfo:frontChannels". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstFrontChannels() { return baseFirstObject< nfo::frontChannels >(); }
				/*!
					\fn void addFrontChannels(qint64 const &frontChannels_)
					
					
					Adds the given \a frontChannels_ to the property \ref nfo_frontChannels "nfo:frontChannels" set.
					\sa LiveResource::addObject
				 */
				void addFrontChannels(qint64 const &frontChannels_) { baseAddObject< nfo::frontChannels >( frontChannels_ ); }
				/*!
					\fn void removeFrontChannels(qint64 const &frontChannels_)
					
					
					Removes the given \a frontChannels_ from the property \ref nfo_frontChannels "nfo:frontChannels" set.
					\sa LiveResource::removeObject
				 */
				void removeFrontChannels(qint64 const &frontChannels_) { baseRemoveObject< nfo::frontChannels >(frontChannels_); }

				/* Property generated from nfo:sideChannels
				 * \n Number of side channels
				 * \n rdfs:label=sideChannels
				 * \n rdfs:subPropertyOf=nfo:channels
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Audio
				 * \n tracker:modified=1233
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSideChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_sideChannels "nfo:sideChannels" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSideChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::sideChannels >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSideChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_sideChannels "nfo:sideChannels" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSideChannelss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::sideChannels >(object_info, strategy, parent); }
				/*!
					\fn void setSideChannelss(LiveNodes const &sideChannels_)
					
					
					Sets the property \ref nfo_sideChannels "nfo:sideChannels" set to the given \a sideChannels_ set.
					\sa LiveResource::setObjects
				 */
				void setSideChannelss(LiveNodes const &sideChannels_) { baseSetObjects(nfo::sideChannels::iri(), sideChannels_); }
				/*!
					\fn void removeSideChannelss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_sideChannels "nfo:sideChannels" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSideChannelss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::sideChannels::iri(), object_info); }
				/*!
					\fn qint64 getSideChannels()
					
					
					Returns the property \ref nfo_sideChannels "nfo:sideChannels". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getSideChannels() { return baseGetObject< nfo::sideChannels >(); }
				/*!
					\fn void setSideChannels(qint64 const &sideChannels_)
					
					
					Sets the property \ref nfo_sideChannels "nfo:sideChannels" to the given \a sideChannels.
					\sa LiveResource::setObject
				 */
				void setSideChannels(qint64 const &sideChannels_) { baseSetObject< nfo::sideChannels >( sideChannels_ ); }
				/*!
					\fn qint64 firstSideChannels()
					
					
					Returns the first property \ref nfo_sideChannels "nfo:sideChannels". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstSideChannels() { return baseFirstObject< nfo::sideChannels >(); }
				/*!
					\fn void addSideChannels(qint64 const &sideChannels_)
					
					
					Adds the given \a sideChannels_ to the property \ref nfo_sideChannels "nfo:sideChannels" set.
					\sa LiveResource::addObject
				 */
				void addSideChannels(qint64 const &sideChannels_) { baseAddObject< nfo::sideChannels >( sideChannels_ ); }
				/*!
					\fn void removeSideChannels(qint64 const &sideChannels_)
					
					
					Removes the given \a sideChannels_ from the property \ref nfo_sideChannels "nfo:sideChannels" set.
					\sa LiveResource::removeObject
				 */
				void removeSideChannels(qint64 const &sideChannels_) { baseRemoveObject< nfo::sideChannels >(sideChannels_); }

				/* Property generated from nfo:sampleCount
				 * \n The amount of samples in an audio clip.
				 * \n rdfs:label=sampleCount
				 * \n rdfs:subPropertyOf=nfo:count
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Audio
				 * \n tracker:modified=1797
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSampleCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_sampleCount "nfo:sampleCount" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSampleCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::sampleCount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSampleCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_sampleCount "nfo:sampleCount" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSampleCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::sampleCount >(object_info, strategy, parent); }
				/*!
					\fn void setSampleCounts(LiveNodes const &sampleCount_)
					
					
					Sets the property \ref nfo_sampleCount "nfo:sampleCount" set to the given \a sampleCount_ set.
					\sa LiveResource::setObjects
				 */
				void setSampleCounts(LiveNodes const &sampleCount_) { baseSetObjects(nfo::sampleCount::iri(), sampleCount_); }
				/*!
					\fn void removeSampleCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_sampleCount "nfo:sampleCount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSampleCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::sampleCount::iri(), object_info); }
				/*!
					\fn qint64 getSampleCount()
					
					
					Returns the property \ref nfo_sampleCount "nfo:sampleCount". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getSampleCount() { return baseGetObject< nfo::sampleCount >(); }
				/*!
					\fn void setSampleCount(qint64 const &sampleCount_)
					
					
					Sets the property \ref nfo_sampleCount "nfo:sampleCount" to the given \a sampleCount.
					\sa LiveResource::setObject
				 */
				void setSampleCount(qint64 const &sampleCount_) { baseSetObject< nfo::sampleCount >( sampleCount_ ); }
				/*!
					\fn qint64 firstSampleCount()
					
					
					Returns the first property \ref nfo_sampleCount "nfo:sampleCount". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstSampleCount() { return baseFirstObject< nfo::sampleCount >(); }
				/*!
					\fn void addSampleCount(qint64 const &sampleCount_)
					
					
					Adds the given \a sampleCount_ to the property \ref nfo_sampleCount "nfo:sampleCount" set.
					\sa LiveResource::addObject
				 */
				void addSampleCount(qint64 const &sampleCount_) { baseAddObject< nfo::sampleCount >( sampleCount_ ); }
				/*!
					\fn void removeSampleCount(qint64 const &sampleCount_)
					
					
					Removes the given \a sampleCount_ from the property \ref nfo_sampleCount "nfo:sampleCount" set.
					\sa LiveResource::removeObject
				 */
				void removeSampleCount(qint64 const &sampleCount_) { baseRemoveObject< nfo::sampleCount >(sampleCount_); }
				 //@}
			};

			/*! Class generated from nfo:Bookmark
			 * \ingroup onto_nfo_classes
			 * A bookmark of a webbrowser. Use nie:title for the name/label, nie:contentCreated to represent the date when the user added the bookmark, and nie:contentLastModified for modifications. nfo:bookmarks to store the link.
			 * 
			 * rdfs:label = Bookmark
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1550
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nfo_containsBookmark "nfo:containsBookmark"
			 */
			class Bookmark
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Bookmark> Live;
				Bookmark() { this->attachInterfaceHelper< Bookmark >(); }
				~Bookmark() { this->detachInterfaceHelper< Bookmark >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from maemo:bookmarkThumbnail
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1022
				 * \n rdfs:domain=nfo:Bookmark
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMaemoBookmarkThumbnails(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref maemo_bookmarkThumbnail "maemo:bookmarkThumbnail" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMaemoBookmarkThumbnails(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< maemo::bookmarkThumbnail >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMaemoBookmarkThumbnails(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref maemo_bookmarkThumbnail "maemo:bookmarkThumbnail" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMaemoBookmarkThumbnails(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< maemo::bookmarkThumbnail >(object_info, strategy, parent); }
				/*!
					\fn void setMaemoBookmarkThumbnails(LiveNodes const &maemoBookmarkThumbnail_)
					
					
					Sets the property \ref maemo_bookmarkThumbnail "maemo:bookmarkThumbnail" set to the given \a maemoBookmarkThumbnail_ set.
					\sa LiveResource::setObjects
				 */
				void setMaemoBookmarkThumbnails(LiveNodes const &maemoBookmarkThumbnail_) { baseSetObjects(maemo::bookmarkThumbnail::iri(), maemoBookmarkThumbnail_); }
				/*!
					\fn void removeMaemoBookmarkThumbnails(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref maemo_bookmarkThumbnail "maemo:bookmarkThumbnail" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMaemoBookmarkThumbnails(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(maemo::bookmarkThumbnail::iri(), object_info); }
				/*!
					\fn QString firstMaemoBookmarkThumbnail()
					
					
					Returns the first property \ref maemo_bookmarkThumbnail "maemo:bookmarkThumbnail". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMaemoBookmarkThumbnail() { return baseFirstObject< maemo::bookmarkThumbnail >(); }
				/*!
					\fn void addMaemoBookmarkThumbnail(QString const &maemoBookmarkThumbnail_)
					
					
					Adds the given \a maemoBookmarkThumbnail_ to the property \ref maemo_bookmarkThumbnail "maemo:bookmarkThumbnail" set.
					\sa LiveResource::addObject
				 */
				void addMaemoBookmarkThumbnail(QString const &maemoBookmarkThumbnail_) { baseAddObject< maemo::bookmarkThumbnail >( maemoBookmarkThumbnail_ ); }
				/*!
					\fn void removeMaemoBookmarkThumbnail(QString const &maemoBookmarkThumbnail_)
					
					
					Removes the given \a maemoBookmarkThumbnail_ from the property \ref maemo_bookmarkThumbnail "maemo:bookmarkThumbnail" set.
					\sa LiveResource::removeObject
				 */
				void removeMaemoBookmarkThumbnail(QString const &maemoBookmarkThumbnail_) { baseRemoveObject< maemo::bookmarkThumbnail >(maemoBookmarkThumbnail_); }

				/* Property generated from nfo:pageNumber
				 * \n rdfs:label=Page number
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Bookmark
				 * \n tracker:modified=1008
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePageNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_pageNumber "nfo:pageNumber" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePageNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::pageNumber >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPageNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_pageNumber "nfo:pageNumber" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPageNumbers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::pageNumber >(object_info, strategy, parent); }
				/*!
					\fn void setPageNumbers(LiveNodes const &pageNumber_)
					
					
					Sets the property \ref nfo_pageNumber "nfo:pageNumber" set to the given \a pageNumber_ set.
					\sa LiveResource::setObjects
				 */
				void setPageNumbers(LiveNodes const &pageNumber_) { baseSetObjects(nfo::pageNumber::iri(), pageNumber_); }
				/*!
					\fn void removePageNumbers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_pageNumber "nfo:pageNumber" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePageNumbers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::pageNumber::iri(), object_info); }
				/*!
					\fn qint64 getPageNumber()
					
					
					Returns the property \ref nfo_pageNumber "nfo:pageNumber". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getPageNumber() { return baseGetObject< nfo::pageNumber >(); }
				/*!
					\fn void setPageNumber(qint64 const &pageNumber_)
					
					
					Sets the property \ref nfo_pageNumber "nfo:pageNumber" to the given \a pageNumber.
					\sa LiveResource::setObject
				 */
				void setPageNumber(qint64 const &pageNumber_) { baseSetObject< nfo::pageNumber >( pageNumber_ ); }
				/*!
					\fn qint64 firstPageNumber()
					
					
					Returns the first property \ref nfo_pageNumber "nfo:pageNumber". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstPageNumber() { return baseFirstObject< nfo::pageNumber >(); }
				/*!
					\fn void addPageNumber(qint64 const &pageNumber_)
					
					
					Adds the given \a pageNumber_ to the property \ref nfo_pageNumber "nfo:pageNumber" set.
					\sa LiveResource::addObject
				 */
				void addPageNumber(qint64 const &pageNumber_) { baseAddObject< nfo::pageNumber >( pageNumber_ ); }
				/*!
					\fn void removePageNumber(qint64 const &pageNumber_)
					
					
					Removes the given \a pageNumber_ from the property \ref nfo_pageNumber "nfo:pageNumber" set.
					\sa LiveResource::removeObject
				 */
				void removePageNumber(qint64 const &pageNumber_) { baseRemoveObject< nfo::pageNumber >(pageNumber_); }

				/* Property generated from nfo:characterPosition
				 * \n rdfs:label=Character position
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Bookmark
				 * \n tracker:modified=1706
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCharacterPositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_characterPosition "nfo:characterPosition" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCharacterPositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::characterPosition >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCharacterPositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_characterPosition "nfo:characterPosition" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCharacterPositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::characterPosition >(object_info, strategy, parent); }
				/*!
					\fn void setCharacterPositions(LiveNodes const &characterPosition_)
					
					
					Sets the property \ref nfo_characterPosition "nfo:characterPosition" set to the given \a characterPosition_ set.
					\sa LiveResource::setObjects
				 */
				void setCharacterPositions(LiveNodes const &characterPosition_) { baseSetObjects(nfo::characterPosition::iri(), characterPosition_); }
				/*!
					\fn void removeCharacterPositions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_characterPosition "nfo:characterPosition" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCharacterPositions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::characterPosition::iri(), object_info); }
				/*!
					\fn qint64 getCharacterPosition()
					
					
					Returns the property \ref nfo_characterPosition "nfo:characterPosition". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getCharacterPosition() { return baseGetObject< nfo::characterPosition >(); }
				/*!
					\fn void setCharacterPosition(qint64 const &characterPosition_)
					
					
					Sets the property \ref nfo_characterPosition "nfo:characterPosition" to the given \a characterPosition.
					\sa LiveResource::setObject
				 */
				void setCharacterPosition(qint64 const &characterPosition_) { baseSetObject< nfo::characterPosition >( characterPosition_ ); }
				/*!
					\fn qint64 firstCharacterPosition()
					
					
					Returns the first property \ref nfo_characterPosition "nfo:characterPosition". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstCharacterPosition() { return baseFirstObject< nfo::characterPosition >(); }
				/*!
					\fn void addCharacterPosition(qint64 const &characterPosition_)
					
					
					Adds the given \a characterPosition_ to the property \ref nfo_characterPosition "nfo:characterPosition" set.
					\sa LiveResource::addObject
				 */
				void addCharacterPosition(qint64 const &characterPosition_) { baseAddObject< nfo::characterPosition >( characterPosition_ ); }
				/*!
					\fn void removeCharacterPosition(qint64 const &characterPosition_)
					
					
					Removes the given \a characterPosition_ from the property \ref nfo_characterPosition "nfo:characterPosition" set.
					\sa LiveResource::removeObject
				 */
				void removeCharacterPosition(qint64 const &characterPosition_) { baseRemoveObject< nfo::characterPosition >(characterPosition_); }

				/* Property generated from nfo:bookmarks
				 * \n The address of the linked object. Usually a web URI.
				 * \n rdfs:label=link
				 * \n rdfs:subPropertyOf=nie:links
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nie:DataObject
				 * \n rdfs:domain=nfo:Bookmark
				 * \n tracker:modified=1734
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nie::DataObject DataObject;
				/*!
					\fn LiveNodes liveBookmarkss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_bookmarks "nfo:bookmarks" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveBookmarkss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::bookmarks >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getBookmarkss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_bookmarks "nfo:bookmarks" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getBookmarkss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::bookmarks >(object_info, strategy, parent); }
				/*!
					\fn void setBookmarkss(LiveNodes const &bookmarks_)
					
					
					Sets the property \ref nfo_bookmarks "nfo:bookmarks" set to the given \a bookmarks_ set.
					\sa LiveResource::setObjects
				 */
				void setBookmarkss(LiveNodes const &bookmarks_) { baseSetObjects(nfo::bookmarks::iri(), bookmarks_); }
				/*!
					\fn void removeBookmarkss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_bookmarks "nfo:bookmarks" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeBookmarkss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::bookmarks::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > getBookmarks()
					
					
					Returns the property \ref nfo_bookmarks "nfo:bookmarks". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nie::DataObject > getBookmarks() { return baseGetObject< nfo::bookmarks >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > setBookmarks(::SopranoLive::Live< nie::DataObject > const &bookmarks_)
					
					
					Sets the property \ref nfo_bookmarks "nfo:bookmarks" to the given \a bookmarks.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nie::DataObject > setBookmarks(::SopranoLive::Live< nie::DataObject > const &bookmarks_) { return baseSetObject< nfo::bookmarks >( bookmarks_ ); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > firstBookmarks()
					
					
					Returns the first property \ref nfo_bookmarks "nfo:bookmarks". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nie::DataObject > firstBookmarks() { return baseFirstObject< nfo::bookmarks >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addBookmarks()
					
					
					Adds a new uniquely named resource to the property \ref nfo_bookmarks "nfo:bookmarks" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addBookmarks() { return baseAddObject< nfo::bookmarks >(); }
				/*!
					\fn ::SopranoLive::Live< nie::DataObject > addBookmarks(::SopranoLive::Live< nie::DataObject > const &bookmarks_)
					
					
					Adds the given \a bookmarks_ to the property \ref nfo_bookmarks "nfo:bookmarks" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::DataObject > addBookmarks(::SopranoLive::Live< nie::DataObject > const &bookmarks_) { return baseAddObject< nfo::bookmarks >( bookmarks_ ); }
				/*!
					\fn void removeBookmarks(::SopranoLive::Live< nie::DataObject > const &bookmarks_)
					
					
					Removes the given \a bookmarks_ from the property \ref nfo_bookmarks "nfo:bookmarks" set.
					\sa LiveResource::removeObject
				 */
				void removeBookmarks(::SopranoLive::Live< nie::DataObject > const &bookmarks_) { baseRemoveObject< nfo::bookmarks >(bookmarks_); }

				/* Property generated from nfo:streamDuration
				 * \n rdfs:label=Stream duration
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Bookmark
				 * \n tracker:modified=1979
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveStreamDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_streamDuration "nfo:streamDuration" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStreamDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::streamDuration >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStreamDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_streamDuration "nfo:streamDuration" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStreamDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::streamDuration >(object_info, strategy, parent); }
				/*!
					\fn void setStreamDurations(LiveNodes const &streamDuration_)
					
					
					Sets the property \ref nfo_streamDuration "nfo:streamDuration" set to the given \a streamDuration_ set.
					\sa LiveResource::setObjects
				 */
				void setStreamDurations(LiveNodes const &streamDuration_) { baseSetObjects(nfo::streamDuration::iri(), streamDuration_); }
				/*!
					\fn void removeStreamDurations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_streamDuration "nfo:streamDuration" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStreamDurations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::streamDuration::iri(), object_info); }
				/*!
					\fn qint64 getStreamDuration()
					
					
					Returns the property \ref nfo_streamDuration "nfo:streamDuration". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getStreamDuration() { return baseGetObject< nfo::streamDuration >(); }
				/*!
					\fn void setStreamDuration(qint64 const &streamDuration_)
					
					
					Sets the property \ref nfo_streamDuration "nfo:streamDuration" to the given \a streamDuration.
					\sa LiveResource::setObject
				 */
				void setStreamDuration(qint64 const &streamDuration_) { baseSetObject< nfo::streamDuration >( streamDuration_ ); }
				/*!
					\fn qint64 firstStreamDuration()
					
					
					Returns the first property \ref nfo_streamDuration "nfo:streamDuration". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstStreamDuration() { return baseFirstObject< nfo::streamDuration >(); }
				/*!
					\fn void addStreamDuration(qint64 const &streamDuration_)
					
					
					Adds the given \a streamDuration_ to the property \ref nfo_streamDuration "nfo:streamDuration" set.
					\sa LiveResource::addObject
				 */
				void addStreamDuration(qint64 const &streamDuration_) { baseAddObject< nfo::streamDuration >( streamDuration_ ); }
				/*!
					\fn void removeStreamDuration(qint64 const &streamDuration_)
					
					
					Removes the given \a streamDuration_ from the property \ref nfo_streamDuration "nfo:streamDuration" set.
					\sa LiveResource::removeObject
				 */
				void removeStreamDuration(qint64 const &streamDuration_) { baseRemoveObject< nfo::streamDuration >(streamDuration_); }

				/* Property generated from nfo:streamPosition
				 * \n rdfs:label=Stream position
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Bookmark
				 * \n tracker:modified=1711
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveStreamPositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_streamPosition "nfo:streamPosition" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveStreamPositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::streamPosition >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getStreamPositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_streamPosition "nfo:streamPosition" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getStreamPositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::streamPosition >(object_info, strategy, parent); }
				/*!
					\fn void setStreamPositions(LiveNodes const &streamPosition_)
					
					
					Sets the property \ref nfo_streamPosition "nfo:streamPosition" set to the given \a streamPosition_ set.
					\sa LiveResource::setObjects
				 */
				void setStreamPositions(LiveNodes const &streamPosition_) { baseSetObjects(nfo::streamPosition::iri(), streamPosition_); }
				/*!
					\fn void removeStreamPositions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_streamPosition "nfo:streamPosition" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeStreamPositions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::streamPosition::iri(), object_info); }
				/*!
					\fn qint64 getStreamPosition()
					
					
					Returns the property \ref nfo_streamPosition "nfo:streamPosition". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getStreamPosition() { return baseGetObject< nfo::streamPosition >(); }
				/*!
					\fn void setStreamPosition(qint64 const &streamPosition_)
					
					
					Sets the property \ref nfo_streamPosition "nfo:streamPosition" to the given \a streamPosition.
					\sa LiveResource::setObject
				 */
				void setStreamPosition(qint64 const &streamPosition_) { baseSetObject< nfo::streamPosition >( streamPosition_ ); }
				/*!
					\fn qint64 firstStreamPosition()
					
					
					Returns the first property \ref nfo_streamPosition "nfo:streamPosition". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstStreamPosition() { return baseFirstObject< nfo::streamPosition >(); }
				/*!
					\fn void addStreamPosition(qint64 const &streamPosition_)
					
					
					Adds the given \a streamPosition_ to the property \ref nfo_streamPosition "nfo:streamPosition" set.
					\sa LiveResource::addObject
				 */
				void addStreamPosition(qint64 const &streamPosition_) { baseAddObject< nfo::streamPosition >( streamPosition_ ); }
				/*!
					\fn void removeStreamPosition(qint64 const &streamPosition_)
					
					
					Removes the given \a streamPosition_ from the property \ref nfo_streamPosition "nfo:streamPosition" set.
					\sa LiveResource::removeObject
				 */
				void removeStreamPosition(qint64 const &streamPosition_) { baseRemoveObject< nfo::streamPosition >(streamPosition_); }
				 //@}
			};

			/*! Class generated from nfo:BookmarkFolder
			 * \ingroup onto_nfo_classes
			 * A folder with bookmarks of a webbrowser. Use nfo:containsBookmark to relate Bookmarks. Folders can contain subfolders, use containsBookmarkFolder to relate them.
			 * 
			 * rdfs:label = Bookmark Folder
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1144
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nfo_containsBookmarkFolder "nfo:containsBookmarkFolder"
			 */
			class BookmarkFolder
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#BookmarkFolder"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<BookmarkFolder> Live;
				BookmarkFolder() { this->attachInterfaceHelper< BookmarkFolder >(); }
				~BookmarkFolder() { this->detachInterfaceHelper< BookmarkFolder >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:containsBookmark
				 * \n The folder contains a bookmark.
				 * \n rdfs:label=contains bookmark
				 * \n rdfs:subPropertyOf=nie:hasLogicalPart
				 * \n rdfs:range=nfo:Bookmark
				 * \n rdfs:domain=nfo:BookmarkFolder
				 * \n tracker:modified=1822
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContainsBookmarks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_containsBookmark "nfo:containsBookmark" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContainsBookmarks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::containsBookmark >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContainsBookmarks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_containsBookmark "nfo:containsBookmark" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContainsBookmarks(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::containsBookmark >(object_info, strategy, parent); }
				/*!
					\fn void setContainsBookmarks(LiveNodes const &containsBookmark_)
					
					
					Sets the property \ref nfo_containsBookmark "nfo:containsBookmark" set to the given \a containsBookmark_ set.
					\sa LiveResource::setObjects
				 */
				void setContainsBookmarks(LiveNodes const &containsBookmark_) { baseSetObjects(nfo::containsBookmark::iri(), containsBookmark_); }
				/*!
					\fn void removeContainsBookmarks(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_containsBookmark "nfo:containsBookmark" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContainsBookmarks(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::containsBookmark::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Bookmark > firstContainsBookmark()
					
					
					Returns the first property \ref nfo_containsBookmark "nfo:containsBookmark". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Bookmark > firstContainsBookmark() { return baseFirstObject< nfo::containsBookmark >(); }
				/*!
					\fn ::SopranoLive::Live< Bookmark > addContainsBookmark()
					
					
					Adds a new uniquely named resource to the property \ref nfo_containsBookmark "nfo:containsBookmark" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Bookmark > addContainsBookmark() { return baseAddObject< nfo::containsBookmark >(); }
				/*!
					\fn ::SopranoLive::Live< Bookmark > addContainsBookmark(::SopranoLive::Live< Bookmark > const &containsBookmark_)
					
					
					Adds the given \a containsBookmark_ to the property \ref nfo_containsBookmark "nfo:containsBookmark" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Bookmark > addContainsBookmark(::SopranoLive::Live< Bookmark > const &containsBookmark_) { return baseAddObject< nfo::containsBookmark >( containsBookmark_ ); }
				/*!
					\fn void removeContainsBookmark(::SopranoLive::Live< Bookmark > const &containsBookmark_)
					
					
					Removes the given \a containsBookmark_ from the property \ref nfo_containsBookmark "nfo:containsBookmark" set.
					\sa LiveResource::removeObject
				 */
				void removeContainsBookmark(::SopranoLive::Live< Bookmark > const &containsBookmark_) { baseRemoveObject< nfo::containsBookmark >(containsBookmark_); }

				/* Property generated from nfo:containsBookmarkFolder
				 * \n The folder contains a bookmark folder.
				 * \n rdfs:label=contains folder
				 * \n rdfs:subPropertyOf=nie:hasLogicalPart
				 * \n rdfs:range=nfo:BookmarkFolder
				 * \n rdfs:domain=nfo:BookmarkFolder
				 * \n tracker:modified=1081
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveContainsBookmarkFolders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_containsBookmarkFolder "nfo:containsBookmarkFolder" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveContainsBookmarkFolders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::containsBookmarkFolder >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getContainsBookmarkFolders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_containsBookmarkFolder "nfo:containsBookmarkFolder" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getContainsBookmarkFolders(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::containsBookmarkFolder >(object_info, strategy, parent); }
				/*!
					\fn void setContainsBookmarkFolders(LiveNodes const &containsBookmarkFolder_)
					
					
					Sets the property \ref nfo_containsBookmarkFolder "nfo:containsBookmarkFolder" set to the given \a containsBookmarkFolder_ set.
					\sa LiveResource::setObjects
				 */
				void setContainsBookmarkFolders(LiveNodes const &containsBookmarkFolder_) { baseSetObjects(nfo::containsBookmarkFolder::iri(), containsBookmarkFolder_); }
				/*!
					\fn void removeContainsBookmarkFolders(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_containsBookmarkFolder "nfo:containsBookmarkFolder" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeContainsBookmarkFolders(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::containsBookmarkFolder::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< BookmarkFolder > firstContainsBookmarkFolder()
					
					
					Returns the first property \ref nfo_containsBookmarkFolder "nfo:containsBookmarkFolder". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< BookmarkFolder > firstContainsBookmarkFolder() { return baseFirstObject< nfo::containsBookmarkFolder >(); }
				/*!
					\fn ::SopranoLive::Live< BookmarkFolder > addContainsBookmarkFolder()
					
					
					Adds a new uniquely named resource to the property \ref nfo_containsBookmarkFolder "nfo:containsBookmarkFolder" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< BookmarkFolder > addContainsBookmarkFolder() { return baseAddObject< nfo::containsBookmarkFolder >(); }
				/*!
					\fn ::SopranoLive::Live< BookmarkFolder > addContainsBookmarkFolder(::SopranoLive::Live< BookmarkFolder > const &containsBookmarkFolder_)
					
					
					Adds the given \a containsBookmarkFolder_ to the property \ref nfo_containsBookmarkFolder "nfo:containsBookmarkFolder" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< BookmarkFolder > addContainsBookmarkFolder(::SopranoLive::Live< BookmarkFolder > const &containsBookmarkFolder_) { return baseAddObject< nfo::containsBookmarkFolder >( containsBookmarkFolder_ ); }
				/*!
					\fn void removeContainsBookmarkFolder(::SopranoLive::Live< BookmarkFolder > const &containsBookmarkFolder_)
					
					
					Removes the given \a containsBookmarkFolder_ from the property \ref nfo_containsBookmarkFolder "nfo:containsBookmarkFolder" set.
					\sa LiveResource::removeObject
				 */
				void removeContainsBookmarkFolder(::SopranoLive::Live< BookmarkFolder > const &containsBookmarkFolder_) { baseRemoveObject< nfo::containsBookmarkFolder >(containsBookmarkFolder_); }
				 //@}
			};

			/*! Class generated from nfo:CompressionType
			 * \ingroup onto_nfo_classes
			 * Type of compression. Instances of this class represent the limited set of values allowed for the nfo:compressionType property.
			 * 
			 * rdfs:label = CompressionType
			 * 
			 * tracker:modified = 1516
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nfo_compressionType "nfo:compressionType"
			 */
			class CompressionType
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#CompressionType"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<CompressionType> Live;
				CompressionType() { this->attachInterfaceHelper< CompressionType >(); }
				~CompressionType() { this->detachInterfaceHelper< CompressionType >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:Visual
			 * \ingroup onto_nfo_classes
			 * File containing visual content.
			 * 
			 * rdfs:label = Visual
			 * 
			 * tracker:modified = 1745
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Visual
				: public virtual Media

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Visual"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Media, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Visual> Live;
				Visual() { this->attachInterfaceHelper< Visual >(); }
				~Visual() { this->detachInterfaceHelper< Visual >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:colorDepth
				 * \n Amount of bits used to express the color of each pixel.
				 * \n rdfs:label=colorDepth
				 * \n rdfs:subPropertyOf=nfo:bitDepth
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Visual
				 * \n tracker:modified=1472
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveColorDepths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_colorDepth "nfo:colorDepth" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveColorDepths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::colorDepth >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getColorDepths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_colorDepth "nfo:colorDepth" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getColorDepths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::colorDepth >(object_info, strategy, parent); }
				/*!
					\fn void setColorDepths(LiveNodes const &colorDepth_)
					
					
					Sets the property \ref nfo_colorDepth "nfo:colorDepth" set to the given \a colorDepth_ set.
					\sa LiveResource::setObjects
				 */
				void setColorDepths(LiveNodes const &colorDepth_) { baseSetObjects(nfo::colorDepth::iri(), colorDepth_); }
				/*!
					\fn void removeColorDepths(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_colorDepth "nfo:colorDepth" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeColorDepths(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::colorDepth::iri(), object_info); }
				/*!
					\fn qint64 getColorDepth()
					
					
					Returns the property \ref nfo_colorDepth "nfo:colorDepth". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getColorDepth() { return baseGetObject< nfo::colorDepth >(); }
				/*!
					\fn void setColorDepth(qint64 const &colorDepth_)
					
					
					Sets the property \ref nfo_colorDepth "nfo:colorDepth" to the given \a colorDepth.
					\sa LiveResource::setObject
				 */
				void setColorDepth(qint64 const &colorDepth_) { baseSetObject< nfo::colorDepth >( colorDepth_ ); }
				/*!
					\fn qint64 firstColorDepth()
					
					
					Returns the first property \ref nfo_colorDepth "nfo:colorDepth". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstColorDepth() { return baseFirstObject< nfo::colorDepth >(); }
				/*!
					\fn void addColorDepth(qint64 const &colorDepth_)
					
					
					Adds the given \a colorDepth_ to the property \ref nfo_colorDepth "nfo:colorDepth" set.
					\sa LiveResource::addObject
				 */
				void addColorDepth(qint64 const &colorDepth_) { baseAddObject< nfo::colorDepth >( colorDepth_ ); }
				/*!
					\fn void removeColorDepth(qint64 const &colorDepth_)
					
					
					Removes the given \a colorDepth_ from the property \ref nfo_colorDepth "nfo:colorDepth" set.
					\sa LiveResource::removeObject
				 */
				void removeColorDepth(qint64 const &colorDepth_) { baseRemoveObject< nfo::colorDepth >(colorDepth_); }

				/* Property generated from nfo:tilt
				 * \n Vertical inclination of the camera while capturing the image, in angles starting on 0 as horizontal, positive numbers pointing up, negative angles pointing down
				 * \n rdfs:label=Tilt
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nfo:Visual
				 * \n tracker:modified=1374
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTilts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_tilt "nfo:tilt" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTilts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::tilt >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTilts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_tilt "nfo:tilt" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTilts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::tilt >(object_info, strategy, parent); }
				/*!
					\fn void setTilts(LiveNodes const &tilt_)
					
					
					Sets the property \ref nfo_tilt "nfo:tilt" set to the given \a tilt_ set.
					\sa LiveResource::setObjects
				 */
				void setTilts(LiveNodes const &tilt_) { baseSetObjects(nfo::tilt::iri(), tilt_); }
				/*!
					\fn void removeTilts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_tilt "nfo:tilt" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTilts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::tilt::iri(), object_info); }
				/*!
					\fn double getTilt()
					
					
					Returns the property \ref nfo_tilt "nfo:tilt". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getTilt() { return baseGetObject< nfo::tilt >(); }
				/*!
					\fn void setTilt(double const &tilt_)
					
					
					Sets the property \ref nfo_tilt "nfo:tilt" to the given \a tilt.
					\sa LiveResource::setObject
				 */
				void setTilt(double const &tilt_) { baseSetObject< nfo::tilt >( tilt_ ); }
				/*!
					\fn double firstTilt()
					
					
					Returns the first property \ref nfo_tilt "nfo:tilt". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstTilt() { return baseFirstObject< nfo::tilt >(); }
				/*!
					\fn void addTilt(double const &tilt_)
					
					
					Adds the given \a tilt_ to the property \ref nfo_tilt "nfo:tilt" set.
					\sa LiveResource::addObject
				 */
				void addTilt(double const &tilt_) { baseAddObject< nfo::tilt >( tilt_ ); }
				/*!
					\fn void removeTilt(double const &tilt_)
					
					
					Removes the given \a tilt_ from the property \ref nfo_tilt "nfo:tilt" set.
					\sa LiveResource::removeObject
				 */
				void removeTilt(double const &tilt_) { baseRemoveObject< nfo::tilt >(tilt_); }

				/* Property generated from nfo:interlaceMode
				 * \n True if the image is interlaced, false if not.
				 * \n rdfs:label=interlaceMode
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:boolean
				 * \n rdfs:domain=nfo:Visual
				 * \n tracker:modified=1895
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveInterlaceModes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_interlaceMode "nfo:interlaceMode" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveInterlaceModes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::interlaceMode >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getInterlaceModes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_interlaceMode "nfo:interlaceMode" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getInterlaceModes(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::interlaceMode >(object_info, strategy, parent); }
				/*!
					\fn void setInterlaceModes(LiveNodes const &interlaceMode_)
					
					
					Sets the property \ref nfo_interlaceMode "nfo:interlaceMode" set to the given \a interlaceMode_ set.
					\sa LiveResource::setObjects
				 */
				void setInterlaceModes(LiveNodes const &interlaceMode_) { baseSetObjects(nfo::interlaceMode::iri(), interlaceMode_); }
				/*!
					\fn void removeInterlaceModes(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_interlaceMode "nfo:interlaceMode" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeInterlaceModes(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::interlaceMode::iri(), object_info); }
				/*!
					\fn bool getInterlaceMode()
					
					
					Returns the property \ref nfo_interlaceMode "nfo:interlaceMode". If the property didn't exist, it is set to a default initialized value of type bool and returned.
					\sa LiveResource::getObject
				 */
				bool getInterlaceMode() { return baseGetObject< nfo::interlaceMode >(); }
				/*!
					\fn void setInterlaceMode(bool const &interlaceMode_)
					
					
					Sets the property \ref nfo_interlaceMode "nfo:interlaceMode" to the given \a interlaceMode.
					\sa LiveResource::setObject
				 */
				void setInterlaceMode(bool const &interlaceMode_) { baseSetObject< nfo::interlaceMode >( interlaceMode_ ); }
				/*!
					\fn bool firstInterlaceMode()
					
					
					Returns the first property \ref nfo_interlaceMode "nfo:interlaceMode". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				bool firstInterlaceMode() { return baseFirstObject< nfo::interlaceMode >(); }
				/*!
					\fn void addInterlaceMode(bool const &interlaceMode_)
					
					
					Adds the given \a interlaceMode_ to the property \ref nfo_interlaceMode "nfo:interlaceMode" set.
					\sa LiveResource::addObject
				 */
				void addInterlaceMode(bool const &interlaceMode_) { baseAddObject< nfo::interlaceMode >( interlaceMode_ ); }
				/*!
					\fn void removeInterlaceMode(bool const &interlaceMode_)
					
					
					Removes the given \a interlaceMode_ from the property \ref nfo_interlaceMode "nfo:interlaceMode" set.
					\sa LiveResource::removeObject
				 */
				void removeInterlaceMode(bool const &interlaceMode_) { baseRemoveObject< nfo::interlaceMode >(interlaceMode_); }

				/* Property generated from nfo:height
				 * \n Visual content height in pixels.
				 * \n rdfs:label=height
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Visual
				 * \n tracker:modified=1810
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHeights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_height "nfo:height" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHeights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::height >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHeights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_height "nfo:height" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHeights(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::height >(object_info, strategy, parent); }
				/*!
					\fn void setHeights(LiveNodes const &height_)
					
					
					Sets the property \ref nfo_height "nfo:height" set to the given \a height_ set.
					\sa LiveResource::setObjects
				 */
				void setHeights(LiveNodes const &height_) { baseSetObjects(nfo::height::iri(), height_); }
				/*!
					\fn void removeHeights(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_height "nfo:height" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHeights(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::height::iri(), object_info); }
				/*!
					\fn qint64 getHeight()
					
					
					Returns the property \ref nfo_height "nfo:height". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getHeight() { return baseGetObject< nfo::height >(); }
				/*!
					\fn void setHeight(qint64 const &height_)
					
					
					Sets the property \ref nfo_height "nfo:height" to the given \a height.
					\sa LiveResource::setObject
				 */
				void setHeight(qint64 const &height_) { baseSetObject< nfo::height >( height_ ); }
				/*!
					\fn qint64 firstHeight()
					
					
					Returns the first property \ref nfo_height "nfo:height". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstHeight() { return baseFirstObject< nfo::height >(); }
				/*!
					\fn void addHeight(qint64 const &height_)
					
					
					Adds the given \a height_ to the property \ref nfo_height "nfo:height" set.
					\sa LiveResource::addObject
				 */
				void addHeight(qint64 const &height_) { baseAddObject< nfo::height >( height_ ); }
				/*!
					\fn void removeHeight(qint64 const &height_)
					
					
					Removes the given \a height_ from the property \ref nfo_height "nfo:height" set.
					\sa LiveResource::removeObject
				 */
				void removeHeight(qint64 const &height_) { baseRemoveObject< nfo::height >(height_); }

				/* Property generated from nfo:aspectRatio
				 * \n Visual content aspect ratio. (Width divided by Height)
				 * \n rdfs:label=aspectRatio
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nfo:Visual
				 * \n tracker:modified=1393
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAspectRatios(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_aspectRatio "nfo:aspectRatio" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAspectRatios(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::aspectRatio >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAspectRatios(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_aspectRatio "nfo:aspectRatio" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAspectRatios(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::aspectRatio >(object_info, strategy, parent); }
				/*!
					\fn void setAspectRatios(LiveNodes const &aspectRatio_)
					
					
					Sets the property \ref nfo_aspectRatio "nfo:aspectRatio" set to the given \a aspectRatio_ set.
					\sa LiveResource::setObjects
				 */
				void setAspectRatios(LiveNodes const &aspectRatio_) { baseSetObjects(nfo::aspectRatio::iri(), aspectRatio_); }
				/*!
					\fn void removeAspectRatios(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_aspectRatio "nfo:aspectRatio" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAspectRatios(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::aspectRatio::iri(), object_info); }
				/*!
					\fn double getAspectRatio()
					
					
					Returns the property \ref nfo_aspectRatio "nfo:aspectRatio". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getAspectRatio() { return baseGetObject< nfo::aspectRatio >(); }
				/*!
					\fn void setAspectRatio(double const &aspectRatio_)
					
					
					Sets the property \ref nfo_aspectRatio "nfo:aspectRatio" to the given \a aspectRatio.
					\sa LiveResource::setObject
				 */
				void setAspectRatio(double const &aspectRatio_) { baseSetObject< nfo::aspectRatio >( aspectRatio_ ); }
				/*!
					\fn double firstAspectRatio()
					
					
					Returns the first property \ref nfo_aspectRatio "nfo:aspectRatio". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstAspectRatio() { return baseFirstObject< nfo::aspectRatio >(); }
				/*!
					\fn void addAspectRatio(double const &aspectRatio_)
					
					
					Adds the given \a aspectRatio_ to the property \ref nfo_aspectRatio "nfo:aspectRatio" set.
					\sa LiveResource::addObject
				 */
				void addAspectRatio(double const &aspectRatio_) { baseAddObject< nfo::aspectRatio >( aspectRatio_ ); }
				/*!
					\fn void removeAspectRatio(double const &aspectRatio_)
					
					
					Removes the given \a aspectRatio_ from the property \ref nfo_aspectRatio "nfo:aspectRatio" set.
					\sa LiveResource::removeObject
				 */
				void removeAspectRatio(double const &aspectRatio_) { baseRemoveObject< nfo::aspectRatio >(aspectRatio_); }

				/* Property generated from nfo:heading
				 * \n Specifies the direction of travelling while capturing image/video. The range of values from 0.00 to 359.99 (where 0 is due North, 90 is East, 180 South and 270 is West)
				 * \n rdfs:label=Heading
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nfo:Visual
				 * \n tracker:modified=1505
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHeadings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_heading "nfo:heading" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHeadings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::heading >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHeadings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_heading "nfo:heading" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHeadings(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::heading >(object_info, strategy, parent); }
				/*!
					\fn void setHeadings(LiveNodes const &heading_)
					
					
					Sets the property \ref nfo_heading "nfo:heading" set to the given \a heading_ set.
					\sa LiveResource::setObjects
				 */
				void setHeadings(LiveNodes const &heading_) { baseSetObjects(nfo::heading::iri(), heading_); }
				/*!
					\fn void removeHeadings(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_heading "nfo:heading" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHeadings(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::heading::iri(), object_info); }
				/*!
					\fn double getHeading()
					
					
					Returns the property \ref nfo_heading "nfo:heading". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getHeading() { return baseGetObject< nfo::heading >(); }
				/*!
					\fn void setHeading(double const &heading_)
					
					
					Sets the property \ref nfo_heading "nfo:heading" to the given \a heading.
					\sa LiveResource::setObject
				 */
				void setHeading(double const &heading_) { baseSetObject< nfo::heading >( heading_ ); }
				/*!
					\fn double firstHeading()
					
					
					Returns the first property \ref nfo_heading "nfo:heading". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstHeading() { return baseFirstObject< nfo::heading >(); }
				/*!
					\fn void addHeading(double const &heading_)
					
					
					Adds the given \a heading_ to the property \ref nfo_heading "nfo:heading" set.
					\sa LiveResource::addObject
				 */
				void addHeading(double const &heading_) { baseAddObject< nfo::heading >( heading_ ); }
				/*!
					\fn void removeHeading(double const &heading_)
					
					
					Removes the given \a heading_ from the property \ref nfo_heading "nfo:heading" set.
					\sa LiveResource::removeObject
				 */
				void removeHeading(double const &heading_) { baseRemoveObject< nfo::heading >(heading_); }

				/* Property generated from nfo:width
				 * \n Visual content width in pixels.
				 * \n rdfs:label=width
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Visual
				 * \n tracker:modified=1843
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveWidths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_width "nfo:width" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveWidths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::width >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getWidths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_width "nfo:width" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getWidths(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::width >(object_info, strategy, parent); }
				/*!
					\fn void setWidths(LiveNodes const &width_)
					
					
					Sets the property \ref nfo_width "nfo:width" set to the given \a width_ set.
					\sa LiveResource::setObjects
				 */
				void setWidths(LiveNodes const &width_) { baseSetObjects(nfo::width::iri(), width_); }
				/*!
					\fn void removeWidths(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_width "nfo:width" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeWidths(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::width::iri(), object_info); }
				/*!
					\fn qint64 getWidth()
					
					
					Returns the property \ref nfo_width "nfo:width". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getWidth() { return baseGetObject< nfo::width >(); }
				/*!
					\fn void setWidth(qint64 const &width_)
					
					
					Sets the property \ref nfo_width "nfo:width" to the given \a width.
					\sa LiveResource::setObject
				 */
				void setWidth(qint64 const &width_) { baseSetObject< nfo::width >( width_ ); }
				/*!
					\fn qint64 firstWidth()
					
					
					Returns the first property \ref nfo_width "nfo:width". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstWidth() { return baseFirstObject< nfo::width >(); }
				/*!
					\fn void addWidth(qint64 const &width_)
					
					
					Adds the given \a width_ to the property \ref nfo_width "nfo:width" set.
					\sa LiveResource::addObject
				 */
				void addWidth(qint64 const &width_) { baseAddObject< nfo::width >( width_ ); }
				/*!
					\fn void removeWidth(qint64 const &width_)
					
					
					Removes the given \a width_ from the property \ref nfo_width "nfo:width" set.
					\sa LiveResource::removeObject
				 */
				void removeWidth(qint64 const &width_) { baseRemoveObject< nfo::width >(width_); }
				 //@}
			};

			/*! Class generated from nfo:Image
			 * \ingroup onto_nfo_classes
			 * A file containing an image.
			 * 
			 * rdfs:label = Image
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1959
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nfo_softwareIcon "nfo:softwareIcon"
			 * 		\ref maemo_remoteMediaArt "maemo:remoteMediaArt"
			 * 		\ref nfo_softwareCategoryIcon "nfo:softwareCategoryIcon"
			 */
			class Image
				: public virtual Visual

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Image"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Visual, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Image> Live;
				Image() { this->attachInterfaceHelper< Image >(); }
				~Image() { this->detachInterfaceHelper< Image >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:horizontalResolution
				 * \n Horizontal resolution of an image (if printed). Expressed in DPI.
				 * \n rdfs:label=horizontalResolution
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Image
				 * \n tracker:modified=1177
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHorizontalResolutions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_horizontalResolution "nfo:horizontalResolution" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHorizontalResolutions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::horizontalResolution >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHorizontalResolutions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_horizontalResolution "nfo:horizontalResolution" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHorizontalResolutions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::horizontalResolution >(object_info, strategy, parent); }
				/*!
					\fn void setHorizontalResolutions(LiveNodes const &horizontalResolution_)
					
					
					Sets the property \ref nfo_horizontalResolution "nfo:horizontalResolution" set to the given \a horizontalResolution_ set.
					\sa LiveResource::setObjects
				 */
				void setHorizontalResolutions(LiveNodes const &horizontalResolution_) { baseSetObjects(nfo::horizontalResolution::iri(), horizontalResolution_); }
				/*!
					\fn void removeHorizontalResolutions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_horizontalResolution "nfo:horizontalResolution" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHorizontalResolutions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::horizontalResolution::iri(), object_info); }
				/*!
					\fn qint64 getHorizontalResolution()
					
					
					Returns the property \ref nfo_horizontalResolution "nfo:horizontalResolution". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getHorizontalResolution() { return baseGetObject< nfo::horizontalResolution >(); }
				/*!
					\fn void setHorizontalResolution(qint64 const &horizontalResolution_)
					
					
					Sets the property \ref nfo_horizontalResolution "nfo:horizontalResolution" to the given \a horizontalResolution.
					\sa LiveResource::setObject
				 */
				void setHorizontalResolution(qint64 const &horizontalResolution_) { baseSetObject< nfo::horizontalResolution >( horizontalResolution_ ); }
				/*!
					\fn qint64 firstHorizontalResolution()
					
					
					Returns the first property \ref nfo_horizontalResolution "nfo:horizontalResolution". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstHorizontalResolution() { return baseFirstObject< nfo::horizontalResolution >(); }
				/*!
					\fn void addHorizontalResolution(qint64 const &horizontalResolution_)
					
					
					Adds the given \a horizontalResolution_ to the property \ref nfo_horizontalResolution "nfo:horizontalResolution" set.
					\sa LiveResource::addObject
				 */
				void addHorizontalResolution(qint64 const &horizontalResolution_) { baseAddObject< nfo::horizontalResolution >( horizontalResolution_ ); }
				/*!
					\fn void removeHorizontalResolution(qint64 const &horizontalResolution_)
					
					
					Removes the given \a horizontalResolution_ from the property \ref nfo_horizontalResolution "nfo:horizontalResolution" set.
					\sa LiveResource::removeObject
				 */
				void removeHorizontalResolution(qint64 const &horizontalResolution_) { baseRemoveObject< nfo::horizontalResolution >(horizontalResolution_); }

				/* Property generated from nfo:orientation
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:Orientation
				 * \n rdfs:domain=nfo:Image
				 * \n tracker:writeback=true
				 * \n tracker:modified=1066
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveOrientations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_orientation "nfo:orientation" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveOrientations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::orientation >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getOrientations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_orientation "nfo:orientation" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getOrientations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::orientation >(object_info, strategy, parent); }
				/*!
					\fn void setOrientations(LiveNodes const &orientation_)
					
					
					Sets the property \ref nfo_orientation "nfo:orientation" set to the given \a orientation_ set.
					\sa LiveResource::setObjects
				 */
				void setOrientations(LiveNodes const &orientation_) { baseSetObjects(nfo::orientation::iri(), orientation_); }
				/*!
					\fn void removeOrientations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_orientation "nfo:orientation" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeOrientations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::orientation::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Orientation > getOrientation()
					
					
					Returns the property \ref nfo_orientation "nfo:orientation". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Orientation > getOrientation() { return baseGetObject< nfo::orientation >(); }
				/*!
					\fn ::SopranoLive::Live< Orientation > setOrientation(::SopranoLive::Live< Orientation > const &orientation_)
					
					
					Sets the property \ref nfo_orientation "nfo:orientation" to the given \a orientation.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Orientation > setOrientation(::SopranoLive::Live< Orientation > const &orientation_) { return baseSetObject< nfo::orientation >( orientation_ ); }
				/*!
					\fn ::SopranoLive::Live< Orientation > firstOrientation()
					
					
					Returns the first property \ref nfo_orientation "nfo:orientation". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Orientation > firstOrientation() { return baseFirstObject< nfo::orientation >(); }
				/*!
					\fn ::SopranoLive::Live< Orientation > addOrientation()
					
					
					Adds a new uniquely named resource to the property \ref nfo_orientation "nfo:orientation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Orientation > addOrientation() { return baseAddObject< nfo::orientation >(); }
				/*!
					\fn ::SopranoLive::Live< Orientation > addOrientation(::SopranoLive::Live< Orientation > const &orientation_)
					
					
					Adds the given \a orientation_ to the property \ref nfo_orientation "nfo:orientation" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Orientation > addOrientation(::SopranoLive::Live< Orientation > const &orientation_) { return baseAddObject< nfo::orientation >( orientation_ ); }
				/*!
					\fn void removeOrientation(::SopranoLive::Live< Orientation > const &orientation_)
					
					
					Removes the given \a orientation_ from the property \ref nfo_orientation "nfo:orientation" set.
					\sa LiveResource::removeObject
				 */
				void removeOrientation(::SopranoLive::Live< Orientation > const &orientation_) { baseRemoveObject< nfo::orientation >(orientation_); }

				/* Property generated from nfo:verticalResolution
				 * \n Vertical resolution of an Image (if printed). Expressed in DPI
				 * \n rdfs:label=verticalResolution
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Image
				 * \n tracker:modified=1990
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveVerticalResolutions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_verticalResolution "nfo:verticalResolution" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveVerticalResolutions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::verticalResolution >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getVerticalResolutions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_verticalResolution "nfo:verticalResolution" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getVerticalResolutions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::verticalResolution >(object_info, strategy, parent); }
				/*!
					\fn void setVerticalResolutions(LiveNodes const &verticalResolution_)
					
					
					Sets the property \ref nfo_verticalResolution "nfo:verticalResolution" set to the given \a verticalResolution_ set.
					\sa LiveResource::setObjects
				 */
				void setVerticalResolutions(LiveNodes const &verticalResolution_) { baseSetObjects(nfo::verticalResolution::iri(), verticalResolution_); }
				/*!
					\fn void removeVerticalResolutions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_verticalResolution "nfo:verticalResolution" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeVerticalResolutions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::verticalResolution::iri(), object_info); }
				/*!
					\fn qint64 getVerticalResolution()
					
					
					Returns the property \ref nfo_verticalResolution "nfo:verticalResolution". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getVerticalResolution() { return baseGetObject< nfo::verticalResolution >(); }
				/*!
					\fn void setVerticalResolution(qint64 const &verticalResolution_)
					
					
					Sets the property \ref nfo_verticalResolution "nfo:verticalResolution" to the given \a verticalResolution.
					\sa LiveResource::setObject
				 */
				void setVerticalResolution(qint64 const &verticalResolution_) { baseSetObject< nfo::verticalResolution >( verticalResolution_ ); }
				/*!
					\fn qint64 firstVerticalResolution()
					
					
					Returns the first property \ref nfo_verticalResolution "nfo:verticalResolution". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstVerticalResolution() { return baseFirstObject< nfo::verticalResolution >(); }
				/*!
					\fn void addVerticalResolution(qint64 const &verticalResolution_)
					
					
					Adds the given \a verticalResolution_ to the property \ref nfo_verticalResolution "nfo:verticalResolution" set.
					\sa LiveResource::addObject
				 */
				void addVerticalResolution(qint64 const &verticalResolution_) { baseAddObject< nfo::verticalResolution >( verticalResolution_ ); }
				/*!
					\fn void removeVerticalResolution(qint64 const &verticalResolution_)
					
					
					Removes the given \a verticalResolution_ from the property \ref nfo_verticalResolution "nfo:verticalResolution" set.
					\sa LiveResource::removeObject
				 */
				void removeVerticalResolution(qint64 const &verticalResolution_) { baseRemoveObject< nfo::verticalResolution >(verticalResolution_); }

				/* Property generated from nfo:depicts
				 * \n rdfs:range=poi:ObjectOfInterest
				 * \n tracker:modified=1675
				 * \n rdfs:domain=nfo:Image
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef poi::ObjectOfInterest ObjectOfInterest;
				/*!
					\fn LiveNodes liveDepictss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_depicts "nfo:depicts" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDepictss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::depicts >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDepictss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_depicts "nfo:depicts" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDepictss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::depicts >(object_info, strategy, parent); }
				/*!
					\fn void setDepictss(LiveNodes const &depicts_)
					
					
					Sets the property \ref nfo_depicts "nfo:depicts" set to the given \a depicts_ set.
					\sa LiveResource::setObjects
				 */
				void setDepictss(LiveNodes const &depicts_) { baseSetObjects(nfo::depicts::iri(), depicts_); }
				/*!
					\fn void removeDepictss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_depicts "nfo:depicts" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDepictss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::depicts::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< poi::ObjectOfInterest > firstDepicts()
					
					
					Returns the first property \ref nfo_depicts "nfo:depicts". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< poi::ObjectOfInterest > firstDepicts() { return baseFirstObject< nfo::depicts >(); }
				/*!
					\fn ::SopranoLive::Live< poi::ObjectOfInterest > addDepicts()
					
					
					Adds a new uniquely named resource to the property \ref nfo_depicts "nfo:depicts" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< poi::ObjectOfInterest > addDepicts() { return baseAddObject< nfo::depicts >(); }
				/*!
					\fn ::SopranoLive::Live< poi::ObjectOfInterest > addDepicts(::SopranoLive::Live< poi::ObjectOfInterest > const &depicts_)
					
					
					Adds the given \a depicts_ to the property \ref nfo_depicts "nfo:depicts" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< poi::ObjectOfInterest > addDepicts(::SopranoLive::Live< poi::ObjectOfInterest > const &depicts_) { return baseAddObject< nfo::depicts >( depicts_ ); }
				/*!
					\fn void removeDepicts(::SopranoLive::Live< poi::ObjectOfInterest > const &depicts_)
					
					
					Removes the given \a depicts_ from the property \ref nfo_depicts "nfo:depicts" set.
					\sa LiveResource::removeObject
				 */
				void removeDepicts(::SopranoLive::Live< poi::ObjectOfInterest > const &depicts_) { baseRemoveObject< nfo::depicts >(depicts_); }
				 //@}
			};

			/*! Class generated from nfo:RasterImage
			 * \ingroup onto_nfo_classes
			 * A raster image.
			 * 
			 * rdfs:label = RasterImage
			 * 
			 * tracker:modified = 1660
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class RasterImage
				: public virtual Image

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RasterImage"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Image, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<RasterImage> Live;
				RasterImage() { this->attachInterfaceHelper< RasterImage >(); }
				~RasterImage() { this->detachInterfaceHelper< RasterImage >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:Cursor
			 * \ingroup onto_nfo_classes
			 * A Cursor.
			 * 
			 * rdfs:label = Cursor
			 * 
			 * tracker:modified = 1724
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Cursor
				: public virtual RasterImage

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Cursor"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<RasterImage, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Cursor> Live;
				Cursor() { this->attachInterfaceHelper< Cursor >(); }
				~Cursor() { this->detachInterfaceHelper< Cursor >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:DeletedResource
			 * \ingroup onto_nfo_classes
			 * A file entity that has been deleted from the original source. Usually such entities are stored within various kinds of 'Trash' or 'Recycle Bin' folders.
			 * 
			 * rdfs:label = DeletedResource
			 * 
			 * tracker:modified = 1011
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class DeletedResource
				: public virtual FileDataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#DeletedResource"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<FileDataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<DeletedResource> Live;
				DeletedResource() { this->attachInterfaceHelper< DeletedResource >(); }
				~DeletedResource() { this->detachInterfaceHelper< DeletedResource >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:deletionDate
				 * \n The date and time of the deletion.
				 * \n rdfs:label=deletionDate
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:dateTime
				 * \n rdfs:domain=nfo:DeletedResource
				 * \n tracker:modified=1689
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDeletionDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_deletionDate "nfo:deletionDate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDeletionDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::deletionDate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDeletionDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_deletionDate "nfo:deletionDate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDeletionDates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::deletionDate >(object_info, strategy, parent); }
				/*!
					\fn void setDeletionDates(LiveNodes const &deletionDate_)
					
					
					Sets the property \ref nfo_deletionDate "nfo:deletionDate" set to the given \a deletionDate_ set.
					\sa LiveResource::setObjects
				 */
				void setDeletionDates(LiveNodes const &deletionDate_) { baseSetObjects(nfo::deletionDate::iri(), deletionDate_); }
				/*!
					\fn void removeDeletionDates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_deletionDate "nfo:deletionDate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDeletionDates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::deletionDate::iri(), object_info); }
				/*!
					\fn QDateTime getDeletionDate()
					
					
					Returns the property \ref nfo_deletionDate "nfo:deletionDate". If the property didn't exist, it is set to a default initialized value of type QDateTime and returned.
					\sa LiveResource::getObject
				 */
				QDateTime getDeletionDate() { return baseGetObject< nfo::deletionDate >(); }
				/*!
					\fn void setDeletionDate(QDateTime const &deletionDate_)
					
					
					Sets the property \ref nfo_deletionDate "nfo:deletionDate" to the given \a deletionDate.
					\sa LiveResource::setObject
				 */
				void setDeletionDate(QDateTime const &deletionDate_) { baseSetObject< nfo::deletionDate >( deletionDate_ ); }
				/*!
					\fn QDateTime firstDeletionDate()
					
					
					Returns the first property \ref nfo_deletionDate "nfo:deletionDate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QDateTime firstDeletionDate() { return baseFirstObject< nfo::deletionDate >(); }
				/*!
					\fn void addDeletionDate(QDateTime const &deletionDate_)
					
					
					Adds the given \a deletionDate_ to the property \ref nfo_deletionDate "nfo:deletionDate" set.
					\sa LiveResource::addObject
				 */
				void addDeletionDate(QDateTime const &deletionDate_) { baseAddObject< nfo::deletionDate >( deletionDate_ ); }
				/*!
					\fn void removeDeletionDate(QDateTime const &deletionDate_)
					
					
					Removes the given \a deletionDate_ from the property \ref nfo_deletionDate "nfo:deletionDate" set.
					\sa LiveResource::removeObject
				 */
				void removeDeletionDate(QDateTime const &deletionDate_) { baseRemoveObject< nfo::deletionDate >(deletionDate_); }

				/* Property generated from nfo:originalLocation
				 * \n The original location of the deleted resource.
				 * \n rdfs:label=originalLocation
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:DeletedResource
				 * \n tracker:modified=1327
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveOriginalLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_originalLocation "nfo:originalLocation" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveOriginalLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::originalLocation >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getOriginalLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_originalLocation "nfo:originalLocation" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getOriginalLocations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::originalLocation >(object_info, strategy, parent); }
				/*!
					\fn void setOriginalLocations(LiveNodes const &originalLocation_)
					
					
					Sets the property \ref nfo_originalLocation "nfo:originalLocation" set to the given \a originalLocation_ set.
					\sa LiveResource::setObjects
				 */
				void setOriginalLocations(LiveNodes const &originalLocation_) { baseSetObjects(nfo::originalLocation::iri(), originalLocation_); }
				/*!
					\fn void removeOriginalLocations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_originalLocation "nfo:originalLocation" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeOriginalLocations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::originalLocation::iri(), object_info); }
				/*!
					\fn QString getOriginalLocation()
					
					
					Returns the property \ref nfo_originalLocation "nfo:originalLocation". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getOriginalLocation() { return baseGetObject< nfo::originalLocation >(); }
				/*!
					\fn void setOriginalLocation(QString const &originalLocation_)
					
					
					Sets the property \ref nfo_originalLocation "nfo:originalLocation" to the given \a originalLocation.
					\sa LiveResource::setObject
				 */
				void setOriginalLocation(QString const &originalLocation_) { baseSetObject< nfo::originalLocation >( originalLocation_ ); }
				/*!
					\fn QString firstOriginalLocation()
					
					
					Returns the first property \ref nfo_originalLocation "nfo:originalLocation". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstOriginalLocation() { return baseFirstObject< nfo::originalLocation >(); }
				/*!
					\fn void addOriginalLocation(QString const &originalLocation_)
					
					
					Adds the given \a originalLocation_ to the property \ref nfo_originalLocation "nfo:originalLocation" set.
					\sa LiveResource::addObject
				 */
				void addOriginalLocation(QString const &originalLocation_) { baseAddObject< nfo::originalLocation >( originalLocation_ ); }
				/*!
					\fn void removeOriginalLocation(QString const &originalLocation_)
					
					
					Removes the given \a originalLocation_ from the property \ref nfo_originalLocation "nfo:originalLocation" set.
					\sa LiveResource::removeObject
				 */
				void removeOriginalLocation(QString const &originalLocation_) { baseRemoveObject< nfo::originalLocation >(originalLocation_); }
				 //@}
			};

			/*! Class generated from nfo:Document
			 * \ingroup onto_nfo_classes
			 * A generic document. A common superclass for all documents on the desktop.
			 * 
			 * rdfs:label = Document
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1190
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Document
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Document"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Document> Live;
				Document() { this->attachInterfaceHelper< Document >(); }
				~Document() { this->detachInterfaceHelper< Document >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:tableOfContents
				 * \n Section titles and figure descriptions of the document.
				 * \n rdfs:label=Table of contents
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Document
				 * \n tracker:weight=5
				 * \n tracker:modified=1158
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveTableOfContentss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_tableOfContents "nfo:tableOfContents" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveTableOfContentss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::tableOfContents >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getTableOfContentss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_tableOfContents "nfo:tableOfContents" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getTableOfContentss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::tableOfContents >(object_info, strategy, parent); }
				/*!
					\fn void setTableOfContentss(LiveNodes const &tableOfContents_)
					
					
					Sets the property \ref nfo_tableOfContents "nfo:tableOfContents" set to the given \a tableOfContents_ set.
					\sa LiveResource::setObjects
				 */
				void setTableOfContentss(LiveNodes const &tableOfContents_) { baseSetObjects(nfo::tableOfContents::iri(), tableOfContents_); }
				/*!
					\fn void removeTableOfContentss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_tableOfContents "nfo:tableOfContents" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeTableOfContentss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::tableOfContents::iri(), object_info); }
				/*!
					\fn QString getTableOfContents()
					
					
					Returns the property \ref nfo_tableOfContents "nfo:tableOfContents". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getTableOfContents() { return baseGetObject< nfo::tableOfContents >(); }
				/*!
					\fn void setTableOfContents(QString const &tableOfContents_)
					
					
					Sets the property \ref nfo_tableOfContents "nfo:tableOfContents" to the given \a tableOfContents.
					\sa LiveResource::setObject
				 */
				void setTableOfContents(QString const &tableOfContents_) { baseSetObject< nfo::tableOfContents >( tableOfContents_ ); }
				/*!
					\fn QString firstTableOfContents()
					
					
					Returns the first property \ref nfo_tableOfContents "nfo:tableOfContents". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstTableOfContents() { return baseFirstObject< nfo::tableOfContents >(); }
				/*!
					\fn void addTableOfContents(QString const &tableOfContents_)
					
					
					Adds the given \a tableOfContents_ to the property \ref nfo_tableOfContents "nfo:tableOfContents" set.
					\sa LiveResource::addObject
				 */
				void addTableOfContents(QString const &tableOfContents_) { baseAddObject< nfo::tableOfContents >( tableOfContents_ ); }
				/*!
					\fn void removeTableOfContents(QString const &tableOfContents_)
					
					
					Removes the given \a tableOfContents_ from the property \ref nfo_tableOfContents "nfo:tableOfContents" set.
					\sa LiveResource::removeObject
				 */
				void removeTableOfContents(QString const &tableOfContents_) { baseRemoveObject< nfo::tableOfContents >(tableOfContents_); }
				 //@}
			};

			/*! Class generated from nfo:Equipment
			 * \ingroup onto_nfo_classes
			 * The equipment used to create media
			 * 
			 * rdfs:label = Equipment
			 * 
			 * tracker:modified = 1403
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nfo_equipment "nfo:equipment"
			 */
			class Equipment
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Equipment"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Equipment> Live;
				Equipment() { this->attachInterfaceHelper< Equipment >(); }
				~Equipment() { this->detachInterfaceHelper< Equipment >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:manufacturer
				 * \n The manufacturer of the equipment
				 * \n rdfs:label=Manufacturer
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Equipment
				 * \n tracker:modified=1545
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveManufacturers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_manufacturer "nfo:manufacturer" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveManufacturers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::manufacturer >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getManufacturers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_manufacturer "nfo:manufacturer" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getManufacturers(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::manufacturer >(object_info, strategy, parent); }
				/*!
					\fn void setManufacturers(LiveNodes const &manufacturer_)
					
					
					Sets the property \ref nfo_manufacturer "nfo:manufacturer" set to the given \a manufacturer_ set.
					\sa LiveResource::setObjects
				 */
				void setManufacturers(LiveNodes const &manufacturer_) { baseSetObjects(nfo::manufacturer::iri(), manufacturer_); }
				/*!
					\fn void removeManufacturers(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_manufacturer "nfo:manufacturer" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeManufacturers(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::manufacturer::iri(), object_info); }
				/*!
					\fn QString getManufacturer()
					
					
					Returns the property \ref nfo_manufacturer "nfo:manufacturer". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getManufacturer() { return baseGetObject< nfo::manufacturer >(); }
				/*!
					\fn void setManufacturer(QString const &manufacturer_)
					
					
					Sets the property \ref nfo_manufacturer "nfo:manufacturer" to the given \a manufacturer.
					\sa LiveResource::setObject
				 */
				void setManufacturer(QString const &manufacturer_) { baseSetObject< nfo::manufacturer >( manufacturer_ ); }
				/*!
					\fn QString firstManufacturer()
					
					
					Returns the first property \ref nfo_manufacturer "nfo:manufacturer". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstManufacturer() { return baseFirstObject< nfo::manufacturer >(); }
				/*!
					\fn void addManufacturer(QString const &manufacturer_)
					
					
					Adds the given \a manufacturer_ to the property \ref nfo_manufacturer "nfo:manufacturer" set.
					\sa LiveResource::addObject
				 */
				void addManufacturer(QString const &manufacturer_) { baseAddObject< nfo::manufacturer >( manufacturer_ ); }
				/*!
					\fn void removeManufacturer(QString const &manufacturer_)
					
					
					Removes the given \a manufacturer_ from the property \ref nfo_manufacturer "nfo:manufacturer" set.
					\sa LiveResource::removeObject
				 */
				void removeManufacturer(QString const &manufacturer_) { baseRemoveObject< nfo::manufacturer >(manufacturer_); }

				/* Property generated from nfo:equipmentSoftware
				 * \n The software of the equipment
				 * \n rdfs:label=Equipment software
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Equipment
				 * \n tracker:modified=1486
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEquipmentSoftwares(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_equipmentSoftware "nfo:equipmentSoftware" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEquipmentSoftwares(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::equipmentSoftware >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEquipmentSoftwares(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_equipmentSoftware "nfo:equipmentSoftware" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEquipmentSoftwares(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::equipmentSoftware >(object_info, strategy, parent); }
				/*!
					\fn void setEquipmentSoftwares(LiveNodes const &equipmentSoftware_)
					
					
					Sets the property \ref nfo_equipmentSoftware "nfo:equipmentSoftware" set to the given \a equipmentSoftware_ set.
					\sa LiveResource::setObjects
				 */
				void setEquipmentSoftwares(LiveNodes const &equipmentSoftware_) { baseSetObjects(nfo::equipmentSoftware::iri(), equipmentSoftware_); }
				/*!
					\fn void removeEquipmentSoftwares(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_equipmentSoftware "nfo:equipmentSoftware" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEquipmentSoftwares(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::equipmentSoftware::iri(), object_info); }
				/*!
					\fn QString getEquipmentSoftware()
					
					
					Returns the property \ref nfo_equipmentSoftware "nfo:equipmentSoftware". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getEquipmentSoftware() { return baseGetObject< nfo::equipmentSoftware >(); }
				/*!
					\fn void setEquipmentSoftware(QString const &equipmentSoftware_)
					
					
					Sets the property \ref nfo_equipmentSoftware "nfo:equipmentSoftware" to the given \a equipmentSoftware.
					\sa LiveResource::setObject
				 */
				void setEquipmentSoftware(QString const &equipmentSoftware_) { baseSetObject< nfo::equipmentSoftware >( equipmentSoftware_ ); }
				/*!
					\fn QString firstEquipmentSoftware()
					
					
					Returns the first property \ref nfo_equipmentSoftware "nfo:equipmentSoftware". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstEquipmentSoftware() { return baseFirstObject< nfo::equipmentSoftware >(); }
				/*!
					\fn void addEquipmentSoftware(QString const &equipmentSoftware_)
					
					
					Adds the given \a equipmentSoftware_ to the property \ref nfo_equipmentSoftware "nfo:equipmentSoftware" set.
					\sa LiveResource::addObject
				 */
				void addEquipmentSoftware(QString const &equipmentSoftware_) { baseAddObject< nfo::equipmentSoftware >( equipmentSoftware_ ); }
				/*!
					\fn void removeEquipmentSoftware(QString const &equipmentSoftware_)
					
					
					Removes the given \a equipmentSoftware_ from the property \ref nfo_equipmentSoftware "nfo:equipmentSoftware" set.
					\sa LiveResource::removeObject
				 */
				void removeEquipmentSoftware(QString const &equipmentSoftware_) { baseRemoveObject< nfo::equipmentSoftware >(equipmentSoftware_); }

				/* Property generated from nfo:model
				 * \n The model of the equipment
				 * \n rdfs:label=Model
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Equipment
				 * \n tracker:modified=1998
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveModels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_model "nfo:model" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveModels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::model >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getModels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_model "nfo:model" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getModels(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::model >(object_info, strategy, parent); }
				/*!
					\fn void setModels(LiveNodes const &model_)
					
					
					Sets the property \ref nfo_model "nfo:model" set to the given \a model_ set.
					\sa LiveResource::setObjects
				 */
				void setModels(LiveNodes const &model_) { baseSetObjects(nfo::model::iri(), model_); }
				/*!
					\fn void removeModels(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_model "nfo:model" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeModels(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::model::iri(), object_info); }
				/*!
					\fn QString getModel()
					
					
					Returns the property \ref nfo_model "nfo:model". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getModel() { return baseGetObject< nfo::model >(); }
				/*!
					\fn void setModel(QString const &model_)
					
					
					Sets the property \ref nfo_model "nfo:model" to the given \a model.
					\sa LiveResource::setObject
				 */
				void setModel(QString const &model_) { baseSetObject< nfo::model >( model_ ); }
				/*!
					\fn QString firstModel()
					
					
					Returns the first property \ref nfo_model "nfo:model". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstModel() { return baseFirstObject< nfo::model >(); }
				/*!
					\fn void addModel(QString const &model_)
					
					
					Adds the given \a model_ to the property \ref nfo_model "nfo:model" set.
					\sa LiveResource::addObject
				 */
				void addModel(QString const &model_) { baseAddObject< nfo::model >( model_ ); }
				/*!
					\fn void removeModel(QString const &model_)
					
					
					Removes the given \a model_ from the property \ref nfo_model "nfo:model" set.
					\sa LiveResource::removeObject
				 */
				void removeModel(QString const &model_) { baseRemoveObject< nfo::model >(model_); }
				 //@}
			};

			/*! Class generated from nfo:Executable
			 * \ingroup onto_nfo_classes
			 * An executable file.
			 * 
			 * rdfs:label = Executable
			 * 
			 * tracker:modified = 1454
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Executable
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Executable"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Executable> Live;
				Executable() { this->attachInterfaceHelper< Executable >(); }
				~Executable() { this->detachInterfaceHelper< Executable >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:FileHash
			 * \ingroup onto_nfo_classes
			 * A fingerprint of the file, generated by some hashing function.
			 * 
			 * rdfs:label = FileHash
			 * 
			 * tracker:modified = 1398
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nfo_hasHash "nfo:hasHash"
			 */
			class FileHash
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#FileHash"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<FileHash> Live;
				FileHash() { this->attachInterfaceHelper< FileHash >(); }
				~FileHash() { this->detachInterfaceHelper< FileHash >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:hashAlgorithm
				 * \n Name of the algorithm used to compute the hash value. Examples might include CRC32, MD5, SHA, TTH etc.
				 * \n rdfs:label=hashAlgorithm
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:FileHash
				 * \n tracker:modified=1590
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHashAlgorithms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_hashAlgorithm "nfo:hashAlgorithm" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHashAlgorithms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::hashAlgorithm >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHashAlgorithms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_hashAlgorithm "nfo:hashAlgorithm" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHashAlgorithms(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::hashAlgorithm >(object_info, strategy, parent); }
				/*!
					\fn void setHashAlgorithms(LiveNodes const &hashAlgorithm_)
					
					
					Sets the property \ref nfo_hashAlgorithm "nfo:hashAlgorithm" set to the given \a hashAlgorithm_ set.
					\sa LiveResource::setObjects
				 */
				void setHashAlgorithms(LiveNodes const &hashAlgorithm_) { baseSetObjects(nfo::hashAlgorithm::iri(), hashAlgorithm_); }
				/*!
					\fn void removeHashAlgorithms(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_hashAlgorithm "nfo:hashAlgorithm" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHashAlgorithms(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::hashAlgorithm::iri(), object_info); }
				/*!
					\fn QString getHashAlgorithm()
					
					
					Returns the property \ref nfo_hashAlgorithm "nfo:hashAlgorithm". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getHashAlgorithm() { return baseGetObject< nfo::hashAlgorithm >(); }
				/*!
					\fn void setHashAlgorithm(QString const &hashAlgorithm_)
					
					
					Sets the property \ref nfo_hashAlgorithm "nfo:hashAlgorithm" to the given \a hashAlgorithm.
					\sa LiveResource::setObject
				 */
				void setHashAlgorithm(QString const &hashAlgorithm_) { baseSetObject< nfo::hashAlgorithm >( hashAlgorithm_ ); }
				/*!
					\fn QString firstHashAlgorithm()
					
					
					Returns the first property \ref nfo_hashAlgorithm "nfo:hashAlgorithm". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstHashAlgorithm() { return baseFirstObject< nfo::hashAlgorithm >(); }
				/*!
					\fn void addHashAlgorithm(QString const &hashAlgorithm_)
					
					
					Adds the given \a hashAlgorithm_ to the property \ref nfo_hashAlgorithm "nfo:hashAlgorithm" set.
					\sa LiveResource::addObject
				 */
				void addHashAlgorithm(QString const &hashAlgorithm_) { baseAddObject< nfo::hashAlgorithm >( hashAlgorithm_ ); }
				/*!
					\fn void removeHashAlgorithm(QString const &hashAlgorithm_)
					
					
					Removes the given \a hashAlgorithm_ from the property \ref nfo_hashAlgorithm "nfo:hashAlgorithm" set.
					\sa LiveResource::removeObject
				 */
				void removeHashAlgorithm(QString const &hashAlgorithm_) { baseRemoveObject< nfo::hashAlgorithm >(hashAlgorithm_); }

				/* Property generated from nfo:hashValue
				 * \n The actual value of the hash.
				 * \n rdfs:label=hashValue
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:FileHash
				 * \n tracker:modified=1238
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHashValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_hashValue "nfo:hashValue" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHashValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::hashValue >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHashValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_hashValue "nfo:hashValue" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHashValues(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::hashValue >(object_info, strategy, parent); }
				/*!
					\fn void setHashValues(LiveNodes const &hashValue_)
					
					
					Sets the property \ref nfo_hashValue "nfo:hashValue" set to the given \a hashValue_ set.
					\sa LiveResource::setObjects
				 */
				void setHashValues(LiveNodes const &hashValue_) { baseSetObjects(nfo::hashValue::iri(), hashValue_); }
				/*!
					\fn void removeHashValues(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_hashValue "nfo:hashValue" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHashValues(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::hashValue::iri(), object_info); }
				/*!
					\fn QString getHashValue()
					
					
					Returns the property \ref nfo_hashValue "nfo:hashValue". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getHashValue() { return baseGetObject< nfo::hashValue >(); }
				/*!
					\fn void setHashValue(QString const &hashValue_)
					
					
					Sets the property \ref nfo_hashValue "nfo:hashValue" to the given \a hashValue.
					\sa LiveResource::setObject
				 */
				void setHashValue(QString const &hashValue_) { baseSetObject< nfo::hashValue >( hashValue_ ); }
				/*!
					\fn QString firstHashValue()
					
					
					Returns the first property \ref nfo_hashValue "nfo:hashValue". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstHashValue() { return baseFirstObject< nfo::hashValue >(); }
				/*!
					\fn void addHashValue(QString const &hashValue_)
					
					
					Adds the given \a hashValue_ to the property \ref nfo_hashValue "nfo:hashValue" set.
					\sa LiveResource::addObject
				 */
				void addHashValue(QString const &hashValue_) { baseAddObject< nfo::hashValue >( hashValue_ ); }
				/*!
					\fn void removeHashValue(QString const &hashValue_)
					
					
					Removes the given \a hashValue_ from the property \ref nfo_hashValue "nfo:hashValue" set.
					\sa LiveResource::removeObject
				 */
				void removeHashValue(QString const &hashValue_) { baseRemoveObject< nfo::hashValue >(hashValue_); }
				 //@}
			};

			/*! Class generated from nfo:Filesystem
			 * \ingroup onto_nfo_classes
			 * A filesystem. Examples of filesystems include hard disk partitions, removable media, but also images thereof stored in files.
			 * 
			 * rdfs:label = Filesystem
			 * 
			 * tracker:modified = 1524
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Filesystem
				: public virtual DataContainer

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Filesystem"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<DataContainer, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Filesystem> Live;
				Filesystem() { this->attachInterfaceHelper< Filesystem >(); }
				~Filesystem() { this->detachInterfaceHelper< Filesystem >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:FilesystemImage
			 * \ingroup onto_nfo_classes
			 * An image of a filesystem. Instances of this class may include CD images, DVD images or hard disk partition images created by various pieces of software (e.g. Norton Ghost)
			 * 
			 * rdfs:label = FilesystemImage
			 * 
			 * tracker:modified = 1595
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class FilesystemImage
				: public virtual Filesystem

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#FilesystemImage"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Filesystem, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<FilesystemImage> Live;
				FilesystemImage() { this->attachInterfaceHelper< FilesystemImage >(); }
				~FilesystemImage() { this->detachInterfaceHelper< FilesystemImage >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:Folder
			 * \ingroup onto_nfo_classes
			 * A folder/directory. Examples of folders include folders on a filesystem and message folders in a mailbox.
			 * 
			 * rdfs:label = Folder
			 * 
			 * tracker:modified = 1607
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Folder
				: public virtual DataContainer

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Folder"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<DataContainer, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Folder> Live;
				Folder() { this->attachInterfaceHelper< Folder >(); }
				~Folder() { this->detachInterfaceHelper< Folder >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:Font
			 * \ingroup onto_nfo_classes
			 * A font.
			 * 
			 * rdfs:label = Font
			 * 
			 * tracker:modified = 1107
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Font
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Font"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Font> Live;
				Font() { this->attachInterfaceHelper< Font >(); }
				~Font() { this->detachInterfaceHelper< Font >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:foundry
				 * \n The foundry, the organization that created the font.
				 * \n rdfs:label=foundry
				 * \n rdfs:subPropertyOf=nco:creator
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nco:Contact
				 * \n rdfs:domain=nfo:Font
				 * \n tracker:modified=1994
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nco::Contact Contact;
				/*!
					\fn LiveNodes liveFoundrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_foundry "nfo:foundry" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFoundrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::foundry >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFoundrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_foundry "nfo:foundry" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFoundrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::foundry >(object_info, strategy, parent); }
				/*!
					\fn void setFoundrys(LiveNodes const &foundry_)
					
					
					Sets the property \ref nfo_foundry "nfo:foundry" set to the given \a foundry_ set.
					\sa LiveResource::setObjects
				 */
				void setFoundrys(LiveNodes const &foundry_) { baseSetObjects(nfo::foundry::iri(), foundry_); }
				/*!
					\fn void removeFoundrys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_foundry "nfo:foundry" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFoundrys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::foundry::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > getFoundry()
					
					
					Returns the property \ref nfo_foundry "nfo:foundry". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< nco::Contact > getFoundry() { return baseGetObject< nfo::foundry >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > setFoundry(::SopranoLive::Live< nco::Contact > const &foundry_)
					
					
					Sets the property \ref nfo_foundry "nfo:foundry" to the given \a foundry.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< nco::Contact > setFoundry(::SopranoLive::Live< nco::Contact > const &foundry_) { return baseSetObject< nfo::foundry >( foundry_ ); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > firstFoundry()
					
					
					Returns the first property \ref nfo_foundry "nfo:foundry". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nco::Contact > firstFoundry() { return baseFirstObject< nfo::foundry >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addFoundry()
					
					
					Adds a new uniquely named resource to the property \ref nfo_foundry "nfo:foundry" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addFoundry() { return baseAddObject< nfo::foundry >(); }
				/*!
					\fn ::SopranoLive::Live< nco::Contact > addFoundry(::SopranoLive::Live< nco::Contact > const &foundry_)
					
					
					Adds the given \a foundry_ to the property \ref nfo_foundry "nfo:foundry" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nco::Contact > addFoundry(::SopranoLive::Live< nco::Contact > const &foundry_) { return baseAddObject< nfo::foundry >( foundry_ ); }
				/*!
					\fn void removeFoundry(::SopranoLive::Live< nco::Contact > const &foundry_)
					
					
					Removes the given \a foundry_ from the property \ref nfo_foundry "nfo:foundry" set.
					\sa LiveResource::removeObject
				 */
				void removeFoundry(::SopranoLive::Live< nco::Contact > const &foundry_) { baseRemoveObject< nfo::foundry >(foundry_); }

				/* Property generated from nfo:fontFamily
				 * \n The name of the font family.
				 * \n rdfs:label=fontFamily
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:Font
				 * \n tracker:weight=5
				 * \n tracker:modified=1490
				 * \n tracker:fulltextIndexed=true
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFontFamilys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_fontFamily "nfo:fontFamily" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFontFamilys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::fontFamily >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFontFamilys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_fontFamily "nfo:fontFamily" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFontFamilys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::fontFamily >(object_info, strategy, parent); }
				/*!
					\fn void setFontFamilys(LiveNodes const &fontFamily_)
					
					
					Sets the property \ref nfo_fontFamily "nfo:fontFamily" set to the given \a fontFamily_ set.
					\sa LiveResource::setObjects
				 */
				void setFontFamilys(LiveNodes const &fontFamily_) { baseSetObjects(nfo::fontFamily::iri(), fontFamily_); }
				/*!
					\fn void removeFontFamilys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_fontFamily "nfo:fontFamily" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFontFamilys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::fontFamily::iri(), object_info); }
				/*!
					\fn QString getFontFamily()
					
					
					Returns the property \ref nfo_fontFamily "nfo:fontFamily". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getFontFamily() { return baseGetObject< nfo::fontFamily >(); }
				/*!
					\fn void setFontFamily(QString const &fontFamily_)
					
					
					Sets the property \ref nfo_fontFamily "nfo:fontFamily" to the given \a fontFamily.
					\sa LiveResource::setObject
				 */
				void setFontFamily(QString const &fontFamily_) { baseSetObject< nfo::fontFamily >( fontFamily_ ); }
				/*!
					\fn QString firstFontFamily()
					
					
					Returns the first property \ref nfo_fontFamily "nfo:fontFamily". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstFontFamily() { return baseFirstObject< nfo::fontFamily >(); }
				/*!
					\fn void addFontFamily(QString const &fontFamily_)
					
					
					Adds the given \a fontFamily_ to the property \ref nfo_fontFamily "nfo:fontFamily" set.
					\sa LiveResource::addObject
				 */
				void addFontFamily(QString const &fontFamily_) { baseAddObject< nfo::fontFamily >( fontFamily_ ); }
				/*!
					\fn void removeFontFamily(QString const &fontFamily_)
					
					
					Removes the given \a fontFamily_ from the property \ref nfo_fontFamily "nfo:fontFamily" set.
					\sa LiveResource::removeObject
				 */
				void removeFontFamily(QString const &fontFamily_) { baseRemoveObject< nfo::fontFamily >(fontFamily_); }
				 //@}
			};

			/*! Class generated from nfo:HardDiskPartition
			 * \ingroup onto_nfo_classes
			 * A partition on a hard disk
			 * 
			 * rdfs:label = HardDiskPartition
			 * 
			 * tracker:modified = 1627
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class HardDiskPartition
				: public virtual nie::DataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#HardDiskPartition"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::DataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<HardDiskPartition> Live;
				HardDiskPartition() { this->attachInterfaceHelper< HardDiskPartition >(); }
				~HardDiskPartition() { this->detachInterfaceHelper< HardDiskPartition >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:HelpDocument
			 * \ingroup onto_nfo_classes
			 * User guides and similar to assist the user
			 * 
			 * rdfs:label = Help document
			 * 
			 * tracker:modified = 1309
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class HelpDocument
				: public virtual Document

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#HelpDocument"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Document, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<HelpDocument> Live;
				HelpDocument() { this->attachInterfaceHelper< HelpDocument >(); }
				~HelpDocument() { this->detachInterfaceHelper< HelpDocument >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:TextDocument
			 * \ingroup onto_nfo_classes
			 * A text document
			 * 
			 * rdfs:label = TextDocument
			 * 
			 * tracker:modified = 1940
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class TextDocument
				: public virtual Document

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#TextDocument"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Document, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<TextDocument> Live;
				TextDocument() { this->attachInterfaceHelper< TextDocument >(); }
				~TextDocument() { this->detachInterfaceHelper< TextDocument >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:wordCount
				 * \n The amount of words in a text document.
				 * \n rdfs:label=wordCount
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:TextDocument
				 * \n tracker:modified=1293
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveWordCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_wordCount "nfo:wordCount" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveWordCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::wordCount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getWordCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_wordCount "nfo:wordCount" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getWordCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::wordCount >(object_info, strategy, parent); }
				/*!
					\fn void setWordCounts(LiveNodes const &wordCount_)
					
					
					Sets the property \ref nfo_wordCount "nfo:wordCount" set to the given \a wordCount_ set.
					\sa LiveResource::setObjects
				 */
				void setWordCounts(LiveNodes const &wordCount_) { baseSetObjects(nfo::wordCount::iri(), wordCount_); }
				/*!
					\fn void removeWordCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_wordCount "nfo:wordCount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeWordCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::wordCount::iri(), object_info); }
				/*!
					\fn qint64 getWordCount()
					
					
					Returns the property \ref nfo_wordCount "nfo:wordCount". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getWordCount() { return baseGetObject< nfo::wordCount >(); }
				/*!
					\fn void setWordCount(qint64 const &wordCount_)
					
					
					Sets the property \ref nfo_wordCount "nfo:wordCount" to the given \a wordCount.
					\sa LiveResource::setObject
				 */
				void setWordCount(qint64 const &wordCount_) { baseSetObject< nfo::wordCount >( wordCount_ ); }
				/*!
					\fn qint64 firstWordCount()
					
					
					Returns the first property \ref nfo_wordCount "nfo:wordCount". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstWordCount() { return baseFirstObject< nfo::wordCount >(); }
				/*!
					\fn void addWordCount(qint64 const &wordCount_)
					
					
					Adds the given \a wordCount_ to the property \ref nfo_wordCount "nfo:wordCount" set.
					\sa LiveResource::addObject
				 */
				void addWordCount(qint64 const &wordCount_) { baseAddObject< nfo::wordCount >( wordCount_ ); }
				/*!
					\fn void removeWordCount(qint64 const &wordCount_)
					
					
					Removes the given \a wordCount_ from the property \ref nfo_wordCount "nfo:wordCount" set.
					\sa LiveResource::removeObject
				 */
				void removeWordCount(qint64 const &wordCount_) { baseRemoveObject< nfo::wordCount >(wordCount_); }

				/* Property generated from nfo:lineCount
				 * \n The amount of lines in a text document
				 * \n rdfs:label=lineCount
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:TextDocument
				 * \n tracker:modified=1744
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveLineCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_lineCount "nfo:lineCount" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveLineCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::lineCount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getLineCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_lineCount "nfo:lineCount" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getLineCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::lineCount >(object_info, strategy, parent); }
				/*!
					\fn void setLineCounts(LiveNodes const &lineCount_)
					
					
					Sets the property \ref nfo_lineCount "nfo:lineCount" set to the given \a lineCount_ set.
					\sa LiveResource::setObjects
				 */
				void setLineCounts(LiveNodes const &lineCount_) { baseSetObjects(nfo::lineCount::iri(), lineCount_); }
				/*!
					\fn void removeLineCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_lineCount "nfo:lineCount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeLineCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::lineCount::iri(), object_info); }
				/*!
					\fn qint64 getLineCount()
					
					
					Returns the property \ref nfo_lineCount "nfo:lineCount". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getLineCount() { return baseGetObject< nfo::lineCount >(); }
				/*!
					\fn void setLineCount(qint64 const &lineCount_)
					
					
					Sets the property \ref nfo_lineCount "nfo:lineCount" to the given \a lineCount.
					\sa LiveResource::setObject
				 */
				void setLineCount(qint64 const &lineCount_) { baseSetObject< nfo::lineCount >( lineCount_ ); }
				/*!
					\fn qint64 firstLineCount()
					
					
					Returns the first property \ref nfo_lineCount "nfo:lineCount". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstLineCount() { return baseFirstObject< nfo::lineCount >(); }
				/*!
					\fn void addLineCount(qint64 const &lineCount_)
					
					
					Adds the given \a lineCount_ to the property \ref nfo_lineCount "nfo:lineCount" set.
					\sa LiveResource::addObject
				 */
				void addLineCount(qint64 const &lineCount_) { baseAddObject< nfo::lineCount >( lineCount_ ); }
				/*!
					\fn void removeLineCount(qint64 const &lineCount_)
					
					
					Removes the given \a lineCount_ from the property \ref nfo_lineCount "nfo:lineCount" set.
					\sa LiveResource::removeObject
				 */
				void removeLineCount(qint64 const &lineCount_) { baseRemoveObject< nfo::lineCount >(lineCount_); }

				/* Property generated from nfo:characterCount
				 * \n The amount of characters in the document.
				 * \n rdfs:label=characterCount
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:TextDocument
				 * \n tracker:modified=1091
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCharacterCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_characterCount "nfo:characterCount" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCharacterCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::characterCount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCharacterCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_characterCount "nfo:characterCount" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCharacterCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::characterCount >(object_info, strategy, parent); }
				/*!
					\fn void setCharacterCounts(LiveNodes const &characterCount_)
					
					
					Sets the property \ref nfo_characterCount "nfo:characterCount" set to the given \a characterCount_ set.
					\sa LiveResource::setObjects
				 */
				void setCharacterCounts(LiveNodes const &characterCount_) { baseSetObjects(nfo::characterCount::iri(), characterCount_); }
				/*!
					\fn void removeCharacterCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_characterCount "nfo:characterCount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCharacterCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::characterCount::iri(), object_info); }
				/*!
					\fn qint64 getCharacterCount()
					
					
					Returns the property \ref nfo_characterCount "nfo:characterCount". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getCharacterCount() { return baseGetObject< nfo::characterCount >(); }
				/*!
					\fn void setCharacterCount(qint64 const &characterCount_)
					
					
					Sets the property \ref nfo_characterCount "nfo:characterCount" to the given \a characterCount.
					\sa LiveResource::setObject
				 */
				void setCharacterCount(qint64 const &characterCount_) { baseSetObject< nfo::characterCount >( characterCount_ ); }
				/*!
					\fn qint64 firstCharacterCount()
					
					
					Returns the first property \ref nfo_characterCount "nfo:characterCount". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstCharacterCount() { return baseFirstObject< nfo::characterCount >(); }
				/*!
					\fn void addCharacterCount(qint64 const &characterCount_)
					
					
					Adds the given \a characterCount_ to the property \ref nfo_characterCount "nfo:characterCount" set.
					\sa LiveResource::addObject
				 */
				void addCharacterCount(qint64 const &characterCount_) { baseAddObject< nfo::characterCount >( characterCount_ ); }
				/*!
					\fn void removeCharacterCount(qint64 const &characterCount_)
					
					
					Removes the given \a characterCount_ from the property \ref nfo_characterCount "nfo:characterCount" set.
					\sa LiveResource::removeObject
				 */
				void removeCharacterCount(qint64 const &characterCount_) { baseRemoveObject< nfo::characterCount >(characterCount_); }
				 //@}
			};

			/*! Class generated from nfo:PlainTextDocument
			 * \ingroup onto_nfo_classes
			 * A file containing plain text (ASCII, Unicode or other encodings). Examples may include TXT, HTML, XML, program source code etc.
			 * 
			 * rdfs:label = PlainTextDocument
			 * 
			 * tracker:modified = 1973
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class PlainTextDocument
				: public virtual TextDocument

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#PlainTextDocument"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<TextDocument, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<PlainTextDocument> Live;
				PlainTextDocument() { this->attachInterfaceHelper< PlainTextDocument >(); }
				~PlainTextDocument() { this->detachInterfaceHelper< PlainTextDocument >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:HtmlDocument
			 * \ingroup onto_nfo_classes
			 * A HTML document, may contain links to other files.
			 * 
			 * rdfs:label = HtmlDocument
			 * 
			 * tracker:modified = 1392
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class HtmlDocument
				: public virtual PlainTextDocument

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#HtmlDocument"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PlainTextDocument, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<HtmlDocument> Live;
				HtmlDocument() { this->attachInterfaceHelper< HtmlDocument >(); }
				~HtmlDocument() { this->detachInterfaceHelper< HtmlDocument >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:Icon
			 * \ingroup onto_nfo_classes
			 * An Icon (regardless of whether it's a raster or a vector icon. A resource representing an icon could have two types (Icon and Raster, or Icon and Vector) if required.
			 * 
			 * rdfs:label = Icon
			 * 
			 * tracker:modified = 1333
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Icon
				: public virtual Image

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Icon"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Image, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Icon> Live;
				Icon() { this->attachInterfaceHelper< Icon >(); }
				~Icon() { this->detachInterfaceHelper< Icon >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:MediaFileListEntry
			 * \ingroup onto_nfo_classes
			 * A single node in the list of media files contained within an MediaList instance. This class is intended to provide a type all those links have. In valid NRL untyped resources cannot be linked. There are no properties defined for this class but the application may expect rdf:first and rdf:last links. The former points to the DataObject instance, interpreted as Media the latter points at another MediaFileListEntr. At the end of the list there is a link to rdf:nil.
			 * 
			 * rdfs:label = MediaFileListEntry
			 * 
			 * tracker:modified = 1437
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nfo_hasMediaFileListEntry "nfo:hasMediaFileListEntry"
			 */
			class MediaFileListEntry
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#MediaFileListEntry"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MediaFileListEntry> Live;
				MediaFileListEntry() { this->attachInterfaceHelper< MediaFileListEntry >(); }
				~MediaFileListEntry() { this->detachInterfaceHelper< MediaFileListEntry >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:entryUrl
				 * \n URI to the element in certain position of the list
				 * \n rdfs:label=Entry URL
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:MediaFileListEntry
				 * \n tracker:writeback=true
				 * \n tracker:modified=1279
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEntryUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_entryUrl "nfo:entryUrl" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEntryUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::entryUrl >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEntryUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_entryUrl "nfo:entryUrl" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEntryUrls(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::entryUrl >(object_info, strategy, parent); }
				/*!
					\fn void setEntryUrls(LiveNodes const &entryUrl_)
					
					
					Sets the property \ref nfo_entryUrl "nfo:entryUrl" set to the given \a entryUrl_ set.
					\sa LiveResource::setObjects
				 */
				void setEntryUrls(LiveNodes const &entryUrl_) { baseSetObjects(nfo::entryUrl::iri(), entryUrl_); }
				/*!
					\fn void removeEntryUrls(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_entryUrl "nfo:entryUrl" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEntryUrls(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::entryUrl::iri(), object_info); }
				/*!
					\fn QString getEntryUrl()
					
					
					Returns the property \ref nfo_entryUrl "nfo:entryUrl". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getEntryUrl() { return baseGetObject< nfo::entryUrl >(); }
				/*!
					\fn void setEntryUrl(QString const &entryUrl_)
					
					
					Sets the property \ref nfo_entryUrl "nfo:entryUrl" to the given \a entryUrl.
					\sa LiveResource::setObject
				 */
				void setEntryUrl(QString const &entryUrl_) { baseSetObject< nfo::entryUrl >( entryUrl_ ); }
				/*!
					\fn QString firstEntryUrl()
					
					
					Returns the first property \ref nfo_entryUrl "nfo:entryUrl". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstEntryUrl() { return baseFirstObject< nfo::entryUrl >(); }
				/*!
					\fn void addEntryUrl(QString const &entryUrl_)
					
					
					Adds the given \a entryUrl_ to the property \ref nfo_entryUrl "nfo:entryUrl" set.
					\sa LiveResource::addObject
				 */
				void addEntryUrl(QString const &entryUrl_) { baseAddObject< nfo::entryUrl >( entryUrl_ ); }
				/*!
					\fn void removeEntryUrl(QString const &entryUrl_)
					
					
					Removes the given \a entryUrl_ from the property \ref nfo_entryUrl "nfo:entryUrl" set.
					\sa LiveResource::removeObject
				 */
				void removeEntryUrl(QString const &entryUrl_) { baseRemoveObject< nfo::entryUrl >(entryUrl_); }

				/* Property generated from nfo:listPosition
				 * \n Position of an entry in a list. Double, to optimize the poor insertions
				 * \n rdfs:label=list position
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nfo:MediaFileListEntry
				 * \n tracker:writeback=true
				 * \n tracker:modified=1381
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveListPositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_listPosition "nfo:listPosition" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveListPositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::listPosition >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getListPositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_listPosition "nfo:listPosition" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getListPositions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::listPosition >(object_info, strategy, parent); }
				/*!
					\fn void setListPositions(LiveNodes const &listPosition_)
					
					
					Sets the property \ref nfo_listPosition "nfo:listPosition" set to the given \a listPosition_ set.
					\sa LiveResource::setObjects
				 */
				void setListPositions(LiveNodes const &listPosition_) { baseSetObjects(nfo::listPosition::iri(), listPosition_); }
				/*!
					\fn void removeListPositions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_listPosition "nfo:listPosition" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeListPositions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::listPosition::iri(), object_info); }
				/*!
					\fn double getListPosition()
					
					
					Returns the property \ref nfo_listPosition "nfo:listPosition". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getListPosition() { return baseGetObject< nfo::listPosition >(); }
				/*!
					\fn void setListPosition(double const &listPosition_)
					
					
					Sets the property \ref nfo_listPosition "nfo:listPosition" to the given \a listPosition.
					\sa LiveResource::setObject
				 */
				void setListPosition(double const &listPosition_) { baseSetObject< nfo::listPosition >( listPosition_ ); }
				/*!
					\fn double firstListPosition()
					
					
					Returns the first property \ref nfo_listPosition "nfo:listPosition". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstListPosition() { return baseFirstObject< nfo::listPosition >(); }
				/*!
					\fn void addListPosition(double const &listPosition_)
					
					
					Adds the given \a listPosition_ to the property \ref nfo_listPosition "nfo:listPosition" set.
					\sa LiveResource::addObject
				 */
				void addListPosition(double const &listPosition_) { baseAddObject< nfo::listPosition >( listPosition_ ); }
				/*!
					\fn void removeListPosition(double const &listPosition_)
					
					
					Removes the given \a listPosition_ from the property \ref nfo_listPosition "nfo:listPosition" set.
					\sa LiveResource::removeObject
				 */
				void removeListPosition(double const &listPosition_) { baseRemoveObject< nfo::listPosition >(listPosition_); }

				/* Property generated from nfo:entryContent
				 * \n URI to the element in certain position of the list
				 * \n This class/property has been deprecated. Other comments should contain information on the replacing practice.
				 * \n rdfs:label=Entry content
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nie:InformationElement
				 * \n rdfs:domain=nfo:MediaFileListEntry
				 * \n tracker:writeback=true
				 * \n tracker:modified=1753
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nie::InformationElement InformationElement;
				/*!
					\fn LiveNodes liveEntryContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nfo::entryContent for replacement
					Returns a live model of property \ref nfo_entryContent "nfo:entryContent" set.
					\sa LiveResource::liveObjects
				 */
				SOPRANO_DEPRECATED LiveNodes liveEntryContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::entryContent >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEntryContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					\deprecated See \ref nfo::entryContent for replacement
					Returns all current values of property \ref nfo_entryContent "nfo:entryContent" set.
					\sa LiveResource::getObjects
				 */
				SOPRANO_DEPRECATED LiveNodes getEntryContents(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::entryContent >(object_info, strategy, parent); }
				/*!
					\fn void setEntryContents(LiveNodes const &entryContent_)
					
					\deprecated See \ref nfo::entryContent for replacement
					Sets the property \ref nfo_entryContent "nfo:entryContent" set to the given \a entryContent_ set.
					\sa LiveResource::setObjects
				 */
				SOPRANO_DEPRECATED void setEntryContents(LiveNodes const &entryContent_) { baseSetObjects(nfo::entryContent::iri(), entryContent_); }
				/*!
					\fn void removeEntryContents(RDFVariable const &object_info = RDFVariable())
					
					\deprecated See \ref nfo::entryContent for replacement
					Removes the properties from property \ref nfo_entryContent "nfo:entryContent" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				SOPRANO_DEPRECATED void removeEntryContents(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::entryContent::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nie::InformationElement > getEntryContent()
					
					\deprecated See \ref nfo::entryContent for replacement
					Returns the property \ref nfo_entryContent "nfo:entryContent". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< nie::InformationElement > getEntryContent() { return baseGetObject< nfo::entryContent >(); }
				/*!
					\fn ::SopranoLive::Live< nie::InformationElement > setEntryContent(::SopranoLive::Live< nie::InformationElement > const &entryContent_)
					
					\deprecated See \ref nfo::entryContent for replacement
					Sets the property \ref nfo_entryContent "nfo:entryContent" to the given \a entryContent.
					\sa LiveResource::setObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< nie::InformationElement > setEntryContent(::SopranoLive::Live< nie::InformationElement > const &entryContent_) { return baseSetObject< nfo::entryContent >( entryContent_ ); }
				/*!
					\fn ::SopranoLive::Live< nie::InformationElement > firstEntryContent()
					
					\deprecated See \ref nfo::entryContent for replacement
					Returns the first property \ref nfo_entryContent "nfo:entryContent". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< nie::InformationElement > firstEntryContent() { return baseFirstObject< nfo::entryContent >(); }
				/*!
					\fn ::SopranoLive::Live< nie::InformationElement > addEntryContent()
					
					\deprecated See \ref nfo::entryContent for replacement
					Adds a new uniquely named resource to the property \ref nfo_entryContent "nfo:entryContent" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< nie::InformationElement > addEntryContent() { return baseAddObject< nfo::entryContent >(); }
				/*!
					\fn ::SopranoLive::Live< nie::InformationElement > addEntryContent(::SopranoLive::Live< nie::InformationElement > const &entryContent_)
					
					\deprecated See \ref nfo::entryContent for replacement
					Adds the given \a entryContent_ to the property \ref nfo_entryContent "nfo:entryContent" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				SOPRANO_DEPRECATED ::SopranoLive::Live< nie::InformationElement > addEntryContent(::SopranoLive::Live< nie::InformationElement > const &entryContent_) { return baseAddObject< nfo::entryContent >( entryContent_ ); }
				/*!
					\fn void removeEntryContent(::SopranoLive::Live< nie::InformationElement > const &entryContent_)
					
					\deprecated See \ref nfo::entryContent for replacement
					Removes the given \a entryContent_ from the property \ref nfo_entryContent "nfo:entryContent" set.
					\sa LiveResource::removeObject
				 */
				SOPRANO_DEPRECATED void removeEntryContent(::SopranoLive::Live< nie::InformationElement > const &entryContent_) { baseRemoveObject< nfo::entryContent >(entryContent_); }
				 //@}
			};

			/*! Class generated from nfo:MediaList
			 * \ingroup onto_nfo_classes
			 * A file containing a list of media files.e.g. a playlist
			 * 
			 * rdfs:label = MediaList
			 * 
			 * tracker:modified = 1870
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class MediaList
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#MediaList"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MediaList> Live;
				MediaList() { this->attachInterfaceHelper< MediaList >(); }
				~MediaList() { this->detachInterfaceHelper< MediaList >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:listDuration
				 * \n Sum of the duration of all items in the list. Optimize some common queries. In seconds
				 * \n rdfs:label=List duration
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:MediaList
				 * \n tracker:writeback=true
				 * \n tracker:modified=1618
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveListDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_listDuration "nfo:listDuration" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveListDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::listDuration >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getListDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_listDuration "nfo:listDuration" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getListDurations(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::listDuration >(object_info, strategy, parent); }
				/*!
					\fn void setListDurations(LiveNodes const &listDuration_)
					
					
					Sets the property \ref nfo_listDuration "nfo:listDuration" set to the given \a listDuration_ set.
					\sa LiveResource::setObjects
				 */
				void setListDurations(LiveNodes const &listDuration_) { baseSetObjects(nfo::listDuration::iri(), listDuration_); }
				/*!
					\fn void removeListDurations(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_listDuration "nfo:listDuration" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeListDurations(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::listDuration::iri(), object_info); }
				/*!
					\fn qint64 getListDuration()
					
					
					Returns the property \ref nfo_listDuration "nfo:listDuration". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getListDuration() { return baseGetObject< nfo::listDuration >(); }
				/*!
					\fn void setListDuration(qint64 const &listDuration_)
					
					
					Sets the property \ref nfo_listDuration "nfo:listDuration" to the given \a listDuration.
					\sa LiveResource::setObject
				 */
				void setListDuration(qint64 const &listDuration_) { baseSetObject< nfo::listDuration >( listDuration_ ); }
				/*!
					\fn qint64 firstListDuration()
					
					
					Returns the first property \ref nfo_listDuration "nfo:listDuration". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstListDuration() { return baseFirstObject< nfo::listDuration >(); }
				/*!
					\fn void addListDuration(qint64 const &listDuration_)
					
					
					Adds the given \a listDuration_ to the property \ref nfo_listDuration "nfo:listDuration" set.
					\sa LiveResource::addObject
				 */
				void addListDuration(qint64 const &listDuration_) { baseAddObject< nfo::listDuration >( listDuration_ ); }
				/*!
					\fn void removeListDuration(qint64 const &listDuration_)
					
					
					Removes the given \a listDuration_ from the property \ref nfo_listDuration "nfo:listDuration" set.
					\sa LiveResource::removeObject
				 */
				void removeListDuration(qint64 const &listDuration_) { baseRemoveObject< nfo::listDuration >(listDuration_); }

				/* Property generated from nfo:mediaListEntry
				 * \n A certain item belongs to a media list. This can reflect that a song is in a playlist, an image or video in an Album
				 * \n rdfs:range=nie:InformationElement
				 * \n rdfs:label=Media list entry
				 * \n tracker:modified=1282
				 * \n rdfs:domain=nfo:MediaList
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
// property api changing 			typedef nie::InformationElement InformationElement;
				/*!
					\fn LiveNodes liveMediaListEntrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_mediaListEntry "nfo:mediaListEntry" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMediaListEntrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::mediaListEntry >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMediaListEntrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_mediaListEntry "nfo:mediaListEntry" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMediaListEntrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::mediaListEntry >(object_info, strategy, parent); }
				/*!
					\fn void setMediaListEntrys(LiveNodes const &mediaListEntry_)
					
					
					Sets the property \ref nfo_mediaListEntry "nfo:mediaListEntry" set to the given \a mediaListEntry_ set.
					\sa LiveResource::setObjects
				 */
				void setMediaListEntrys(LiveNodes const &mediaListEntry_) { baseSetObjects(nfo::mediaListEntry::iri(), mediaListEntry_); }
				/*!
					\fn void removeMediaListEntrys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_mediaListEntry "nfo:mediaListEntry" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMediaListEntrys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::mediaListEntry::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< nie::InformationElement > firstMediaListEntry()
					
					
					Returns the first property \ref nfo_mediaListEntry "nfo:mediaListEntry". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< nie::InformationElement > firstMediaListEntry() { return baseFirstObject< nfo::mediaListEntry >(); }
				/*!
					\fn ::SopranoLive::Live< nie::InformationElement > addMediaListEntry()
					
					
					Adds a new uniquely named resource to the property \ref nfo_mediaListEntry "nfo:mediaListEntry" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::InformationElement > addMediaListEntry() { return baseAddObject< nfo::mediaListEntry >(); }
				/*!
					\fn ::SopranoLive::Live< nie::InformationElement > addMediaListEntry(::SopranoLive::Live< nie::InformationElement > const &mediaListEntry_)
					
					
					Adds the given \a mediaListEntry_ to the property \ref nfo_mediaListEntry "nfo:mediaListEntry" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< nie::InformationElement > addMediaListEntry(::SopranoLive::Live< nie::InformationElement > const &mediaListEntry_) { return baseAddObject< nfo::mediaListEntry >( mediaListEntry_ ); }
				/*!
					\fn void removeMediaListEntry(::SopranoLive::Live< nie::InformationElement > const &mediaListEntry_)
					
					
					Removes the given \a mediaListEntry_ from the property \ref nfo_mediaListEntry "nfo:mediaListEntry" set.
					\sa LiveResource::removeObject
				 */
				void removeMediaListEntry(::SopranoLive::Live< nie::InformationElement > const &mediaListEntry_) { baseRemoveObject< nfo::mediaListEntry >(mediaListEntry_); }

				/* Property generated from nfo:hasMediaFileListEntry
				 * \n This property is intended to point to an RDF list of MediaFiles.
				 * \n rdfs:label=hasMediaFileListEntry
				 * \n rdfs:range=nfo:MediaFileListEntry
				 * \n rdfs:domain=nfo:MediaList
				 * \n tracker:writeback=true
				 * \n tracker:modified=1319
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveHasMediaFileListEntrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_hasMediaFileListEntry "nfo:hasMediaFileListEntry" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveHasMediaFileListEntrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::hasMediaFileListEntry >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getHasMediaFileListEntrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_hasMediaFileListEntry "nfo:hasMediaFileListEntry" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getHasMediaFileListEntrys(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::hasMediaFileListEntry >(object_info, strategy, parent); }
				/*!
					\fn void setHasMediaFileListEntrys(LiveNodes const &hasMediaFileListEntry_)
					
					
					Sets the property \ref nfo_hasMediaFileListEntry "nfo:hasMediaFileListEntry" set to the given \a hasMediaFileListEntry_ set.
					\sa LiveResource::setObjects
				 */
				void setHasMediaFileListEntrys(LiveNodes const &hasMediaFileListEntry_) { baseSetObjects(nfo::hasMediaFileListEntry::iri(), hasMediaFileListEntry_); }
				/*!
					\fn void removeHasMediaFileListEntrys(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_hasMediaFileListEntry "nfo:hasMediaFileListEntry" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeHasMediaFileListEntrys(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::hasMediaFileListEntry::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< MediaFileListEntry > firstHasMediaFileListEntry()
					
					
					Returns the first property \ref nfo_hasMediaFileListEntry "nfo:hasMediaFileListEntry". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< MediaFileListEntry > firstHasMediaFileListEntry() { return baseFirstObject< nfo::hasMediaFileListEntry >(); }
				/*!
					\fn ::SopranoLive::Live< MediaFileListEntry > addHasMediaFileListEntry()
					
					
					Adds a new uniquely named resource to the property \ref nfo_hasMediaFileListEntry "nfo:hasMediaFileListEntry" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< MediaFileListEntry > addHasMediaFileListEntry() { return baseAddObject< nfo::hasMediaFileListEntry >(); }
				/*!
					\fn ::SopranoLive::Live< MediaFileListEntry > addHasMediaFileListEntry(::SopranoLive::Live< MediaFileListEntry > const &hasMediaFileListEntry_)
					
					
					Adds the given \a hasMediaFileListEntry_ to the property \ref nfo_hasMediaFileListEntry "nfo:hasMediaFileListEntry" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< MediaFileListEntry > addHasMediaFileListEntry(::SopranoLive::Live< MediaFileListEntry > const &hasMediaFileListEntry_) { return baseAddObject< nfo::hasMediaFileListEntry >( hasMediaFileListEntry_ ); }
				/*!
					\fn void removeHasMediaFileListEntry(::SopranoLive::Live< MediaFileListEntry > const &hasMediaFileListEntry_)
					
					
					Removes the given \a hasMediaFileListEntry_ from the property \ref nfo_hasMediaFileListEntry "nfo:hasMediaFileListEntry" set.
					\sa LiveResource::removeObject
				 */
				void removeHasMediaFileListEntry(::SopranoLive::Live< MediaFileListEntry > const &hasMediaFileListEntry_) { baseRemoveObject< nfo::hasMediaFileListEntry >(hasMediaFileListEntry_); }

				/* Property generated from nfo:entryCounter
				 * \n Number of entries in the list. Optimize some common queries
				 * \n rdfs:label=entry Counter
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:MediaList
				 * \n tracker:writeback=true
				 * \n tracker:modified=1520
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveEntryCounters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_entryCounter "nfo:entryCounter" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveEntryCounters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::entryCounter >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getEntryCounters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_entryCounter "nfo:entryCounter" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getEntryCounters(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::entryCounter >(object_info, strategy, parent); }
				/*!
					\fn void setEntryCounters(LiveNodes const &entryCounter_)
					
					
					Sets the property \ref nfo_entryCounter "nfo:entryCounter" set to the given \a entryCounter_ set.
					\sa LiveResource::setObjects
				 */
				void setEntryCounters(LiveNodes const &entryCounter_) { baseSetObjects(nfo::entryCounter::iri(), entryCounter_); }
				/*!
					\fn void removeEntryCounters(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_entryCounter "nfo:entryCounter" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeEntryCounters(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::entryCounter::iri(), object_info); }
				/*!
					\fn qint64 getEntryCounter()
					
					
					Returns the property \ref nfo_entryCounter "nfo:entryCounter". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getEntryCounter() { return baseGetObject< nfo::entryCounter >(); }
				/*!
					\fn void setEntryCounter(qint64 const &entryCounter_)
					
					
					Sets the property \ref nfo_entryCounter "nfo:entryCounter" to the given \a entryCounter.
					\sa LiveResource::setObject
				 */
				void setEntryCounter(qint64 const &entryCounter_) { baseSetObject< nfo::entryCounter >( entryCounter_ ); }
				/*!
					\fn qint64 firstEntryCounter()
					
					
					Returns the first property \ref nfo_entryCounter "nfo:entryCounter". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstEntryCounter() { return baseFirstObject< nfo::entryCounter >(); }
				/*!
					\fn void addEntryCounter(qint64 const &entryCounter_)
					
					
					Adds the given \a entryCounter_ to the property \ref nfo_entryCounter "nfo:entryCounter" set.
					\sa LiveResource::addObject
				 */
				void addEntryCounter(qint64 const &entryCounter_) { baseAddObject< nfo::entryCounter >( entryCounter_ ); }
				/*!
					\fn void removeEntryCounter(qint64 const &entryCounter_)
					
					
					Removes the given \a entryCounter_ from the property \ref nfo_entryCounter "nfo:entryCounter" set.
					\sa LiveResource::removeObject
				 */
				void removeEntryCounter(qint64 const &entryCounter_) { baseRemoveObject< nfo::entryCounter >(entryCounter_); }
				 //@}
			};

			/*! Class generated from nfo:MediaStream
			 * \ingroup onto_nfo_classes
			 * A stream of multimedia content, usually contained within a media container such as a movie (containing both audio and video) or a DVD (possibly containing many streams of audio and video). Most common interpretations for such a DataObject include Audio and Video.
			 * 
			 * rdfs:label = MediaStream
			 * 
			 * tracker:modified = 1175
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class MediaStream
				: public virtual nie::DataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#MediaStream"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::DataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MediaStream> Live;
				MediaStream() { this->attachInterfaceHelper< MediaStream >(); }
				~MediaStream() { this->detachInterfaceHelper< MediaStream >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:MindMap
			 * \ingroup onto_nfo_classes
			 * A MindMap, created by a mind-mapping utility. Examples might include FreeMind or mind mapper.
			 * 
			 * rdfs:label = MindMap
			 * 
			 * tracker:modified = 1307
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class MindMap
				: public virtual Document

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#MindMap"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Document, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<MindMap> Live;
				MindMap() { this->attachInterfaceHelper< MindMap >(); }
				~MindMap() { this->detachInterfaceHelper< MindMap >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:OperatingSystem
			 * \ingroup onto_nfo_classes
			 * An OperatingSystem
			 * 
			 * rdfs:label = OperatingSystem
			 * 
			 * tracker:modified = 1891
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class OperatingSystem
				: public virtual Software

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#OperatingSystem"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Software, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<OperatingSystem> Live;
				OperatingSystem() { this->attachInterfaceHelper< OperatingSystem >(); }
				~OperatingSystem() { this->detachInterfaceHelper< OperatingSystem >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:Orientation
			 * \ingroup onto_nfo_classes
			 * Orientation enum
			 * 
			 * rdfs:label = Orientation enum
			 * 
			 * tracker:modified = 1719
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 *
			 * 	\b Static \b resources \b of \b this \b class \b type \n
			 * 		\ref nfo_orientation_left "nfo:orientation-left"
			 * 		\ref nfo_orientation_top_mirror "nfo:orientation-top-mirror"
			 * 		\ref nfo_orientation_left_mirror "nfo:orientation-left-mirror"
			 * 		\ref nfo_orientation_top "nfo:orientation-top"
			 * 		\ref nfo_orientation_bottom "nfo:orientation-bottom"
			 * 		\ref nfo_orientation_right "nfo:orientation-right"
			 * 		\ref nfo_orientation_bottom_mirror "nfo:orientation-bottom-mirror"
			 * 		\ref nfo_orientation_right_mirror "nfo:orientation-right-mirror"
			 *
			 * 	\b Properties \b having \b this \b class \b as \b Range \n
			 * 		\ref nfo_orientation "nfo:orientation"
			 */
			class Orientation
				: public virtual rdfs::Resource

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Orientation"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<rdfs::Resource, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Orientation> Live;
				Orientation() { this->attachInterfaceHelper< Orientation >(); }
				~Orientation() { this->detachInterfaceHelper< Orientation >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:PaginatedTextDocument
			 * \ingroup onto_nfo_classes
			 * A file containing a text document, that is unambiguously divided into pages. Examples might include PDF, DOC, PS', DVI etc.
			 * 
			 * rdfs:label = PaginatedTextDocument
			 * 
			 * tracker:modified = 1634
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class PaginatedTextDocument
				: public virtual TextDocument

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#PaginatedTextDocument"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<TextDocument, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<PaginatedTextDocument> Live;
				PaginatedTextDocument() { this->attachInterfaceHelper< PaginatedTextDocument >(); }
				~PaginatedTextDocument() { this->detachInterfaceHelper< PaginatedTextDocument >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:pageCount
				 * \n Number of pages.
				 * \n rdfs:label=pageCount
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:PaginatedTextDocument
				 * \n tracker:modified=1773
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes livePageCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_pageCount "nfo:pageCount" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes livePageCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::pageCount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getPageCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_pageCount "nfo:pageCount" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getPageCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::pageCount >(object_info, strategy, parent); }
				/*!
					\fn void setPageCounts(LiveNodes const &pageCount_)
					
					
					Sets the property \ref nfo_pageCount "nfo:pageCount" set to the given \a pageCount_ set.
					\sa LiveResource::setObjects
				 */
				void setPageCounts(LiveNodes const &pageCount_) { baseSetObjects(nfo::pageCount::iri(), pageCount_); }
				/*!
					\fn void removePageCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_pageCount "nfo:pageCount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removePageCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::pageCount::iri(), object_info); }
				/*!
					\fn qint64 getPageCount()
					
					
					Returns the property \ref nfo_pageCount "nfo:pageCount". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getPageCount() { return baseGetObject< nfo::pageCount >(); }
				/*!
					\fn void setPageCount(qint64 const &pageCount_)
					
					
					Sets the property \ref nfo_pageCount "nfo:pageCount" to the given \a pageCount.
					\sa LiveResource::setObject
				 */
				void setPageCount(qint64 const &pageCount_) { baseSetObject< nfo::pageCount >( pageCount_ ); }
				/*!
					\fn qint64 firstPageCount()
					
					
					Returns the first property \ref nfo_pageCount "nfo:pageCount". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstPageCount() { return baseFirstObject< nfo::pageCount >(); }
				/*!
					\fn void addPageCount(qint64 const &pageCount_)
					
					
					Adds the given \a pageCount_ to the property \ref nfo_pageCount "nfo:pageCount" set.
					\sa LiveResource::addObject
				 */
				void addPageCount(qint64 const &pageCount_) { baseAddObject< nfo::pageCount >( pageCount_ ); }
				/*!
					\fn void removePageCount(qint64 const &pageCount_)
					
					
					Removes the given \a pageCount_ from the property \ref nfo_pageCount "nfo:pageCount" set.
					\sa LiveResource::removeObject
				 */
				void removePageCount(qint64 const &pageCount_) { baseRemoveObject< nfo::pageCount >(pageCount_); }
				 //@}
			};

			/*! Class generated from nfo:Presentation
			 * \ingroup onto_nfo_classes
			 * A Presentation made by some presentation software (Corel Presentations, OpenOffice Impress, MS Powerpoint etc.)
			 * 
			 * rdfs:label = Presentation
			 * 
			 * tracker:modified = 1193
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Presentation
				: public virtual Document

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Presentation"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Document, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Presentation> Live;
				Presentation() { this->attachInterfaceHelper< Presentation >(); }
				~Presentation() { this->detachInterfaceHelper< Presentation >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:RemoteDataObject
			 * \ingroup onto_nfo_classes
			 * A file data object stored at a remote location. Don't confuse this class with a RemotePortAddress. This one applies to a particular resource, RemotePortAddress applies to an address, that can have various interpretations.
			 * 
			 * rdfs:label = RemoteDataObject
			 * 
			 * tracker:modified = 1035
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class RemoteDataObject
				: public virtual FileDataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RemoteDataObject"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<FileDataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<RemoteDataObject> Live;
				RemoteDataObject() { this->attachInterfaceHelper< RemoteDataObject >(); }
				~RemoteDataObject() { this->detachInterfaceHelper< RemoteDataObject >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:RemotePortAddress
			 * \ingroup onto_nfo_classes
			 * An address specifying a remote host and port. Such an address can be interpreted in many ways (examples of such interpretations include mailboxes, websites, remote calendars or filesystems), depending on an interpretation, various kinds of data may be extracted from such an address.
			 * 
			 * rdfs:label = RemotePortAddress
			 * 
			 * tracker:modified = 1786
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class RemotePortAddress
				: public virtual nie::DataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RemotePortAddress"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::DataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<RemotePortAddress> Live;
				RemotePortAddress() { this->attachInterfaceHelper< RemotePortAddress >(); }
				~RemotePortAddress() { this->detachInterfaceHelper< RemotePortAddress >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:SoftwareApplication
			 * \ingroup onto_nfo_classes
			 * An application
			 * 
			 * rdfs:label = Application
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1322
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class SoftwareApplication
				: public virtual Software

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#SoftwareApplication"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Software, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<SoftwareApplication> Live;
				SoftwareApplication() { this->attachInterfaceHelper< SoftwareApplication >(); }
				~SoftwareApplication() { this->detachInterfaceHelper< SoftwareApplication >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:SoftwareCategory
			 * \ingroup onto_nfo_classes
			 * A software category
			 * 
			 * rdfs:label = Software
			 * 
			 * tracker:modified = 1523
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class SoftwareCategory
				: public virtual nie::InformationElement, public virtual DataContainer

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#SoftwareCategory"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, QPair<DataContainer, ::SopranoLive::Detail::EmptyBase > > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<SoftwareCategory> Live;
				SoftwareCategory() { this->attachInterfaceHelper< SoftwareCategory >(); }
				~SoftwareCategory() { this->detachInterfaceHelper< SoftwareCategory >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:softwareCategoryIcon
				 * \n Icon of the software
				 * \n rdfs:label=SoftwareIcon
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=nfo:Image
				 * \n rdfs:domain=nfo:SoftwareCategory
				 * \n tracker:modified=1467
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveSoftwareCategoryIcons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_softwareCategoryIcon "nfo:softwareCategoryIcon" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveSoftwareCategoryIcons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::softwareCategoryIcon >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getSoftwareCategoryIcons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_softwareCategoryIcon "nfo:softwareCategoryIcon" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getSoftwareCategoryIcons(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::softwareCategoryIcon >(object_info, strategy, parent); }
				/*!
					\fn void setSoftwareCategoryIcons(LiveNodes const &softwareCategoryIcon_)
					
					
					Sets the property \ref nfo_softwareCategoryIcon "nfo:softwareCategoryIcon" set to the given \a softwareCategoryIcon_ set.
					\sa LiveResource::setObjects
				 */
				void setSoftwareCategoryIcons(LiveNodes const &softwareCategoryIcon_) { baseSetObjects(nfo::softwareCategoryIcon::iri(), softwareCategoryIcon_); }
				/*!
					\fn void removeSoftwareCategoryIcons(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_softwareCategoryIcon "nfo:softwareCategoryIcon" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeSoftwareCategoryIcons(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::softwareCategoryIcon::iri(), object_info); }
				/*!
					\fn ::SopranoLive::Live< Image > getSoftwareCategoryIcon()
					
					
					Returns the property \ref nfo_softwareCategoryIcon "nfo:softwareCategoryIcon". If the property didn't exist, it is set to a new unique resource and returned.
					\sa LiveResource::getObject
				 */
				::SopranoLive::Live< Image > getSoftwareCategoryIcon() { return baseGetObject< nfo::softwareCategoryIcon >(); }
				/*!
					\fn ::SopranoLive::Live< Image > setSoftwareCategoryIcon(::SopranoLive::Live< Image > const &softwareCategoryIcon_)
					
					
					Sets the property \ref nfo_softwareCategoryIcon "nfo:softwareCategoryIcon" to the given \a softwareCategoryIcon.
					\sa LiveResource::setObject
				 */
				::SopranoLive::Live< Image > setSoftwareCategoryIcon(::SopranoLive::Live< Image > const &softwareCategoryIcon_) { return baseSetObject< nfo::softwareCategoryIcon >( softwareCategoryIcon_ ); }
				/*!
					\fn ::SopranoLive::Live< Image > firstSoftwareCategoryIcon()
					
					
					Returns the first property \ref nfo_softwareCategoryIcon "nfo:softwareCategoryIcon". If the property didn't exist, a null LiveNode is returned.
					\sa LiveResource::firstObject
				 */
				::SopranoLive::Live< Image > firstSoftwareCategoryIcon() { return baseFirstObject< nfo::softwareCategoryIcon >(); }
				/*!
					\fn ::SopranoLive::Live< Image > addSoftwareCategoryIcon()
					
					
					Adds a new uniquely named resource to the property \ref nfo_softwareCategoryIcon "nfo:softwareCategoryIcon" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Image > addSoftwareCategoryIcon() { return baseAddObject< nfo::softwareCategoryIcon >(); }
				/*!
					\fn ::SopranoLive::Live< Image > addSoftwareCategoryIcon(::SopranoLive::Live< Image > const &softwareCategoryIcon_)
					
					
					Adds the given \a softwareCategoryIcon_ to the property \ref nfo_softwareCategoryIcon "nfo:softwareCategoryIcon" set and returns a live version of it.
					\sa LiveResource::addObject
				 */
				::SopranoLive::Live< Image > addSoftwareCategoryIcon(::SopranoLive::Live< Image > const &softwareCategoryIcon_) { return baseAddObject< nfo::softwareCategoryIcon >( softwareCategoryIcon_ ); }
				/*!
					\fn void removeSoftwareCategoryIcon(::SopranoLive::Live< Image > const &softwareCategoryIcon_)
					
					
					Removes the given \a softwareCategoryIcon_ from the property \ref nfo_softwareCategoryIcon "nfo:softwareCategoryIcon" set.
					\sa LiveResource::removeObject
				 */
				void removeSoftwareCategoryIcon(::SopranoLive::Live< Image > const &softwareCategoryIcon_) { baseRemoveObject< nfo::softwareCategoryIcon >(softwareCategoryIcon_); }
				 //@}
			};

			/*! Class generated from nfo:SoftwareItem
			 * \ingroup onto_nfo_classes
			 * A DataObject representing a piece of software. Examples of interpretations of a SoftwareItem include an Application and an OperatingSystem.
			 * 
			 * rdfs:label = SoftwareItem
			 * 
			 * tracker:modified = 1793
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class SoftwareItem
				: public virtual nie::DataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#SoftwareItem"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::DataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<SoftwareItem> Live;
				SoftwareItem() { this->attachInterfaceHelper< SoftwareItem >(); }
				~SoftwareItem() { this->detachInterfaceHelper< SoftwareItem >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:SoftwareService
			 * \ingroup onto_nfo_classes
			 * A service published by a piece of software, either by an operating system or an application. Examples of such services may include calendar, addresbook and mailbox managed by a PIM application. This category is introduced to distinguish between data available directly from the applications (Via some Interprocess Communication Mechanisms) and data available from files on a disk. In either case both DataObjects would receive a similar interpretation (e.g. a Mailbox) and wouldn't differ on the content level.
			 * 
			 * rdfs:label = SoftwareService
			 * 
			 * tracker:modified = 1335
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class SoftwareService
				: public virtual nie::DataObject

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#SoftwareService"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::DataObject, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<SoftwareService> Live;
				SoftwareService() { this->attachInterfaceHelper< SoftwareService >(); }
				~SoftwareService() { this->detachInterfaceHelper< SoftwareService >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:SourceCode
			 * \ingroup onto_nfo_classes
			 * Code in a compilable or interpreted programming language.
			 * 
			 * rdfs:label = SourceCode
			 * 
			 * tracker:modified = 1430
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class SourceCode
				: public virtual PlainTextDocument

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#SourceCode"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<PlainTextDocument, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<SourceCode> Live;
				SourceCode() { this->attachInterfaceHelper< SourceCode >(); }
				~SourceCode() { this->detachInterfaceHelper< SourceCode >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:definesGlobalVariable
				 * \n Name of a global variable defined within the source code file.
				 * \n rdfs:label=definesGlobalVariable
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:SourceCode
				 * \n tracker:modified=1874
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDefinesGlobalVariables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_definesGlobalVariable "nfo:definesGlobalVariable" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDefinesGlobalVariables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::definesGlobalVariable >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDefinesGlobalVariables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_definesGlobalVariable "nfo:definesGlobalVariable" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDefinesGlobalVariables(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::definesGlobalVariable >(object_info, strategy, parent); }
				/*!
					\fn void setDefinesGlobalVariables(LiveNodes const &definesGlobalVariable_)
					
					
					Sets the property \ref nfo_definesGlobalVariable "nfo:definesGlobalVariable" set to the given \a definesGlobalVariable_ set.
					\sa LiveResource::setObjects
				 */
				void setDefinesGlobalVariables(LiveNodes const &definesGlobalVariable_) { baseSetObjects(nfo::definesGlobalVariable::iri(), definesGlobalVariable_); }
				/*!
					\fn void removeDefinesGlobalVariables(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_definesGlobalVariable "nfo:definesGlobalVariable" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDefinesGlobalVariables(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::definesGlobalVariable::iri(), object_info); }
				/*!
					\fn QString getDefinesGlobalVariable()
					
					
					Returns the property \ref nfo_definesGlobalVariable "nfo:definesGlobalVariable". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDefinesGlobalVariable() { return baseGetObject< nfo::definesGlobalVariable >(); }
				/*!
					\fn void setDefinesGlobalVariable(QString const &definesGlobalVariable_)
					
					
					Sets the property \ref nfo_definesGlobalVariable "nfo:definesGlobalVariable" to the given \a definesGlobalVariable.
					\sa LiveResource::setObject
				 */
				void setDefinesGlobalVariable(QString const &definesGlobalVariable_) { baseSetObject< nfo::definesGlobalVariable >( definesGlobalVariable_ ); }
				/*!
					\fn QString firstDefinesGlobalVariable()
					
					
					Returns the first property \ref nfo_definesGlobalVariable "nfo:definesGlobalVariable". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDefinesGlobalVariable() { return baseFirstObject< nfo::definesGlobalVariable >(); }
				/*!
					\fn void addDefinesGlobalVariable(QString const &definesGlobalVariable_)
					
					
					Adds the given \a definesGlobalVariable_ to the property \ref nfo_definesGlobalVariable "nfo:definesGlobalVariable" set.
					\sa LiveResource::addObject
				 */
				void addDefinesGlobalVariable(QString const &definesGlobalVariable_) { baseAddObject< nfo::definesGlobalVariable >( definesGlobalVariable_ ); }
				/*!
					\fn void removeDefinesGlobalVariable(QString const &definesGlobalVariable_)
					
					
					Removes the given \a definesGlobalVariable_ from the property \ref nfo_definesGlobalVariable "nfo:definesGlobalVariable" set.
					\sa LiveResource::removeObject
				 */
				void removeDefinesGlobalVariable(QString const &definesGlobalVariable_) { baseRemoveObject< nfo::definesGlobalVariable >(definesGlobalVariable_); }

				/* Property generated from nfo:commentCharacterCount
				 * \n The amount of character in comments i.e. characters ignored by the compiler/interpreter.
				 * \n rdfs:label=commentCharacterCount
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:SourceCode
				 * \n tracker:modified=1686
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveCommentCharacterCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_commentCharacterCount "nfo:commentCharacterCount" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveCommentCharacterCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::commentCharacterCount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getCommentCharacterCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_commentCharacterCount "nfo:commentCharacterCount" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getCommentCharacterCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::commentCharacterCount >(object_info, strategy, parent); }
				/*!
					\fn void setCommentCharacterCounts(LiveNodes const &commentCharacterCount_)
					
					
					Sets the property \ref nfo_commentCharacterCount "nfo:commentCharacterCount" set to the given \a commentCharacterCount_ set.
					\sa LiveResource::setObjects
				 */
				void setCommentCharacterCounts(LiveNodes const &commentCharacterCount_) { baseSetObjects(nfo::commentCharacterCount::iri(), commentCharacterCount_); }
				/*!
					\fn void removeCommentCharacterCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_commentCharacterCount "nfo:commentCharacterCount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeCommentCharacterCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::commentCharacterCount::iri(), object_info); }
				/*!
					\fn qint64 getCommentCharacterCount()
					
					
					Returns the property \ref nfo_commentCharacterCount "nfo:commentCharacterCount". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getCommentCharacterCount() { return baseGetObject< nfo::commentCharacterCount >(); }
				/*!
					\fn void setCommentCharacterCount(qint64 const &commentCharacterCount_)
					
					
					Sets the property \ref nfo_commentCharacterCount "nfo:commentCharacterCount" to the given \a commentCharacterCount.
					\sa LiveResource::setObject
				 */
				void setCommentCharacterCount(qint64 const &commentCharacterCount_) { baseSetObject< nfo::commentCharacterCount >( commentCharacterCount_ ); }
				/*!
					\fn qint64 firstCommentCharacterCount()
					
					
					Returns the first property \ref nfo_commentCharacterCount "nfo:commentCharacterCount". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstCommentCharacterCount() { return baseFirstObject< nfo::commentCharacterCount >(); }
				/*!
					\fn void addCommentCharacterCount(qint64 const &commentCharacterCount_)
					
					
					Adds the given \a commentCharacterCount_ to the property \ref nfo_commentCharacterCount "nfo:commentCharacterCount" set.
					\sa LiveResource::addObject
				 */
				void addCommentCharacterCount(qint64 const &commentCharacterCount_) { baseAddObject< nfo::commentCharacterCount >( commentCharacterCount_ ); }
				/*!
					\fn void removeCommentCharacterCount(qint64 const &commentCharacterCount_)
					
					
					Removes the given \a commentCharacterCount_ from the property \ref nfo_commentCharacterCount "nfo:commentCharacterCount" set.
					\sa LiveResource::removeObject
				 */
				void removeCommentCharacterCount(qint64 const &commentCharacterCount_) { baseRemoveObject< nfo::commentCharacterCount >(commentCharacterCount_); }

				/* Property generated from nfo:programmingLanguage
				 * \n rdfs:label=programmingLanguage
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:SourceCode
				 * \n tracker:modified=1140
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveProgrammingLanguages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_programmingLanguage "nfo:programmingLanguage" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveProgrammingLanguages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::programmingLanguage >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getProgrammingLanguages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_programmingLanguage "nfo:programmingLanguage" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getProgrammingLanguages(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::programmingLanguage >(object_info, strategy, parent); }
				/*!
					\fn void setProgrammingLanguages(LiveNodes const &programmingLanguage_)
					
					
					Sets the property \ref nfo_programmingLanguage "nfo:programmingLanguage" set to the given \a programmingLanguage_ set.
					\sa LiveResource::setObjects
				 */
				void setProgrammingLanguages(LiveNodes const &programmingLanguage_) { baseSetObjects(nfo::programmingLanguage::iri(), programmingLanguage_); }
				/*!
					\fn void removeProgrammingLanguages(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_programmingLanguage "nfo:programmingLanguage" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeProgrammingLanguages(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::programmingLanguage::iri(), object_info); }
				/*!
					\fn QString getProgrammingLanguage()
					
					
					Returns the property \ref nfo_programmingLanguage "nfo:programmingLanguage". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getProgrammingLanguage() { return baseGetObject< nfo::programmingLanguage >(); }
				/*!
					\fn void setProgrammingLanguage(QString const &programmingLanguage_)
					
					
					Sets the property \ref nfo_programmingLanguage "nfo:programmingLanguage" to the given \a programmingLanguage.
					\sa LiveResource::setObject
				 */
				void setProgrammingLanguage(QString const &programmingLanguage_) { baseSetObject< nfo::programmingLanguage >( programmingLanguage_ ); }
				/*!
					\fn QString firstProgrammingLanguage()
					
					
					Returns the first property \ref nfo_programmingLanguage "nfo:programmingLanguage". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstProgrammingLanguage() { return baseFirstObject< nfo::programmingLanguage >(); }
				/*!
					\fn void addProgrammingLanguage(QString const &programmingLanguage_)
					
					
					Adds the given \a programmingLanguage_ to the property \ref nfo_programmingLanguage "nfo:programmingLanguage" set.
					\sa LiveResource::addObject
				 */
				void addProgrammingLanguage(QString const &programmingLanguage_) { baseAddObject< nfo::programmingLanguage >( programmingLanguage_ ); }
				/*!
					\fn void removeProgrammingLanguage(QString const &programmingLanguage_)
					
					
					Removes the given \a programmingLanguage_ from the property \ref nfo_programmingLanguage "nfo:programmingLanguage" set.
					\sa LiveResource::removeObject
				 */
				void removeProgrammingLanguage(QString const &programmingLanguage_) { baseRemoveObject< nfo::programmingLanguage >(programmingLanguage_); }

				/* Property generated from nfo:definesFunction
				 * \n A name of a function/method defined in the given source code file.
				 * \n rdfs:label=definesFunction
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:SourceCode
				 * \n tracker:modified=1704
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDefinesFunctions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_definesFunction "nfo:definesFunction" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDefinesFunctions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::definesFunction >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDefinesFunctions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_definesFunction "nfo:definesFunction" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDefinesFunctions(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::definesFunction >(object_info, strategy, parent); }
				/*!
					\fn void setDefinesFunctions(LiveNodes const &definesFunction_)
					
					
					Sets the property \ref nfo_definesFunction "nfo:definesFunction" set to the given \a definesFunction_ set.
					\sa LiveResource::setObjects
				 */
				void setDefinesFunctions(LiveNodes const &definesFunction_) { baseSetObjects(nfo::definesFunction::iri(), definesFunction_); }
				/*!
					\fn void removeDefinesFunctions(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_definesFunction "nfo:definesFunction" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDefinesFunctions(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::definesFunction::iri(), object_info); }
				/*!
					\fn QString getDefinesFunction()
					
					
					Returns the property \ref nfo_definesFunction "nfo:definesFunction". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDefinesFunction() { return baseGetObject< nfo::definesFunction >(); }
				/*!
					\fn void setDefinesFunction(QString const &definesFunction_)
					
					
					Sets the property \ref nfo_definesFunction "nfo:definesFunction" to the given \a definesFunction.
					\sa LiveResource::setObject
				 */
				void setDefinesFunction(QString const &definesFunction_) { baseSetObject< nfo::definesFunction >( definesFunction_ ); }
				/*!
					\fn QString firstDefinesFunction()
					
					
					Returns the first property \ref nfo_definesFunction "nfo:definesFunction". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDefinesFunction() { return baseFirstObject< nfo::definesFunction >(); }
				/*!
					\fn void addDefinesFunction(QString const &definesFunction_)
					
					
					Adds the given \a definesFunction_ to the property \ref nfo_definesFunction "nfo:definesFunction" set.
					\sa LiveResource::addObject
				 */
				void addDefinesFunction(QString const &definesFunction_) { baseAddObject< nfo::definesFunction >( definesFunction_ ); }
				/*!
					\fn void removeDefinesFunction(QString const &definesFunction_)
					
					
					Removes the given \a definesFunction_ from the property \ref nfo_definesFunction "nfo:definesFunction" set.
					\sa LiveResource::removeObject
				 */
				void removeDefinesFunction(QString const &definesFunction_) { baseRemoveObject< nfo::definesFunction >(definesFunction_); }

				/* Property generated from nfo:definesClass
				 * \n Name of a class defined in the source code file.
				 * \n rdfs:label=definesClass
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:SourceCode
				 * \n tracker:modified=1141
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDefinesClasss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_definesClass "nfo:definesClass" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDefinesClasss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::definesClass >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDefinesClasss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_definesClass "nfo:definesClass" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDefinesClasss(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::definesClass >(object_info, strategy, parent); }
				/*!
					\fn void setDefinesClasss(LiveNodes const &definesClass_)
					
					
					Sets the property \ref nfo_definesClass "nfo:definesClass" set to the given \a definesClass_ set.
					\sa LiveResource::setObjects
				 */
				void setDefinesClasss(LiveNodes const &definesClass_) { baseSetObjects(nfo::definesClass::iri(), definesClass_); }
				/*!
					\fn void removeDefinesClasss(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_definesClass "nfo:definesClass" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDefinesClasss(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::definesClass::iri(), object_info); }
				/*!
					\fn QString getDefinesClass()
					
					
					Returns the property \ref nfo_definesClass "nfo:definesClass". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDefinesClass() { return baseGetObject< nfo::definesClass >(); }
				/*!
					\fn void setDefinesClass(QString const &definesClass_)
					
					
					Sets the property \ref nfo_definesClass "nfo:definesClass" to the given \a definesClass.
					\sa LiveResource::setObject
				 */
				void setDefinesClass(QString const &definesClass_) { baseSetObject< nfo::definesClass >( definesClass_ ); }
				/*!
					\fn QString firstDefinesClass()
					
					
					Returns the first property \ref nfo_definesClass "nfo:definesClass". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDefinesClass() { return baseFirstObject< nfo::definesClass >(); }
				/*!
					\fn void addDefinesClass(QString const &definesClass_)
					
					
					Adds the given \a definesClass_ to the property \ref nfo_definesClass "nfo:definesClass" set.
					\sa LiveResource::addObject
				 */
				void addDefinesClass(QString const &definesClass_) { baseAddObject< nfo::definesClass >( definesClass_ ); }
				/*!
					\fn void removeDefinesClass(QString const &definesClass_)
					
					
					Removes the given \a definesClass_ from the property \ref nfo_definesClass "nfo:definesClass" set.
					\sa LiveResource::removeObject
				 */
				void removeDefinesClass(QString const &definesClass_) { baseRemoveObject< nfo::definesClass >(definesClass_); }
				 //@}
			};

			/*! Class generated from nfo:Spreadsheet
			 * \ingroup onto_nfo_classes
			 * A spreadsheet, created by a spreadsheet application. Examples might include Gnumeric, OpenOffice Calc or MS Excel.
			 * 
			 * rdfs:label = Spreadsheet
			 * 
			 * tracker:modified = 1707
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Spreadsheet
				: public virtual Document

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Spreadsheet"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Document, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Spreadsheet> Live;
				Spreadsheet() { this->attachInterfaceHelper< Spreadsheet >(); }
				~Spreadsheet() { this->detachInterfaceHelper< Spreadsheet >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:Trash
			 * \ingroup onto_nfo_classes
			 * Represents a container for deleted files, a feature common in modern operating systems.
			 * 
			 * rdfs:label = Trash
			 * 
			 * tracker:modified = 1450
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Trash
				: public virtual DataContainer

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Trash"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<DataContainer, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Trash> Live;
				Trash() { this->attachInterfaceHelper< Trash >(); }
				~Trash() { this->detachInterfaceHelper< Trash >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:VectorImage
			 * \ingroup onto_nfo_classes
			 * 
			 * rdfs:label = VectorImage
			 * 
			 * tracker:modified = 1077
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class VectorImage
				: public virtual Image

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#VectorImage"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Image, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<VectorImage> Live;
				VectorImage() { this->attachInterfaceHelper< VectorImage >(); }
				~VectorImage() { this->detachInterfaceHelper< VectorImage >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};

			/*! Class generated from nfo:Video
			 * \ingroup onto_nfo_classes
			 * A video file.
			 * 
			 * rdfs:label = Video
			 * 
			 * tracker:modified = 1981
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Video
				: public virtual Visual

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Video"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<Visual, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Video> Live;
				Video() { this->attachInterfaceHelper< Video >(); }
				~Video() { this->detachInterfaceHelper< Video >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:frameCount
				 * \n The amount of frames in a video sequence.
				 * \n rdfs:label=frameCount
				 * \n rdfs:subPropertyOf=nfo:count
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:integer
				 * \n rdfs:domain=nfo:Video
				 * \n tracker:modified=1823
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFrameCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_frameCount "nfo:frameCount" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFrameCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::frameCount >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFrameCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_frameCount "nfo:frameCount" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFrameCounts(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::frameCount >(object_info, strategy, parent); }
				/*!
					\fn void setFrameCounts(LiveNodes const &frameCount_)
					
					
					Sets the property \ref nfo_frameCount "nfo:frameCount" set to the given \a frameCount_ set.
					\sa LiveResource::setObjects
				 */
				void setFrameCounts(LiveNodes const &frameCount_) { baseSetObjects(nfo::frameCount::iri(), frameCount_); }
				/*!
					\fn void removeFrameCounts(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_frameCount "nfo:frameCount" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFrameCounts(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::frameCount::iri(), object_info); }
				/*!
					\fn qint64 getFrameCount()
					
					
					Returns the property \ref nfo_frameCount "nfo:frameCount". If the property didn't exist, it is set to a default initialized value of type qint64 and returned.
					\sa LiveResource::getObject
				 */
				qint64 getFrameCount() { return baseGetObject< nfo::frameCount >(); }
				/*!
					\fn void setFrameCount(qint64 const &frameCount_)
					
					
					Sets the property \ref nfo_frameCount "nfo:frameCount" to the given \a frameCount.
					\sa LiveResource::setObject
				 */
				void setFrameCount(qint64 const &frameCount_) { baseSetObject< nfo::frameCount >( frameCount_ ); }
				/*!
					\fn qint64 firstFrameCount()
					
					
					Returns the first property \ref nfo_frameCount "nfo:frameCount". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				qint64 firstFrameCount() { return baseFirstObject< nfo::frameCount >(); }
				/*!
					\fn void addFrameCount(qint64 const &frameCount_)
					
					
					Adds the given \a frameCount_ to the property \ref nfo_frameCount "nfo:frameCount" set.
					\sa LiveResource::addObject
				 */
				void addFrameCount(qint64 const &frameCount_) { baseAddObject< nfo::frameCount >( frameCount_ ); }
				/*!
					\fn void removeFrameCount(qint64 const &frameCount_)
					
					
					Removes the given \a frameCount_ from the property \ref nfo_frameCount "nfo:frameCount" set.
					\sa LiveResource::removeObject
				 */
				void removeFrameCount(qint64 const &frameCount_) { baseRemoveObject< nfo::frameCount >(frameCount_); }

				/* Property generated from nfo:frameRate
				 * \n Amount of video frames per second.
				 * \n rdfs:label=frameRate
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nfo:Video
				 * \n tracker:modified=1071
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveFrameRates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_frameRate "nfo:frameRate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveFrameRates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::frameRate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getFrameRates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_frameRate "nfo:frameRate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getFrameRates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::frameRate >(object_info, strategy, parent); }
				/*!
					\fn void setFrameRates(LiveNodes const &frameRate_)
					
					
					Sets the property \ref nfo_frameRate "nfo:frameRate" set to the given \a frameRate_ set.
					\sa LiveResource::setObjects
				 */
				void setFrameRates(LiveNodes const &frameRate_) { baseSetObjects(nfo::frameRate::iri(), frameRate_); }
				/*!
					\fn void removeFrameRates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_frameRate "nfo:frameRate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeFrameRates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::frameRate::iri(), object_info); }
				/*!
					\fn double getFrameRate()
					
					
					Returns the property \ref nfo_frameRate "nfo:frameRate". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getFrameRate() { return baseGetObject< nfo::frameRate >(); }
				/*!
					\fn void setFrameRate(double const &frameRate_)
					
					
					Sets the property \ref nfo_frameRate "nfo:frameRate" to the given \a frameRate.
					\sa LiveResource::setObject
				 */
				void setFrameRate(double const &frameRate_) { baseSetObject< nfo::frameRate >( frameRate_ ); }
				/*!
					\fn double firstFrameRate()
					
					
					Returns the first property \ref nfo_frameRate "nfo:frameRate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstFrameRate() { return baseFirstObject< nfo::frameRate >(); }
				/*!
					\fn void addFrameRate(double const &frameRate_)
					
					
					Adds the given \a frameRate_ to the property \ref nfo_frameRate "nfo:frameRate" set.
					\sa LiveResource::addObject
				 */
				void addFrameRate(double const &frameRate_) { baseAddObject< nfo::frameRate >( frameRate_ ); }
				/*!
					\fn void removeFrameRate(double const &frameRate_)
					
					
					Removes the given \a frameRate_ from the property \ref nfo_frameRate "nfo:frameRate" set.
					\sa LiveResource::removeObject
				 */
				void removeFrameRate(double const &frameRate_) { baseRemoveObject< nfo::frameRate >(frameRate_); }

				/* Property generated from nfo:averageVideoBitrate
				 * \n The average overall bitrate of a media container. (i.e. the size of the piece of media in bits, divided by it's duration expressed in seconds).
				 * \n rdfs:label=averageBitrate
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:double
				 * \n rdfs:domain=nfo:Video
				 * \n tracker:modified=1664
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveAverageVideoBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_averageVideoBitrate "nfo:averageVideoBitrate" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveAverageVideoBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::averageVideoBitrate >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getAverageVideoBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_averageVideoBitrate "nfo:averageVideoBitrate" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getAverageVideoBitrates(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::averageVideoBitrate >(object_info, strategy, parent); }
				/*!
					\fn void setAverageVideoBitrates(LiveNodes const &averageVideoBitrate_)
					
					
					Sets the property \ref nfo_averageVideoBitrate "nfo:averageVideoBitrate" set to the given \a averageVideoBitrate_ set.
					\sa LiveResource::setObjects
				 */
				void setAverageVideoBitrates(LiveNodes const &averageVideoBitrate_) { baseSetObjects(nfo::averageVideoBitrate::iri(), averageVideoBitrate_); }
				/*!
					\fn void removeAverageVideoBitrates(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_averageVideoBitrate "nfo:averageVideoBitrate" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeAverageVideoBitrates(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::averageVideoBitrate::iri(), object_info); }
				/*!
					\fn double getAverageVideoBitrate()
					
					
					Returns the property \ref nfo_averageVideoBitrate "nfo:averageVideoBitrate". If the property didn't exist, it is set to a default initialized value of type double and returned.
					\sa LiveResource::getObject
				 */
				double getAverageVideoBitrate() { return baseGetObject< nfo::averageVideoBitrate >(); }
				/*!
					\fn void setAverageVideoBitrate(double const &averageVideoBitrate_)
					
					
					Sets the property \ref nfo_averageVideoBitrate "nfo:averageVideoBitrate" to the given \a averageVideoBitrate.
					\sa LiveResource::setObject
				 */
				void setAverageVideoBitrate(double const &averageVideoBitrate_) { baseSetObject< nfo::averageVideoBitrate >( averageVideoBitrate_ ); }
				/*!
					\fn double firstAverageVideoBitrate()
					
					
					Returns the first property \ref nfo_averageVideoBitrate "nfo:averageVideoBitrate". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				double firstAverageVideoBitrate() { return baseFirstObject< nfo::averageVideoBitrate >(); }
				/*!
					\fn void addAverageVideoBitrate(double const &averageVideoBitrate_)
					
					
					Adds the given \a averageVideoBitrate_ to the property \ref nfo_averageVideoBitrate "nfo:averageVideoBitrate" set.
					\sa LiveResource::addObject
				 */
				void addAverageVideoBitrate(double const &averageVideoBitrate_) { baseAddObject< nfo::averageVideoBitrate >( averageVideoBitrate_ ); }
				/*!
					\fn void removeAverageVideoBitrate(double const &averageVideoBitrate_)
					
					
					Removes the given \a averageVideoBitrate_ from the property \ref nfo_averageVideoBitrate "nfo:averageVideoBitrate" set.
					\sa LiveResource::removeObject
				 */
				void removeAverageVideoBitrate(double const &averageVideoBitrate_) { baseRemoveObject< nfo::averageVideoBitrate >(averageVideoBitrate_); }
				 //@}
			};

			/*! Class generated from nfo:WebHistory
			 * \ingroup onto_nfo_classes
			 * A web history entry
			 * 
			 * rdfs:label = Web History
			 * 
			 * tracker:notify = true
			 * 
			 * tracker:modified = 1246
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class WebHistory
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#WebHistory"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = ::SopranoLive::BackEnds::Tracker::Notify };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<WebHistory> Live;
				WebHistory() { this->attachInterfaceHelper< WebHistory >(); }
				~WebHistory() { this->detachInterfaceHelper< WebHistory >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{

				/* Property generated from nfo:domain
				 * \n rdfs:label=Domain for a web history entry
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:WebHistory
				 * \n tracker:weight=3
				 * \n tracker:modified=1591
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveDomains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_domain "nfo:domain" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveDomains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::domain >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getDomains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_domain "nfo:domain" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getDomains(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::domain >(object_info, strategy, parent); }
				/*!
					\fn void setDomains(LiveNodes const &domain_)
					
					
					Sets the property \ref nfo_domain "nfo:domain" set to the given \a domain_ set.
					\sa LiveResource::setObjects
				 */
				void setDomains(LiveNodes const &domain_) { baseSetObjects(nfo::domain::iri(), domain_); }
				/*!
					\fn void removeDomains(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_domain "nfo:domain" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeDomains(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::domain::iri(), object_info); }
				/*!
					\fn QString getDomain()
					
					
					Returns the property \ref nfo_domain "nfo:domain". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getDomain() { return baseGetObject< nfo::domain >(); }
				/*!
					\fn void setDomain(QString const &domain_)
					
					
					Sets the property \ref nfo_domain "nfo:domain" to the given \a domain.
					\sa LiveResource::setObject
				 */
				void setDomain(QString const &domain_) { baseSetObject< nfo::domain >( domain_ ); }
				/*!
					\fn QString firstDomain()
					
					
					Returns the first property \ref nfo_domain "nfo:domain". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstDomain() { return baseFirstObject< nfo::domain >(); }
				/*!
					\fn void addDomain(QString const &domain_)
					
					
					Adds the given \a domain_ to the property \ref nfo_domain "nfo:domain" set.
					\sa LiveResource::addObject
				 */
				void addDomain(QString const &domain_) { baseAddObject< nfo::domain >( domain_ ); }
				/*!
					\fn void removeDomain(QString const &domain_)
					
					
					Removes the given \a domain_ from the property \ref nfo_domain "nfo:domain" set.
					\sa LiveResource::removeObject
				 */
				void removeDomain(QString const &domain_) { baseRemoveObject< nfo::domain >(domain_); }

				/* Property generated from maemo:webhistoryThumbnail
				 * \n rdfs:range=xsd:string
				 * \n tracker:modified=1169
				 * \n rdfs:domain=nfo:WebHistory
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveMaemoWebhistoryThumbnails(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref maemo_webhistoryThumbnail "maemo:webhistoryThumbnail" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveMaemoWebhistoryThumbnails(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< maemo::webhistoryThumbnail >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getMaemoWebhistoryThumbnails(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref maemo_webhistoryThumbnail "maemo:webhistoryThumbnail" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getMaemoWebhistoryThumbnails(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< maemo::webhistoryThumbnail >(object_info, strategy, parent); }
				/*!
					\fn void setMaemoWebhistoryThumbnails(LiveNodes const &maemoWebhistoryThumbnail_)
					
					
					Sets the property \ref maemo_webhistoryThumbnail "maemo:webhistoryThumbnail" set to the given \a maemoWebhistoryThumbnail_ set.
					\sa LiveResource::setObjects
				 */
				void setMaemoWebhistoryThumbnails(LiveNodes const &maemoWebhistoryThumbnail_) { baseSetObjects(maemo::webhistoryThumbnail::iri(), maemoWebhistoryThumbnail_); }
				/*!
					\fn void removeMaemoWebhistoryThumbnails(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref maemo_webhistoryThumbnail "maemo:webhistoryThumbnail" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeMaemoWebhistoryThumbnails(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(maemo::webhistoryThumbnail::iri(), object_info); }
				/*!
					\fn QString firstMaemoWebhistoryThumbnail()
					
					
					Returns the first property \ref maemo_webhistoryThumbnail "maemo:webhistoryThumbnail". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstMaemoWebhistoryThumbnail() { return baseFirstObject< maemo::webhistoryThumbnail >(); }
				/*!
					\fn void addMaemoWebhistoryThumbnail(QString const &maemoWebhistoryThumbnail_)
					
					
					Adds the given \a maemoWebhistoryThumbnail_ to the property \ref maemo_webhistoryThumbnail "maemo:webhistoryThumbnail" set.
					\sa LiveResource::addObject
				 */
				void addMaemoWebhistoryThumbnail(QString const &maemoWebhistoryThumbnail_) { baseAddObject< maemo::webhistoryThumbnail >( maemoWebhistoryThumbnail_ ); }
				/*!
					\fn void removeMaemoWebhistoryThumbnail(QString const &maemoWebhistoryThumbnail_)
					
					
					Removes the given \a maemoWebhistoryThumbnail_ from the property \ref maemo_webhistoryThumbnail "maemo:webhistoryThumbnail" set.
					\sa LiveResource::removeObject
				 */
				void removeMaemoWebhistoryThumbnail(QString const &maemoWebhistoryThumbnail_) { baseRemoveObject< maemo::webhistoryThumbnail >(maemoWebhistoryThumbnail_); }

				/* Property generated from nfo:uri
				 * \n rdfs:label=Uri for a web history entry
				 * \n nrl:maxCardinality=1
				 * \n rdfs:range=xsd:string
				 * \n rdfs:domain=nfo:WebHistory
				 * \n tracker:weight=5
				 * \n tracker:modified=1241
				 * \n tracker:added=2010-11-30T13:24:06Z
				 */
				/*!
					\fn LiveNodes liveUris(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns a live model of property \ref nfo_uri "nfo:uri" set.
					\sa LiveResource::liveObjects
				 */
				LiveNodes liveUris(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseLiveObjects< nfo::uri >(object_info, strategy, parent); }
				/*!
					\fn LiveNodes getUris(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>())
					
					
					Returns all current values of property \ref nfo_uri "nfo:uri" set.
					\sa LiveResource::getObjects
				 */
				LiveNodes getUris(RDFVariable const &object_info = RDFVariable(), RDFStrategyFlags strategy = RDFStrategy::DefaultStrategy, QSharedPointer<QObject> const &parent = QSharedPointer<QObject>()) { return baseGetObjects< nfo::uri >(object_info, strategy, parent); }
				/*!
					\fn void setUris(LiveNodes const &uri_)
					
					
					Sets the property \ref nfo_uri "nfo:uri" set to the given \a uri_ set.
					\sa LiveResource::setObjects
				 */
				void setUris(LiveNodes const &uri_) { baseSetObjects(nfo::uri::iri(), uri_); }
				/*!
					\fn void removeUris(RDFVariable const &object_info = RDFVariable())
					
					
					Removes the properties from property \ref nfo_uri "nfo:uri" set which match the given \a object_info .
					\sa LiveResource::removeObjects
				 */
				void removeUris(RDFVariable const &object_info = RDFVariable()) { baseRemoveObjects(nfo::uri::iri(), object_info); }
				/*!
					\fn QString getUri()
					
					
					Returns the property \ref nfo_uri "nfo:uri". If the property didn't exist, it is set to a default initialized value of type QString and returned.
					\sa LiveResource::getObject
				 */
				QString getUri() { return baseGetObject< nfo::uri >(); }
				/*!
					\fn void setUri(QString const &uri_)
					
					
					Sets the property \ref nfo_uri "nfo:uri" to the given \a uri.
					\sa LiveResource::setObject
				 */
				void setUri(QString const &uri_) { baseSetObject< nfo::uri >( uri_ ); }
				/*!
					\fn QString firstUri()
					
					
					Returns the first property \ref nfo_uri "nfo:uri". If the property didn't exist, a default value is returned.
					\sa LiveResource::firstObject
				 */
				QString firstUri() { return baseFirstObject< nfo::uri >(); }
				/*!
					\fn void addUri(QString const &uri_)
					
					
					Adds the given \a uri_ to the property \ref nfo_uri "nfo:uri" set.
					\sa LiveResource::addObject
				 */
				void addUri(QString const &uri_) { baseAddObject< nfo::uri >( uri_ ); }
				/*!
					\fn void removeUri(QString const &uri_)
					
					
					Removes the given \a uri_ from the property \ref nfo_uri "nfo:uri" set.
					\sa LiveResource::removeObject
				 */
				void removeUri(QString const &uri_) { baseRemoveObject< nfo::uri >(uri_); }
				 //@}
			};

			/*! Class generated from nfo:Website
			 * \ingroup onto_nfo_classes
			 * A website, usually a container for remote resources, that may be interpreted as HTMLDocuments, images or other types of content.
			 * 
			 * rdfs:label = Website
			 * 
			 * tracker:modified = 1198
			 * 
			 * tracker:added = 2010-11-30T13:24:06Z
			 */
			class Website
				: public virtual nie::InformationElement

			{
//			Q_OBJECT

			public:
				/*! \return encoded iri of this class */
				static const char *encodedIri() { return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Website"; }
				/*! \return iri of this class */
				static QUrl const &iri() { static QUrl *ret = 0; if(!ret) ret = new QUrl(QUrl::fromEncoded(encodedIri(), QUrl::StrictMode)); return *ret; }
				typedef QPair<nie::InformationElement, ::SopranoLive::Detail::EmptyBase > BaseClasses;

				//! The defining context of this class
				typedef ::SopranoLive::Contexts::QtTracker ResourceContext;

				//! When used as a resource, this class has a type rdfs:Class
				typedef rdfs::Class ResourceType;

				//! the ontology of this class
				typedef Ontology_nfo Ontology;

				/// The base strategy of this class
				enum { BaseStrategy = 0 };

				/// The base classes of this class

				/*!
				 * A smart, by-value convenience smart \ref SopranoLive::Live pointer to this class
				 */
				typedef ::SopranoLive::Live<Website> Live;
				Website() { this->attachInterfaceHelper< Website >(); }
				~Website() { this->detachInterfaceHelper< Website >(); }

				/*!
				 * \name Property accessor and manipulator methods
				 */
				// @{
				 //@}
			};


		}
	}
}
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Application::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Archive::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::ArchiveItem::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Attachment::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Audio::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Bookmark::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::BookmarkFolder::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::CompressionType::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Cursor::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::DataContainer::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::DeletedResource::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Document::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::EmbeddedFileDataObject::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Equipment::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Executable::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::FileDataObject::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::FileHash::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Filesystem::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::FilesystemImage::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Folder::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Font::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::HardDiskPartition::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::HelpDocument::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::HtmlDocument::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Icon::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Image::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Media::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::MediaFileListEntry::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::MediaList::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::MediaStream::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::MindMap::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::OperatingSystem::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Orientation::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::PaginatedTextDocument::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::PlainTextDocument::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Presentation::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::RasterImage::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::RemoteDataObject::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::RemotePortAddress::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Software::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::SoftwareApplication::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::SoftwareCategory::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::SoftwareItem::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::SoftwareService::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::SourceCode::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Spreadsheet::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::TextDocument::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Trash::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::VectorImage::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Video::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Visual::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::WebHistory::Live)
Q_DECLARE_METATYPE(SopranoLive::Ontologies::nfo::Website::Live)
#endif /* SOPRANOLIVE_ONTOLOGIES_NFO_H_CLASS_DEFINITIONS */
#endif /* ( ( !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_ONLY) && !defined(SOPRANOLIVE_ONTOLOGIES_FORWARD_DECLARATIONS_AND_PROPERTY_DEFINITIONS_ONLY)) || defined(Q_MOC_RUN)) */


#if !defined(SOPRANOLIVE_ONTOLOGIES_TOP_LEVEL_INCLUDING) && !defined(SOPRANOLIVE_ONTOLOGIES_NFO_H_POST_INCLUDES)
#define SOPRANOLIVE_ONTOLOGIES_NFO_H_POST_INCLUDES
#include <QtTracker/ontologies/rdfs.h>
#include <QtTracker/ontologies/mtp.h>
#include <QtTracker/ontologies/poi.h>
#include <QtTracker/ontologies/nie.h>
#include <QtTracker/ontologies/maemo.h>
#include <QtTracker/ontologies/rdf.h>
#include <QtTracker/ontologies/xsd.h>
#include <QtTracker/ontologies/nco.h>
#include <QtTracker/ontologies/nmm.h>
#endif
