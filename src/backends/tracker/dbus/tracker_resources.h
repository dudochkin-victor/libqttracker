/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c TrackerNodesProxy -p tracker_resources -i dbus_types.h tracker-resources.xml org.freedesktop.Tracker1.Resources
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef TRACKER_RESOURCES_H_1276096016
#define TRACKER_RESOURCES_H_1276096016

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "dbus_types.h"

#include <QtTracker/Tracker>
#include "../../../utils/visualizer.h"
/*
 * Proxy class for interface org.freedesktop.Tracker1.Resources
 */
class TrackerNodesProxy: public QDBusAbstractInterface
{
    Q_OBJECT

    /* VZR_CLASS(TrackerNodesProxy, (QDBusAbstractInterface));*/

public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.Tracker1.Resources"; }

public:
    QString service_; // VZR_MEMBER

    QString path_; // VZR_MEMBER
    QDBusConnection connection_; // VZR_MEMBER

    TrackerNodesProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~TrackerNodesProxy();

public Q_SLOTS: // METHODS

    QDBusPendingCall asyncCallWithArgumentList( const QString & method, const QList<QVariant> & args )
    {
        QDBusMessage msg = QDBusMessage::createMethodCall(service_, path_, staticInterfaceName(), method);
        msg.setArguments(args);
        return connection_.asyncCall(msg, SopranoLive::BackEnds::Tracker::trackerDefaultTimeout());
    }

    inline QDBusPendingReply<> BatchCommit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("BatchCommit"), argumentList);
    }

    inline QDBusPendingReply<> BatchSparqlUpdate(const QString &query)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(query);
        return asyncCallWithArgumentList(QLatin1String("BatchSparqlUpdate"), argumentList);
    }

    inline QDBusPendingReply<> Load(const QString &uri)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uri);
        return asyncCallWithArgumentList(QLatin1String("Load"), argumentList);
    }

    inline QDBusPendingReply<QVector<QStringList> > SparqlQuery(const QString &query)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(query);
        return asyncCallWithArgumentList(QLatin1String("SparqlQuery"), argumentList);
    }

    inline QDBusPendingReply<> SparqlUpdate(const QString &query)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(query);
        return asyncCallWithArgumentList(QLatin1String("SparqlUpdate"), argumentList);
    }

    inline QDBusPendingReply<QVector<QVector<QMap<QString, QString> > > > SparqlUpdateBlank(const QString &query)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(query);
        return asyncCallWithArgumentList(QLatin1String("SparqlUpdateBlank"), argumentList);
    }

    inline QDBusPendingReply<> Sync()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Sync"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Writeback(const QMap<QString, QStringList> &subjects);
};

namespace org {
  namespace freedesktop {
    namespace Tracker1 {
      typedef ::TrackerNodesProxy Resources;
    }
  }
}
#endif
