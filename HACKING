Workflow principles:

1. Git basics - getting source

1.1. Obtain read-only access to source
	# in directory where libqttracker project folder is to be placed
	git clone git://gitorious.org/maemo-af/libqttracker.git/
	cd libqttracker
	
1.2. Checkout branch "master", the next feature version going to release
	git checkout master
	
1.2.1. test/staging releases are made from master, see section 3. 

1.3. Checkout branch "stable": the latest version that has been released
	git checkout -t origin/stable
	


2. Git development and contributing


2.1. As developer, obtain commit access to source
	git clone git@gitorious.org:maemo-af/libqttracker.git
	cd libqttracker
	
2.1.1. You need to have a user with properly set up ssh keys in gitorious.org

2.1.2. You need to ask for write access from the maintainer
	
2.2. Choose the upstream branch to develop against. 
	# this is almost always "master", but sometimes a specific version branch
	git checkout master

2.3. Do work on feature branches
	# create a local branch to do our work on
	git branch my_feature
	# switch current, active working directory to this new branch
	git checkout my_feature
	# hack on and implement the feature
	
2.3.1. Commit your work often
	git commit

2.3.1.1 Mark commits with "SQUASH" if they are a detail commit that should 
		not appear in the final history as separate entries, but which
		are part of a bigger change.
	# add the "SQUASH" as the first word in the commit message
	git commit -m "SQUASH implemented private function Foobar"

2.4. Rebase from upstream regularily to avoid divergence
	# whenever you see "origin", you know you are dealing with the upstream
	git fetch origin master
	# rebase (a kind of 'merge') changes from the upstream 
	git rebase origin/master
	
2.4.1. In case of merge conflict
	# fix conflict, mark files as merged and commit
	vim src/myfile.cpp
	git add src/myfile.cpp
	git commit

2.5. When feature work is done
	# for feature branch "my_feature"

2.5.1. Create a review branch
	# review branch will be sent to a reviewer and merged to upstream
	# if it accepted, otherwise it is deleted. It contains debian/changelog
	# entry and any other information that will have to be created again
	# in case of a rejection.
	git branch review_1pre6.2.0_i01_my_feature
	git checkout review_1pre6.2.0_i01_my_feature

2.5.1.1. Use format review_<major>.<minor>.<micro>_<id>_<parentid>_<feature>
	# this branch is still for the moment local
	# The <id> and <parentid> are optional. They are used for designating
	# sequential review branches, in that work on the branches can be 
	# distributed across several reviews and accepted partially.

2.5.1.2. The review_ branch is thus associated with a single upstream version
	# feature "my_feature" is associated with 1pre6.2.0
	
2.5.1.3. The version number uniquely identifies the upstream branch.
	# Almost always master
	
2.5.1.4. Never rebase the review_ branch, as it is shared. Use merge only.

2.5.2. Merge from the upstream
	git pull origin master
	# solve possible merge conflicts, see 2.4.1
	
2.5.3. Add changelog and other info which might change on review failure
	# see https://projects.maemo.org/trac/integration/wiki/ChangeLog
	# for how edit debian/changelog with the changes in my_feature
	vim debian/changelog
	git add debian/changelog
	git commit -m "Updated changelog for 1pre6.2.0 my_feature"
	
2.5.4. Push the review_ branch to origin
	# this is going to make the my_feature publicly available in the origin
	# for the first time! 
	git push origin review_1pre6.2.0_i01_my_feature
			
2.5.5. Locate a reviewer for your review_ branch and have him review it


2.6. An able, impartial reviewer performs reviews
	# fetch all remote branches and review them
	git fetch
	git branch -r

2.6.1. As reviewer, perform the review on one of them
	# choose one and make a remote tracking branch for it
	git checkout -t origin/review_1pre6.2.0_my_feature

2.6.1.1. Merge from the respective upstream branch
	git pull origin master
	
2.6.1.2. Possible conflicts result from someone having accepted a another,  
		conflicting review after the feature developer previously did 2.4.
					
2.6.1.2.1. Resolve trivial conflicts yourself

2.6.1.2.2. If there is any doubt, send the review_ branch back 
		to the feature developer, see 2.6.3.1.

2.6.1.4 All commits since the last merge from the my_feature branch to the
		upstream are reviewed (or since initial branch if no merges exist)
	# there are many ways to do this
	
2.6.1.4.1. Review using git diff
	# get all diffs from the moment my_feature was branched off master
	git diff master...
	# or if we were not checked out in the review_ branch, explicitly
	git diff master...review_1pre6.2.0_my_feature

2.6.2. If you accept the review_ branch:

2.6.2.1. Merge the review_ into upstream
	# Almost there. Update our local master from origin so that we can merge
	git checkout master
	git pull origin master
	# fast forward merge. 
	git merge --ff-only origin/review_1pre6.2.0_my_feature
	# --ff-only can be omitted if it is not supported and causes errors
	git merge origin/review_1pre6.2.0_my_feature
	
2.6.2.2. Push upstream to origin
	# The ultimate act, which cannot be undone. 
	# It can only be corrected by further pushes.
	git push origin master
	
2.6.2.3. Delete the local and origin review_ branches
	# remove the review_ in upstream
	git push origin :review_1pre6.2.0_my_feature # delete remote branch
	# Also do step 2.6.5. here - remove local references
	
2.6.2.4. Inform original developer about the success
	# Ding! You're done.
			
2.6.3. If you find minor faults in the review_ branch:

2.6.3.1. Send the review_ back with improvement feedback
	# inform original developer with feedback

2.6.3.2. Modifications are discussed and reworked on the review branch 
		repeat 2.6.1

2.6.4. If you reject the review_ branch completely

2.6.4.1. Delete the branch from origin
	# remove the review_ in upstream
	git push origin :review_1pre6.2.0_my_feature # delete remote branch
	# Also do step 2.6.5. here - remove local references
	
2.6.4.2. Inform original developer about the reject
	# Ding! You're done.
	
2.6.5. Once a review_ branch has been rejected or accepted, everyone having
		a ref to it deletes all traces to it
	# remove it locally
	git branch -d review_1pre6.2.0_my_feature
	# remove remote tracking branches that no longer exist remotely
	git prune 

2.6.6. As original my_feature developer, update your local feature branch
	git checkout my_feature
	
2.6.6.1. If my_feature was a standalone feature branch, delete it
	git branch -d my_feature
	
2.6.6.2. If my_feature is long-standing dev branch, merge from upstream
	git pull origin master


2.6. On release, all pending review_ branches are destroyed, see 3.2.2.2.
			
2.6.1. Developer of the feature make a new review_ branch attempt for 
		the next, now current version, as per 2.5.


3. Releases
	# release of 1pre6.2.0


3.1. Release types

3.1.1. Major API/ABI breaking release.
		Increase major version

3.1.2. Minor feature release, no API/ABI break.
		Increases minor version

3.1.3. Micro bugfix release, no API/ABI break.
		Increases micro version


3.2. Task before release

	
3.2.1. Common, typical tasks

3.2.1.1. For feature releases, update tracker ontologies
	make import_ontologies autogenerate all
	
3.2.1.1.1. Construct a feature release, no review necessary


3.2.2. For feature and major releases, all pending review_ 
		features are processed for the release
	git branch -r | grep review_1pre6.2.0

3.2.2.1. The review_ branches are reviewed, as per 2.6.

3.2.2.2. If review is not possible for some reason, the review_ branch
		is rejected, as per 2.6.4


3.3. Verify release integrity

3.3.1. Prepare environment for package build test

3.3.1.1. Uninstall all libqttracker source and package installs
	# todo

3.3.1.2. Have proper dependency packages installed, see INSTALL

3.3.2. Build package from fresh release head
	# in temp directory
	# making a feature release
	git clone git://gitorious.org/maemo-af/libqttracker.git/
	cd libqttracker
	git checkout master
	dpkg-buildpackage -rfakeroot -d

3.3.3. Install packages
	dpkg -i ../*.deb
	
3.3.4. Check for regressions
	make regression_tests


3.4. Push and tag
	git tag 1~6.2.0
	git push --tags origin master

3.4.1. The first commit after staging release is an increase of the minor 
		version in shared.pri
	vim shared.pri
	git add shared.pri
	git commit -m "Increased version to 1~6.3.0 after a staging release"
	git push origin master


3.5. Stable fast forwards into master when a staging release becomes 
		a full release
	# revise the commands, this does a merge, not a fast forward
	git checkout stable
	git pull origin master
	git push origin stable


4. Bug reporting

4.1. By adding test cases to branch "failing_tests"
	# if there is no remote tracking branch for failing_tests
	git checkout -t origin/failing_tests
	# otherwise
	git checkout failing_tests

4.1.1. Create a new failing test case
	# the test case can be part of an existing test suite
	vim tests/coresuite/coresuite.cpp
	git add tests/coresuite/coresuite.cpp
	# or a new test suite
	git add tests/newsuite

4.1.2. A single test case per commit, no more, no less
	# message must contain either an url to the bug report
	git commit -m "Test case for https://projects.maemo.org/bugzilla/show_bug.cgi?id=12456789"
	# or a description for trivial bugs
	git commit -m 
		"Test case for function foobar
		
		Function returns false on success but doc says it should return true"

4.1.3. Publish the bug test case back to origin
	git pull origin failing_tests

	
	
	

TODO: merge below section to above doc.

How to make a new tracker ontology release

All commands executed at qttracker source root.

1. As part of an existing qttracker release

git checkout master
git pull origin master

1.2. Import and generate ontologies

make import_ontologies autogenerate

1.2.1. Run tests

qmake && make && make regression_tests

1.3. Add changelog entry

dch
 * Updates tracker ontologies to 0.7.8

1.4. Commit changes

git add debian/changelog data/rdf-xml/QtTracker/ontologies/* src/include/QtTracker/ontologies/*
git commit -m "Updates tracker ontologies to 0.7.8"

1.5. Carry on with release procedure



2. As a standalone release

2.1. Checkout latest release tag

git checkout v1pre6.5.4

2.2. Import and generate ontologies, see 1.2.

2.3. Add changelog version entry with tracker version appended

dch -v 1~6.5.4tracker0.7.8
 * Updates tracker ontologies to 0.7.8

2.4. Commit changes, see 1.4.

2.5. Tag and push

git tag 1pre6.5.4tracker0.7.8
git push --tags

2.6. Update master with the ontologies

git checkout master
git pull origin master
git merge 1pre6.5.4tracker0.7.8

2.6.1. Run tests, see 1.2.1.

2.6.2. Push master

git push origin master
	